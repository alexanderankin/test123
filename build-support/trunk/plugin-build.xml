<project name="jEditPlugin" default="build"
         xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:jedit="antlib:org.jedit.ant"
         >

    <!-- {{{ Top-Level build file for jEdit plugins. ====== -->
    <!--
        Version: $Id$
        Requires apache Ant 1.8.2, including optional tasks, and xerces.

        To use this file, use the "import" task from ant
        on your plugin's build file, like this:

        <import file="../build-support/plugin-build.xml" />

        The use of the property is to ease the work of the plugin
        packagers.

        General tips:
        - To override properties, either use the several
          options for build.properties files, or declare
          them in you plugin's build file *before* the
          import statement.
        - To override paths and selectors, declare them in
          your build file *after* the import statement.

        Some tasks require the ant-contrib library available from
        http://ant-contrib.sourceforge.net. If you have the
        library, specify a property named "ant-contrib.jar" with
        the location of the library. The tasks that need ant-contrib
        are the tasks related to plugin dependencies.

        For JUnit support, make sure you have the ant-junit.jar
        library in Ant's lib directory. Specify the location of
        the junit jar file using the property "junit.jar".
    -->
    <!-- ===============================================}}} -->

    <import file="build-helper.xml" />

    <!-- {{{ Property definitions ========================= -->
    <!-- First loads options from the user's optional
         build.properties files in the following order:
         current dir, parent dir, $HOME/.build.properties
         and finally $HOME/build.properties . The defines
         several default properties used by the different
         targets.                                           -->
    <!-- ================================================== -->

    <property file="${basedir}/build.properties" />
    <property file="${basedir}/../build.properties" />
    <property file="${user.home}/.build.properties" />
    <property file="${user.home}/build.properties" />
    
    <!-- {{{ load properties from *.props, to find out which version the plugin 
             is at. Defines 2 properties: 
              - plugin.class: to resolve other plugin class dependent properties
              - plugin.version: for users-guide.xsl to add version automatically
    -->
    <!-- ================================================== -->
        <script language="javascript"> <![CDATA[
        function echo(msg)
        {
            echot = project.createTask("echo");
            echot.setMessage(msg);
            echot.perform();
        }
        
        var filter = new java.io.FileFilter({accept: function(pathname) {
            return pathname.getName().endsWith(".props");
        }});
        
        basedir = project.getProperties().get("basedir");
        var props = new java.io.File(basedir).listFiles(filter);
        if(props.length == 0)echo("no *.props file found in "+basedir);
        
        /* load every *.props file found in basedir (hopefully only one) */
        for(i=0;i<props.length;i++){
            readprops = project.createTask("property");
            readprops.setFile(props[i]);
            readprops.perform();
            
        }
        
        /* look in all properties for plugin.xxx.name */
        for(it=project.getProperties().entrySet().iterator();it.hasNext();)
        {
            var v = it.next();
            var vKey = v.getKey();
            if(vKey != null && !vKey.equals("plugin.name") && vKey.startsWith("plugin.") && vKey.endsWith(".name"))
            {

                /* define plugin.class: it may prove useful for other tasks */
                pluginclass = vKey.substring(7,vKey.lastIndexOf(".name"));
                
                java.lang.System.out.println("plugin class: " + pluginclass);
                
                setpluginclass = project.createTask("property");
                setpluginclass.setName("plugin.class");
                setpluginclass.setValue(pluginclass);
                setpluginclass.perform();

                /* define plugin.version: it's what we wanted, after all */
                pluginversion = project.getProperties().get("plugin."+pluginclass+".version")
                
                setpluginversion = project.createTask("property");
                setpluginversion.setName("plugin.version");
                setpluginversion.setValue(pluginversion);
                setpluginversion.perform();
                
                break;
           }
        }

        echo("plugin.class is "+project.getProperties().get("plugin.class"));
        echo("plugin.version is "+project.getProperties().get("plugin.version"));
    ]]> </script>
    <!-- }}} -->
    
    <!-- <echo>plugin-build java.home=${java.home}</echo> -->
    <!-- where to find jEdit and plugins    -->
    <property name="sourceforge.user.name"
    value="${user.name}" />
    <property name="jedit.install.dir"  value="../../jEdit" />
    <property name="jedit.user.home"    value="${user.home}/.jedit" />
    <property name="plugins.srcdir"     value=".." />
    <property name="install.dir"        value=".." />

    <!-- some info about the plugin and where to put it -->
    <property name="src.dir"        value="." />
    <property name="jar.file"       value="${ant.project.name}.jar" />
    <property name="src.zip.file"   value="${ant.project.name}.zip" />
    <property name="dist.target"    value="dist.nojavadoc" />

    <!-- where files will go    -->
    <property name="build.dir"      value="build" />
    <property name="build.classes"  value="${build.dir}/classes" />
    <property name="build.docs"     value="${build.dir}/docs" />
    <property name="build.javadoc"  value="${build.docs}/javadoc" />
    <property name="build.extras"   value="${build.dir}/extras" />
    <property name="build.lib"      value="${build.dir}/lib" />

    <!-- default compiler flags -->
    <property name="compiler.debug"         value="off" />
    <property name="compiler.debuglevel"    value="lines,vars,source" />
    <property name="compiler.optimize"      value="off" />
    <property name="compiler.deprecation"   value="off" />
    <property name="compiler.verbose"       value="off" />
    <property name="compiler.nowarn"        value="off" />
    <property name="compiler.target"        value="1.6" />
    <property name="compiler.source"        value="1.6" />
    <property name="compiler.listfiles"     value="no" />
    <property name="compiler.fork"          value="no" />
    <property name="compiler.bootclasspath" value="${java.home}/lib/rt.jar"/>
    <property name="compiler.extdirs"       value="${java.ext.dirs}"/>
    <property name="compiler.userargs"      value="" />

    <!-- default documentation options  -->
    <property name="docs-proc.target"       value="xsltproc" />
    <property name="docbookx.dtd"           value="../XML/xml/dtds/docbookx.dtd" />
    <dirname property="build.support"       file="${ant.file.jEditPlugin}" />
    <property name="user-doc.xsl"           location="${build.support}/users-guide.xsl" />
    <property name="user-doc.xml"           value="docs/users-guide.xml" />
    <property name="user-doc.out"           value="users-guide.html" />
    <property name="javadoc.title"          value="${ant.project.name} API" />
    <property name="docbook.xsl.sheet"      value="html/onechunk.xsl" />
    <pathconvert property="docs.style.sheet"
                 dirsep="/">
        <path location="${docbook.xsl}/${docbook.xsl.sheet}" />
    </pathconvert>

    <property name="xsltproc.executable"    value="xsltproc" />

    <!-- default junit options -->
    <property name="junit.jar"              value="junit.jar" />
    <property name="junit.testcase"         value="${ant.project.name}TestSuite" />
    <property name="junit.printsummary"     value="on" />
    <property name="junit.haltonfailure"    value="off" />

    <fail message="The jedit JAR (jedit.jar) is not available in &quot;${jedit.install.dir}&quot;">
        <condition>
            <not>
                <available file="${jedit.install.dir}/jedit.jar"
                           type="file" />
            </not>
        </condition>
    </fail>

    <!-- default class path; try not to override this,
         since the intention is to add here anything that
         might be needed by all the plugins (such as the
         jedit.jar file and any other jar files that
         jEdit might use in the future.                     -->
    <path id="default.class.path">
        <pathelement location="${jedit.install.dir}/jedit.jar" />
        <pathelement location="${junit.jar}" />
        <fileset dir="${build.dir}">
            <include name="lib/*.jar"/>
        </fileset>
    </path>

    <!-- this is the classpath used by the "compile"
         target. Override this one if you need to. You don't
         need to reference "default.class.path" here - it's added
         automatically to the javac command.                -->
    <path id="project.class.path" />

    <!-- jedit tasks properties -->
    <property name="jedit.classes" value="${build.support}/build/classes" />
    <property name="jedit.src" value="${build.support}/java-src" />
    <uptodate targetfile="${build.support}/build/doc/index.html"
              property="jedit.tasks.javadoc.uptodate" >
        <srcfiles dir="${jedit.src}" />
    </uptodate>

    <!-- {{{ Load ant-contrib library ===================== -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties" onerror="ignore">
        <classpath>
            <pathelement location="${ant-contrib.jar}"/>
        </classpath>
    </taskdef>
    <!-- ===============================================}}} -->

    <!-- ===============================================}}} -->

    <!-- {{{ Custom javac task ============================ -->
    <presetdef name="jp.javac">
        <javac destdir="${build.classes}"
                debug="${compiler.debug}"
                debuglevel="${compiler.debuglevel}"
                optimize="${compiler.optimize}"
                encoding="utf-8"
                deprecation="${compiler.deprecation}"
                verbose="${compiler.verbose}"
                nowarn="${compiler.nowarn}"
                target="${compiler.target}"
                source="${compiler.source}"
                listfiles="${compiler.listfiles}"
                fork="${compiler.fork}"
                bootclasspath="${compiler.bootclasspath}"
                extdirs="${compiler.extdirs}"
                >
            <src location="${src.dir}" />
	    <compilerarg line="${compiler.userargs}" />
            <classpath refid="default.class.path" />
            <classpath refid="project.class.path" />
        </javac>
    </presetdef>
    <!-- }}} ============================================== -->

    <!-- {{{ Compilation and building ===================== -->

    <!-- This selector defines the files that will be
         compiled by the "compile" target. Define here which
         files under ${src.dir} will be compiled when the
         "compile" task is called.                          -->
    <selector id="compileFiles">
        <filename name="**/*.java" />
    </selector>

    <!-- This selector defines extra files to be included
         in the plugin's JAR file. The context of the
         selector is the plugin's directory (${basedir}),
         so it will not work for files outside the plugin
         directory. For those cases, use the "build.prepare"
         target. By default, it's empty.                    -->
    <selector id="packageFiles">
        <size value="0" when="less" />
    </selector>

    <!-- This selector defines the doc source files
         The context of the selector is the plugin's directory (${basedir}),
         so it will not work for files outside the plugin
         directory. For those cases, use the "build.prepare"
         target. By default, docs/users-guide.xml is selected.                    -->
    <selector id="docSrcFiles">
        <filename name="docs/users-guide.xml" />
    </selector>

    <!-- This selector defines other files that should be packaged
         in the plugin's jar file; by default it contains actions.xml,
         dockables.xml, services.xml, any files ending in ".props",
         "LICENSE" and "README". The context is "${basedir}". 
         Normally, plugins do not override this but instead define a "packageFiles" 
         selector. -->
    <selector id="extraFiles">
        <and>
            <not> <filename name="${build.dir}/**"/></not>
            <or>
                <filename name="**/actions.xml" />
                <filename name="**/browser.actions.xml" />
                <filename name="**/dockables.xml" />
                <filename name="**/services.xml" />
                <filename name="**/*.props" />
                <filename name="**/lang_*.properties" />
                <filename name="**/LICENSE" />
                <filename name="**/README" />
            </or>
        </and>
    </selector>

    <!--{{{ Ivy setttings =============================== -->

    <!-- This overloads defaults from build-helper.xml
         to have ivy.jar in the same place as jedit builder has.
         Otherwise ivy would be put in ${build.support}/lib/ivy -->
    <property name="ivy.install.version" value="2.2.0" />
    <condition property="ivy.home" value="${env.IVY_HOME}">
      <isset property="env.IVY_HOME" />
    </condition>
    <property name="ivy.home" value="${user.home}/.ivy2" />
    <property name="ivy.jar.dir" value="${ivy.home}/lib" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
    <property name="ivy.settings.file" value="${build.support}/ivysettings.xml" />

    <!--}}}-->

    <!-- {{{ Target: resolve ============================== -->
    <target name="check-ivy-xml" >
        <available file="ivy.xml" type="file" property="ivy.xml.present" />
    </target>
    <target name="resolve" description="Retrieve dependencies"
        depends="check-ivy-xml" if="ivy.xml.present">
        <echo>ivy.xml present, retrieving dependencies</echo>
        <!-- lib.dir is probably already set, but to be sure -->
        <property name="lib.dir" value="${build.support}/lib" />
        <get-ivy />
        <ivy:retrieve pattern="${build.lib}/[artifact].[ext]"
                      log="download-only" />
    </target>
    <!-- ===============================================}}} -->

    <!-- {{{ Target: compile ============================== -->
    <!-- Compiles all the ".java" files present in the
         directory pointed by the "src.dir" property
         defined above. Classes are put in the directory
         designated in the "build.classes" property.
         The following properties control the behavior of
         the compiler (relates to options to the javac
         ant task, defaults in parethesis):
         compiler.debug: the debug option (off)
         compiler.debuglevel: the debug level (lines,source)
         compiler.optimize: the optimize option (off)
         compiler.deprecation: deprecation option (off)
         compiler.verbose: the verbose option (off)
         compiler.nowarn: the nowarn option (off)
         compiler.target: the target option (1.6)
         compiler.source: the source option (1.6)
         compiler.listfiles: the listfiles option (no)      -->
    <target name="compile"
            description="Compile the plugin's classes" depends="resolve">

        <mkdir dir="${build.classes}" />
        <jp.javac>
            <selector refid="compileFiles" />
        </jp.javac>

    </target>
    <!-- ===============================================}}} -->

    <!-- {{{ Target: clean ================================ -->
    <!-- Removes the directory defined in the "build"
         property, the "docbook-wrapper.xsl" file and the
         file defined by the property "jar.file" in the
         directory defined by "install.dir".                -->
    <target name="clean" description="Cleans project directories">
        <delete dir="${build.dir}" quiet="true" />
    </target>
    <!-- ===============================================}}} -->

    <!-- {{{ Target: build ================================ -->
    <!-- This target build the plugin JAR file. It
         depends on two other targets: "compile", defined
         above, and "build.prepare", which is empty in
         this file but can be overriden by the plugin's
         build file.
         This target does the following after that:
         * Copies all files defined by the extraFiles selector
           to the staging area.
         * Copies all files defined by the packageFiles selector
           to the staging area.
         * Creates a JAR with the name defined in
           "jar.file" in the directory defined by
           "install.dir". This JAR will contain the
           contents of the directories defined by
           "build.classes", "build.docs" and "build.extras"
         If you need to have any other files added to the
         JAR, override the "build.prepare" target and use
         it to copy files to one of those three
         directories, or redefine the "extraFiles"
         selector.                                          -->

    <target name="build"
          depends="build.prepare,compile"
          description="Builds the plugin JAR file (no docs)">

        <mkdir dir="${build.classes}" />
        <mkdir dir="${build.docs}" />
        <delete dir="${build.extras}" failonerror="false" />
        <mkdir dir="${build.extras}" />
        <mkdir dir="${install.dir}" />

        <copy todir="${build.extras}" includeEmptyDirs="false">
            <fileset dir="${basedir}">
                <selector refid="extraFiles" />
            </fileset>
        </copy>

        <copy todir="${build.extras}" includeEmptyDirs="false">
            <fileset dir="${basedir}">
                <selector refid="packageFiles" />
            </fileset>
        </copy>

        <jar jarfile="${install.dir}/${jar.file}">
            <fileset dir="${build.classes}" />
            <fileset dir="${build.docs}" />
            <fileset dir="${build.extras}" />
        </jar>

        <antcall target="build.post" />

    </target>
    <!-- ===============================================}}} -->

    <!-- {{{ Target: build.prepare ======================== -->
    <!-- This implementation does nothing. See the
         "build" target for details.                        -->
    <target name="build.prepare" />
    <!-- ===============================================}}} -->

    <!-- {{{ Target: build.post =========================== -->
    <!-- Called after the build process is finished.
         Plugins can use this to copy extra jar files the
         plugin needs to ${install.dir}.
         By default does nothing.                           -->
    <target name="build.post" />
    <!-- ===============================================}}} -->

    <!-- {{{ Target: dist.nojavadoc ======================= -->
    <!-- Meta-task that builds the user documentation and
         builds the plugin JAR file, but not the javadoc.   -->
    <target name="dist.nojavadoc"  depends="userdocs,build" />
    <!-- =============================================== }}} -->

    <!-- {{{ Target: dist.complete ======================== -->
    <!-- Meta-task that builds the user documentation,
         javadoc documentation and builds the plugin JAR
         file.                                              -->
    <target name="dist.complete" depends="docs,build" />
    <!-- ===============================================}}} -->

    <!-- {{{ Target: dist ================================= -->
    <!-- This task calls the target defined in the
         property "dist.target" to build the plugin and
         package it for distribution. Before proceeding,
         it cleans the build directory.                     -->
    <target name="dist" depends="clean" description="Builds JAR file, with docs">
        <antcall target="${dist.target}" />
    </target>
    <!-- =============================================== }}} -->

    <!-- {{{ Target: dist.source ========================== -->
    <!-- Creates a ZIP file of the plugin's source. The
         name of the file is defined in the property
         "src.zip.file" and will be created in the
         directory defined by "install.dir".                -->
    <target name="dist.source">
        <delete file="${install.dir}/${src.zip.file}" quiet="true" />
        <zip destfile="${install.dir}/${src.zip.file}">
            <fileset dir="${src.dir}">
                <include name="**/*.*" />
                <exclude name="${build.dir}/**" />
            </fileset>
        </zip>
    </target>
    <!-- ===============================================}}} -->

    <!-- {{{ Target: package ============================== -->
    <!-- Convenience target that calls both "docs" and
         "build" to create the plugin jar file.             -->
    <target name="package" depends="docs,build" />
    <!-- =============================================== }}} -->

    <!-- =============================================== }}} -->

    <!-- {{{ Documentation ================================ -->

    <!-- {{{ Target: docs ================================= -->
    <!-- Meta-task that calls javadoc and userdocs.         -->
    <target name="docs"
            depends="javadoc,userdocs"
            description="Build the User's Guide and Javadoc documentation" />
    <!-- =============================================== }}} -->

    <!-- {{{ Target: userdocs ============================= -->
    <target name="userdocs"
            description="Builds the user's guide.">
        <mkdir dir="${build.docs}" />
        <copy todir="${build.docs}" includeEmptyDirs="false">
            <fileset dir="${basedir}">
                <selector refid="docSrcFiles" />
            </fileset>
        </copy>
        <copy tofile="${build.docs}/users-guide.xsl"
              flatten="true"
              file="${user-doc.xsl}">
            <filterset>
                <filter token="docs.style.sheet"
                        value="${docs.style.sheet}" />
                <!-- property deduced via javascript from MyPlugin.props -->
                <filter token="plugin.version"
                        value="${plugin.version}" />
            </filterset>
        </copy>
        <antcall target="docs-${docs-proc.target}" />
        <delete file="${build.docs}/users-guide.xsl" />
        <delete>
            <fileset dir="${build.docs}">
                <selector refid="docSrcFiles" />
            </fileset>
        </delete>
    </target>

    <!-- =============================================== }}} -->

    <target name="upload.docs" depends="javadoc, userdocs"
    description="upload documentation to plugins.jedit.org site" >
        <exec dir="${build.docs}" executable="rsync">
      <arg line="-avz ./ ${sourceforge.user.name},jedit@shell.sourceforge.net:/home/project-web/jedit-plugins/htdocs/plugindoc/${ant.project.name}" />
    </exec>
    </target>


    <!-- {{{ Target: javadoc ============================== -->
    <!-- Builds the javadoc documentation for the plugin,
         placing it under "build.javadoc". Your plugin
         build file *must* define a property called
         named "javadoc.packagenames" to be used as the
         "packagenames" option of ant's javadoc task.
         This property is not defined in this file and
         execition will probably fail if it's not defined.
         The title of the documentation is defined in the
         "javadoc.title" property.                          -->
    <target name="javadoc"
            description="Generates javadoc sourcecode documentation"
            if="javadoc.packagenames">
        <mkdir dir="${build.javadoc}" />
        <javadoc sourcepath="${src.dir}"
                    destdir="${build.javadoc}"
                    locale="en"
                    packagenames="${javadoc.packagenames}"
                    windowtitle="${javadoc.title}">
            <classpath refid="default.class.path" />
            <classpath refid="project.class.path" />
        </javadoc>
    </target>
    <!-- =============================================== }}} -->

    <!-- {{{ Target: docs-xsltproc ======================== -->
    <!-- Generate docs with xsltproc tool from
         www.xmlsoft.org. This task creates a temporary
         file called "docbook.catalog" containing a
         reference to the Docbook DTD defined in the
         property "docbookx.dtd" above. The style sheet
         used is defined by the property "user-doc.xsl",
         and defaults to "docbook-wrapper.xsl". The XML
         document to be processed is defined by the
         "user-doc.xml" property, and defaults to
         "docs/users-guide.xml". The output is defined in
         the "user-doc.out" property. Don't call this target directly
         as the prerequisites are set in userdocs target.                  -->
    <target name="docs-xsltproc" description="Generate user documentation in html format with xsltproc">
        <check-dir-var var="docbook.xsl" />
        <check-file-var var="docbook.catalog" />
        <exec executable="${xsltproc.executable}" dir="${build.docs}" failonerror="true">
            <arg value="--output" />
            <arg value="${user-doc.out}" />
            <arg value="--catalogs" />
            <arg value="users-guide.xsl" />
            <arg value="${user-doc.xml}" />
            <env key="SGML_CATALOG_FILES"
                 file="${docbook.catalog}" />
        </exec>
    </target>

    <!-- ===============================================}}} -->

    <target name="docs-none"
        description="no xslt step - HTML docs" />

    <!-- {{{ Target: docs-xalan =========================== -->
    <!-- Generate docs with Xalan tool from
         xml.apache.org . Same properties as the
         "docs-xsltproc" target apply here.                 -->
    <target name="docs-xalan"
            description="Generate user documentation in html format with xalan (not working)">
        <fail message="Please set the &quot;docbookx.dtd&quot; in build.properties"
              unless="docbookx.dtd" />
        <fail message="Please set &quot;docbook.xsl&quot; in build.properties"
              unless="docbook.xsl" />

        <xslt basedir="."
              destdir="${build.docs}"
              style="${build.docs}/users-guide.xsl"
              includes="${user-doc.xml}">
            <xmlcatalog>
                <dtd publicId="-//OASIS//DTD DocBook XML V4.2//EN"
                     location="${docbookx.dtd}" />
            </xmlcatalog>
        </xslt>
    </target>
    <!-- ===============================================}}} -->

    <!-- =============================================== }}} -->

    <!-- {{{ Unit testing ================================= -->

    <!-- {{{ Target: test ================================= -->
    <!-- Meta-task that calls the defined test target.      -->
    <target name="test"
            description="Runs the plugin's unit tests.">
        <antcall target="${unit.test.target}" />
    </target>
    <!-- ===============================================}}} -->

    <!-- {{{ Target: test-junit============================ -->
    <!-- Executes a jUnit test case defined by the plugin's
         build file. The classpath for the test will be the
         ${build.class} directory, the ${junit.jar} file and
         the default.class.path and project.class.path path
         structures.
         -->
    <target name="test-junit"
            description="Runs the plugin's jUnit tests."
            if="junit.testcase,junit.jar">

        <junit printsummary="${junit.printsummary}"
                haltonfailure="${junit.haltonfailure}">

            <classpath>
                <pathelement location="${junit.jar}" />
                <pathelement location="${build.classes}" />
                <path refid="default.class.path" />
                <path refid="project.class.path" />
            </classpath>

            <test name="${junit.testcase}" />
        </junit>

    </target>
    <!-- ===============================================}}} -->

    <!-- ===============================================}}} -->

    <!-- {{{ Dependencies ================================= -->


    <!-- {{{ Target: build.dependencies =================== -->
    <target name="build.dependencies"
            description="Builds the needed plugins from the available source code."
            if="plugin.dependencies,ant-contrib.jar">
        <foreach list="${plugin.dependencies}"
                    target="build.other"
                    param="plugin.name"
                    delimiter=","
                    trim="true" />
    </target>
    <!-- ===============================================}}} -->

    <!-- {{{ Target: build.other=========================== -->
    <!-- Builds a plugin from the code available in its
         directory under "plugins.srcdir". This will call
         the "build" target of that plugin's build file.
         Expects the "plugin.name" parameter with the name
         of the plugin's directory.                         -->
    <target name="build.other">
        <fail message="Can't find plugin: ${plugin.name}">
            <condition>
                <not>
                    <available file="${plugins.srcdir}/${plugin.name}/build.xml" />
                </not>
            </condition>
        </fail>
        <ant antfile="${plugins.srcdir}/${plugin.name}/build.xml"
                target="build"
                inheritAll="false"
                inheritRefs="false" />
    </target>
    <!-- ===============================================}}} -->

    <!-- ================================================== }}}-->

    <!-- {{{ Common targets =============================== -->

    <!-- {{{ Target: clean-build-support ================== -->
    <!-- Removes recreatable files from build.support directory -->
    <target name="clean-build-support">
        <delete dir="${build.support}/build" quiet="true" />
        <delete dir="${build.support}/lib" quiet="true" />
    </target>
    <!-- ===============================================}}} -->

    <!-- {{{ def-jedit-tasks target ======================= -->

    <target name="def-jedit-tasks"
            depends="get-lib-ivy, jedit-tasks-javadoc" >
        <mkdir dir="${jedit.classes}" />
        <copy todir="${jedit.classes}">
            <fileset dir="${jedit.src}" includes="**/antlib.xml" />
        </copy>
        <javac srcdir="${jedit.src}" destdir="${jedit.classes}"
               debug="true" classpathref="ivy.jar.path" >
            <compilerarg value="-Xlint:deprecation,unchecked"/>
        </javac>
        <taskdef resource="org/jedit/ant/antlib.xml"
                 uri="antlib:org.jedit.ant"
                 classpath="${jedit.classes}"
                 classpathref="ivy.jar.path"
                 />
    </target>

    <!-- ===============================================}}} -->

    <!-- {{{ jedit-tasks-javadoc target =================== -->

    <target name="jedit-tasks-javadoc"
            depends="get-lib-ivy"
            unless="${jedit.tasks.javadoc.uptodate}" >
        <javadoc sourcepath="${jedit.src}"
                 destdir="${build.support}/build/doc">
            <classpath refid="ivy.jar.path" />
            <classpath>
                <pathelement path="${java.class.path}" />
            </classpath>
        </javadoc>
    </target>

    <!-- ===============================================}}} -->

    <!-- ================================================== }}}-->

    <!-- {{{ Plugin release targets ======================= -->

    <!-- {{{ get-plugin-info target======================== -->
    <!--
         Parses files from src.dir using selectors compileFiles and extraFiles
         and produces plugin information. Details in jedit tasks doc.
    -->
<target name="get-plugin-info" depends="def-jedit-tasks" >
    <local name="src.fileset" />
    <local name="extras.fileset" />
    <jedit:get-plugin-info>
        <jedit:plugininfo id="cur.plugin.info">
            <fsSrc dir="${src.dir}" >
                <selector refid="compileFiles" />
            </fsSrc>
            <fsExtras dir="${basedir}" >
                <selector refid="extraFiles" />
            </fsExtras>
        </jedit:plugininfo>
    </jedit:get-plugin-info>

    <!--<dump-prop-ref refid="src.fileset" />-->
    <!--<dump-prop-ref refid="plugin.props.set" />-->
    <echo>Plugin properties discovered:</echo>
    <echo>plugin.class.name: ${plugin.class.name}</echo>
    <echo>plugin.dep.count: ${plugin.dep.count}</echo>
    <fail>Property plugin.jedit.version.full not set.
          Getting plugin properties failed.
        <condition>
            <not><isset property="plugin.jedit.version.full" /></not>
        </condition>
    </fail>
</target>
<!-- }}} ================================================== -->

    <!-- {{{ gen-plugin-deps-ivy-file target ============== -->
<!-- Generates an ivy.xml file specified by property plugin.deps.ivy.file
     based on plugin.deps.ivy.template. -->
<target name="gen-plugin-deps-ivy-file"
        depends="get-plugin-info"
        unless="plugin.deps.present" >
    <local name="dir" />
    <check-file-var var="plugin.deps.ivy.template" />
    <dirname file="${plugin.deps.ivy.file}" property="dir" />
    <mkdir dir="${dir}" />
    <jedit:gen-plugin-deps-ivy-file
        template="${plugin.deps.ivy.template}"
        outFile="${plugin.deps.ivy.file}" >
        <jedit:plugininfo refid="cur.plugin.info" />
    </jedit:gen-plugin-deps-ivy-file>
</target>
<!-- }}} ================================================== -->

    <!-- {{{ check-plugin-deps-dir target ================= -->
<!-- Checks whether the directory exists. If it exists, then
     presence of all plugin dependencies is assumed.
     To force re-downloading remove the ${lib.dir}/plugin-deps directory
     -->
<target name="check-plugin-deps-dir" >
    <mkdir dir="${build.lib}" />
    <property name="plugin.deps.dir" value="${build.lib}/plugin-deps" />
    <condition property="plugin.deps.present">
      <available file="${plugin.deps.dir}" type="dir" />
    </condition>
</target>
<!-- }}} ================================================== -->

    <!-- {{{ check-plugin-deps-rec-dir target ============= -->
<!-- Sets up the property and the directory for plugin dependencies. -->
    <target name="check-plugin-deps-rec-dir" >
        <mkdir dir="${build.lib}" />
        <property name="plugin.deps.rec.dir"
                  value="${build.lib}/plugin-deps-rec" />
        <condition property="plugin.deps.rec.present">
            <available file="${plugin.deps.rec.dir}" type="dir" />
        </condition>
    </target>
<!-- }}} ================================================== -->

    <!-- {{{ download-plugin-deps target ================== -->
    <!-- Downloads plugins being plugin dependencies, but only those
         directly specified in properties files.
         This is done only once, as the existence
         of the directory blocks the target. May be used for plugin
         building. For running - recursive dependencies are required. -->
    <target name="download-plugin-deps"
            depends="check-plugin-deps-dir, get-lib-ivy, def-jedit-tasks"
            unless="plugin.deps.present">
        <property name="plugin.deps.ivy.template"
                  value="${build.support}/ivy.plugin.deps.template.xml" />
        <property name="plugin.deps.ivy.file"
                  value="${basedir}/build/ivy.plugin.deps.xml" />
        <check-file-var var="plugin.deps.ivy.template" />
        <antcall target="gen-plugin-deps-ivy-file"
                 inheritrefs="true" />
        <ivy:retrieve file="${plugin.deps.ivy.file}"
                      pattern="${plugin.deps.dir}/[artifact].zip"
                      log="download-only" />
        <!-- Usually ivy creates the directory, but some plugins just
             don't have any plugin dependencies specified. To make
             subsequent targets safe, the directory must be created now. -->
        <mkdir dir="${plugin.deps.dir}" />
        <unzip dest="${plugin.deps.dir}">
            <fileset dir="${plugin.deps.dir}" includes="*.zip" />
        </unzip>
        <delete>
            <fileset dir="${plugin.deps.dir}" includes="*.zip" />
        </delete>
    </target>
    <!-- }}} ================================================== -->

    <!-- {{{ download-plugin-deps-rec target ================== -->
    <!-- Unlike non-recursive download - this is not blocked by the
         existance of the directory.                            -->
    <target name="download-plugin-deps-rec"
            depends="check-plugin-deps-rec-dir, get-lib-ivy, def-jedit-tasks,
                     get-plugin-info" >
        <property name="plugin.deps.ivy.template"
                  value="${build.support}/ivy.plugin.deps.template.xml" />
        <check-file-var var="plugin.deps.ivy.template" />
        <jedit:download-plugin-deps-rec
            todir="${plugin.deps.rec.dir}"
            ivyfilesdir="${build.dir}"
            template="${plugin.deps.ivy.template}" >
            <jedit:plugininfo refid="cur.plugin.info" />
        </jedit:download-plugin-deps-rec>

    </target>
    <!-- }}} ================================================== -->

    <!-- ================================================== }}}-->

</project>

<!--    :tabSize=4:indentSize=4:noTabs=true:
        :folding=explicit:collapseFolds=2:    -->
