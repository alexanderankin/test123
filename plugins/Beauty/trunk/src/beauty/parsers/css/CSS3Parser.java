/* Generated By:JavaCC: Do not edit this line. CSS3Parser.java */
package beauty.parsers.css;

import java.io.*;
import java.util.*;

public class CSS3Parser implements CSS3ParserConstants {
    Token t;

    // shouldn't use this, a specific line separator should be set based on
    // buffer settings.  Of course, it may be the same as what the buffer
    // uses anyway.
    String lineSep = System.getProperty("line.separator");

    // one of these is inserted at every place in a line that qualifies as a
    // good place to break a line if it needs wrapped.  You can't type one of
    // these from the keyboard,
    char wrapSep = '\u001c';

    public void setIndentWidth(int i) {
        token_source.setIndentWidth(i);
    }

    public void setTabSize(int size) {
        jj_input_stream.setTabSize(size);
    }

    public int getTabSize() {
        // this really isn't necessary for this beautifier.  Setting the tab
        // size on the input stream makes the token locations more accurate
        // is all.
        return jj_input_stream.getTabSize(0);
    }

    public void setUseSoftTabs(boolean b) {
        token_source.setUseSoftTabs(b);
    }

    public String getText() {
        return token_source.getText();
    }

    public void resetTokenSource() {
        token_source.reset();
    }

    private void add(Token t) {
        token_source.add(t);
    }

    private void add(String s) {
        token_source.add(s);
    }

    private void trim() {
        token_source.trim();
    }

    private void trimWhitespace() {
        token_source.trimWhitespace();
    }

    private void write() {
        token_source.write();
    }

    private void writeln() {
        token_source.writeln();
    }

    public void setLineSeparator(String le) {
        lineSep = le;
        token_source.setLineSeparator(le);
    }

   public CSS3Parser(String fileName)
   {
      this(System.in);
      try { ReInit(new FileInputStream(new File(fileName))); }
      catch(Exception e) { e.printStackTrace(); }
   }

//<DEFAULT, IN_COMMENT>
//TOKEN :
//{ /* avoid token manager error */
//   < UNKNOWN : ~[] >
//}


/*******************************************************************************
 * The grammar of CSS2 and CSS3 follows.
 ******************************************************************************/

/**
 * The main entry for the parser.
 *
 * @exception ParseException exception during the parse
 */
  final public void styleSheet() throws ParseException {
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HTMLSTARTTAG:
        case HTMLENDTAG:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HTMLSTARTTAG:
          t = jj_consume_token(HTMLSTARTTAG);
                                      add(t);
          break;
        case HTMLENDTAG:
          t = jj_consume_token(HTMLENDTAG);
                                    add(t);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CHARSET_SYM:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        charset();
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case CDO:
        case CDC:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          jj_consume_token(S);
          break;
        case CDO:
          t = jj_consume_token(CDO);
                         add(t);
          break;
        case CDC:
          t = jj_consume_token(CDC);
                         add(t);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT_SYM:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        importDeclaration();
        ignoreStatement();
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAMESPACE_SYM:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        namespaceDeclaration();
        ignoreStatement();
      }
      afterImportDeclaration();
      jj_consume_token(0);
    } catch (ParseException pe) {
        pe.printStackTrace();
    } catch (TokenMgrError err) {
        err.printStackTrace();
    }
        write();
  }

  final public void charset() throws ParseException {
    t = jj_consume_token(CHARSET_SYM);
                          add(t);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_6;
      }
      jj_consume_token(S);
    }
    t = jj_consume_token(STRING);
                     add(t);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_7;
      }
      jj_consume_token(S);
    }
    t = jj_consume_token(SEMICOLON);
                       add(t);
  }

  final public void afterImportDeclaration() throws ParseException {
    String ret;
    label_8:
    while (true) {
      ;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
      case HASHIDENT:
      case HASH:
      case LBRACKET:
      case ANY:
      case COLON:
      case LENGTH:
      case EMS:
      case EXS:
      case ANGLE:
      case TIME:
      case FREQ:
      case RESOLUTION:
      case DIMEN:
      case PSEUDOELEMENT_SYM:
      case CLASS:
      case FUNCTIONNOT:
      case 98:
        ruleSet();
        break;
      case MEDIA_SYM:
        media();
        break;
      case PAGE_SYM:
        page();
        break;
      case FONT_FACE_SYM:
        fontFace();
        break;
      case PREF_SYM:
        preference();
        break;
      case COLOR_PROFILE:
        colorprofile();
        break;
      case PHONETIC_ALPHABET_SYM:
        phoneticAlphabet();
        break;
      default:
        jj_la1[9] = jj_gen;
        ret = skipStatement();
              // the parser steps into a tight loop if this block is removed
              if (ret == null || ret.length() == 0) {
                {if (true) return;}
              }
      }
      ignoreStatement();
    }
  }

  final public void ignoreStatement() throws ParseException {
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CDO:
      case CDC:
      case ATKEYWORD:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CDO:
        t = jj_consume_token(CDO);
                     add(t);
        break;
      case CDC:
        t = jj_consume_token(CDC);
                     add(t);
        break;
      case ATKEYWORD:
        atRuleDeclaration();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_10;
        }
        jj_consume_token(S);
      }
    }
  }

  final public void namespaceDeclaration() throws ParseException {
    t = jj_consume_token(NAMESPACE_SYM);
                            add(t);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_11;
      }
      jj_consume_token(S);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      t = jj_consume_token(IDENT);
                       add(t);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_12;
        }
        jj_consume_token(S);
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      t = jj_consume_token(STRING);
                        add(t);
      break;
    case URL:
      t = jj_consume_token(URL);
                     add(t);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_13;
      }
      jj_consume_token(S);
    }
    t = jj_consume_token(SEMICOLON);
                        add(t);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_14;
      }
      jj_consume_token(S);
    }
  }

/**
 * The import statement
 *
 * @exception ParseException exception during the parse
 */
  final public void importDeclaration() throws ParseException {
    t = jj_consume_token(IMPORT_SYM);
                     add(t);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_15;
      }
      jj_consume_token(S);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      t = jj_consume_token(STRING);
                    add(t);
      break;
    case URL:
      t = jj_consume_token(URL);
                 add(t);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_16;
      }
      jj_consume_token(S);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      medium();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_17;
        }
        t = jj_consume_token(COMMA);
                        add(t);
        label_18:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[23] = jj_gen;
            break label_18;
          }
          jj_consume_token(S);
        }
        medium();
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    t = jj_consume_token(SEMICOLON);
                    add(t);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_19;
      }
      jj_consume_token(S);
    }
  }

  final public void media() throws ParseException {
    t = jj_consume_token(MEDIA_SYM);
                     add(t);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_20;
      }
      jj_consume_token(S);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MEDIARESTRICTOR:
      t = jj_consume_token(MEDIARESTRICTOR);
                             add(t);
      label_21:
      while (true) {
        jj_consume_token(S);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_21;
        }
      }
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    medium();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_22;
      }
      t = jj_consume_token(COMMA);
                    add(t);
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_23;
        }
        jj_consume_token(S);
      }
      medium();
    }
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_24;
      }
      t = jj_consume_token(AND);
                  add(t);
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_25;
        }
        jj_consume_token(S);
      }
      t = jj_consume_token(RPARAN);
                     add(t);
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_26;
        }
        jj_consume_token(S);
      }
      mediadeclaration();
      t = jj_consume_token(LPARAN);
                     add(t);
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_27;
        }
        jj_consume_token(S);
      }
    }
    t = jj_consume_token(LBRACE);
                 add(t); writeln(); ++token_source.level;
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_28;
      }
      jj_consume_token(S);
    }
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
      case HASHIDENT:
      case HASH:
      case LBRACKET:
      case ANY:
      case COLON:
      case LENGTH:
      case EMS:
      case EXS:
      case ANGLE:
      case TIME:
      case FREQ:
      case RESOLUTION:
      case DIMEN:
      case PSEUDOELEMENT_SYM:
      case CLASS:
      case FUNCTIONNOT:
      case 98:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_29;
      }
      ruleSet();
    }
    t = jj_consume_token(RBRACE);
                 add(t); --token_source.level; writeln();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_30;
      }
      jj_consume_token(S);
    }
  }

  final public void medium() throws ParseException {
    t = jj_consume_token(IDENT);
                 add(t);
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_31;
      }
      jj_consume_token(S);
    }
  }

  final public void unused_production_generic_syntax() throws ParseException {
    jj_consume_token(RPARAN);
          add("(");
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_32;
      }
      jj_consume_token(S);
    }
    term();
    jj_consume_token(LPARAN);
          add(")");
  }

  final public void definition() throws ParseException {
    jj_consume_token(LBRACKET);
          add("[");
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_33;
      }
      jj_consume_token(S);
    }
    term();
    jj_consume_token(RBRACKET);
          add("]");
  }

  final public void page() throws ParseException {
    t = jj_consume_token(PAGE_SYM);
                    add(t);
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_34;
      }
      jj_consume_token(S);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      t = jj_consume_token(IDENT);
                    add(t);
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_35;
        }
        jj_consume_token(S);
      }
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      pseudo_page();
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    t = jj_consume_token(LBRACE);
                  add(t); writeln(); ++token_source.level;
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_36;
      }
      jj_consume_token(S);
    }
    pageContent();
    t = jj_consume_token(RBRACE);
                  add(t); --token_source.level; writeln();
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_37;
      }
      jj_consume_token(S);
    }
  }

  final public void pageContent() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATTOP:
    case ATRIGHT:
    case ATBOTTOM:
    case ATLEFT:
      prefAtRule();
      break;
    default:
      jj_la1[47] = jj_gen;
      declarations();
    }
  }

  final public void prefAtRule() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATTOP:
      t = jj_consume_token(ATTOP);
                    add(t);
      break;
    case ATBOTTOM:
      t = jj_consume_token(ATBOTTOM);
                       add(t);
      break;
    case ATLEFT:
      t = jj_consume_token(ATLEFT);
                     add(t);
      break;
    case ATRIGHT:
      t = jj_consume_token(ATRIGHT);
                      add(t);
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_38;
      }
      jj_consume_token(S);
    }
    t = jj_consume_token(LBRACE);
                  add(t); writeln(); ++token_source.level;
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_39;
      }
      jj_consume_token(S);
    }
    declarations();
    t = jj_consume_token(RBRACE);
                                 add(t); --token_source.level;  writeln();
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_40;
      }
      jj_consume_token(S);
    }
  }

  final public void pseudo_page() throws ParseException {
    jj_consume_token(COLON);
    t = jj_consume_token(IDENT);
                     add(":"); add(t);
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_41;
      }
      jj_consume_token(S);
    }
  }

  final public void fontFace() throws ParseException {
    t = jj_consume_token(FONT_FACE_SYM);
                         add(t);
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_42;
      }
      jj_consume_token(S);
    }
    t = jj_consume_token(LBRACE);
                  add(t); writeln(); ++token_source.level;
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_43;
      }
      jj_consume_token(S);
    }
    declarations();
    t = jj_consume_token(RBRACE);
                                 add(t); --token_source.level; writeln();
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_44;
      }
      jj_consume_token(S);
    }
  }

  final public void colorprofile() throws ParseException {
    t = jj_consume_token(COLOR_PROFILE);
                         add(t);
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[56] = jj_gen;
        break label_45;
      }
      jj_consume_token(S);
    }
    t = jj_consume_token(LBRACE);
                  add(t); writeln(); ++token_source.level;
    label_46:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_46;
      }
      jj_consume_token(S);
    }
    declarations();
    t = jj_consume_token(RBRACE);
                                 add(t); --token_source.level; writeln();
    label_47:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[58] = jj_gen;
        break label_47;
      }
      jj_consume_token(S);
    }
  }

  final public void preference() throws ParseException {
    t = jj_consume_token(PREF_SYM);
                    add(t);
    label_48:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_48;
      }
      jj_consume_token(S);
    }
    t = jj_consume_token(LBRACE);
                  add(t); writeln(); ++token_source.level;
    label_49:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_49;
      }
      jj_consume_token(S);
    }
    declarations();
    t = jj_consume_token(RBRACE);
                                 add(t); --token_source.level;  writeln();
    label_50:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_50;
      }
      jj_consume_token(S);
    }
  }

  final public void phoneticAlphabet() throws ParseException {
    t = jj_consume_token(PHONETIC_ALPHABET_SYM);
                                 add(t);
    label_51:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[62] = jj_gen;
        break label_51;
      }
      jj_consume_token(S);
    }
    t = jj_consume_token(STRING);
                  add(t);
    label_52:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[63] = jj_gen;
        break label_52;
      }
      jj_consume_token(S);
    }
    jj_consume_token(SEMICOLON);
          add(";");
  }

  final public void atRuleDeclaration() throws ParseException {
    t = jj_consume_token(ATKEYWORD);
                    add(t);
  }

  final public void operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
    case DIV:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIV:
        t = jj_consume_token(DIV);
                      add(t);
        break;
      case COMMA:
        t = jj_consume_token(COMMA);
                        add(t);
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_53:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[65] = jj_gen;
          break label_53;
        }
        jj_consume_token(S);
      }
      break;
    default:
      jj_la1[66] = jj_gen;
      ;
    }
  }

  final public void combinator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case GREATER:
    case TILDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                      add("+");
        break;
      case GREATER:
        jj_consume_token(GREATER);
                         add(">");
        break;
      case TILDE:
        jj_consume_token(TILDE);
                       add("~");
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_54:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[68] = jj_gen;
          break label_54;
        }
        jj_consume_token(S);
      }
      break;
    case S:
      label_55:
      while (true) {
        jj_consume_token(S);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[69] = jj_gen;
          break label_55;
        }
      }
      break;
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void unaryOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
           add("-");
      break;
    case PLUS:
      jj_consume_token(PLUS);
              add("+");
      break;
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void property() throws ParseException {
    t = jj_consume_token(IDENT);
                 add(t);
    label_56:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[72] = jj_gen;
        break label_56;
      }
      jj_consume_token(S);
    }
  }

  final public void ruleSet() throws ParseException {
    selector();
    label_57:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[73] = jj_gen;
        break label_57;
      }
      t = jj_consume_token(COMMA);
                     add(t);
      label_58:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[74] = jj_gen;
          break label_58;
        }
        jj_consume_token(S);
      }
      selector();
    }
    t = jj_consume_token(LBRACE);
                 add(t); writeln(); ++token_source.level;
    label_59:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[75] = jj_gen;
        break label_59;
      }
      jj_consume_token(S);
    }
    declarations();
    t = jj_consume_token(RBRACE);
                                 add(t); --token_source.level; writeln();
    label_60:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[76] = jj_gen;
        break label_60;
      }
      jj_consume_token(S);
    }
  }

  final public void declarations() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      declaration();
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
    label_61:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[78] = jj_gen;
        break label_61;
      }
      jj_consume_token(SEMICOLON);
              add(";"); writeln();
      label_62:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[79] = jj_gen;
          break label_62;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        declaration();
        break;
      default:
        jj_la1[80] = jj_gen;
        ;
      }
    }
  }

  final public void selector() throws ParseException {
    simple_selector();
    label_63:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case PLUS:
      case GREATER:
      case TILDE:
        ;
        break;
      default:
        jj_la1[81] = jj_gen;
        break label_63;
      }
      combinator();
      simple_selector();
    }
  }

/**
 * I made this rule to parse a selector from a document. Combinator are avoid.
 * @exception ParseException exception during the parse
 */
  final public void externalSelector() throws ParseException {
    simple_selector();
    label_64:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[82] = jj_gen;
        break label_64;
      }
      label_65:
      while (true) {
        jj_consume_token(S);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[83] = jj_gen;
          break label_65;
        }
      }
      simple_selector();
    }
  }

  final public void simple_selector() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
    case ANY:
    case 98:
      element_name();
      label_66:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HASHIDENT:
        case HASH:
        case LBRACKET:
        case COLON:
        case LENGTH:
        case EMS:
        case EXS:
        case ANGLE:
        case TIME:
        case FREQ:
        case RESOLUTION:
        case DIMEN:
        case PSEUDOELEMENT_SYM:
        case CLASS:
        case FUNCTIONNOT:
          ;
          break;
        default:
          jj_la1[84] = jj_gen;
          break label_66;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HASHIDENT:
        case HASH:
          hash();
          break;
        case LENGTH:
        case EMS:
        case EXS:
        case ANGLE:
        case TIME:
        case FREQ:
        case RESOLUTION:
        case DIMEN:
        case CLASS:
          _class();
          break;
        case LBRACKET:
          attrib();
          break;
        case COLON:
        case PSEUDOELEMENT_SYM:
          pseudo();
          break;
        case FUNCTIONNOT:
          negation();
          break;
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case HASHIDENT:
    case HASH:
    case LBRACKET:
    case COLON:
    case LENGTH:
    case EMS:
    case EXS:
    case ANGLE:
    case TIME:
    case FREQ:
    case RESOLUTION:
    case DIMEN:
    case PSEUDOELEMENT_SYM:
    case CLASS:
    case FUNCTIONNOT:
      label_67:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HASHIDENT:
        case HASH:
          hash();
          break;
        case LENGTH:
        case EMS:
        case EXS:
        case ANGLE:
        case TIME:
        case FREQ:
        case RESOLUTION:
        case DIMEN:
        case CLASS:
          _class();
          break;
        case LBRACKET:
          attrib();
          break;
        case COLON:
        case PSEUDOELEMENT_SYM:
          pseudo();
          break;
        case FUNCTIONNOT:
          negation();
          break;
        default:
          jj_la1[86] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HASHIDENT:
        case HASH:
        case LBRACKET:
        case COLON:
        case LENGTH:
        case EMS:
        case EXS:
        case ANGLE:
        case TIME:
        case FREQ:
        case RESOLUTION:
        case DIMEN:
        case PSEUDOELEMENT_SYM:
        case CLASS:
        case FUNCTIONNOT:
          ;
          break;
        default:
          jj_la1[87] = jj_gen;
          break label_67;
        }
      }
      break;
    default:
      jj_la1[88] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void _class() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      t = jj_consume_token(CLASS);
                add(t);
      break;
    case LENGTH:
    case EMS:
    case EXS:
    case ANGLE:
    case TIME:
    case FREQ:
    case RESOLUTION:
    case DIMEN:
      deprecated_class();
      break;
    default:
      jj_la1[89] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void deprecated_class() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LENGTH:
      t = jj_consume_token(LENGTH);
                     add(t);
      break;
    case EMS:
      t = jj_consume_token(EMS);
                  add(t);
      break;
    case EXS:
      t = jj_consume_token(EXS);
                  add(t);
      break;
    case ANGLE:
      t = jj_consume_token(ANGLE);
                    add(t);
      break;
    case TIME:
      t = jj_consume_token(TIME);
                   add(t);
      break;
    case FREQ:
      t = jj_consume_token(FREQ);
                   add(t);
      break;
    case RESOLUTION:
      t = jj_consume_token(RESOLUTION);
                         add(t);
      break;
    case DIMEN:
      t = jj_consume_token(DIMEN);
                    add(t);
      break;
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void element_name() throws ParseException {
    if (jj_2_1(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
      case ANY:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          t = jj_consume_token(IDENT);
                        add(t);
          break;
        case ANY:
          t = jj_consume_token(ANY);
                      add(t);
          break;
        default:
          jj_la1[91] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[92] = jj_gen;
        ;
      }
      jj_consume_token(98);
               add("|");
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      t = jj_consume_token(IDENT);
                    add(t);
      break;
    case ANY:
      t = jj_consume_token(ANY);
                  add(t);
      break;
    default:
      jj_la1[93] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void attrib() throws ParseException {
    t = jj_consume_token(LBRACKET);
                    add(t);
    label_68:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[94] = jj_gen;
        break label_68;
      }
      jj_consume_token(S);
    }
    t = jj_consume_token(IDENT);
                 add(t);
    label_69:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[95] = jj_gen;
        break label_69;
      }
      jj_consume_token(S);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCLUDES:
    case DASHMATCH:
    case PREFIXMATCH:
    case SUFFIXMATCH:
    case SUBSTRINGMATCH:
    case EQ:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
                     add(t);
        break;
      case INCLUDES:
        t = jj_consume_token(INCLUDES);
                           add(t);
        break;
      case DASHMATCH:
        t = jj_consume_token(DASHMATCH);
                            add(t);
        break;
      case PREFIXMATCH:
        t = jj_consume_token(PREFIXMATCH);
                              add(t);
        break;
      case SUFFIXMATCH:
        t = jj_consume_token(SUFFIXMATCH);
                              add(t);
        break;
      case SUBSTRINGMATCH:
        t = jj_consume_token(SUBSTRINGMATCH);
                                 add(t);
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_70:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[97] = jj_gen;
          break label_70;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        t = jj_consume_token(IDENT);
                        add(t);
        break;
      case STRING:
        t = jj_consume_token(STRING);
                         add(t);
        break;
      default:
        jj_la1[98] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_71:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[99] = jj_gen;
          break label_71;
        }
        jj_consume_token(S);
      }
      break;
    default:
      jj_la1[100] = jj_gen;
      ;
    }
    t = jj_consume_token(RBRACKET);
                   add(t);
  }

  final public void negation() throws ParseException {
    // S* negation_arg S* ')'
        // type_selector | universal | HASH | class | attrib | pseudo
    
        t = jj_consume_token(FUNCTIONNOT);
                       add(t);
    label_72:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[101] = jj_gen;
        break label_72;
      }
      jj_consume_token(S);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
    case ANY:
    case 98:
      element_name();
      break;
    case HASHIDENT:
    case HASH:
      hash();
      break;
    case LENGTH:
    case EMS:
    case EXS:
    case ANGLE:
    case TIME:
    case FREQ:
    case RESOLUTION:
    case DIMEN:
    case CLASS:
      _class();
      break;
    case LBRACKET:
      attrib();
      break;
    case COLON:
    case PSEUDOELEMENT_SYM:
      pseudo();
      break;
    case FUNCTIONNOT:
      negation();
      break;
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_73:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[103] = jj_gen;
        break label_73;
      }
      jj_consume_token(S);
    }
    t = jj_consume_token(LPARAN);
                  add(t);
  }

  final public void pseudo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PSEUDOELEMENT_SYM:
      t = jj_consume_token(PSEUDOELEMENT_SYM);
                             add(t);
      t = jj_consume_token(IDENT);
                        add(t);
      break;
    case COLON:
      t = jj_consume_token(COLON);
                 add(t);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        t = jj_consume_token(IDENT);
                        add(t);
        break;
      case FUNCTIONLANG:
      case FUNCTION:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTIONLANG:
          t = jj_consume_token(FUNCTIONLANG);
                                    add(t);
          label_74:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case S:
              ;
              break;
            default:
              jj_la1[104] = jj_gen;
              break label_74;
            }
            jj_consume_token(S);
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUMBER:
            t = jj_consume_token(NUMBER);
                                 add(t);
            break;
          case IDENT:
            t = jj_consume_token(IDENT);
                                add(t);
            break;
          case STRING:
            t = jj_consume_token(STRING);
                                 add(t);
            break;
          default:
            jj_la1[105] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_75:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case S:
              ;
              break;
            default:
              jj_la1[106] = jj_gen;
              break label_75;
            }
            jj_consume_token(S);
          }
          break;
        case FUNCTION:
          t = jj_consume_token(FUNCTION);
                                add(t);
          label_76:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case S:
              ;
              break;
            default:
              jj_la1[107] = jj_gen;
              break label_76;
            }
            jj_consume_token(S);
          }
          expression();
          break;
        default:
          jj_la1[108] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        t = jj_consume_token(LPARAN);
                     add(t);
        break;
      default:
        jj_la1[109] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[110] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void hash() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HASHIDENT:
      t = jj_consume_token(HASHIDENT);
                    add(t);
      break;
    case HASH:
      t = jj_consume_token(HASH);
               add(t);
      break;
    default:
      jj_la1[111] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void mediadeclaration() throws ParseException {
    property();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
              add(": ");
      label_77:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[112] = jj_gen;
          break label_77;
        }
        jj_consume_token(S);
      }
      expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORTANT_SYM:
        prio();
        break;
      default:
        jj_la1[113] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[114] = jj_gen;
      ;
    }
  }

  final public void declaration() throws ParseException {
    property();
    jj_consume_token(COLON);
          add(": ");
    label_78:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[115] = jj_gen;
        break label_78;
      }
      jj_consume_token(S);
    }
    expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORTANT_SYM:
      prio();
      break;
    default:
      jj_la1[116] = jj_gen;
      ;
    }
  }

  final public void prio() throws ParseException {
    t = jj_consume_token(IMPORTANT_SYM);
                         add(t);
    label_79:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[117] = jj_gen;
        break label_79;
      }
      jj_consume_token(S);
    }
  }

  final public void expression() throws ParseException {
    label_80:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
                       add(t);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
                        add(t);
        break;
      case NUMBER:
        t = jj_consume_token(NUMBER);
                         add(t);
        break;
      case DIMEN:
        t = jj_consume_token(DIMEN);
                        add(t);
        break;
      case STRING:
        t = jj_consume_token(STRING);
                         add(t);
        break;
      case IDENT:
        t = jj_consume_token(IDENT);
                        add(t);
        break;
      default:
        jj_la1[118] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_81:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[119] = jj_gen;
          break label_81;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case STRING:
      case IDENT:
      case MINUS:
      case DIMEN:
      case NUMBER:
        ;
        break;
      default:
        jj_la1[120] = jj_gen;
        break label_80;
      }
    }
  }

  final public void expr() throws ParseException {
    term();
    label_82:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case COMMA:
      case STRING:
      case IDENT:
      case HASHIDENT:
      case HASH:
      case MINUS:
      case DIV:
      case URL:
      case LENGTH:
      case EMS:
      case EXS:
      case ANGLE:
      case TIME:
      case FREQ:
      case RESOLUTION:
      case DATE:
      case DIMEN:
      case PERCENTAGE:
      case NUMBER:
      case UNICODERANGE:
      case FUNCTION:
        ;
        break;
      default:
        jj_la1[121] = jj_gen;
        break label_82;
      }
      operator();
      term();
    }
  }

  final public void term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case LENGTH:
    case EMS:
    case EXS:
    case ANGLE:
    case TIME:
    case FREQ:
    case RESOLUTION:
    case DATE:
    case DIMEN:
    case PERCENTAGE:
    case NUMBER:
    case FUNCTION:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        unaryOperator();
        break;
      default:
        jj_la1[122] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        t = jj_consume_token(NUMBER);
                         add(t);
        break;
      case PERCENTAGE:
        t = jj_consume_token(PERCENTAGE);
                             add(t);
        break;
      case LENGTH:
        t = jj_consume_token(LENGTH);
                         add(t);
        break;
      case EMS:
        t = jj_consume_token(EMS);
                      add(t);
        break;
      case EXS:
        t = jj_consume_token(EXS);
                      add(t);
        break;
      case ANGLE:
        t = jj_consume_token(ANGLE);
                        add(t);
        break;
      case TIME:
        t = jj_consume_token(TIME);
                       add(t);
        break;
      case FREQ:
        t = jj_consume_token(FREQ);
                       add(t);
        break;
      case RESOLUTION:
        t = jj_consume_token(RESOLUTION);
                             add(t);
        break;
      case DATE:
        t = jj_consume_token(DATE);
                       add(t);
        break;
      case DIMEN:
        t = jj_consume_token(DIMEN);
                        add(t);
        break;
      case FUNCTION:
        function();
        break;
      default:
        jj_la1[123] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_83:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[124] = jj_gen;
          break label_83;
        }
        jj_consume_token(S);
      }
      break;
    case STRING:
    case IDENT:
    case HASHIDENT:
    case HASH:
    case URL:
    case UNICODERANGE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        t = jj_consume_token(STRING);
                         add(t);
        break;
      case IDENT:
        t = jj_consume_token(IDENT);
                        add(t);
        break;
      case HASHIDENT:
      case HASH:
        hexcolor();
        break;
      case URL:
        t = jj_consume_token(URL);
                      add(t);
        break;
      case UNICODERANGE:
        t = jj_consume_token(UNICODERANGE);
                               add(t);
        break;
      default:
        jj_la1[125] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_84:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[126] = jj_gen;
          break label_84;
        }
        jj_consume_token(S);
      }
      break;
    default:
      jj_la1[127] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void function() throws ParseException {
    t = jj_consume_token(FUNCTION);
                   add(t);
    label_85:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[128] = jj_gen;
        break label_85;
      }
      jj_consume_token(S);
    }
    expr();
    jj_consume_token(LPARAN);
          add(")");
  }

  final public void hexcolor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HASHIDENT:
      t = jj_consume_token(HASHIDENT);
                        add(t);
      break;
    case HASH:
      t = jj_consume_token(HASH);
                   add(t);
      break;
    default:
      jj_la1[129] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  String skipStatement() throws ParseException {
    StringBuilder s = new StringBuilder ();
    Token tok = getToken(0);
    boolean first = true;

    if ( tok.image != null) {


        s.append(tok.image);
    }
    /* FIXME here, two option, we skip during an error, or outside
    an error, currently both can fail with a TokenMgrError, should
    we catch all, or only when filling message for errors?
    
    -> taking the "always skip" approach.
     */


    while (true) {


        try {


            tok = getToken(1);
            if ( tok.kind == EOF) {


                if (first) {


                    return null;
                } else {


                    break;
                }
            }
            s.append(tok.image);
            if ( tok.kind == LBRACE) {


                getNextToken();
                s.append(skip_to_matching_brace());
                getNextToken();
                tok = getToken(1);
                break;
            } else if ( (tok.kind == RBRACE) || (tok.kind == SEMICOLON)) {


                getNextToken();
                tok = getToken(1);
                break;
            }
            getNextToken();
        } catch ( TokenMgrError tokenerror ) {


            // read one char at a time, and loop
            try {


                s.append(jj_input_stream.readChar());
                continue;
            } catch ( java.io.IOException ioex ) {


                return s.toString().trim();
            }
        }
        first = false;
    }

    // skip white space
    while ( tok.kind == S) {


        getNextToken();
        tok = getToken(1);
    }
    String statement = s.toString().trim();
    return statement;
  }

  String skip_to_matching_brace() throws ParseException {
    StringBuilder s = new StringBuilder ();
    Token tok;
    int nesting = 1;
    /* FIXME
    same as above */


    while (true) {


        tok = getToken(1);
        if ( tok.kind == EOF) {


            break;
        }
        s.append(tok.image);
        if ( tok.kind == LBRACE) {


            nesting++;
        } else if ( tok.kind == RBRACE) {


            nesting--;
            if ( nesting == 0) {


                break;
            }
        }
        getNextToken();
    }
    return s.toString();
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    if (jj_scan_token(98)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(ANY)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public CSS3ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[130];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0xe00000,0xe00000,0x0,0x0,0x200000,0x200000,0x0,0xc00000,0xc00000,0x200000,0x200000,0x200000,0x0,0x0,0x200000,0x200000,0x200000,0x0,0x200000,0x20000000,0x200000,0x0,0x200000,0x200000,0x200000,0x0,0x20000000,0x200000,0x80000000,0x200000,0x200000,0x200000,0x200000,0x0,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x0,0x0,0x200000,0x200000,0x0,0x0,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x20000000,0x200000,0x20000000,0x58000000,0x200000,0x200000,0x58200000,0x8000000,0x200000,0x20000000,0x200000,0x200000,0x200000,0x0,0x0,0x200000,0x0,0x58200000,0x200000,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x200000,0x3000000,0x200000,0x0,0x200000,0x3000000,0x200000,0x0,0x200000,0x200000,0x0,0x200000,0x200000,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x200000,0x0,0x200000,0x8000000,0x200000,0x8000000,0x28000000,0x8000000,0x0,0x200000,0x0,0x200000,0x8000000,0x200000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5fc8a01c,0x0,0x0,0x0,0x0,0x0,0x4,0x200001,0x0,0x0,0x0,0x200001,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5fc8a01c,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x1000,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x4,0x800,0x0,0x4,0x0,0x0,0x0,0x5fc82018,0x5fc82018,0x5fc82018,0x5fc82018,0x5fc8a01c,0x5fc00000,0x5fc00000,0x8004,0x8004,0x8004,0x0,0x0,0x3c0,0x0,0x5,0x0,0x3c0,0x0,0x5fc8a01c,0x0,0x0,0x5,0x0,0x0,0x0,0x4,0x80000,0x18,0x0,0x0,0x80000,0x0,0x0,0x0,0x40000405,0x0,0x40000405,0xffe0141d,0x400,0xffc00000,0x0,0x20001d,0x0,0xffe0041d,0x0,0x18,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x8,0x0,0x0,0x10,0x20,0x0,0x0,0x500107c4,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x50000004,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7800,0x7800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x50000004,0x50000004,0x50000004,0x50000004,0x50000004,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x50000004,0x0,0x0,0x1,0x0,0x0,0xa0000000,0xa0000000,0x4,0x0,0x0,0x2,0x0,0x0,0x2,0x0,0x1,0x0,0x1,0x88000001,0x0,0x80000001,0x0,0x8000000,0x0,0x88000001,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CSS3Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CSS3Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CSS3ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 130; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 130; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CSS3Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CSS3ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 130; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 130; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CSS3Parser(CSS3ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 130; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CSS3ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 130; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[99];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 130; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 99; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
