/* Generated By:JavaCC: Do not edit this line. JsonParser.java */
package beauty.parsers.json;

import java.io.*;
import java.util.*;

public class JsonParser implements JsonParserConstants {
    Token t;

    // shouldn't use this, a specific line separator should be set based on
    // buffer settings.  Of course, it may be the same as what the buffer
    // uses anyway.
    String lineSep = System.getProperty("line.separator");

    public void setIndentWidth(int i) {
        token_source.setIndentWidth(i);
    }

    public void setTabSize(int size) {
        jj_input_stream.setTabSize(size);
    }

    public int getTabSize() {
        // this really isn't necessary for this beautifier.  Setting the tab
        // size on the input stream makes the token locations more accurate
        // is all.
        return jj_input_stream.getTabSize(0);
    }

    public void setUseSoftTabs(boolean b) {
        token_source.setUseSoftTabs(b);
    }

    /**
     * @return The beautified text.    
     */
    public String getText() {
        return token_source.getText();
    }

    public void resetTokenSource() {
        token_source.reset();
    }

    private void add(Token t) {
        token_source.add(t);
    }

    private void add(String s) {
        token_source.add(s);
    }

    private void trim() {
        token_source.trim();
    }

    private void trimWhitespace() {
        token_source.trimWhitespace();
    }

    private void write() {
        token_source.write();
    }

    private void writeln() {
        token_source.writeln();
    }

    public void setLineSeparator(String le) {
        lineSep = le;
        token_source.setLineSeparator(le);
    }

    public static void main(String args[]) {
        JsonParser parser;
        if (args.length == 0) {
            System.out.println("JSON Parser:  Reading from standard input . . .");
            parser = new JsonParser(System.in);
        } else if (args.length == 1) {
            System.out.println("JSON Parser:  Reading from file " + args[0] + " . . .");
            try {
                parser = new JsonParser(new java.io.FileInputStream(args[0]));
            } catch (java.io.FileNotFoundException e) {
                System.out.println("JSON Parser:  File " + args[0] + " not found.");
                return;
            }
        } else {
            System.out.println("JSON Parser:  Usage is one of:");
            System.out.println("         java JsonParser < inputfile");
            System.out.println("OR");
            System.out.println("         java JsonParser inputfile");
            return;
        }
        try {
            parser.enable_tracing();
            parser.parse();
            System.out.println("JSON Parser:  JSON input parsed successfully.");
        } catch (ParseException e) {
            System.out.println("JSON Parser:  Encountered errors during parse.");
            System.out.println(e.getMessage());
        }
    }

/*******************************************************************************

JSON grammar starts here

*******************************************************************************/
  final public void parse() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      object();
      jj_consume_token(0);
      break;
    case LSQUARE:
      array();
      jj_consume_token(0);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        write();
  }

/*
    Objects are formatted like this:
    {
        (members())*
    }
    
    The left brace triggers an indent level increase, for the object members. 
    The right brace a corresponding indent level decrease.
*/
  final public void object() throws ParseException {
    jj_consume_token(LBRACE);
        writeln();
        add("{");
        writeln();
        ++token_source.level;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      members();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    t = jj_consume_token(RBRACE);
        writeln();
        --token_source.level;
        add("}");
        if (t.next != null && t.next.kind != JsonParserConstants.COMMA)
            writeln();
  }

/*
    Arrays are formatted like this:
    [ element(, element...) ]
    
    Note that if an element is an object, it will look like this:
    [
        {
            ...
        }
    ]
    
*/
  final public void array() throws ParseException {
    jj_consume_token(LSQUARE);
        add("[");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
    case LSQUARE:
    case TRUE:
    case FALSE:
    case NULL:
    case STRING:
    case NUMBER:
      elements();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(RSQUARE);
        add("]");
  }

/*
    A member is a pair of one more key/value.
    Pairs are separated by a comma.
    Comma signals a newline to be inserted.
    A member is formatted like this:
    
    key: value(, key: value...)
*/
  final public void members() throws ParseException {
    key();
    jj_consume_token(COLON);
                    add(": ");
    value();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
                                                     trimWhitespace(); add(", "); writeln();
      members();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

/*
    Elements are members of an array.
    Elements are one or more values separated by commas.
    Elements do not trigger insertion of newlines nor change of indent level.
*/
  final public void elements() throws ParseException {
    value();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
                        add(", ");
      elements();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

/*
    A value is the RHS of a pair.  It can be pretty much any of the
    other types.
*/
  final public void value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      string();
      break;
    case NUMBER:
      number();
      break;
    case LBRACE:
      object();
      break;
    case LSQUARE:
      array();
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
                    add(t);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                     add(t);
      break;
    case NULL:
      t = jj_consume_token(NULL);
                   add(t);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
    A key is the LHS of a pair.  It is a simple string.
*/
  final public void key() throws ParseException {
    t = jj_consume_token(STRING);
                     add(t);
  }

/*
    A string is a string, and it's the same as a key.
*/
  final public void string() throws ParseException {
    t = jj_consume_token(STRING);
                     add(t);
  }

/*
    A number is a number.
*/
  final public void number() throws ParseException {
    t = jj_consume_token(NUMBER);
                     add(t);
  }

  /** Generated Token Manager. */
  public JsonParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x140,0x10000,0x37140,0x400,0x400,0x37140,};
   }

  /** Constructor with InputStream. */
  public JsonParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JsonParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JsonParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public JsonParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new JsonParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public JsonParser(JsonParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JsonParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[18];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 18; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
