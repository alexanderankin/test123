/* Generated By:JavaCC: Do not edit this line. JavaParserTokenManager.java */
package beauty.parsers.java;
import java.io.*;
import java.util.*;

/** Token Manager. */
public class JavaParserTokenManager implements JavaParserConstants
{
    // line buffer, text is accumulated here, then written to the output stream
    // on end of line marker.
    static StringBuilder b = new StringBuilder();

    // all text is accumulated here.  When processing is complete, this buffer
    // will contain the final beautified text.
    static StringBuilder outputBuffer = new StringBuilder();

    // accumulate pieces a token or string at a time.  The objects in this array
    // will be ocnverted to strings, padded as appropriate, and added to the
    // line buffer b.  This is the "accumulator".
    static ArrayList a = new ArrayList();

    // where to write the completely beautified code.
    private static PrintWriter out = null;

    // level of indentation
    static int level = 0;

    // width of indent
    static int indent_width = 4;
    static String indent = "    ";
    static String double_indent = indent + indent;

    // the soft tab setting from jEdit, use soft tabs by default.
    static boolean useSoftTabs = true;

    // line separator, defaults to system line separator, but can be set to
    // a specific separator
    static String ls = System.getProperty("line.separator");

    // a non-printable, non-typeable character to represent a non-breaking space
    static char nbsp = '\u001d';

    static int bracketStyle = JavaParser.ATTACHED;
    static boolean breakElse = false;
    static boolean padParens = false;

    static void reset() {
        b = new StringBuilder();
        outputBuffer = new StringBuilder();
        a.clear();
        level = 0;
    }

    static String getText() {
        return outputBuffer.toString();
    }

    static void setLineSeparator(String le) {
        ls = le;
    }

    static void setBracketStyle(int style) {
        bracketStyle = style;
    }

    static void setIndentWidth(int w) {
        indent_width = w;
        if (indent_width <= 0) {
            indent_width = 4;
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < w; i++) {
            sb.append(' ');
        }
        indent = sb.toString();
        double_indent = indent + indent;
    }

    static void setUseSoftTabs(boolean b) {
        useSoftTabs = b;
        if (b) {
            setIndentWidth(indent_width);
        }
        else {
            indent = "\u005ct";
            double_indent = "\u005ct\u005ct";
        }
    }

    static void setBreakElse(boolean b) {
        breakElse = b;
    }

    static void setPadParens(boolean pad) {
        padParens = pad;
    }

    // add a token to the accumulator
    static void add(Token t) {
        if (t != null) {
            a.add(t);
        }
    }

    // add a string to the accumulator
    static void add(String s) {
        if (s != null) {
            a.add(s);
        }
    }

    // trim spaces from the last item in the accumulator
    static void trim() {
        if (a.size() == 0)
            return;
        Object o = a.get(a.size() - 1);
        StringBuilder sb = new StringBuilder();
        if (o instanceof Token)
            sb.append( ((Token)o).image );
        else
            sb.append((String)o);
        while(sb.length() > 0 && sb.charAt(sb.length() - 1) == ' ')
            sb.deleteCharAt(sb.length() - 1);
        a.set(a.size() - 1, sb.toString() );
    }

    // trim a single new line from the end of the output buffer
    // return true if a line ender was removed
    static boolean trimNL() {
        boolean trimmed = false;
        if(outputBuffer.length() > 0 && outputBuffer.charAt(outputBuffer.length() - 1) == '\u005cn') {
            outputBuffer.deleteCharAt(outputBuffer.length() - 1);
            trimmed = true;
        }
        if(outputBuffer.length() > 0 && outputBuffer.charAt(outputBuffer.length() - 1) == '\u005cr') {
            outputBuffer.deleteCharAt(outputBuffer.length() - 1);
            trimmed = true;
        }
        return trimmed;
    }

    static void trimNLs() {
        while(trimNL());
    }

    // trim all \n and/or \r from the end of the given string
    static void trimNL(String s) {
        StringBuilder sb = new StringBuilder(s);
        while(sb.length() > 0 && (sb.charAt(sb.length() - 1) == '\u005cr' || sb.charAt(sb.length() - 1) == '\u005cn'))
            sb.deleteCharAt(sb.length() - 1);
    }

    // trim all whitespace (\r, \n, space, \t) from the start of the given string
    static String trimStart(String s) {
        StringBuilder sb = new StringBuilder(s);
        while(sb.length() > 0 && Character.isWhitespace(sb.charAt(0))) {
            sb.deleteCharAt(0);
        }
        return sb.toString();
    }

    // trim up to max whitespace (\r, \n, space, \t) from the start of the given string
    static String trimStart(String s, int max) {
        StringBuilder sb = new StringBuilder(s);
        int trimmed = 0;
        while(sb.length() > 0 && Character.isWhitespace(sb.charAt(0)) && trimmed < max) {
            sb.deleteCharAt(0);
            ++trimmed;
        }
        return sb.toString();
    }

    // trims whitespace (\r, \n, space, \t) from the last items in the
    // accumulator.  If the last item is all whitespace, continues on to the
    // previous until a non-whitespace character is encountered.  If the
    // entire accumulator is whitespace, continues to trim whitespace from the
    // outputBuffer.
    static void trimWhitespace() {
        for (int i = a.size() - 1; i >= 0; i-- ) {
            Object o = a.get(i);
            StringBuilder sb = new StringBuilder();
            if (o instanceof Token)
                sb.append( ((Token)o).image );
            else
                sb.append((String)o);
            while(sb.length() > 0 && (Character.isWhitespace(sb.charAt(sb.length() - 1)))) {
                sb.deleteCharAt(sb.length() - 1);
            }
            if (sb.length() == 0) {
                a.remove(i);
            }
            else {
                a.set(i, sb.toString());
                break;
            }
        }
        if (a.size() == 0) {
            while(outputBuffer.length() > 0 && (Character.isWhitespace(outputBuffer.charAt(outputBuffer.length() - 1)))) {
                outputBuffer.deleteCharAt(outputBuffer.length() - 1);
            }
        }
    }

    // writes the contents of the accumulator to the outputBuffer.  The line
    // buffer (b) is used to build the line.
    static void write() {
        try {
            b.setLength(0); // clear the line buffer

            // this next section builds the output string while protecting
            // string literals.  All extra spaces are removed from the output
            // string, except that string literals are left as is.
            ArrayList list = new ArrayList();
            String s = new String("");
            for (int i = 0; i < a.size(); i++) {
                Object o = a.get(i);
                if (o instanceof Token) {
                    Token token = (Token)o;
                    if (token.kind == JavaParserConstants.STRING_LITERAL) {
                        s = s.replaceAll("[ ]+", " ");
                        list.add(s);
                        s = new String("");
                        list.add(token.image);
                    }
                    else {
                        s += ((Token)o).image;
                        s = s.replaceAll("[ ]+", " ");
                    }
                }
                else {
                    s += (String)o;
                    // replace all non-breaking space chars with actual spaces
                    s = s.replaceAll("[\u001d]", " ");
                    s = s.replaceAll("[ ]+", " ");
                }
            }
            for (int i = 0; i < list.size(); i++) {
                b.append((String)list.get(i));
            }

            b.append(s);
            s = b.toString();


            // check for blank line(s)
            String maybe_blank = new String(s);
            if (maybe_blank.trim().length() == 0) {
                // yep, it's a blank, so just print it out
                if (s.length() >= ls.length()) {
                    s = s.substring(0, s.length() - ls.length());
                }
                s = s.replaceAll(" ", "");
                s = s.replaceAll("\u005ct", "");
                outputBuffer.append(s);
                a.clear();
                return;
            }

            // indent --
            // most lines get indented, but there are a few special cases:
            // "else" gets put on the same line as the closing "}" for the "if",
            // so don't want to indent.  Similarly with "catch" and "finally".
            // The "while" at the end of a "do" loop is marked as "^while" to
            // differentiate it from a regular "while" block. "else if" is also
            // a special case.
            if (!s.startsWith(" else")
                    && !s.startsWith(" catch")
                    && !s.startsWith(" finally")
                    && !s.startsWith(" ^while")
                    && !s.startsWith(" {")
                    && (!endsWith(outputBuffer, "else") && !endsWith(outputBuffer, "else "))) {
                s = s.trim();
                for (int i = 0; i < level; i++) {
                    s = indent + s;
                }
            }

            // maybe clean out the ^ from the specially marked "while" at the
            // end of a "do" loop
            if (s.startsWith(" ^while")) {
                b.deleteCharAt(1);
                s = b.toString();
            }

            // check if the output buffer does NOT end with a new line.  If it
            // doesn't, remove any leading whitespace from this line
            if (!endsWith(outputBuffer, "\u005cn") && !endsWith(outputBuffer, "\u005cr")) {
                s = trimStart(s);
            }

            // check that there aren't extra spaces in the buffer already --
            // this handles the case where the output buffer ends with a space
            // and the new string starts with a space, don't want 2 spaces.
            if (s.startsWith(" ") && endsWith(outputBuffer, " ")) {
                s = s.substring(1);
            }

            // check that there is one space between the end of the output
            // buffer and this line -- this handles the case where the output
            // buffer does not end in a space and the new string does not start
            // with a space, want one space in between, unless, of course, the
            // next character is ;.
            if (!s.startsWith(" ") && !s.startsWith(";")
                    && !endsWith(outputBuffer, " ")
                    && !endsWith(outputBuffer, "\u005cr")
                    && !endsWith(outputBuffer, "\u005cn")
                    && outputBuffer.length() > 0) {
                outputBuffer.append(" ");
            }

            // by the Sun standard, there is no situation where '(' is followed
            // by a space or ')' is preceded with by a space
            // -- Java 7 update: in "try with resources" there might be whitespace
            // before the last')'. I'm marking these as "^)".
            String startParen = padParens ? "( " : "(";
            String endParen = padParens ? " )" : ")";
            s = s.replaceAll("[(][ ]", startParen);
            s = s.replaceAll("[ ][)]", endParen);
            s = s.replaceAll("[(]\u005c\u005cs+[)]", "()");
            s = s.replaceAll("[\u005c\u005c^][)]", ")");

            // there should be no situation where a comma is preceded by a space,
            // although that seems to happen when formatting string arrays.
            s = s.replaceAll("\u005c\u005cs+[,]", ",");

            // there should be no situation where a semi-colon is preceded by a space.
            s = s.replaceAll("\u005c\u005cs+[;]", ";");

            // finally! add the string to the output buffer
            // check for line length, may need to wrap.  Sun says to avoid lines
            // longer than 80 characters.  This doesn't work well yet, so I've 
            // commented out the wrapping code.  Still need to clean out the
            // wrapping markers.
            //s = s.replaceAll("[]", "");
            outputBuffer.append(s);
            /*
            int wrap_sep_count = countWrapSep(s);
            if (s.length() - wrap_sep_count > 80) {
                String[] lines = wrapLines(s);
                if ( lines != null ) {
                    for (int i = 0; i < lines.length; i++) {
                        outputBuffer.append(lines[i]).append(ls);
                    }
                }
                else {
                    // whack any remaining  characters
                    s = s.replaceAll("[]", "");
                    outputBuffer.append(s);
                }
            }
            else {
                // whack any remaining  characters
                s = s.replaceAll("[]", "");
                outputBuffer.append(s);
            }
            */
            // clear the accumulator for the next line
            a.clear();
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }

    static void writeln() {
        write();
        trimNL();
        outputBuffer.append(ls);
    }

    static int countWrapSep(String s) {
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '\u001c') {
                ++count;
            }
        }
        return count;
    }

    // needs work, does a wrap, but not per spec
    static String[] wrapLines(String s) {
        if (s.length() <= 80) {
            return new String[]{s};
        }
        int wc = countWrapSep(s);
        if (wc > 0) {
            int[] break_points = new int[wc];
            int offset = 0;
            for (int i = 0; i < wc; i++) {
                int index = s.indexOf('\u001c', offset);
                break_points[i] = index;
                offset = index + 1;
            }

            int first_break = -1;
            for (int i = 0; i < break_points.length; i++) {
                int possible = break_points[i];
                if (possible > 80) {
                    break;
                }
                first_break = possible;
            }
            if ( first_break == -1 ) {
                first_break = s.length();
            }

            int ws_length = 0;
            for (int i = 0; i < s.length(); i++) {
                if (s.charAt(i) == ' ')
                    ++ws_length;
                else
                    break;
            }
            String leading_ws = s.substring(0, ws_length);
            String head = s.substring(0, first_break);
            String tail = s.substring(first_break);
            //head = head.replaceAll("[]", "");
            //tail = tail.replaceAll("[]", "");
            return new String[]{head, leading_ws + double_indent + tail};
        }
        return null;
    }

    // StringBuilder doesn't have an "endsWith" method
    static boolean endsWith(StringBuilder sb, String s) {
        if (sb == null && s == null)
            return true;
        if (sb == null && s != null)
            return false;
        if (sb.length() < s.length())
            return false;
        String end = sb.substring(sb.length() - s.length());
        return end.equals(s);
    }

    static void writeJavadocComment(String s) {
        String[] lines = s.split(ls);

        // indent the first line.  It won't have any leading whitespace, but
        // may have trailing whitespace
        String line = lines[0].trim();
        for (int j = 0; j < level; j++) {
            line = indent + line;       // 4 spaces
        }
        outputBuffer.append(line);

        // handle the remaining lines, put stars in front of them.
        // TODO: this needs work.  Need to preserve whitespace after
        // the star.
        for (int i = 1; i < lines.length; i++) {
            outputBuffer.append(ls);
            line = lines[i].trim();

            // apply padding. All javadoc lines start with a *.
            if (line.startsWith("*")) {
                line = " " + line;
            }
            else {
                line = " * " + line;
            }

            // apply indenting. The Sun rule is 4 spaces.
            for (int j = 0; j < level; j++) {
                line = indent + line;
            }

            outputBuffer.append(line);
        }
    }

    // comments of the /* ... */ variety.  This sort of comment is commonly
    // used to "comment out" a block of code, so I don't want to modify the
    // existing indenting within the block.
    static void writeBlockComment(String s) {
        String[] lines = s.split(ls);

        // indent the first line.  It won't have any leading whitespace, but
        // may have trailing whitespace
        String line = lines[0].trim();
        for (int j = 0; j < level; j++) {
            line = indent + line;
        }
        outputBuffer.append(line);

        // output body of comment without change
        for (int i = 1; i < lines.length - 1; i++) {
            outputBuffer.append(ls);
            line = lines[i];    // trimStart(lines[i], level * 4);
            outputBuffer.append(line);
        }

        // output the last line.  It will probably have leading whitespace, so
        // trim it then indent it the same as the first line.
        if (lines.length > 1) {
            outputBuffer.append(ls);
            line = lines[lines.length - 1].trim();
            for (int j = 0; j < level; j++) {
                line = indent + line;
            }
            outputBuffer.append(line);
        }
    }


    // handle comments like this one
    static void writeEndOfLineComment(String s) {
        String line = s.trim();
        if (line.startsWith("//")) {
            java.util.regex.Pattern p = java.util.regex.Pattern.compile("(//+)(.*?)");
            java.util.regex.Matcher m = p.matcher(line);
            if (m.matches()) {
                String start = m.group(1);
                line = m.group(2).trim();
                line = start + " " + line;
            }
        }
        for (int j = 0; j < level; j++) {
            line = indent + line;
        }
        outputBuffer.append(line).append(ls);
    }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x402000000000L) != 0L)
            return 73;
         if ((active1 & 0x40000000040000L) != 0L)
            return 10;
         if ((active0 & 0x3ffffffffffffe00L) != 0L)
         {
            jjmatchedKind = 71;
            return 40;
         }
         return -1;
      case 1:
         if ((active0 & 0x3ffffffeff9ffe00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 1;
            }
            return 40;
         }
         if ((active0 & 0x100600000L) != 0L)
            return 40;
         return -1;
      case 2:
         if ((active0 & 0x3bfffecebfdffe00L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 2;
            }
            return 40;
         }
         if ((active0 & 0x400013040000000L) != 0L)
            return 40;
         return -1;
      case 3:
         if ((active0 & 0xa20024081816000L) != 0L)
            return 40;
         if ((active0 & 0x31dffcae3e5e9e00L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 3;
            return 40;
         }
         return -1;
      case 4:
         if ((active0 & 0x111b7cae02580e00L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 4;
            }
            return 40;
         }
         if ((active0 & 0x20c480003c069000L) != 0L)
            return 40;
         return -1;
      case 5:
         if ((active0 & 0x11121c2a12180a00L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 5;
            return 40;
         }
         if ((active0 & 0x89608400400400L) != 0L)
            return 40;
         return -1;
      case 6:
         if ((active0 & 0x1112102a00080200L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 6;
            return 40;
         }
         if ((active0 & 0xc0012100800L) != 0L)
            return 40;
         return -1;
      case 7:
         if ((active0 & 0x1002000000080200L) != 0L)
            return 40;
         if ((active0 & 0x110102a00000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 7;
            return 40;
         }
         return -1;
      case 8:
         if ((active0 & 0x10000a00000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 8;
            return 40;
         }
         if ((active0 & 0x100102000000000L) != 0L)
            return 40;
         return -1;
      case 9:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 9;
            return 40;
         }
         if ((active0 & 0xa00000000L) != 0L)
            return 40;
         return -1;
      case 10:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 10;
            return 40;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000L);
      case 37:
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000L);
      case 38:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800080000000L);
      case 40:
         return jjStopAtPos(0, 74);
      case 41:
         return jjStopAtPos(0, 75);
      case 42:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L);
      case 43:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80100000000L);
      case 44:
         return jjStopAtPos(0, 81);
      case 45:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100200000000L);
      case 46:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000000L);
      case 47:
         jjmatchedKind = 101;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000L);
      case 58:
         return jjStopAtPos(0, 89);
      case 59:
         return jjStopAtPos(0, 80);
      case 60:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x408040008000000L);
      case 61:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000L);
      case 62:
         jjmatchedKind = 121;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1b0000010000000L);
      case 63:
         return jjStopAtPos(0, 88);
      case 64:
         return jjStopAtPos(0, 83);
      case 91:
         return jjStopAtPos(0, 78);
      case 93:
         return jjStopAtPos(0, 79);
      case 94:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x600L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x3800L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xfc000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x700000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x3800000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x7c000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3f00000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x38000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x3c0000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1f800000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x7e0000000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1800000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 76);
      case 124:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000040000000L);
      case 125:
         return jjStopAtPos(0, 77);
      case 126:
         return jjStopAtPos(0, 87);
      default :
         return jjMoveNfa_0(6, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         break;
      case 43:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         break;
      case 45:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000000000L);
      case 60:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000000L);
      case 61:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 112);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 113);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 114);
         break;
      case 62:
         if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xb0000000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4800400c000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x410000100000L, active1, 0L);
      case 102:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 32, 40);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x20e0800000010000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x20820000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x3801000000L, active1, 0L);
      case 111:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x18000040c04c0800L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x700180000001000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4220000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000002000L, active1, 0L);
      case 124:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(2, 118);
         break;
      case 61:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(2, 115);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(2, 116);
         break;
      case 62:
         if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x101000000030000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2828080000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000020004000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x100040180c0000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x900020000800L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000600000000L, active1, 0L);
      case 114:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0xc2000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800804600L, active1, 0L);
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40a08200a000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000001400000L, active1, 0L);
      case 119:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 40);
         break;
      case 121:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 58, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(3, 117);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000038101000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000008000L, active1, 0L);
      case 100:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 40);
         break;
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 40);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 40);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 40);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x4002002000400L, active1, 0L);
      case 103:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 40);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2008000000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000200200000800L, active1, 0L);
      case 109:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 40);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000400000000L, active1, 0L);
      case 114:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x4060000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x9100800080200L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0800000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0xa000000000000L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 40);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x100200000800L);
      case 104:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1200000080000L);
      case 107:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 40);
         break;
      case 108:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x10400000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 114:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x402400000600L);
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 40);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 40);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      case 119:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0xa00L);
      case 99:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 40);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 40);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 40);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L);
      case 104:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 40);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1100000000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x10100000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x800080000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L);
      case 115:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 40);
         break;
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 40);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x2080000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000200L);
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 40);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000200000000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L);
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 40);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 40);
         break;
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 121:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 40);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 40);
         return jjMoveStringLiteralDfa8_0(active0, 0x100800000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x110000200000000L);
      case 112:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 40);
         break;
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 9, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 44, 40);
         break;
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 37, 40);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L);
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 56, 40);
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 35, 40);
         break;
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(9, 33, 40);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 52, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 91;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 73:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(86, 87);
                  else if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 12);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAddStates(13, 16);
                  }
                  else if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  else if (curChar == 47)
                     jjAddStates(20, 22);
                  else if (curChar == 36)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(40);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(23, 25);
                  else if (curChar == 39)
                     jjAddStates(26, 27);
                  else if (curChar == 46)
                     jjCheckNAdd(10);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAddTwoStates(7, 8);
                  }
                  else if (curChar == 13)
                     jjCheckNAddTwoStates(69, 2);
                  else if (curChar == 48)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAddStates(28, 31);
                  }
                  else if (curChar == 9)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAdd(5);
                  }
                  else if (curChar == 32)
                  {
                     if (kind > 4)
                        kind = 4;
                     jjCheckNAdd(4);
                  }
                  break;
               case 0:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 1:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddTwoStates(1, 3);
                  break;
               case 2:
                  if (curChar != 10)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddTwoStates(1, 3);
                  break;
               case 3:
                  if (curChar == 13)
                     jjCheckNAdd(2);
                  break;
               case 4:
                  if (curChar != 32)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar != 9)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(5);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 46)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddStates(32, 35);
                  break;
               case 13:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if (curChar == 39)
                     jjAddStates(26, 27);
                  break;
               case 17:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if (curChar == 39 && kind > 69)
                     kind = 69;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 25:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(27, 18);
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 28:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               case 30:
                  if (curChar == 34)
                     jjCheckNAddStates(23, 25);
                  break;
               case 31:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 33:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 34:
                  if (curChar == 34 && kind > 70)
                     kind = 70;
                  break;
               case 35:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(36, 39);
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 37:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 39:
                  if (curChar != 36)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 12);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 44:
                  if (curChar != 46)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddStates(43, 45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddStates(46, 49);
                  break;
               case 48:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(49, 15);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(50, 52);
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(54, 15);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(53, 56);
                  break;
               case 58:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(59);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 15);
                  break;
               case 60:
                  if (curChar != 48)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddStates(28, 31);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddTwoStates(62, 8);
                  break;
               case 64:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddStates(57, 59);
                  break;
               case 66:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddTwoStates(66, 8);
                  break;
               case 67:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(13, 16);
                  break;
               case 68:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddTwoStates(68, 70);
                  break;
               case 69:
                  if (curChar != 10)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddTwoStates(68, 70);
                  break;
               case 70:
                  if (curChar == 13)
                     jjCheckNAdd(69);
                  break;
               case 71:
                  if (curChar == 13)
                     jjCheckNAddTwoStates(69, 2);
                  break;
               case 72:
                  if (curChar == 47)
                     jjAddStates(20, 22);
                  break;
               case 74:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 75:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 76:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 77:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(79, 80);
                  break;
               case 79:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(79, 80);
                  break;
               case 80:
                  if (curChar == 42)
                     jjCheckNAddStates(60, 62);
                  break;
               case 81:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(82, 80);
                  break;
               case 82:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(82, 80);
                  break;
               case 83:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 84:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 85:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(86, 87);
                  break;
               case 86:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(86, 87);
                  break;
               case 87:
                  if (curChar == 42)
                     jjCheckNAddStates(63, 65);
                  break;
               case 88:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(89, 87);
                  break;
               case 89:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(89, 87);
                  break;
               case 90:
                  if (curChar == 47 && kind > 8)
                     kind = 8;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
               case 40:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(40);
                  break;
               case 8:
                  if ((0x100000001000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 11:
                  if (curChar == 95)
                     jjAddStates(66, 67);
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(68, 69);
                  break;
               case 15:
                  if ((0x5000000050L & l) != 0L && kind > 67)
                     kind = 67;
                  break;
               case 17:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 19:
                  if (curChar == 92)
                     jjAddStates(70, 73);
                  break;
               case 20:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x7e00000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 25:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 31:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 32:
                  if (curChar == 92)
                     jjAddStates(74, 76);
                  break;
               case 33:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 42:
                  if (curChar == 95)
                     jjAddStates(77, 78);
                  break;
               case 46:
                  if (curChar == 95)
                     jjAddStates(79, 80);
                  break;
               case 47:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(81, 82);
                  break;
               case 50:
                  if (curChar == 95)
                     jjAddStates(83, 84);
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(85, 86);
                  break;
               case 55:
                  if (curChar == 95)
                     jjAddStates(87, 88);
                  break;
               case 57:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(89, 90);
                  break;
               case 61:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(62);
                  break;
               case 62:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddTwoStates(62, 8);
                  break;
               case 63:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAdd(64);
                  break;
               case 65:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(65, 64);
                  break;
               case 74:
                  jjAddStates(0, 2);
                  break;
               case 79:
                  jjCheckNAddTwoStates(79, 80);
                  break;
               case 81:
               case 82:
                  jjCheckNAddTwoStates(82, 80);
                  break;
               case 86:
                  jjCheckNAddTwoStates(86, 87);
                  break;
               case 88:
               case 89:
                  jjCheckNAddTwoStates(89, 87);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
               case 40:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(40);
                  break;
               case 17:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 31:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(23, 25);
                  break;
               case 74:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               case 79:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(79, 80);
                  break;
               case 81:
               case 82:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(82, 80);
                  break;
               case 86:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(86, 87);
                  break;
               case 88:
               case 89:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(89, 87);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 91 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   74, 75, 77, 42, 43, 44, 50, 51, 52, 55, 56, 57, 15, 68, 70, 1, 
   3, 0, 1, 3, 73, 84, 85, 31, 32, 34, 17, 19, 61, 63, 66, 8, 
   11, 10, 12, 15, 31, 32, 36, 34, 42, 43, 44, 45, 47, 15, 46, 47, 
   15, 45, 50, 51, 52, 55, 56, 57, 15, 65, 64, 8, 80, 81, 83, 87, 
   88, 90, 11, 10, 13, 14, 20, 25, 26, 28, 33, 35, 37, 42, 43, 46, 
   45, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, 
"\141\142\163\164\162\141\143\164", "\141\163\163\145\162\164", "\142\157\157\154\145\141\156", 
"\142\162\145\141\153", "\142\171\164\145", "\143\141\163\145", "\143\141\164\143\150", 
"\143\150\141\162", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145", 
"\145\154\163\145", "\145\156\165\155", "\145\170\164\145\156\144\163", "\146\141\154\163\145", 
"\146\151\156\141\154", "\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", 
"\147\157\164\157", "\151\146", "\151\155\160\154\145\155\145\156\164\163", 
"\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", "\151\156\164", 
"\151\156\164\145\162\146\141\143\145", "\154\157\156\147", "\156\141\164\151\166\145", "\156\145\167", 
"\156\165\154\154", "\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\164\165\162\156", 
"\163\150\157\162\164", "\163\164\141\164\151\143", "\163\164\162\151\143\164\146\160", 
"\163\165\160\145\162", "\163\167\151\164\143\150", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\141\156\163\151\145\156\164", "\164\162\165\145", "\164\162\171", "\166\157\151\144", 
"\166\157\154\141\164\151\154\145", "\167\150\151\154\145", null, null, null, null, null, null, null, null, null, 
null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", 
"\100", "\75", "\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", "\76\75", 
"\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", 
"\174", "\136", "\45", "\74\74", "\53\75", "\55\75", "\52\75", "\57\75", "\46\75", 
"\174\75", "\136\75", "\45\75", "\74\74\75", "\76\76\75", "\76\76\76\75", "\56\56\56", 
"\76\76\76", "\76\76", "\76", "\74\76", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x7ffffffffffffe01L, 0x7fffffffffffce8L, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x1fcL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[91];
private final int[] jjstateSet = new int[182];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public JavaParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public JavaParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 91; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 12 && (0x1000L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
            SkipLexicalActions(matchedToken);
         }
         else
            SkipLexicalActions(null);
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 2 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    String s = matchedToken.image;
    int n = 0;
    int r = 0;
    for (int i = 0; i < s.length(); i++) {
        if (s.charAt(i) == 'n')
            ++n;
        else
            ++r;
    }
    int cnt = Math.max(n, r);
    cnt = Math.min(2, cnt);
    if (cnt > 0) {
        for ( ; cnt >= 0; cnt--)
            add(ls);
        write();
    }
         break;
      case 3 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    String b = matchedToken.image;
    b = b.replaceAll(" ", "");
    b = b.replaceAll("\u005ct", "");
    int bn = 0;
    int br = 0;
    for (int i = 0; i < b.length(); i++) {
        if (b.charAt(i) == 'n')
            ++bn;
        else
            ++br;
    }
    int bcnt = Math.max(bn, br);
    bcnt = Math.min(2, bcnt);
    if (bcnt > 0) {
        for ( ; bcnt >= 0; bcnt--)
            add(ls);
        write();
    }
         break;
      case 4 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         add(matchedToken);
         break;
      case 5 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        for (int i = 0; i < matchedToken.image.length() * 8; i++) add(" ");
         break;
      case 6 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                     writeEndOfLineComment(matchedToken.image);
         break;
      case 7 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                        writeJavadocComment(matchedToken.image);
         break;
      case 8 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                        writeBlockComment(matchedToken.image);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 119 :
        image.append(jjstrLiteralImages[119]);
        lengthOfMatch = jjstrLiteralImages[119].length();
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RUNSIGNEDSHIFT;
     input_stream.backup(2);
         break;
      case 120 :
        image.append(jjstrLiteralImages[120]);
        lengthOfMatch = jjstrLiteralImages[120].length();
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RSIGNEDSHIFT;
     input_stream.backup(1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
