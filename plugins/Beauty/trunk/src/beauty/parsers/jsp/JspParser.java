/* Generated By:JavaCC: Do not edit this line. JspParser.java */
package beauty.parsers.jsp;

import java.io.*;
import java.util.*;

import beauty.beautifiers.*;
import beauty.parsers.ParserException;

/** 
 * JSP Parser for PMD.
 * @author Pieter, Application Engineers NV/SA, http://www.ae.be
 * @author Dale Anson, modifications for jEdit beautifier.
 */
public class JspParser implements JspParserConstants {

    Token t;

    // option to put a space before a closing />
    boolean padSlashEnd = false;

    // option to put a space before a closing >
    boolean padTagEnd = false;

    // option to wrap attributes.  Attributes are wrapped only if there is 
    // more than one attribute.
    boolean wrapAttributes = false;

    public void setPadSlashEnd(boolean b) {
        padSlashEnd = b;
    }

    public void setPadTagEnd(boolean b) {
        padTagEnd = b;
    }

    public void setWrapAttributes(boolean b) {
        wrapAttributes = b;
    }

    public void setCollapseBlankLines(boolean b) {
        token_source.collapseBlankLines = b;
    }

    // shouldn't use this, a specific line separator should be set based on
    // buffer settings.  Of course, it may be the same as what the buffer
    // uses anyway.
    String ls = System.getProperty("line.separator");

    // one of these is inserted at every place in a line that qualifies as a
    // good place to break a line if it needs wrapped.  You can't type one of
    // these from the keyboard,
    char wrapSep = '\u001c';

    int indentWidth = 0;
    int tabSize = 0;
    boolean useSoftTabs = true;

    public void setIndentWidth(int i) {
        token_source.setIndentWidth(i);
        indentWidth = i;
    }

    public void setTabSize(int size) {
        jj_input_stream.setTabSize(size);
        tabSize = size;
    }

    public int getTabSize() {
        // this really isn't necessary for this beautifier.  Setting the tab
        // size on the input stream makes the token locations more accurate
        // is all.
        return jj_input_stream.getTabSize(0);
    }

    public void setUseSoftTabs(boolean b) {
        token_source.setUseSoftTabs(b);
        useSoftTabs = true;
    }

    public String getText() {
        return token_source.getText();
    }

    public void resetTokenSource() {
        token_source.reset();
    }

    private void add(Token t) {
        token_source.add(t);
    }

    private void add(String s) {
        token_source.add(s);
    }

    private void trim() {
        token_source.trim();
    }

    private void trimNL() {
        token_source.trimNL();
    }

    private void trimNL(String s) {
        token_source.trimNL(s);
    }

    private void trimWhitespace() {
        token_source.trimWhitespace();
    }

    private void write() {
        token_source.write();
    }

    private void writeln() {
        token_source.writeln();
    }

    private void writePre(String s) {
        token_source.writePre(s);
    }

    /**
     * All special tokens in this parser are whitespace tokens only.
     * This method gathers all the special tokens preceeding the given
     * token, removes all spaces and tabs, and collapses multiple
     * line separators based on the <code>collapseBlankLines</code>
     * setting.
     */
    private String getSpecial(Token token) {
        if (token.specialToken == null) {
            return "";
        }
        StringBuilder sb = new StringBuilder();
        Token special = token.specialToken;
        while(special.specialToken != null) {
            special = special.specialToken;
        }
        while (special != null) {
            sb.append(special.image);
            special = special.next;
        }
        String s = sb.toString();
        s = s.replaceAll(" ", "");
        s = s.replaceAll("\u005ct", "");
        StringTokenizer st = new StringTokenizer(s, ls, true);
        int count = st.countTokens();
        if (token_source.collapseBlankLines) {
            count = Math.min(2, count);
        }
        sb.setLength(0);
        for (int i = 0; i < count; i++) {
            sb.append(ls);
        }
        return sb.toString();
    }

    public void setLineSeparator(String le) {
        ls = le;
        token_source.setLineSeparator(le);
    }

    public void parse() throws ParseException {
        CompilationUnit();
    }

    public static void main(String args[]) {
        JspParser parser;
        if (args.length == 0) {
            System.out.println("Jsp Parser:  Reading from standard input . . .");
            parser = new JspParser(System.in);
        } else{
            if (args.length == 1) {
                System.out.println("Jsp Parser:  Reading from file " + args[0] + " . . .");
                try {
                    parser = new JspParser(new java.io.FileInputStream(args[0]));
                } catch (java.io.FileNotFoundException e) {
                    System.out.println("Jsp Parser:  File " + args[0] + " not found.");
                    return;
                }
            } else {
                System.out.println("Jsp Parser:  Usage is one of:");
                System.out.println("         java JspParser < inputfile");
                System.out.println("OR");
                System.out.println("         java JspParser inputfile");
                return;
            }
        }

        try {
            parser.CompilationUnit();
            System.out.println("Jsp Parser:  Java program parsed successfully.");
        } catch (ParseException e) {
            System.out.println(e.getMessage());
            System.out.println("Jsp Parser:  Encountered errors during parse.");
        }
    }

/** ******************************************************************** */
/** *************************  JSP GRAMMAR  **************************** */
/** ******************************************************************** */

/**
 * Main entry point
 */
  final public void CompilationUnit() throws ParseException {
    Prolog();
    Content();
    jj_consume_token(0);
      trimWhitespace();
      write();
  }

/**
 * The optional prolog of a JSP, including (xml) declarations and DTD.
 */
  final public void Prolog() throws ParseException {
    if (jj_2_1(2147483647)) {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT_START:
        case JSP_COMMENT_START:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT_START:
          CommentTag();
          break;
        case JSP_COMMENT_START:
          JspComment();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      Declaration();
    } else {
      ;
    }
    if (jj_2_2(2147483647)) {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT_START:
        case JSP_COMMENT_START:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT_START:
          CommentTag();
          break;
        case JSP_COMMENT_START:
          JspComment();
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      DoctypeDeclaration();
    } else {
      ;
    }
  }

/**
 * Everything between a start-tag and the corresponding end-tag of an element.
 */
  final public void Content() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EL_EXPRESSION:
    case UNPARSED_TEXT:
      Text();
      break;
    case TAG_START:
    case COMMENT_START:
    case CDATA_START:
    case JSP_COMMENT_START:
    case JSP_DECLARATION_START:
    case JSP_EXPRESSION_START:
    case JSP_SCRIPTLET_START:
    case JSP_DIRECTIVE_START:
      ContentElementPossiblyWithText();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TAG_START:
      case COMMENT_START:
      case CDATA_START:
      case JSP_COMMENT_START:
      case JSP_DECLARATION_START:
      case JSP_EXPRESSION_START:
      case JSP_SCRIPTLET_START:
      case JSP_DIRECTIVE_START:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      ContentElementPossiblyWithText();
    }
  }

/**
 * A single (non-text) element that can occur between a start- and end-tag of an element.
 * Possibly followed by text.
 */
  final public void ContentElementPossiblyWithText() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMENT_START:
      CommentTag();
      break;
    case TAG_START:
      Element();
      break;
    case CDATA_START:
      CData();
      break;
    case JSP_COMMENT_START:
      JspComment();
      break;
    case JSP_DECLARATION_START:
      JspDeclaration();
      break;
    case JSP_EXPRESSION_START:
      JspExpression();
      break;
    case JSP_SCRIPTLET_START:
      JspScriptlet();
      break;
    case JSP_DIRECTIVE_START:
      JspDirective();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EL_EXPRESSION:
    case UNPARSED_TEXT:
      Text();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

// <%@
  final public void JspDirective() throws ParseException {
    t = jj_consume_token(JSP_DIRECTIVE_START);
            writePre(getSpecial(t));
            add(t);
    t = jj_consume_token(JSP_DIRECTIVE_NAME);
                                 trim(); add(" "); add(t); add(" ");
    JspDirectiveAttributes();
    t = jj_consume_token(JSP_DIRECTIVE_END);
                                trim(); add(t); write();
  }

  final public void JspDirectiveAttributes() throws ParseException {
    boolean haveAttrs = false;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JSP_DIRECTIVE_ATTRIBUTE_NAME:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      haveAttrs = JspDirectiveAttribute();
            if (haveAttrs) {
                add(" ");
            }
    }
  }

  final public boolean JspDirectiveAttribute() throws ParseException {
    boolean added = false;
    t = jj_consume_token(JSP_DIRECTIVE_ATTRIBUTE_NAME);
                                           add(t); added=true;
    t = jj_consume_token(JSP_DIRECTIVE_ATTRIBUTE_EQUALS);
                                             add(t);
    t = jj_consume_token(JSP_DIRECTIVE_ATTRIBUTE_VALUE);
                                            add(t);
             {if (true) return added;}
    throw new Error("Missing return statement in function");
  }

  final public void JspScriptlet() throws ParseException {
    Token start;
    Token content;
    Token end;
    start = jj_consume_token(JSP_SCRIPTLET_START);
    content = jj_consume_token(JSP_SCRIPTLET);
    end = jj_consume_token(JSP_SCRIPTLET_END);
             writePre(getSpecial(start));
             add(start);
             writeln();
             ++token_source.level;

             try {
            if (content != null && content.image.trim().length() > 0) {
                Beautifier beautifier = new JavaLineBeautifier();
                beautifier.setIndentWidth(indentWidth);
                beautifier.setTabWidth(tabSize);
                beautifier.setUseSoftTabs(useSoftTabs);
                beautifier.setInitialIndentLevel(token_source.level);
                String java = beautifier.beautify(content.image.trim());
                writePre(java);
            }
         }
         catch(ParserException pe) {
             {if (true) throw new ParseException(pe.getMessage());}
         }

             --token_source.level;
             add(end);
             write();
  }

  final public void JspExpression() throws ParseException {
    t = jj_consume_token(JSP_EXPRESSION_START);
                writePre(getSpecial(t));
                add(t);
    t = jj_consume_token(JSP_EXPRESSION);
                             add(t);
    t = jj_consume_token(JSP_EXPRESSION_END);
                                 add(t); writeln();
  }

  final public void JspDeclaration() throws ParseException {
    t = jj_consume_token(JSP_DECLARATION_START);
                writePre(getSpecial(t));
                add(t);
    t = jj_consume_token(JSP_DECLARATION);
                              add(t);
    t = jj_consume_token(JSP_DECLARATION_END);
                                  add(t); writeln();
  }

  final public void JspComment() throws ParseException {
    List<String> lines = new ArrayList<String>();
    t = jj_consume_token(JSP_COMMENT_START);
                writePre(getSpecial(t));
                lines.add(t.image);
    t = jj_consume_token(JSP_COMMENT_CONTENT);
            String s = t.image;
            String[] parts = s.split(ls);
            for (String line : parts) {
                lines.add(line);
            }
    t = jj_consume_token(JSP_COMMENT_END);
        if (lines.size() > 2 && !lines.get(lines.size() - 1).trim().isEmpty()) {
          lines.add(token_source.indent);
        }
            lines.add(t.image);
            StringBuilder sb = new StringBuilder();
            switch(lines.size()) {
            case 0:
            case 1:
                {if (true) return;}
            case 2:
                // empty comment
                sb.append(lines.get(0));
                sb.append(" ");
                sb.append(lines.get(1));
                add(sb.toString());
                write();
                break;
            case 3:
                // have start tag, some text, and end tag, so put these all on one line
                sb.append(lines.get(0));
                sb.append(" ");
                sb.append(lines.get(1));
                sb.append(" ");
                sb.append(lines.get(2));
                add(sb.toString());
                write();
                break;
            default:
                // multiple line comment
                add(lines.get(0));
                write();
                ++token_source.level;
                for (int i = 1; i < lines.size() - 2; i++) {
                    add(lines.get(i));
                    writeln();
                }
                --token_source.level;
                add(lines.get(lines.size() - 1));
                write();
            }
  }

/**
 * This production groups all characters between two tags, where
 * tag is an xml-tag "<...>" or a jsp-page-tag "<%...%>" or CDATA "<![CDATA[...]]>".
 * Text consists of unparsed text and/or Expression Language expressions.
 */
  final public void Text() throws ParseException {
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNPARSED_TEXT:
        UnparsedText();
        break;
      case EL_EXPRESSION:
        ElExpression();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EL_EXPRESSION:
      case UNPARSED_TEXT:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
    }
  }

  final public void UnparsedText() throws ParseException {
    t = jj_consume_token(UNPARSED_TEXT);
            // unparsed text will contain all whitespace, regardless of the 
            // current lexing state, so need to deal with it here.
            String s = t.image;

            if (token_source.collapseBlankLines) {
                String lsep;
                if ("\u005cr".equals(ls)) {
                    lsep = "\u005c\u005cr";
                }
                else if ("\u005cr\u005cn".equals(ls)) {
                    lsep = "\u005c\u005cr\u005c\u005cn";
                }
                else {
                    lsep = "\u005c\u005cn";
                }
                String regex = "(([ ]|[\u005c\u005ct])*(" + lsep + ")){2,}";
                s = s.replaceAll(regex, ls + ls);
            }

            StringTokenizer st = new StringTokenizer(s, ls, true);
            while(st.hasMoreTokens()) {
                String token = st.nextToken();
                if (token.equals(ls)) {
                    writeln();
                }
                else {
                    add(token);
                }
            }
  }

/**
 * Text that contains no single quotes, and that does not contain the start
 * of a EL expression or value binding.
 */
  final public void UnparsedTextNoSingleQuotes() throws ParseException {
    t = jj_consume_token(UNPARSED_TEXT_NO_SINGLE_QUOTES);
                                              add(t);
  }

/**
 * Text that contains no double quotes, and that does not contain the start
 * of a EL expression or value binding.
 */
  final public void UnparsedTextNoDoubleQuotes() throws ParseException {
    t = jj_consume_token(UNPARSED_TEXT_NO_DOUBLE_QUOTES);
                                              add(t);
  }

/**
 * An EL expression, not within an attribute value.
 */
  final public void ElExpression() throws ParseException {
    t = jj_consume_token(EL_EXPRESSION);
                             add(t);
  }

  final public void ValueBindingInAttribute() throws ParseException {
    t = jj_consume_token(VALUE_BINDING_IN_ATTRIBUTE);
                                          add(t);
  }

  final public void ElExpressionInAttribute() throws ParseException {
    t = jj_consume_token(EL_EXPRESSION_IN_ATTRIBUTE);
                                          add(t);
  }

  final public void CData() throws ParseException {
    t = jj_consume_token(CDATA_START);
                writePre(getSpecial(t));
            add(t);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNPARSED:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      t = jj_consume_token(UNPARSED);
                      add(t);
    }
    t = jj_consume_token(CDATA_END);
                    add(t);
  }

/**
 * A XML element, either with a single empty tag, or with a starting and closing tag
 * with optional contained content.
 */
  final public void Element() throws ParseException {
        Token startTagName;
        Token endTagName;
        String tagName;
        boolean inPreTag = false;
    t = jj_consume_token(TAG_START);
            String s = getSpecial(t);   // s will have only line separators or be empty
            // the getText check handles the case of the first line in the file, without
            // the check, a blank line will be inserted.
            if (!s.contains(ls) && getText().length() > 0) {
                trimNL();
                writeln();
            }
            else {
                writePre(s);
            }
            add(t);
    startTagName = jj_consume_token(TAG_NAME);
                                tagName = startTagName.image; add(startTagName);
    Attributes();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TAG_END:
      t = jj_consume_token(TAG_END);
                    trimWhitespace();
                    if (padTagEnd) {
                      add(" ");
                    }
                    add(t);
                    write();
                    ++token_source.level;

                        // Content in a <script> element needs special treatment (like a comment or CDataSection).
                        // Tell the TokenManager to start looking for the body of a script element.  In this
                        // state all text will be consumed by the next token up to the closing </script> tag.
                        // This is a context sensitive switch for the token manager, not something one can
                        // express using normal JavaCC syntax.  Hence the hoop jumping.
                                if ("script".equalsIgnoreCase(startTagName.image)) {
                                    writeln();
                                        token_source.SwitchTo(HtmlScriptContentState);
                                }
                                else if ("style".equalsIgnoreCase(startTagName.image)) {
                                    writeln();
                                        token_source.SwitchTo(HtmlStyleContentState);
                                }
                                else if ("pre".equalsIgnoreCase(startTagName.image)) {
                                    token_source.SwitchTo(PreTagContentState);
                                    inPreTag = true;
                                    trimNL();
                                }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TAG_START:
      case COMMENT_START:
      case CDATA_START:
      case JSP_COMMENT_START:
      case JSP_DECLARATION_START:
      case JSP_EXPRESSION_START:
      case JSP_SCRIPTLET_START:
      case JSP_DIRECTIVE_START:
      case EL_EXPRESSION:
      case UNPARSED_TEXT:
      case HTML_SCRIPT_CONTENT:
      case HTML_SCRIPT_END_TAG:
      case HTML_STYLE_CONTENT:
      case HTML_STYLE_END_TAG:
      case PRE_TAG_CONTENT:
      case PRE_TAG_END_TAG:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HTML_SCRIPT_CONTENT:
        case HTML_SCRIPT_END_TAG:
          HtmlScript();
          break;
        case HTML_STYLE_CONTENT:
        case HTML_STYLE_END_TAG:
          HtmlStyle();
          break;
        case PRE_TAG_CONTENT:
        case PRE_TAG_END_TAG:
          PreTag();
          break;
        case TAG_START:
        case COMMENT_START:
        case CDATA_START:
        case JSP_COMMENT_START:
        case JSP_DECLARATION_START:
        case JSP_EXPRESSION_START:
        case JSP_SCRIPTLET_START:
        case JSP_DIRECTIVE_START:
        case EL_EXPRESSION:
        case UNPARSED_TEXT:
          Content();
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      t = jj_consume_token(ENDTAG_START);
                       writePre(getSpecial(t));
                       --token_source.level;
                       add(t);
      endTagName = jj_consume_token(TAG_NAME);
                    add(endTagName);
                        if (! tagName.equalsIgnoreCase(endTagName.image)) {
                            {if (true) throw new ParseException("Mismatch end tag: start tag '" + tagName + "' does not match end tag '" + endTagName + "'");}
                        }
      t = jj_consume_token(TAG_END);
               trimWhitespace();
               if (padTagEnd) {
                    add(" ");
               }
               add(t);
               //writeln();
               write();
      break;
    case TAG_SLASHEND:
      t = jj_consume_token(TAG_SLASHEND);
              trimWhitespace();
              if (padSlashEnd) {
                add(" ");
              }
              add(t);
              //writeln();
              write();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Attributes() throws ParseException {
    boolean haveAttrs = false;
    int attrCount = 0;
    boolean adjustedLevel = false;
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTR_NAME:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
      haveAttrs = Attribute(wrapAttributes && attrCount > 0);
            if (haveAttrs) {
                ++attrCount;
                if (wrapAttributes && !adjustedLevel) {
                    ++token_source.level;
                    adjustedLevel = true;
                }
            }
    }
        if (wrapAttributes && adjustedLevel) {
            --token_source.level;
        }
  }

  final public boolean Attribute(boolean onNextLine) throws ParseException {
    boolean added = false;
    t = jj_consume_token(ATTR_NAME);
      // there is always whitespace in front of an attribute, either the
      // attribute starts on a new line or it needs a space between the
      // attribute and the previous token.
      if (onNextLine) {
        writeln();
      }
      else {
        add(" ");
      }
      add(t);
      added=true;
    t = jj_consume_token(ATTR_EQ);
                       add(t);
    AttributeValue();
    {if (true) return added;}
    throw new Error("Missing return statement in function");
  }

/**
 * The value of an attribute of an element.
 * EL expressions, JSF value bindings, and JSP expressions
 * are parsed as sub-nodes of the AttributeValue node.
 */
  final public void AttributeValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLE_QUOTE:
      t = jj_consume_token(DOUBLE_QUOTE);
                                           add(t);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL_EXPRESSION_IN_ATTRIBUTE:
        case VALUE_BINDING_IN_ATTRIBUTE:
        case JSP_EXPRESSION_IN_ATTRIBUTE:
        case UNPARSED_TEXT_NO_DOUBLE_QUOTES:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNPARSED_TEXT_NO_DOUBLE_QUOTES:
          UnparsedTextNoDoubleQuotes();
          break;
        case EL_EXPRESSION_IN_ATTRIBUTE:
        case VALUE_BINDING_IN_ATTRIBUTE:
        case JSP_EXPRESSION_IN_ATTRIBUTE:
          QuoteIndependentAttributeValueContent();
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENDING_DOUBLE_QUOTE:
        t = jj_consume_token(ENDING_DOUBLE_QUOTE);
                                                           add(t);
        break;
      case DOLLAR_OR_HASH_DOUBLE_QUOTE:
        t = jj_consume_token(DOLLAR_OR_HASH_DOUBLE_QUOTE);
                                                                  add(t);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case SINGLE_QUOTE:
      t = jj_consume_token(SINGLE_QUOTE);
                                           add(t);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL_EXPRESSION_IN_ATTRIBUTE:
        case VALUE_BINDING_IN_ATTRIBUTE:
        case JSP_EXPRESSION_IN_ATTRIBUTE:
        case UNPARSED_TEXT_NO_SINGLE_QUOTES:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNPARSED_TEXT_NO_SINGLE_QUOTES:
          UnparsedTextNoSingleQuotes();
          break;
        case EL_EXPRESSION_IN_ATTRIBUTE:
        case VALUE_BINDING_IN_ATTRIBUTE:
        case JSP_EXPRESSION_IN_ATTRIBUTE:
          QuoteIndependentAttributeValueContent();
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENDING_SINGLE_QUOTE:
        t = jj_consume_token(ENDING_SINGLE_QUOTE);
                                                           add(t);
        break;
      case DOLLAR_OR_HASH_SINGLE_QUOTE:
        t = jj_consume_token(DOLLAR_OR_HASH_SINGLE_QUOTE);
                                                              add(t);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * Partial content of an attribute value that can contain all quotes.
 * This groups EL expressions, value bindings, and JSP expressions.
 */
  final public void QuoteIndependentAttributeValueContent() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EL_EXPRESSION_IN_ATTRIBUTE:
      ElExpressionInAttribute();
      break;
    case VALUE_BINDING_IN_ATTRIBUTE:
      ValueBindingInAttribute();
      break;
    case JSP_EXPRESSION_IN_ATTRIBUTE:
      JspExpressionInAttribute();
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void JspExpressionInAttribute() throws ParseException {
    t = jj_consume_token(JSP_EXPRESSION_IN_ATTRIBUTE);
                                           add(t);
  }

  final public void CommentTag() throws ParseException {
    List<String> lines = new ArrayList<String>();
    t = jj_consume_token(COMMENT_START);
        writePre(getSpecial(t));
        lines.add(t.image);
    t = jj_consume_token(COMMENT_TEXT);
            String s = t.image;
            String[] parts = s.split(ls);
            for (String line : parts) {
                lines.add(line);
            }
    t = jj_consume_token(COMMENT_END);
        if (lines.size() > 2 && !lines.get(lines.size() - 1).trim().isEmpty()) {
          lines.add(token_source.indent);
        }
            lines.add(t.image);
            StringBuilder sb = new StringBuilder();
            switch(lines.size()) {
            case 0:
            case 1:
                {if (true) return;}
            case 2:
                // empty comment
                sb.append(lines.get(0));
                sb.append(" ");
                sb.append(lines.get(1));
                add(sb.toString());
                write();
                break;
            case 3:
                // have start tag, one line of text, and end tag, so put these all on one line
                sb.append(lines.get(0));
                sb.append(" ");
                sb.append(lines.get(1));
                sb.append(" ");
                sb.append(lines.get(2));
                add(sb.toString());
                write();
                break;
            default:
                // multiple line comment
                add(lines.get(0));
                write();
                ++token_source.level;
                for (int i = 1; i < lines.size() - 2; i++) {
                    add(lines.get(i));
                    writeln();
                }
                --token_source.level;
                add(lines.get(lines.size() - 1));
                write();
            }
  }

  final public void Declaration() throws ParseException {
    t = jj_consume_token(DECL_START);
        writePre(getSpecial(t));
        add(t);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTR_NAME:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_10;
      }
      Attribute(false);
    }
    t = jj_consume_token(DECL_END);
                 add(t);
  }

  final public void DoctypeDeclaration() throws ParseException {
    t = jj_consume_token(DOCTYPE_DECL_START);
                                 add(t);
    t = jj_consume_token(WHITESPACES);
                           add(t);
    t = jj_consume_token(NAME);
                    add(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHITESPACES:
      t = jj_consume_token(WHITESPACES);
                            add(t);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
    case SYSTEM:
      DoctypeExternalId();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACES:
        t = jj_consume_token(WHITESPACES);
                                                     add(t);
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    t = jj_consume_token(DOCTYPE_DECL_END);
                               add(t);
  }

  final public void DoctypeExternalId() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYSTEM:
      t = jj_consume_token(SYSTEM);
                                     add(t);
      t = jj_consume_token(WHITESPACES);
                                          add(t);
      t = jj_consume_token(QUOTED_LITERAL);
                                             add(t);
      break;
    case PUBLIC:
      t = jj_consume_token(PUBLIC);
                                     add(t);
      t = jj_consume_token(WHITESPACES);
                                          add(t);
      t = jj_consume_token(QUOTED_LITERAL);
                                             add(t);
      t = jj_consume_token(WHITESPACES);
                                          add(t);
      t = jj_consume_token(QUOTED_LITERAL);
                                             add(t);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Handle <pre> tag content and end tag.
  final public void PreTag() throws ParseException {
    StringBuilder sb = new StringBuilder();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRE_TAG_CONTENT:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_11;
      }
      t = jj_consume_token(PRE_TAG_CONTENT);
            sb.append(t.image);
    }
    t = jj_consume_token(PRE_TAG_END_TAG);
        writePre(sb.toString());
  }

  final public void HtmlScript() throws ParseException {
    Token scriptToken = null;
    Token endToken = null;
    StringBuilder script = new StringBuilder();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HTML_SCRIPT_CONTENT:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_12;
      }
      scriptToken = jj_consume_token(HTML_SCRIPT_CONTENT);
                if (scriptToken != null) {
                    script.append(scriptToken.image);
                }
    }
    endToken = jj_consume_token(HTML_SCRIPT_END_TAG);
        try {
            if (script.length() > 0) {
                Beautifier beautifier = new DefaultBeautifier("javascript");
                beautifier.setIndentWidth(indentWidth);
                beautifier.setTabWidth(tabSize);
                beautifier.setUseSoftTabs(useSoftTabs);
                beautifier.setInitialIndentLevel(token_source.level);
                String js = beautifier.beautify(script.toString().trim());
                writePre(js);
            }
            else if (scriptToken != null) {
                add(scriptToken);
            }
        }
        catch(ParserException pe) {
            {if (true) throw new ParseException(pe.getMessage());}
        }
        if (endToken != null) {
            add(endToken);
        }
  }

  final public void HtmlStyle() throws ParseException {
    Token styleToken = null;
    Token endToken = null;
    StringBuilder style = new StringBuilder();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HTML_STYLE_CONTENT:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_13;
      }
      styleToken = jj_consume_token(HTML_STYLE_CONTENT);
            // have the css beautifier clean up the contents of a style block
            if (styleToken != null) {
                style.append(styleToken.image);
            }
    }
    endToken = jj_consume_token(HTML_STYLE_END_TAG);
        try {
            if (style.length() > 0) {
                CSSBeautifier beautifier = new CSSBeautifier();
                beautifier.setIndentWidth(indentWidth);
                beautifier.setTabWidth(tabSize);
                beautifier.setUseSoftTabs(useSoftTabs);
                beautifier.setInitialIndentLevel(token_source.level);
                String css = beautifier.beautify(style.toString().trim());
                writePre(css);
                trimWhitespace();
            }
            else if (styleToken != null) {
                add(styleToken);
            }
        }
        catch(ParserException pe) {
            {if (true) throw new ParseException(pe.getMessage());}
        }
        if (endToken != null) {
            add(endToken);
        }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(UNPARSED_TEXT_NO_DOUBLE_QUOTES)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(UNPARSED_TEXT_NO_SINGLE_QUOTES)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(ATTR_NAME)) return true;
    if (jj_scan_token(ATTR_EQ)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(WHITESPACES)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(JSP_COMMENT_START)) return true;
    if (jj_scan_token(JSP_COMMENT_CONTENT)) return true;
    if (jj_scan_token(JSP_COMMENT_END)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_scan_token(WHITESPACES)) return true;
    if (jj_scan_token(QUOTED_LITERAL)) return true;
    if (jj_scan_token(WHITESPACES)) return true;
    if (jj_scan_token(QUOTED_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(SYSTEM)) return true;
    if (jj_scan_token(WHITESPACES)) return true;
    if (jj_scan_token(QUOTED_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(COMMENT_START)) return true;
    if (jj_scan_token(COMMENT_TEXT)) return true;
    if (jj_scan_token(COMMENT_END)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(ENDING_SINGLE_QUOTE)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(JSP_EXPRESSION_IN_ATTRIBUTE)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(DOLLAR_OR_HASH_SINGLE_QUOTE)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(DOLLAR_OR_HASH_DOUBLE_QUOTE)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_28()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(WHITESPACES)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(ENDING_DOUBLE_QUOTE)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(DOCTYPE_DECL_START)) return true;
    if (jj_scan_token(WHITESPACES)) return true;
    if (jj_scan_token(NAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) jj_scanpos = xsp;
    if (jj_scan_token(DOCTYPE_DECL_END)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(SINGLE_QUOTE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_38()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(EL_EXPRESSION_IN_ATTRIBUTE)) return true;
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_16()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(DOUBLE_QUOTE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(DECL_START)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_20()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(DECL_END)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(VALUE_BINDING_IN_ATTRIBUTE)) return true;
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_14()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public JspParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x88000000,0x88000000,0x88000000,0x88000000,0xca000000,0xca000000,0xca000000,0x0,0x0,0x0,0x0,0x0,0xca000000,0xca000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x3f,0xf,0xf,0x30,0x80,0x30,0x30,0x2000000,0x3f,0x3f,0x40000000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x80000,0x80000,0x600000,0x600000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f0000,0x3f0000,0x1,0x0,0x10e0,0x10e0,0x2800,0x2e0,0x2e0,0x500,0x18,0xe0,0x0,0x0,0x0,0x0,0x0,0x100000,0x10000,0x40000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JspParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JspParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JspParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JspParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JspParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JspParser(JspParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JspParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[86];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 86; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
