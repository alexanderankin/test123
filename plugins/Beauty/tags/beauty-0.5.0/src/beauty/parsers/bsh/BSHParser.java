/* Generated By:JavaCC: Do not edit this line. BSHParser.java */
package beauty.parsers.bsh;

import java.io.*;
import java.util.*;

/**
	This is the BeanShell parser.  It is used internally by the Interpreter
	class (which is probably what you are looking for).  The parser knows
	only how to parse the structure of the language, it does not understand
	names, commands, etc.
	<p>
	You can use the Parser from the command line to do basic structural 
	validation of BeanShell files without actually executing them. e.g.
	<code><pre>
		java bsh.Parser [ -p ] file [ file ] [ ... ]
	</pre></code>
	<p>
	The -p option causes the abstract syntax to be printed.
	<p>

	From code you'd use the Parser like this:
	<p
	<code><pre>
		Parser parser = new Parser(in);
		while( !(eof=parser.Line()) ) {
			SimpleNode node = parser.popNode();
			// use the node, etc. (See bsh.BSH* classes)
		}
	</pre></code>
*/
public class BSHParser implements BSHParserConstants {
    Token t;

    // shouldn't use this, a specific line separator should be set based on
    // buffer settings.  Of course, it may be the same as what the buffer
    // uses anyway.
    String lineSep = System.getProperty("line.separator");

    // one of these is inserted at every place in a line that qualifies as a
    // good place to break a line if it needs wrapped.  You can't type one of
    // these from the keyboard,
    char wrapSep = '\u001c';

    public void setIndentWidth(int i) {
        token_source.setIndentWidth(i);
    }

    public void setTabSize(int size) {
        jj_input_stream.setTabSize(size);
    }

    public int getTabSize() {
        // this really isn't necessary for this beautifier.  Setting the tab
        // size on the input stream makes the token locations more accurate
        // is all.
        return jj_input_stream.getTabSize(0);
    }

    public void setUseSoftTabs(boolean b) {
        token_source.setUseSoftTabs(b);
    }

    public String getText() {
        return token_source.getText();
    }

    public void resetTokenSource() {
        token_source.reset();
    }

    private void add(Token t) {
        token_source.add(t);
    }

    private void add(String s) {
        token_source.add(s);
    }

    private void trim() {
        token_source.trim();
    }

    private void trimWhitespace() {
        token_source.trimWhitespace();
    }

    private void write() {
        token_source.write();
    }

    private void writeln() {
        token_source.writeln();
    }

    public void setLineSeparator(String le) {
        lineSep = le;
        token_source.setLineSeparator(le);
    }

        /**
		Re-initialize the input stream and token source.
	*/
        void reInitInput( Reader in ) {
                ReInit(in);
        }

    public void parse() throws ParseException {
        while(Line());
    }

    public static void main(String args[]) {
        BSHParser parser;
        if (args.length == 0) {
            System.out.println("BSH Parser:  Reading from standard input . . .");
            parser = new BSHParser(System.in);
        } else{
            if (args.length == 1) {
                System.out.println("BSH Parser:  Reading from file " + args[0] + " . . .");
                try {
                    parser = new BSHParser(new java.io.FileInputStream(args[0]));
                } catch (java.io.FileNotFoundException e) {
                    System.out.println("BSH Parser:  File " + args[0] + " not found.");
                    return;
                }
            } else {
                System.out.println("BSH Parser:  Usage is one of:");
                System.out.println("         java Parser < inputfile");
                System.out.println("OR");
                System.out.println("         java Parser inputfile");
                return;
            }
        }

        try {
            parser.parse();
            System.out.println(parser.getText());
            System.out.println("BSH Parser:  Java program parsed successfully.");
        } catch (ParseException e) {
            System.out.println(e.getMessage());
            System.out.println("BSH Parser:  Encountered errors during parse.");
        }
    }

        /**
		Lookahead for the enhanced for statement.  
		Expect "for" "(" and then see whether we hit ":" or a ";" first.
	*/
        boolean isRegularForStatement()
        {
                int curTok = 1;
                Token tok;
                tok = getToken(curTok++);
                if ( tok.kind != FOR ) return false;
                tok = getToken(curTok++);
                if ( tok.kind != LPAREN ) return false;
                while (true)
                {
                        tok = getToken(curTok++);
                        switch (tok.kind) {
                                case COLON:
                                        return false;
                                case SEMICOLON:
                                        return true;
                                case EOF:
                                        return false;
                        }
                }
        }

        /**
		Generate a ParseException with the specified message, pointing to the
		current token.
		The auto-generated Parser.generateParseException() method does not
		provide line number info, therefore we do this.
	*/
        ParseException createParseException( String message )
        {
                Token errortok = token;
                int line = errortok.beginLine, column = errortok.beginColumn;
                String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
                return new ParseException( "Parse error at line " + line
                        + ", column " + column + " : " + message );
        }

/*
	Thanks to Sreenivasa Viswanadha for suggesting how to get rid of expensive
	lookahead here.
	@return if there is more, false on EOF.
*/
  final public boolean Line() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
        {if (true) return false;}
      break;
    default:
      jj_la1[0] = jj_gen;
      if (jj_2_1(1)) {
        BlockStatement();
        {if (true) return true;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
	Gather modifiers for a class, method, or field.
	I lookahead is true then we are being called as part of a lookahead and we
	should not enforce any rules.  Otherwise we validate based on context
	(field, method, class)
*/
  final public int Modifiers() throws ParseException {
   int modifiers = 0;
    try {
      label_1:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
              modifiers |= ModifierSet.PUBLIC;
          break;
        case STATIC:
          jj_consume_token(STATIC);
              modifiers |= ModifierSet.STATIC;
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
                 modifiers |= ModifierSet.PROTECTED;
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
               modifiers |= ModifierSet.PRIVATE;
          break;
        case FINAL:
          jj_consume_token(FINAL);
             modifiers |= ModifierSet.FINAL;
          break;
        case ABSTRACT:
          jj_consume_token(ABSTRACT);
                modifiers |= ModifierSet.ABSTRACT;
          break;
        case SYNCHRONIZED:
          jj_consume_token(SYNCHRONIZED);
                    modifiers |= ModifierSet.SYNCHRONIZED;
          break;
        case NATIVE:
          jj_consume_token(NATIVE);
              modifiers |= ModifierSet.NATIVE;
          break;
        case TRANSIENT:
          jj_consume_token(TRANSIENT);
                 modifiers |= ModifierSet.TRANSIENT;
          break;
        case VOLATILE:
          jj_consume_token(VOLATILE);
                modifiers |= ModifierSet.VOLATILE;
          break;
        case STRICTFP:
          jj_consume_token(STRICTFP);
                modifiers |= ModifierSet.STRICTFP;
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        {if (true) return 0;}
    }
    {if (true) return modifiers;}
    throw new Error("Missing return statement in function");
  }

/**
*/
  final public void ClassDeclaration() throws ParseException {
    Modifiers();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      jj_consume_token(CLASS);
                    add("class");
      break;
    case INTERFACE:
      jj_consume_token(INTERFACE);
                                                    add("interface");
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
                      add("extends");
      AmbiguousName();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      jj_consume_token(IMPLEMENTS);
                         add("implements");
      NameList();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    Block();

  }

  final public void MethodDeclaration() throws ParseException {
    Modifiers();
    if (jj_2_3(2147483647)) {
      t = jj_consume_token(IDENTIFIER);
                          add(t);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case VOID:
      case IDENTIFIER:
        ReturnType();
        t = jj_consume_token(IDENTIFIER);
                         add(" "); add(t);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    FormalParameters();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
                     add("throws ");
      NameList();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
    case LBRACE:
      Block();
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                          add(";"); write();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PackageDeclaration() throws ParseException {
    jj_consume_token(PACKAGE);
                add("package");
    AmbiguousName();
    jj_consume_token(SEMICOLON);
                                                        add(";"); write();
  }

  final public void ImportDeclaration() throws ParseException {
    if (jj_2_4(3)) {
      jj_consume_token(IMPORT);
             add("import ");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        jj_consume_token(STATIC);
                                            add("static ");
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      AmbiguousName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(STAR);
                                                                                            add(".*");
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
                                                                                                                 add(";"); write();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        jj_consume_token(IMPORT);
        jj_consume_token(STAR);
        jj_consume_token(SEMICOLON);
                           add("import *;"); write();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void VariableDeclarator() throws ParseException {
    t = jj_consume_token(IDENTIFIER);
                         add(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
                                           add(" = ");
      VariableInitializer();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

/*
this originally handled postfix array dimensions...

void VariableDeclaratorId()  :
{ Token t; }
{
  <IDENTIFIER> 
  ( "[" "]"  )*
}
*/
  final public void VariableInitializer() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      ArrayInitializer();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      Expression();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ArrayInitializer() throws ParseException {
    jj_consume_token(LBRACE);
        add("{");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      VariableInitializer();
      label_2:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_2;
        }
        jj_consume_token(COMMA);
                                                                 add(", ");
        VariableInitializer();
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
                                                                                                                 add(", ");
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
                                                                                                                                      add("}"); write();
  }

  final public void FormalParameters() throws ParseException {
    boolean added = false;
    jj_consume_token(LPAREN);
        trimWhitespace(); trim(); add("(");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      FormalParameter();
                                                                    added = true;
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
                                                                                            add(", ");
        FormalParameter();
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                                                                                                                                      if (!added) trim(); add(")");
  }

  final public void FormalParameter() throws ParseException {
    if (jj_2_6(2)) {
      Type();
      t = jj_consume_token(IDENTIFIER);
                                       add(" "); add(t);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                   add(t);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
	Type, name and expression syntax follows.
*/
  final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
      PrimitiveType();
      break;
    case IDENTIFIER:
      AmbiguousName();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_4:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
                          add("[]");
    }
  }

/*
	Originally called ResultType in the grammar
*/
  final public void ReturnType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
             add("void");
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      Type();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PrimitiveType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
              add("boolean ");
      break;
    case CHAR:
      jj_consume_token(CHAR);
           add("char ");
      break;
    case BYTE:
      jj_consume_token(BYTE);
           add("byte ");
      break;
    case SHORT:
      jj_consume_token(SHORT);
            add("short ");
      break;
    case INT:
      jj_consume_token(INT);
          add("int ");
      break;
    case LONG:
      jj_consume_token(LONG);
           add("long ");
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
            add("float ");
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
             add("double ");
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AmbiguousName() throws ParseException {
    t = jj_consume_token(IDENTIFIER);
                     add(t);
    label_5:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER);
                                      add("."); add(t);
    }
  }

  final public void NameList() throws ParseException {
    AmbiguousName();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
                            add(", ");
      AmbiguousName();
    }
  }

/*
 * Expression syntax follows.
 */
  final public void Expression() throws ParseException {
    if (jj_2_9(2147483647)) {
      Assignment();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        ConditionalExpression();
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Assignment() throws ParseException {
    PrimaryExpression();
    AssignmentOperator();
    Expression();
  }

  final public void AssignmentOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
            add(" = ");
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
             add(" *= ");
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
             add(" /= ");
      break;
    case MODASSIGN:
      jj_consume_token(MODASSIGN);
             add(" %= ");
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
             add(" += ");
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
             add(" -= ");
      break;
    case ANDASSIGN:
      jj_consume_token(ANDASSIGN);
             add(" &= ");
      break;
    case XORASSIGN:
      jj_consume_token(XORASSIGN);
             add(" ^= ");
      break;
    case ORASSIGN:
      jj_consume_token(ORASSIGN);
             add(" |= ");
      break;
    case LSHIFTASSIGN:
      jj_consume_token(LSHIFTASSIGN);
              add(" <<= ");
      break;
    case LSHIFTASSIGNX:
      jj_consume_token(LSHIFTASSIGNX);
                             add(" @left_shift_assign ");
      break;
    case RSIGNEDSHIFTASSIGN:
      jj_consume_token(RSIGNEDSHIFTASSIGN);
              add(" >>= ");
      break;
    case RSIGNEDSHIFTASSIGNX:
      jj_consume_token(RSIGNEDSHIFTASSIGNX);
                              add(" @right_shift_assign ");
      break;
    case RUNSIGNEDSHIFTASSIGN:
      jj_consume_token(RUNSIGNEDSHIFTASSIGN);
               add(" >>>= ");
      break;
    case RUNSIGNEDSHIFTASSIGNX:
      jj_consume_token(RUNSIGNEDSHIFTASSIGNX);
                                       add(" @right_unsigned_shift_assign ");
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ConditionalExpression() throws ParseException {
    ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
                                      add(" ? ");
      Expression();
      jj_consume_token(COLON);
                                                                       add(" : ");
      ConditionalExpression();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

  final public void ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
      case BOOL_ORX:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
        jj_consume_token(BOOL_OR);
             add(" || ");
        break;
      case BOOL_ORX:
        jj_consume_token(BOOL_ORX);
                                     add(" @or ");
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ConditionalAndExpression();
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
    InclusiveOrExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
      case BOOL_ANDX:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
        jj_consume_token(BOOL_AND);
             add(" && ");
        break;
      case BOOL_ANDX:
        jj_consume_token(BOOL_ANDX);
                                       add(" @and ");
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      InclusiveOrExpression();
    }
  }

  final public void InclusiveOrExpression() throws ParseException {
    ExclusiveOrExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
      case BIT_ORX:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        jj_consume_token(BIT_OR);
            add(" | ");
        break;
      case BIT_ORX:
        jj_consume_token(BIT_ORX);
                                            add(" @bitwise_or" );
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExclusiveOrExpression();
    }
  }

  final public void ExclusiveOrExpression() throws ParseException {
    AndExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_10;
      }
      jj_consume_token(XOR);
                          add(" ^ ");
      AndExpression();
    }
  }

  final public void AndExpression() throws ParseException {
    EqualityExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
      case BIT_ANDX:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        jj_consume_token(BIT_AND);
        break;
      case BIT_ANDX:
        jj_consume_token(BIT_ANDX);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      EqualityExpression();
    }
  }

  final public void EqualityExpression() throws ParseException {
    InstanceOfExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
                                    add(" == ");
        break;
      case NE:
        jj_consume_token(NE);
                                                            add(" != ");
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
    }
  }

  final public void InstanceOfExpression() throws ParseException {
    RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
                   add(" instanceof ");
      Type();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
  }

  final public void RelationalExpression() throws ParseException {
    ShiftExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case GTX:
      case LT:
      case LTX:
      case LE:
      case LEX:
      case GE:
      case GEX:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
            add(" < ");
        break;
      case LTX:
        jj_consume_token(LTX);
                                    add(" @lt ");
        break;
      case GT:
        jj_consume_token(GT);
                                                            add(" > ");
        break;
      case GTX:
        jj_consume_token(GTX);
                                                                                    add(" @gt ");
        break;
      case LE:
        jj_consume_token(LE);
                                                                                                             add(" <= ");
        break;
      case LEX:
        jj_consume_token(LEX);
                                                                                                                                        add(" @lteq ");
        break;
      case GE:
        jj_consume_token(GE);
                                                                                                                                                                   add(" >= ");
        break;
      case GEX:
        jj_consume_token(GEX);
                                                                                                                                                                                              add(" @gteq ");
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ShiftExpression();
    }
  }

  final public void ShiftExpression() throws ParseException {
    AdditiveExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
      case LSHIFTX:
      case RSIGNEDSHIFT:
      case RSIGNEDSHIFTX:
      case RUNSIGNEDSHIFT:
      case RUNSIGNEDSHIFTX:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        jj_consume_token(LSHIFT);
             add(" << ");
        break;
      case LSHIFTX:
        jj_consume_token(LSHIFTX);
                                              add(" @left_shift ");
        break;
      case RSIGNEDSHIFT:
        jj_consume_token(RSIGNEDSHIFT);
                                                                               add(" >> ");
        break;
      case RSIGNEDSHIFTX:
        jj_consume_token(RSIGNEDSHIFTX);
                                                                                                                 add(" @right_shift ");
        break;
      case RUNSIGNEDSHIFT:
        jj_consume_token(RUNSIGNEDSHIFT);
                                                                                                                                                    add(" >>> ");
        break;
      case RUNSIGNEDSHIFTX:
        jj_consume_token(RUNSIGNEDSHIFTX);
                                                                                                                                                                                                add(" @right_unsigned_shift ");
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      AdditiveExpression();
    }
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                                       add(" + ");
        break;
      case MINUS:
        jj_consume_token(MINUS);
                                                             add(" - ");
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case MOD:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
                              add(" * ");
        break;
      case SLASH:
        jj_consume_token(SLASH);
                                                    add(" / ");
        break;
      case MOD:
        jj_consume_token(MOD);
                                                                          add(" % ");
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
          add(" + ");
        break;
      case MINUS:
        jj_consume_token(MINUS);
                                add(" - ");
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
      break;
    case INCR:
      PreIncrementExpression();
      break;
    case DECR:
      PreDecrementExpression();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
      UnaryExpressionNotPlusMinus();
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PreIncrementExpression() throws ParseException {
    jj_consume_token(INCR);
         add(" ++");
    PrimaryExpression();
  }

  final public void PreDecrementExpression() throws ParseException {
    jj_consume_token(DECR);
         add(" --");
    PrimaryExpression();
  }

  final public void UnaryExpressionNotPlusMinus() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        jj_consume_token(TILDE);
          add(" ~ ");
        break;
      case BANG:
        jj_consume_token(BANG);
                                add(" ! ");
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
      break;
    default:
      jj_la1[48] = jj_gen;
      if (jj_2_10(2147483647)) {
        CastExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          PostfixExpression();
          break;
        default:
          jj_la1[49] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

// This production is to determine lookahead only.  Nothing needs to be
// output from this production.
  final public void CastLookahead() throws ParseException {
    if (jj_2_11(2)) {
      jj_consume_token(LPAREN);
      PrimitiveType();
    } else if (jj_2_12(2147483647)) {
      jj_consume_token(LPAREN);
      AmbiguousName();
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        AmbiguousName();
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
          jj_consume_token(TILDE);
          break;
        case BANG:
          jj_consume_token(BANG);
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          break;
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        case NEW:
          jj_consume_token(NEW);
          break;
        case FALSE:
        case NULL:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          Literal();
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void PostfixExpression() throws ParseException {
    PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        jj_consume_token(INCR);
                                 trim(); add("++");
        break;
      case DECR:
        jj_consume_token(DECR);
                                                               trim(); add("--");
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
  }

  final public void CastExpression() throws ParseException {
    if (jj_2_13(3)) {
      jj_consume_token(LPAREN);
        add("(");
      Type();
      jj_consume_token(RPAREN);
                                 trim(); add(") ");
      UnaryExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        add("(");
        Type();
        jj_consume_token(RPAREN);
                                 trim(); add(") ");
        UnaryExpressionNotPlusMinus();
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void PrimaryExpression() throws ParseException {
    PrimaryPrefix();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case LBRACKET:
      case DOT:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_17;
      }
      PrimarySuffix();
    }
  }

  final public void MethodInvocation() throws ParseException {
    AmbiguousName();
    Arguments();
  }

  final public void PrimaryPrefix() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      Literal();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
        add("(");
      Expression();
      jj_consume_token(RPAREN);
                                       add(")");
      break;
    case NEW:
      AllocationExpression();
      break;
    default:
      jj_la1[56] = jj_gen;
      if (jj_2_14(2147483647)) {
        MethodInvocation();
      } else if (jj_2_15(2147483647)) {
        Type();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          AmbiguousName();
          break;
        default:
          jj_la1[57] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void PrimarySuffix() throws ParseException {
    if (jj_2_16(2)) {
      jj_consume_token(DOT);
      jj_consume_token(CLASS);
      add(".class");
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        trim(); add("[");
        Expression();
        jj_consume_token(RBRACKET);
                                               trim(); add("]");
        break;
      case DOT:
        jj_consume_token(DOT);
          add(".");
        t = jj_consume_token(IDENTIFIER);
                                       add(t);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          Arguments();
          break;
        default:
          jj_la1[58] = jj_gen;
          ;
        }

        break;
      case LBRACE:
        jj_consume_token(LBRACE);
      add("{"); write();
        Expression();
        jj_consume_token(RBRACE);
                                              write(); add("}"); write();

        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                        add(t);
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
                               add(t);
      break;
    case CHARACTER_LITERAL:
      t = jj_consume_token(CHARACTER_LITERAL);
                          add(t);
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                       add(t);
      break;
    case FALSE:
    case TRUE:
      BooleanLiteral();
      break;
    case NULL:
      NullLiteral();
      break;
    case VOID:
      VoidLiteral();
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
             add("true");
      break;
    case FALSE:
      jj_consume_token(FALSE);
            add("false");
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NullLiteral() throws ParseException {
    jj_consume_token(NULL);
             add("null");
  }

  final public void VoidLiteral() throws ParseException {
    jj_consume_token(VOID);
             add("void ");
  }

  final public void Arguments() throws ParseException {
    boolean added = false;
    jj_consume_token(LPAREN);
        trimWhitespace(); trim(); add("(");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      ArgumentList();
                                                                 added = true;
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                                                                                         if (!added) trim(); add(")");
  }

// leave these on the stack for Arguments() to handle
  final public void ArgumentList() throws ParseException {
    Expression();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[63] = jj_gen;
        break label_18;
      }
      jj_consume_token(COMMA);
                         add(", ");
      Expression();
    }
  }

  final public void AllocationExpression() throws ParseException {
    if (jj_2_18(2)) {
      jj_consume_token(NEW);
          add("new ");
      PrimitiveType();
      ArrayDimensions();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        jj_consume_token(NEW);
          add("new ");
        AmbiguousName();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ArrayDimensions();
          break;
        case LPAREN:
          Arguments();
          if (jj_2_17(2)) {
            Block();
          } else {
            ;
          }
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ArrayDimensions() throws ParseException {
    if (jj_2_21(2)) {
      label_19:
      while (true) {
        jj_consume_token(LBRACKET);
                       trimWhitespace(); add("[");
        Expression();
        jj_consume_token(RBRACKET);
                                                                        trim(); add("]");
        if (jj_2_19(2)) {
          ;
        } else {
          break label_19;
        }
      }
      label_20:
      while (true) {
        if (jj_2_20(2)) {
          ;
        } else {
          break label_20;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                                                                                                                        trim(); add("[] ");
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        label_21:
        while (true) {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
              trim(); add("[]");
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[66] = jj_gen;
            break label_21;
          }
        }
        ArrayInitializer();
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
 * Statement syntax follows.
 */
  final public void Statement() throws ParseException {
    if (jj_2_22(2)) {
      LabeledStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
      case LBRACE:
        Block();
        break;
      case SEMICOLON:
        EmptyStatement();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        StatementExpression();
        jj_consume_token(SEMICOLON);
                              add(";"); write();
        break;
      case SWITCH:
        SwitchStatement();
        break;
      case IF:
        IfStatement();
        break;
      case WHILE:
        WhileStatement();
        break;
      case DO:
        DoStatement();
        break;
      default:
        jj_la1[68] = jj_gen;
        if (isRegularForStatement()) {
          ForStatement();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FOR:
            EnhancedForStatement();
            break;
          case BREAK:
            BreakStatement();
            break;
          case CONTINUE:
            ContinueStatement();
            break;
          case RETURN:
            ReturnStatement();
            break;
          case SYNCHRONIZED:
            SynchronizedStatement();
            break;
          case THROW:
            ThrowStatement();
            break;
          case TRY:
            TryStatement();
            break;
          default:
            jj_la1[69] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

  final public void LabeledStatement() throws ParseException {
    t = jj_consume_token(IDENTIFIER);
                   add(t);
    jj_consume_token(COLON);
                                   add(":");
    Statement();
  }

  final public void Block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
             add("static ");
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
          trimWhitespace(); add(" {"); write(); ++token_source.level;
    label_22:
    while (true) {
      if (jj_2_23(1)) {
        ;
      } else {
        break label_22;
      }
      BlockStatement();
    }
    jj_consume_token(RBRACE);
          add("}"); --token_source.level; write();
  }

  final public void BlockStatement() throws ParseException {
    if (jj_2_24(2147483647)) {
      ClassDeclaration();
    } else if (jj_2_25(2147483647)) {
      MethodDeclaration();
    } else if (jj_2_26(2147483647)) {
      MethodDeclaration();
    } else if (jj_2_27(2147483647)) {
      TypedVariableDeclaration();
      jj_consume_token(SEMICOLON);
                                   add(";"); write();
    } else if (jj_2_28(1)) {
      Statement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ImportDeclaration();
        break;
      case PACKAGE:
        PackageDeclaration();
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void EmptyStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
        add(token_source.ls); add(token_source.ls);  write(); add(";"); write();
  }

  final public void StatementExpression() throws ParseException {
    Expression();
  }

  final public void SwitchStatement() throws ParseException {
    jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
                   add("switch (");
    Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
                                                             add(") {"); write(); ++token_source.level;
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        jj_la1[72] = jj_gen;
        break label_23;
      }
      SwitchLabel();
                          ++token_source.level;
      label_24:
      while (true) {
        if (jj_2_29(1)) {
          ;
        } else {
          break label_24;
        }
        BlockStatement();
      }
                                                                         --token_source.level;
    }
    jj_consume_token(RBRACE);
          add("}"); --token_source.level; write();
  }

  final public void SwitchLabel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
         add("case");
      Expression();
      jj_consume_token(COLON);
                                           add(":"); write();
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
      jj_consume_token(COLON);
                add("default:"); write();
      break;
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IfStatement() throws ParseException {
    boolean no_block = false;
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
        add("if (");
    Expression();
    jj_consume_token(RPAREN);
      add(") ");
        // Sun's coding standard says there should always be a block following
        // an "if" statement, so add the brackets if they are missing
        if (!getToken(1).image.equals("{")) {
            add("{");
            writeln();
            ++token_source.level;
            no_block = true;
        }
    Statement();
        if (no_block) {
            writeln();
            --token_source.level;
            add("}");
            writeln();
        }
        no_block = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
          trimWhitespace(); trim(); add(" else ");
        // Sun's coding standard says there should always be a block following
        // an "if" statement, so add the brackets if they are missing
            if (!getToken(1).image.equals("{")) {
                // remove any excess whitespace between the 'else' and the '{'
                trimWhitespace();
                trim();
                add("{");
                writeln();
                ++token_source.level;
                no_block = true;
            }
      Statement();
            if (no_block) {
                writeln();
                --token_source.level;
                add("}");
                writeln();
            }
      break;
    default:
      jj_la1[74] = jj_gen;
      ;
    }
  }

  final public void WhileStatement() throws ParseException {
    boolean no_block = false;
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
                  add("while (");
    Expression();
    jj_consume_token(RPAREN);
                                                       add(")");
        // if the next token isn't a "{" (indicating the start of a block) or
        // a ";" (indicating an empty statement), add "{" to make sure there is
        // indeed a block written.
        if (!getToken(1).image.equals("{") && !getToken(1).image.equals(";")) {
            add("{");
            writeln();
            ++token_source.level;
            no_block = true;
        }
    Statement();
        if (no_block) {
            writeln();
            --token_source.level;
            add("}");
            writeln();
        }
  }

/*
	Do statement is just a While statement with a special hook to execute
	at least once.
*/
  final public void DoStatement() throws ParseException {
    jj_consume_token(DO);
         add("do ");
    Statement();
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
                                                 trimWhitespace(); add(" ^while (");
    Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
                                                                                                              add(");"); write();
  }

  final public void ForStatement() throws ParseException {
    boolean no_block = false;
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
              add("for (");
    if (jj_2_30(2147483647)) {
      Type();
      t = jj_consume_token(IDENTIFIER);
                              add(" "); add(t);
      jj_consume_token(COLON);
                                                        add(" : ");
      Expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NATIVE:
      case NEW:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case TRUE:
      case VOID:
      case VOLATILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case NATIVE:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case TRUE:
        case VOID:
        case VOLATILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          ForInit();
          break;
        default:
          jj_la1[75] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
                        add("; ");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          Expression();
          break;
        default:
          jj_la1[76] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
                                                            add("; ");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          ForUpdate();
          break;
        default:
          jj_la1[77] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RPAREN);
        add(")");
        // if the next token isn't a "{" (indicating the start of a block) or
        // a ";" (indicating an empty statement), add "{" to make sure there is
        // indeed a block written.
        if (!getToken(1).image.equals("{") && !getToken(1).image.equals(";") ) {
            add("{");
            writeln();
            ++token_source.level;
            no_block = true;
        }
    Statement();
        if (no_block) {
            writeln();
            --token_source.level;
            add("}");
            writeln();
        }
  }

/*
	The new JDK1.5 enhanced for statement.
	e.g. for( int a : arrayOfInts ) { }
	We also support loose typing of the iterator var for BeanShell
	e.g. for( a : arrayOfInts ) { }
*/
  final public void EnhancedForStatement() throws ParseException {
    if (jj_2_31(4)) {
      jj_consume_token(FOR);
      jj_consume_token(LPAREN);
              add("for (");
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
                                                   add(t); add(" : ");
      Expression();
      jj_consume_token(RPAREN);
                                                                                            add(")");
      Statement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
        jj_consume_token(FOR);
        jj_consume_token(LPAREN);
              add("for (");
        Type();
        t = jj_consume_token(IDENTIFIER);
        jj_consume_token(COLON);
                                                          add(" "); add(t); add(" : ");
        Expression();
        jj_consume_token(RPAREN);
                                                                                                             add(")");
        Statement();
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ForInit() throws ParseException {
    if (jj_2_32(2147483647)) {
      TypedVariableDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        StatementExpressionList();
        break;
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**
	Declared a typed variable.
	Untyped variables are not declared per-se but are handled by the part
	of the grammar that deals with assignments.
*/
  final public void TypedVariableDeclaration() throws ParseException {
    Modifiers();
    Type();
                 add(" ");
    VariableDeclarator();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[81] = jj_gen;
        break label_25;
      }
      jj_consume_token(COMMA);
                                                          add(", ");
      VariableDeclarator();
    }
  }

  final public void StatementExpressionList() throws ParseException {
    StatementExpression();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[82] = jj_gen;
        break label_26;
      }
      jj_consume_token(COMMA);
                                add(", ");
      StatementExpression();
    }
  }

  final public void ForUpdate() throws ParseException {
    StatementExpressionList();
  }

  final public void BreakStatement() throws ParseException {
    jj_consume_token(BREAK);
            add("break");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                                               add(t);
      break;
    default:
      jj_la1[83] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                                                                 add(";"); writeln();
  }

  final public void ContinueStatement() throws ParseException {
    jj_consume_token(CONTINUE);
               add("continue");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                                                     add(t);
      break;
    default:
      jj_la1[84] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                                                                       add(";"); writeln();
  }

  final public void ReturnStatement() throws ParseException {
    jj_consume_token(RETURN);
             add("return");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      Expression();
      break;
    default:
      jj_la1[85] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                                                     add(";"); writeln();
  }

  final public void SynchronizedStatement() throws ParseException {
    jj_consume_token(SYNCHRONIZED);
    jj_consume_token(LPAREN);
                       add("synchronized ( ");
    Expression();
    jj_consume_token(RPAREN);
                                                                    add(" )");
    Block();

  }

  final public void ThrowStatement() throws ParseException {
    jj_consume_token(THROW);
            add("throw");
    Expression();
    jj_consume_token(SEMICOLON);
                                               add(";"); write();
  }

  final public void TryStatement() throws ParseException {
  boolean closed = false;
    jj_consume_token(TRY);
                add("try");
    Block();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        ;
        break;
      default:
        jj_la1[86] = jj_gen;
        break label_27;
      }
      jj_consume_token(CATCH);
      jj_consume_token(LPAREN);
                        trimWhitespace(); add(" catch ( ");
      FormalParameter();
      jj_consume_token(RPAREN);
                                                                                       add(" ) ");
      Block();
                                                                                                               closed = true;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
      jj_consume_token(FINALLY);
                      trimWhitespace(); add(" finally");
      Block();
                                                                     closed = true;
      break;
    default:
      jj_la1[87] = jj_gen;
      ;
    }
                if ( !closed ) {if (true) throw generateParseException();}
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_3R_102() {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_137()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_135()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_136()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_135()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_230()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_231()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_214()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) return true;
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_229()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_227()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_195()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_3R_271()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_3R_260()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_3R_139()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_278()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_53()) return true;
    if (jj_3R_44()) return true;
    if (jj_3R_214()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_215()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_220()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_53()) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_scan_token(IMPORT)) return true;
    if (jj_scan_token(STAR)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_3R_271()) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_259() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_269()) {
    jj_scanpos = xsp;
    if (jj_3R_270()) return true;
    }
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) return true;
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(IMPORT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    xsp = jj_scanpos;
    if (jj_3R_42()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_scan_token(PACKAGE)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_145() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) return true;
    }
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_3R_54()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) return true;
    }
    if (jj_3R_55()) return true;
    xsp = jj_scanpos;
    if (jj_3R_211()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) return true;
    }
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3R_209()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_210()) jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_3R_259()) return true;
    return false;
  }

  private boolean jj_3R_226() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_243()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_244()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_245()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_57()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_224()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_3R_242()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_242() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_257()) {
    jj_scanpos = xsp;
    if (jj_3R_258()) return true;
    }
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_223()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_53()) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_55()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_53()) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_120()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_151()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_144()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_139()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = isRegularForStatement();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_95()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3R_187() {
    Token xsp;
    if (jj_3R_190()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_190()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3_21() {
    Token xsp;
    if (jj_3_19()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_19()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_180() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) return true;
    }
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_41()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) return true;
    }
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_48()) return true;
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3R_158() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) return true;
    }
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_175()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_scan_token(GEX)) return true;
    return false;
  }

  private boolean jj_3R_177() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) return true;
    }
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_scan_token(RUNSIGNEDSHIFTX)) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_3R_179()) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_157() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_scan_token(RUNSIGNEDSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_286() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_scan_token(LEX)) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_158()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_285() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  private boolean jj_3R_284() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_285()) {
    jj_scanpos = xsp;
    if (jj_3R_286()) return true;
    }
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_scan_token(RSIGNEDSHIFTX)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_41()) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_69()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_283() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_232()) return true;
    return false;
  }

  private boolean jj_3R_281() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_283()) return true;
    }
    return false;
  }

  private boolean jj_3R_277() {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_282() {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_284()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_280() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_scan_token(RSIGNEDSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_scan_token(GTX)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_276() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_3R_282()) return true;
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_3R_281()) return true;
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  private boolean jj_3R_265() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_272()) {
    jj_scanpos = xsp;
    if (jj_3R_273()) {
    jj_scanpos = xsp;
    if (jj_3R_274()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_272() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_279()) {
    jj_scanpos = xsp;
    if (jj_3R_280()) return true;
    }
    if (jj_3R_232()) return true;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_250() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_267()) {
    jj_scanpos = xsp;
    if (jj_3R_268()) return true;
    }
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_266() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_275()) {
    jj_scanpos = xsp;
    if (jj_3R_276()) {
    jj_scanpos = xsp;
    if (jj_3R_277()) return true;
    }
    }
    if (jj_3R_232()) return true;
    return false;
  }

  private boolean jj_3R_263() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_scan_token(LSHIFTX)) return true;
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_3R_264()) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_3R_263()) return true;
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_232() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) {
    jj_scanpos = xsp;
    if (jj_3R_249()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_246() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_261()) {
    jj_scanpos = xsp;
    if (jj_3R_262()) return true;
    }
    if (jj_3R_232()) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_scan_token(LTX)) return true;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_3R_232()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_266()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_3R_221()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_250()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_scan_token(LSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_208() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) return true;
    }
    if (jj_3R_201()) return true;
    return false;
  }

  private boolean jj_3R_233() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) {
    jj_scanpos = xsp;
    if (jj_3R_252()) {
    jj_scanpos = xsp;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) {
    jj_scanpos = xsp;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_3R_256()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_216()) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_3R_216()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_233()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_222() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) {
    jj_scanpos = xsp;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) {
    jj_scanpos = xsp;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) return true;
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_207()) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_3R_207()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_222()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_205()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_217()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_191()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_scan_token(BIT_ORX)) return true;
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_3R_201()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_208()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(BOOL_ANDX)) return true;
    return false;
  }

  private boolean jj_3R_206() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) return true;
    }
    if (jj_3R_197()) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_3R_197()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_206()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_scan_token(BOOL_ORX)) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_191()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_202()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_scan_token(BIT_OR)) return true;
    return false;
  }

  private boolean jj_3R_198() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) return true;
    }
    if (jj_3R_188()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_3R_188()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_198()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_scan_token(BOOL_AND)) return true;
    return false;
  }

  private boolean jj_3R_192() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) return true;
    }
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_3R_183()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_192()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_scan_token(BOOL_OR)) return true;
    return false;
  }

  private boolean jj_3R_189() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) return true;
    }
    if (jj_3R_176()) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_3R_176()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_189()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_3R_163()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(RUNSIGNEDSHIFTASSIGNX)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(RUNSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(RSIGNEDSHIFTASSIGNX)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(RSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(LSHIFTASSIGNX)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(LSHIFTASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(ORASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(XORASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(ANDASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(MINUSASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(PLUSASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(MODASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(SLASHASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(STARASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_45()) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_3R_45()) return true;
    if (jj_3R_46()) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public BSHParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[88];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1,0x4000200,0x1000,0x1000000,0x0,0x10212400,0x0,0x0,0x0,0x0,0x0,0x0,0x12212400,0x12212400,0x0,0x0,0x10212400,0x0,0x10212400,0x10212400,0x10212400,0x0,0x12212400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x12212400,0x0,0x0,0x12212400,0x2000000,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x2000000,0x2000000,0x12212400,0x0,0x0,0x0,0x0,0x0,0x92312400,0x20040800,0x0,0x0,0x84000,0x84000,0x400000,0x16212600,0x12212400,0x12212400,0x16212600,0x20000000,0x12212400,0x0,0x0,0x0,0x0,0x12212400,0x8000,0x8000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x20d9c40,0x10,0x0,0x1,0x1004028,0x200000,0x8000,0x8000,0x0,0x2,0x0,0x894041a8,0x894041a8,0x0,0x0,0x4028,0x0,0x4028,0x1004028,0x4028,0x0,0x894041a8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x894041a8,0x0,0x0,0x894041a8,0x89400180,0x0,0x0,0x0,0x0,0x0,0x89400180,0x0,0x0,0x0,0x89400100,0x400000,0x894041a8,0x0,0x0,0x80,0x0,0x0,0x8d42c1a8,0x942000,0x8000,0x202,0x0,0x0,0x0,0x8b4ddde8,0x894041a8,0x894041a8,0x8b4ddde8,0x0,0x894041a8,0x0,0x0,0x0,0x0,0x894041a8,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x1100,0x0,0x4000,0x0,0x8000,0x30014e,0x30014e,0x2000,0x2000,0x8,0x8,0x8,0x8,0x0,0x2000,0x30004e,0x8000,0x400000,0xc0000000,0xc0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x21000000,0x21000000,0x0,0x1e0f0000,0x1e0f0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30004e,0x300000,0x300000,0x4e,0x30004e,0x40,0x0,0x0,0x40,0x4500,0x46,0x8,0x40,0x4500,0x6,0x0,0x30004e,0x2000,0x440,0x0,0x400,0x400,0x30114e,0x0,0x0,0x0,0x0,0x0,0x0,0x30004e,0x30004e,0x30004e,0x30104e,0x0,0x30004e,0x2000,0x2000,0x8,0x8,0x30004e,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c,0x3c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c,0xf5f00000,0x0,0x0,0x0,0x3,0x3,0xc00,0xc00,0x1000,0x300,0x300,0x0,0x0,0x0,0x0,0x0,0xfc000,0xfc000,0x30,0x30,0x20c0,0x20c0,0x30,0x3c,0x0,0x0,0x0,0x0,0x0,0xc,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c,0x0,0x0,0x0,0x0,0x0,0x3c,0x0,0x0,0x0,0x0,0x0,0x0,0x3c,0x3c,0x3c,0x3c,0x0,0x3c,0x0,0x0,0x0,0x0,0x3c,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[32];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public BSHParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BSHParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BSHParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public BSHParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new BSHParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public BSHParser(BSHParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(BSHParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[132];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 88; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 132; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 32; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
