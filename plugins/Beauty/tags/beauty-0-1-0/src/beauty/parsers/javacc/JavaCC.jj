
/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */

options {
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  ERROR_REPORTING = false;
  STATIC = false;
}

PARSER_BEGIN(JavaCCParser)

package beauty.parsers.javacc;

import java.io.*;
import java.util.*;

public class JavaCCParser
{
    Token t;
    String lineSep = System.getProperty("line.separator");
    
    boolean IN_CU = false;
    
    public String getText() {
        return token_source.getText();   
    }
    
    public void resetTokenSource() {
        token_source.reset();   
    }
    
    private void add(Token t) {
        token_source.add(t);
    }
    
    private void add(String s) {
        token_source.add(s);
    }
    
    private void trim() {
        token_source.trim();
    }
    
    private void trimNL() {
        token_source.trimNL();   
    }
    
    void Block() {
        try {
            Block(false);   
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    private void trimWhitespace() {
        token_source.trimWhitespace();   
    }
    
    private void write() {
        token_source.write();   
    }
    
    private void writeln() {
        token_source.writeln();   
    }
    
    public void setLineSeparator(String le) {
        lineSep = le;
        token_source.setLineSeparator(le);
    }
    
  /*
   * Returns true if the next token is not in the FOLLOW list of "expansion".
   * It is used to decide when the end of an "expansion" has been reached.
   */
  boolean notTailOfExpansionUnit() {
    Token t = getToken(1);
    if (t.kind == BIT_OR || t.kind == COMMA || t.kind == RPAREN || t.kind == RBRACE || t.kind == RBRACKET) return false;
    return true;
  }

  public JavaCCParser(String fileName)
   {
      this(System.in);
      try { ReInit(new FileInputStream(new File(fileName))); }
      catch(Exception e) { e.printStackTrace(); }
   }

  public static void main(String args[]) {
    JavaCCParser parser;
    if (args.length == 0) {
      System.out.println("Java Parser Version 1.1:  Reading from standard input . . .");
      parser = new JavaCCParser(System.in);
    } else if (args.length == 1) {
      System.out.println("Java Parser Version 1.1:  Reading from file " + args[0] + " . . .");
      try {
        parser = new JavaCCParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Java Parser Version 1.1:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("Java Parser Version 1.1:  Usage is one of:");
      System.out.println("         java JavaCCParser < inputfile");
      System.out.println("OR");
      System.out.println("         java JavaCCParser inputfile");
      return;
    }
    try {
      parser.CompilationUnit();
      System.out.println("Java Parser Version 1.1:  Java program parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("Java Parser Version 1.1:  Encountered errors during parse.");
    }
  }

}

PARSER_END(JavaCCParser)


TOKEN_MGR_DECLS :
{
    
    // line buffer, text is accumulated here, then written to the output stream
    // on end of line marker.
    static StringBuffer b = new StringBuffer(); 
    static StringBuffer outputBuffer = new StringBuffer();
    static ArrayList a = new ArrayList();
    private static OutputStream out = null;
    static int level = 0;
    static int indent = 4;
    static String ls = System.getProperty("line.separator");
    
    static void reset() {
        b = new StringBuffer();
        outputBuffer = new StringBuffer();
        a.clear();
    }
    
    static String getText() {
        return outputBuffer.toString();    
    }
    
    static void setLineSeparator(String le) {
        ls = le;   
    }
    
    static void add(Token t) {
        if (t != null) {
            a.add(t);
        }
    }
    
    static void add(String s) {
        if (s != null) {
            a.add(s);
        }
    }
    
    static void trim() {
        if (a.size() == 0)
            return;
        Object o = a.get(a.size() - 1);
        StringBuffer sb = new StringBuffer();
        if (o instanceof Token)
            sb.append( ((Token)o).image );
        else
            sb.append((String)o);
        while(sb.length() > 0 && sb.charAt(sb.length() - 1) == ' ')
            sb.deleteCharAt(sb.length() - 1);
        a.set(a.size() - 1, sb.toString() );
    }
    
    static void trimNL() {
        if(outputBuffer.length() > 0 && outputBuffer.charAt(outputBuffer.length() - 1) == '\n')
            outputBuffer.deleteCharAt(outputBuffer.length() - 1);
        if(outputBuffer.length() > 0 && outputBuffer.charAt(outputBuffer.length() - 1) == '\r')
            outputBuffer.deleteCharAt(outputBuffer.length() - 1);
    }
    
    static void trimNL(String s) {
        StringBuffer sb = new StringBuffer(s);
        while(sb.length() > 0 && (sb.charAt(sb.length() - 1) == '\r' || sb.charAt(sb.length() - 1) == '\n'))
            sb.deleteCharAt(sb.length() - 1);
    }
    
    static String trimStart(String s) {
        StringBuffer sb = new StringBuffer(s);
        while(sb.length() > 0 
                && (sb.charAt(0) == '\r' 
                    || sb.charAt(0) == '\n'
                    || sb.charAt(0) == '\t'
                    || sb.charAt(0) == ' ')) {
            sb.deleteCharAt(0);
        }
        return sb.toString();
    }
    
    static void trimWhitespace() {
        for (int i = a.size() - 1; i >= 0; i-- ) {
            Object o = a.get(i);
            StringBuffer sb = new StringBuffer();
            if (o instanceof Token)
                sb.append( ((Token)o).image );
            else
                sb.append((String)o);
            while(sb.length() > 0 && (sb.charAt(sb.length() - 1) == '\r' 
                    || sb.charAt(sb.length() - 1) == '\n'
                    || sb.charAt(sb.length() - 1) == '\t'
                    || sb.charAt(sb.length() - 1) == ' ')) {
                sb.deleteCharAt(sb.length() - 1);
            }
            if (sb.length() == 0) {
                a.remove(i);   
            }
            else {
                a.set(i, sb.toString());
                break;   
            }
        }
        if (a.size() == 0) {
            while(outputBuffer.length() > 0 && (outputBuffer.charAt(outputBuffer.length() - 1) == '\r' 
                    || outputBuffer.charAt(outputBuffer.length() - 1) == '\n'
                    || outputBuffer.charAt(outputBuffer.length() - 1) == '\t'
                    || outputBuffer.charAt(outputBuffer.length() - 1) == ' ')) {
                outputBuffer.deleteCharAt(outputBuffer.length() - 1);
            }
        }
    }
    
    static void writeln() {
        write();
        trimNL();
        outputBuffer.append(ls);
    }
    
    static void write() {
        try {
            b.delete(0, b.length());    
            
            // this next section builds the output string while protecting
            // string literals.  All extra spaces are removed from the output
            // string, except that string literals are left as is.
            ArrayList list = new ArrayList();
            String s = new String("");
            for (int i = 0; i < a.size(); i++) {
                Object o = a.get(i);
                if (o instanceof Token) {
                    Token token = (Token)o;
                    if (token.kind == JavaCCParserConstants.STRING_LITERAL) {
                        s = s.replaceAll("[ ]+", " ");
                        list.add(s);
                        s = new String("");
                        list.add(token.image);   
                    }
                    else {
                        s += ((Token)o).image;
                        s = s.replaceAll("[ ]+", " ");
                    }
                }
                else {
                    s += (String)o;
                    s = s.replaceAll("[ ]+", " ");
                }
            }
            for (int i = 0; i < list.size(); i++) {
                b.append((String)list.get(i));   
            }
            
            b.append(s);
            s = b.toString();
            
            // check for blank lines
            String maybe_blank = new String(s);
            if (maybe_blank.trim().length() == 0) {
                // yep, it's a blank, so just print it out
                if (s.length() >= ls.length()) {
                    s = s.substring(0, s.length() - ls.length());
                }
                outputBuffer.append(s);
                a.clear();
                return;
            }
            
            // most lines get indented, but there are a few special cases:
            // "else" gets put on the same line as the closing "}" for the "if",
            // so don't want to indent.  Similarly with "catch" and "finally".
            // The "while" at the end of a "do" loop is marked as "^while" to
            // differentiate it from a regular "while" block.  I'm also doing
            // some special handling if the line starts with "|", those lines
            // are indented 2 spaces less than the preceding line, this helps
            // keep the "|"s off of the same column as the various brackets and
            // makes them easier to see.
            if (!s.startsWith(" else") 
                    && !s.startsWith(" catch") 
                    && !s.startsWith(" finally")
                    && !s.startsWith(" ^while")
                    && !s.startsWith(" {") 
                    && (!endsWith(outputBuffer, "else") && !endsWith(outputBuffer, "else "))) {
                s = s.trim();
                boolean has_or = s.startsWith("|");
                for (int i = 0; i < level; i++) {
                    s = "    " + s;   
                }
                if (has_or && s.startsWith("  ")) {
                    s = s.substring(2);    
                }
            }
            
            // maybe clean out the ^ from the specially marked "while" at the
            // end of a "do" loop
            if (s.startsWith(" ^while")) {
                b.deleteCharAt(1);
                s = b.toString();
            }

            // remove any line enders
            //trimNL(s);

            // check if the output buffer does NOT end with a new line.  If it
            // doesn't, remove any leading whitespace from this line -- this means
            // that a partial line was previously written, and this line needs
            // to continue on the same line rather than a new line
            if (!endsWith(outputBuffer, "\n") && !endsWith(outputBuffer, "\r")) {
                s = trimStart(s);
            }
            
            // check that there aren't extra spaces in the buffer already
            if (s.startsWith(" ") && endsWith(outputBuffer, " ")) {
                s = s.substring(1);
            }
            
            // check that there is one space between the end of the output
            // buffer and this line
            if (!s.startsWith(" ") 
                    && !endsWith(outputBuffer, " ") 
                    && !endsWith(outputBuffer, "\r") 
                    && !endsWith(outputBuffer, "\n")
                    && outputBuffer.length() > 0) {
                outputBuffer.append(" ");
            }
            
            // finally! add the string
            outputBuffer.append(s);
            
            // clear the accumulator for the next line
            a.clear();    
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    static boolean endsWith(StringBuffer sb, String s) {
        if (sb == null && s == null)
            return true;
        if (sb == null && sb != null)
            return false;
        if (sb.length() < s.length())
            return false;
        String end = sb.substring(sb.length() - s.length());
        return end.equals(s);
    }
    
    static void writeComment(String s) {
        String[] lines = s.split("\r\n|\r|\n");
        for (int i = 0; i < lines.length; i++) {
            String line = lines[i];
            line = line.trim();
            
            if (line.startsWith("*")) {
                line = " " + line;   
            }
            
            for (int j = 0; j < level; j++) {
                line = "    " + line;   
            }
            outputBuffer.append(line).append(ls);
        }
    }
    

}



/**********************************************
 * THE JAVACC TOKEN SPECIFICATION STARTS HERE *
 **********************************************/


/* JAVACC RESERVED WORDS: These are the only tokens in JavaCC but not in Java */
/* danson, using these keywords as tokens causes problems when parsing java
code, so I'm replacing these keyworks with semantic lookahead as described in
the javacc faq. */
/*
TOKEN :
{
  < _OPTIONS: "options" >
| < _LOOKAHEAD: "LOOKAHEAD" >
| < _IGNORE_CASE: "IGNORE_CASE" >
| < _PARSER_BEGIN: "PARSER_BEGIN" >
| < _PARSER_END: "PARSER_END" >
| < _JAVACODE: "JAVACODE" >
| < _TOKEN: "TOKEN" >
| < _SPECIAL_TOKEN: "SPECIAL_TOKEN" >
| < _MORE: "MORE" >
| < _SKIP: "SKIP" >
| < _TOKEN_MGR_DECLS: "TOKEN_MGR_DECLS" >
| < _EOF: "EOF" >
}
*/

/* WHITE SPACE */

SKIP :
{
    "\f"  // are these EVER used?? 
}


SPECIAL_TOKEN :
{
  <LINE_ENDERS: ("\n"|"\r"|"\r\n")+ > 
  { 
    String s = matchedToken.image; 
    int n = 0;
    int r = 0;
    for (int i = 0; i < s.length(); i++) {
        if (s.charAt(i) == 'n')
            ++n;
        else
            ++r;
    }
    int cnt = Math.max(n, r);
    if (cnt > 0) {
        for ( ; cnt >= 0; cnt--)
            add(ls); 
        write(); 
    }
  }
| <SPACES: ([" "])+ >  { add(matchedToken); }
| <TABS: (["\t"])+ >  { for (int i = 0; i < matchedToken.image.length() * 8; i++) add(" "); }
}


/* COMMENTS */

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>  { writeComment(matchedToken.image); }
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">  { writeComment(matchedToken.image); }  
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">  { writeComment(matchedToken.image); } 
}


/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["u"] ["0"-"9","a"-"f"] ["0"-"9","a"-"f"] ["0"-"9","a"-"f"] ["0"-"9","a"-"f"]
            | ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ELLIPSIS: "..." >
}

/* >'s need special attention due to generics syntax. */
TOKEN :
{
  < RUNSIGNEDSHIFT: ">>>" >
  {
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RUNSIGNEDSHIFT;
     input_stream.backup(2);
  }
| < RSIGNEDSHIFT: ">>" >
  {
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RSIGNEDSHIFT;
     input_stream.backup(1);
  }
| < GT: ">" >
}


/************************************************
 * THE JAVACC GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/

void javacc_input() :
{}
{
  javacc_options()
  // special handling for javacc keyword
  //"PARSER_BEGIN" "(" identifier() ")"
  LOOKAHEAD( {getToken(1).kind == IDENTIFIER && getToken(1).image.equals("PARSER_BEGIN")} )
  t=<IDENTIFIER> "(" { write(); add(t); add(" ("); } identifier() ")" { add(")"); write(); }

  CompilationUnit()
  // special handling for javacc keyword
  //"PARSER_END" "(" identifier() ")"
  LOOKAHEAD( {getToken(1).kind == IDENTIFIER && getToken(1).image.equals("PARSER_END")} )
  t=<IDENTIFIER> "(" { write(); add(t); add(" ("); } identifier() ")" { add(")"); write(); }

  ( production() )+
  <EOF>
}

void javacc_options() :
{}
{
  // special handling for javacc keyword
  [
    LOOKAHEAD( {getToken(1).kind == IDENTIFIER && getToken(1).image.equals("options")} )
    ( t=<IDENTIFIER> "{" { add(t); add(" {"); write(); ++token_source.level; }( option_binding() )+ "}" { write(); --token_source.level; add("}"); write(); } )
  ]
}

void option_binding() :
{}
{
  ( 
  // special handling for javacc keyword
  LOOKAHEAD( {getToken(1).kind == IDENTIFIER && getToken(1).image.equals("LOOKAHEAD")} )
  identifier()     
  | 
  // special handling for javacc keyword
  LOOKAHEAD( {getToken(1).kind == IDENTIFIER && getToken(1).image.equals("IGNORE_CASE")} )
  identifier()     
  | 
  identifier() 
  | 
  "static" { add("static"); } )
  "=" { add(" = "); }
  ( IntegerLiteral() | BooleanLiteral() | StringLiteral() )
  ";" { add(";"); write(); }
}

void production() :
{}
{
  LOOKAHEAD(1)
  /*
   * Since JAVACODE is both a JavaCC reserved word and a Java identifier,
   * we need to give preference to "javacode_production" over
   * "bnf_production".
   */
  javacode_production()
|
  LOOKAHEAD(1)
  /*
   * Since SKIP, TOKEN, etc. are both JavaCC reserved words and Java
   * identifiers, we need to give preference to "regular_expression_production"
   * over "bnf_production".
   */
  regular_expr_production()
|
  LOOKAHEAD(1)
  /*
   * Since TOKEN_MGR_DECLS is both a JavaCC reserved word and a Java identifier,
   * we need to give preference to "token_manager_decls" over
   * "bnf_production".
   */
  token_manager_decls()
|
  bnf_production()
}

void javacode_production() :
{}
{
  // special handling for javacc keyword
  LOOKAHEAD( {getToken(1).kind == IDENTIFIER && getToken(1).image.equals("JAVACODE")} )
  identifier()
  
  ResultType() identifier() FormalParameters()
  [ LOOKAHEAD(2) "throws" Name() ( "," Name() )* ]
  [ LOOKAHEAD(2) node_descriptor() ]
  Block()
}

void bnf_production() :
{}
{
  // declaration
  ResultType() identifier() FormalParameters()
  [ "throws" Name() ( "," Name() )* ]
  [ node_descriptor() ]
  ":" { add(" :"); write(); }
  
  // java block
  Block(true)
  
  // expansions
  "{" { write(); add("{"); write(); ++token_source.level; } 
   expansion_choices() 
   "}" { writeln(); --token_source.level; add("}"); write(); }
}

void regular_expr_production() :
{}
{
  [
    LOOKAHEAD(2) "<" "*" ">" { add("<*>"); write(); }
  |
    "<" t=<IDENTIFIER> { add("<"); add(t); } ( "," t=<IDENTIFIER> { add(", "); add(t); } )* ">" { add(">"); write(); }
  ]
  regexpr_kind() [ "[" { add("["); }
                        // special handling for javacc keyword
                        LOOKAHEAD( {getToken(1).kind == IDENTIFIER && getToken(1).image.equals("IGNORE_CASE")} )
                        identifier() 
                        "]" { add("]"); }
                        ] ":" { add(" : "); write(); }
  "{" { add("{"); write(); ++token_source.level; } 
   regexpr_spec() 
   ( "|" { writeln(); add("| "); } regexpr_spec() )* 
   "}" { writeln(); --token_source.level; add(token_source.ls + "}"); write(); }

}

void token_manager_decls() :
{}
{
  // special handling for javacc keyword
  LOOKAHEAD( {getToken(1).kind == IDENTIFIER && getToken(1).image.equals("TOKEN_MGR_DECLS")} )
  t=<IDENTIFIER> ":" { add(t); add(" : "); } TokenMgrDeclBlock() 
}

void regexpr_kind() :
{}
{
    (
  // special handling for javacc keyword
  LOOKAHEAD( {getToken(1).kind == IDENTIFIER && getToken(1).image.equals("TOKEN")} )
  identifier()
|
  // special handling for javacc keyword
  LOOKAHEAD( {getToken(1).kind == IDENTIFIER && getToken(1).image.equals("SPECIAL_TOKEN")} )
  identifier()
|
  // special handling for javacc keyword
  LOOKAHEAD( {getToken(1).kind == IDENTIFIER && getToken(1).image.equals("SKIP")} )
  identifier()
|
  // special handling for javacc keyword
  LOOKAHEAD( {getToken(1).kind == IDENTIFIER && getToken(1).image.equals("MORE")} )
  identifier()
    )
}

void regexpr_spec() :
{}
{
    regular_expression() [ Block() ] [ ":" t=<IDENTIFIER> { add(" : "); add(t); }]
}

void expansion_choices() :
{}
{
    expansion() ( "|" { writeln(); add("| "); } expansion() { write(); } )*
}

void expansion() :
{}
{
  ( LOOKAHEAD(1)
    // special handling for javacc keyword
    LOOKAHEAD( {getToken(1).kind == IDENTIFIER && getToken(1).image.equals("LOOKAHEAD")} )
    t=<IDENTIFIER> "(" { add(t); add(" ( "); } local_lookahead() ")" { add(" ) "); writeln(); }
  )?
  ( LOOKAHEAD(0, { notTailOfExpansionUnit() } )
    expansion_unit()
    [ node_descriptor() ]
  )+
}

void local_lookahead() :
	{
	  boolean commaAtEnd = false, emptyLA = true;
	}
{
  [
    /*
     * The lookahead of 1 is to turn off the warning message that lets
     * us know that an expansion choice can also start with an integer
     * literal because a primary expression can do the same.  But we
     * know that this is what we want.
     */
    LOOKAHEAD(1)
    IntegerLiteral()
	{
	  emptyLA = false;
	}
  ]
  [ LOOKAHEAD(0, { !emptyLA && (getToken(1).kind != RPAREN) } )
    "," { add(", "); }
	{
	  commaAtEnd = true;
	}
  ]
  [ LOOKAHEAD(0, { getToken(1).kind != RPAREN && getToken(1).kind != LBRACE } )
    expansion_choices()
	{
	  emptyLA = false; commaAtEnd = false;
	}
  ]
  [ LOOKAHEAD(0, { !emptyLA && !commaAtEnd && (getToken(1).kind != RPAREN) } )
    "," { add(", "); }
	{
	  commaAtEnd = true;
	}
  ]
  [ LOOKAHEAD(0, { emptyLA || commaAtEnd } )
  "{" { add("{ "); } Expression() "}" { add(" }"); }
  ]
}

void expansion_unit() :
{}
{
  LOOKAHEAD(1)
  /*
   * We give this priority over primary expressions which use LOOKAHEAD as the
   * name of its identifier.
   */
  // special handling for javacc keyword
  LOOKAHEAD( {getToken(1).kind == IDENTIFIER && getToken(1).image.equals("LOOKAHEAD")} )
  t=<IDENTIFIER> "(" { add(t); add(" ( "); } local_lookahead() ")" { add(" ) "); writeln(); }
|
  Block()
|
  "[" { writeln(); add(" [ "); writeln(); ++token_source.level; } expansion_choices() "]" { writeln(); --token_source.level; add(" ] "); writeln(); }
|
  "try" "{" { add("try {"); write(); } expansion_choices() "}" { write(); add("}"); }
  ( "catch" "(" { add("catch ( "); } Name() t=<IDENTIFIER> ")" { add(t); add(" ) "); } Block() )*
  [ "finally" { add("finally "); } Block() ]
|
  LOOKAHEAD( identifier() | StringLiteral() | "<" | PrimaryExpression() "=" )
  [
    LOOKAHEAD(PrimaryExpression() "=")
    PrimaryExpression() "=" { add(" = "); }
  ]
  ( regular_expression() | identifier() Arguments() )
|
  "(" { writeln(); add(" ( "); writeln(); ++token_source.level; } expansion_choices() ")" { writeln(); --token_source.level; add(" )"); writeln(); } ( "+" { trimWhitespace(); add("+"); writeln(); } | "*" { trimWhitespace(); add("*"); writeln(); } | "?" { trimWhitespace(); add("?"); writeln(); } )?
}

void regular_expression() :
{}
{
  StringLiteral()
|
  LOOKAHEAD(3)
  "<" { add("<"); } [ [ "#" { add("#"); } ] identifier() ":" { add(": "); } ] complex_regular_expression_choices() ">" { add(">"); }
|
  LOOKAHEAD(2)
  "<" { add("<"); } identifier() ">" { add(">"); }
|
  "<" { add("<"); }
  // special handling for javacc keyword
  LOOKAHEAD( {getToken(1).kind == IDENTIFIER && getToken(1).image.equals("EOF")} )
  identifier() 
  ">" { add(">"); }
}

void complex_regular_expression_choices() :
{}
{
    complex_regular_expression() ( "|" { add(token_source.ls + " | "); } complex_regular_expression() {write(); } )*
}

void complex_regular_expression() :
{}
{
  ( complex_regular_expression_unit() )+
}

void complex_regular_expression_unit() :
{}
{
  StringLiteral()
|
  "<" { add("<"); } identifier() ">" { add(">"); }
|
  character_list()
|
  "(" { add("( "); } complex_regular_expression_choices() ")" { add(" )"); } ( "+" { add("+"); } | "*" { add("*"); } | "?" { add("?"); } )?
}

void character_list() :
{
    writeln();
}
{
  [ "~" { add("~"); } ] "[" { add("["); } [ character_descriptor() ( "," { add(","); } character_descriptor() )* ] "]" { add("]"); }
}

void character_descriptor() :
{}
{
  StringLiteral() [ "-" { add("-"); } StringLiteral() ]
}

void identifier() :
{}
{
  t=<IDENTIFIER>
  {
      add(t);
  }
}


/**********************************************
 * THE JJTREE PRODUCTIONS START HERE          *
 **********************************************/

void node_descriptor() :
{}
{
  "#" { add("#"); } ( identifier() | t=<VOID> { add(t); } )
  [
   LOOKAHEAD(1)
   "(" { add("("); } [ ">" { add(">"); } ] node_descriptor_expression() ")" { add(")"); }
  ]
}


JAVACODE
void node_descriptor_expression()
{
  Token tok;
  int nesting = 1;
  while (true) {
    tok = getToken(1);
    if (tok.kind == 0) {
      throw new ParseException();
    }
    if (tok.kind == LPAREN) nesting++;
    if (tok.kind == RPAREN) {
      nesting--;
      if (nesting == 0) break;
    }
    tok = getNextToken();
  }
}



/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

void CompilationUnit():
{
    IN_CU = true;
}
{
  [ PackageDeclaration() ]
  ( ImportDeclaration() )*
  ( TypeDeclaration() )*
  
  { IN_CU = false; }
}

void PackageDeclaration():
{}
{
    t="package" { add(t); } Name() ";" { add(";"); write(); }
}

void ImportDeclaration():
{}
{
  "import" { add("import"); } [ "static" { add("static"); } ] Name() [ "." "*" { add(".*"); } ] ";" { add(";"); write(); } 
}

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */

int Modifiers():
{
   int modifiers = 0;
}
{
 (
  LOOKAHEAD(2)
  (
   "public" { modifiers |= ModifierSet.PUBLIC; }
  |
   "static" { modifiers |= ModifierSet.STATIC; }
  |
   "protected" { modifiers |= ModifierSet.PROTECTED; }
  |
   "private" { modifiers |= ModifierSet.PRIVATE; }
  |
   "final" { modifiers |= ModifierSet.FINAL; }
  |
   "abstract" { modifiers |= ModifierSet.ABSTRACT; }
  |
   "synchronized" { modifiers |= ModifierSet.SYNCHRONIZED; }
  |
   "native" { modifiers |= ModifierSet.NATIVE; }
  |
   "transient" { modifiers |= ModifierSet.TRANSIENT; }
  |
   "volatile" { modifiers |= ModifierSet.VOLATILE; }
  |
   "strictfp" { modifiers |= ModifierSet.STRICTFP; }
  |
   Annotation()
  )
 )*

 {
    return modifiers;
 }
}

/*
 * Declaration syntax follows.
 */
void TypeDeclaration():
{
   int modifiers;
}
{
    ";" { add(";"); write(); }
|
  modifiers = Modifiers()
  (
     ClassOrInterfaceDeclaration(modifiers)
   |
     EnumDeclaration(modifiers)
   |
     AnnotationTypeDeclaration(modifiers)
  )
}


void ClassOrInterfaceDeclaration(int modifiers):
{
   boolean isInterface = false;
   add(ModifierSet.toString(modifiers) + " ");
}
{
  ( "class" { add("class"); } | "interface" { add("interface");  isInterface = true; } )
  t=<IDENTIFIER> { add(t); } 
  [ TypeParameters() ]
  [ ExtendsList(isInterface) ]
  [ ImplementsList(isInterface) ]
  ClassOrInterfaceBody(isInterface)
}

void ExtendsList(boolean isInterface):
{
   boolean extendsMoreThanOne = false;
}
{
   "extends" { add("extends"); } ClassOrInterfaceType()
   ( "," { add(","); } ClassOrInterfaceType() { extendsMoreThanOne = true; } )*
   {
      if (extendsMoreThanOne && !isInterface)
         throw new ParseException("A class cannot extend more than one other class");
   }
}

void ImplementsList(boolean isInterface):
{}
{
   "implements" { add("implements"); } ClassOrInterfaceType()
   ( "," { add(","); } ClassOrInterfaceType() )*
   {
      if (isInterface)
         throw new ParseException("An interface cannot implement other interfaces");
   }
}

void EnumDeclaration(int modifiers):
{
    add(ModifierSet.toString(modifiers) + " ");
}
{
    
  "enum" { add("enum"); } t=<IDENTIFIER> { add(t); }
  [ ImplementsList(false) ]
  EnumBody()
}

void EnumBody():
{}
{
    "{" { add("{"); }
   EnumConstant() ( "," { add(","); } EnumConstant() )*
   [ ";" { add(";"); write(); } ( ClassOrInterfaceBodyDeclaration(false) )* ]
   "}" { add("}"); write(); }
}

void EnumConstant():
{}
{
  t=<IDENTIFIER> { add(t); } [ Arguments() ] [ ClassOrInterfaceBody(false) ]
}

void TypeParameters():
{}
{
    "<" { add("<"); } TypeParameter() ( "," { add(","); } TypeParameter() )* ">" { add("> "); }
}

void TypeParameter():
{}
{
    t=<IDENTIFIER> { add(t); } [ TypeBound() ]
}

void TypeBound():
{}
{
    "extends" { add("extends"); } ClassOrInterfaceType() ( "&" { add("&"); } ClassOrInterfaceType() )*
}

void ClassOrInterfaceBody(boolean isInterface):
{}
{
    "{" { add("{"); write(); ++token_source.level; } ( ClassOrInterfaceBodyDeclaration(isInterface) )* "}" { add("}"); --token_source.level; write(); }
}

void ClassOrInterfaceBodyDeclaration(boolean isInterface):
{
   boolean isNestedInterface = false;
   int modifiers;
}
{
  LOOKAHEAD(2)
  Initializer()
  {
     if (isInterface)
        throw new ParseException("An interface cannot have initializers");
  }
|
  modifiers = Modifiers() // Just get all the modifiers out of the way. If you want to do
              // more checks, pass the modifiers down to the member
  (
      ClassOrInterfaceDeclaration(modifiers)
    |
      EnumDeclaration(modifiers)
    |
      LOOKAHEAD( [ TypeParameters() ] <IDENTIFIER> "(" )
      ConstructorDeclaration(modifiers)
    |
      LOOKAHEAD( Type() <IDENTIFIER> ( "[" "]" )* ( "," | "=" | ";" ) )
      FieldDeclaration(modifiers)
    |
      MethodDeclaration(modifiers)
  )
|
  ";" { add(";"); write(); }
}

void FieldDeclaration(int modifiers):
{
    add(ModifierSet.toString(modifiers) + " ");
}
{
  // Modifiers are already matched in the caller
  Type() VariableDeclarator() ( "," { add(","); } VariableDeclarator() )* ";" { add(";"); write(); }
}

void VariableDeclarator():
{}
{
  VariableDeclaratorId() [ "=" { add(" = "); } VariableInitializer() ]
}

void VariableDeclaratorId():
{}
{
  t=<IDENTIFIER> { add(t); } ( "[" "]" { add("[]"); } )*
}

void VariableInitializer():
{}
{
  ArrayInitializer()
|
  Expression()
}

void ArrayInitializer():
{}
{
    "{" { add("{"); } [ VariableInitializer() ( LOOKAHEAD(2) "," { add(","); } VariableInitializer() )* ] [ "," { add(","); } ] "}" { add("}"); write(); }
}

void MethodDeclaration(int modifiers):
{
    add(ModifierSet.toString(modifiers) + " ");
}
{
  // Modifiers already matched in the caller!
  [ TypeParameters() ]
  ResultType()
  MethodDeclarator() [ "throws" { add("throws"); } NameList() ]
  ( Block() | ";" { add(";"); write(); } )
}

void MethodDeclarator():
{}
{
  t=<IDENTIFIER> { add(t); } FormalParameters() ( "[" "]" { add("[]"); } )*
}

void FormalParameters():
{
    boolean added = false;
}
{
    "(" { add("("); } [ FormalParameter() { added = true; } ( "," { add(","); } FormalParameter() )* ] ")" { if (!added) trim(); add(")"); }
}

void FormalParameter():
{}
{
  [ "final" { add("final"); } ] Type() [ "..." { trim(); add("..."); } ] VariableDeclaratorId()
}

void ConstructorDeclaration(int modifiers):
{
    add(ModifierSet.toString(modifiers) + " ");
}
{
  [ TypeParameters() ]
  t=<IDENTIFIER> { add(t); } FormalParameters() [ "throws" { add("throws"); } NameList() ]
  "{" { add("{"); write(); ++token_source.level;}
    [ LOOKAHEAD(ExplicitConstructorInvocation()) ExplicitConstructorInvocation() ]
    ( BlockStatement() )*
  "}" { add("}"); --token_source.level; write(); }
}

void ExplicitConstructorInvocation():
{}
{
  LOOKAHEAD("this" Arguments() ";")
  "this" { add("this"); } Arguments() ";" { add(";"); write(); }
|
  [ LOOKAHEAD(2) PrimaryExpression() "." ] "super" { add("super"); } Arguments() ";" { add(";"); write(); }
}

void Initializer():
{}
{
  [ "static" { add("static "); }] Block()
}


/*
 * Type, name and expression syntax follows.
 */

void Type():
{}
{
   LOOKAHEAD(2) ReferenceType()
 |
   PrimitiveType()
}

void ReferenceType():
{}
{
   PrimitiveType() ( LOOKAHEAD(2) "[" "]" { add("[]"); } )+
  |
   ( ClassOrInterfaceType() ) ( LOOKAHEAD(2) "[" "]" { add("[]"); } )*
}

void ClassOrInterfaceType():
{}
{
  t=<IDENTIFIER> { add(t + " "); } [ LOOKAHEAD(2)  TypeArguments() ]
  ( LOOKAHEAD(2) "." { trim(); add("."); } t=<IDENTIFIER> { add(t + " "); } [ LOOKAHEAD(2) TypeArguments() ] )*
}

void TypeArguments():
{}
{
   "<" { add("<"); } TypeArgument() ( "," { trim(); add(", "); } TypeArgument() )* ">" { trim(); add("> "); }
}

void TypeArgument():
{}
{
   ReferenceType()
 |
   "?" { add("?"); } [ WildcardBounds() ]
}

void WildcardBounds():
{}
{
   "extends" { add("extends"); } ReferenceType()
 |
   "super" { add("super"); } ReferenceType()
}


void PrimitiveType():
{}
{
    (
  t="boolean"
|
  t="char"
|
  t="byte"
|
  t="short"
|
  t="int"
|
  t="long"
|
  t="float"
|
  t="double"
  )
    {
        add(t + " ");   
    }
}

void ResultType():
{}
{
  "void" { add("void "); }
|
  Type()
}

void Name():
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{}
{
    t=<IDENTIFIER> { add(t); }
  ( LOOKAHEAD(2) "." t=<IDENTIFIER> { add("."); add(t); }
  )*
}

void NameList():
{}
{
  Name() ( "," { add(", "); } Name() )*
}


/*
 * Expression syntax follows.
 */

void Expression():
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{}
{
  ConditionalExpression()
  [
    LOOKAHEAD(2)
    AssignmentOperator() Expression()
  ]
}

void AssignmentOperator():
{}
{
  (t="=" | t="*=" | t="/=" | t="%=" | t="+=" | t="-=" | t="<<=" | t=">>=" | t=">>>=" | t="&=" | t="^=" | t="|=")
  { add(" " + t.image + " "); }
}

void ConditionalExpression():
{}
{
    ConditionalOrExpression() [ "?" { add(" ? "); } Expression() ":" { add(" : "); } Expression() ]
}

void ConditionalOrExpression():
{}
{
  ConditionalAndExpression() ( "||" { add(" || "); } ConditionalAndExpression() )*
}

void ConditionalAndExpression():
{}
{
  InclusiveOrExpression() ( "&&" { add(" && "); } InclusiveOrExpression() )*
}

void InclusiveOrExpression():
{}
{
  ExclusiveOrExpression() ( "|" { add(" | "); } ExclusiveOrExpression() )*
}

void ExclusiveOrExpression():
{}
{
  AndExpression() ( "^" { add(" ^ "); } AndExpression() )*
}

void AndExpression():
{}
{
  EqualityExpression() ( "&" { add(" & "); } EqualityExpression() )*
}

void EqualityExpression():
{}
{
  InstanceOfExpression() ( ( "==" { add(" == "); } | "!=" { add(" != "); } ) InstanceOfExpression() )*
}

void InstanceOfExpression():
{}
{
  RelationalExpression() [ "instanceof" { add(" instanceof "); } Type() ]
}

void RelationalExpression():
{}
{
  ShiftExpression() ( ( "<" { add(" < "); } | ">" { add(" > "); } | "<=" { add(" <= "); } | ">=" { add(" >= "); } ) ShiftExpression() )*
}

void ShiftExpression():
{}
{
  AdditiveExpression() ( ( "<<" { add(" << "); } | RSIGNEDSHIFT() | RUNSIGNEDSHIFT() ) AdditiveExpression() )*
}

void AdditiveExpression():
{}
{
  MultiplicativeExpression() ( ( "+" { add(" + "); } | "-" { add(" - "); } ) MultiplicativeExpression() )*
}

void MultiplicativeExpression():
{}
{
  UnaryExpression() ( ( "*" { add(" * "); } | "/" { add(" / "); } | "%" { add(" % "); } ) UnaryExpression() )*
}

void UnaryExpression():
{}
{
  ( "+" { add(" + "); } | "-" { add(" - "); } ) UnaryExpression()
|
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  UnaryExpressionNotPlusMinus()
}

void PreIncrementExpression():
{}
{
  "++" { add(" ++"); } PrimaryExpression()
}

void PreDecrementExpression():
{}
{
  "--" { add(" --"); } PrimaryExpression()
}

void UnaryExpressionNotPlusMinus():
{}
{
  ( "~" { add(" ~ "); } | "!" { add(" ! "); } ) UnaryExpression()
|
  LOOKAHEAD( CastLookahead() )
  CastExpression()
|
  PostfixExpression()
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead():
{}
{
  LOOKAHEAD(2)
  "("  PrimitiveType()
|
  LOOKAHEAD("(" Type() "[")
  "("  Type() "[" "]" { add("[]"); }
|
  "("  Type() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
}

void PostfixExpression():
{}
{
  PrimaryExpression() [ "++" { trim(); add("++"); } | "--" { trim(); add("--"); } ]
}

void CastExpression():
{}
{
  LOOKAHEAD("(" PrimitiveType())
  "(" { add("("); } Type() ")" { trim(); add(") "); } UnaryExpression()
|
  "(" { add("("); } Type() ")" { trim(); add(") "); } UnaryExpressionNotPlusMinus()
}

void PrimaryExpression():
{}
{
  PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )*
}

void MemberSelector():
{}
{
  "." { add("."); } TypeArguments() t=<IDENTIFIER> { add(t); }
}

void PrimaryPrefix():
{}
{
  Literal()
|
  "this" { add("this"); }
|
  "super" "." { add("super."); } t=<IDENTIFIER> { add(t); }
|
  "(" { add("("); } Expression() ")" { add(")"); }
|
  AllocationExpression()
|
  LOOKAHEAD( ResultType() "." "class" )
  ResultType() "." "class" { add(".class"); }
|
  Name()
}

void PrimarySuffix():
{}
{
  LOOKAHEAD(2)
  "." "this" { add(".this"); }
|
  LOOKAHEAD(2)
  "." { add("."); } AllocationExpression()
|
  LOOKAHEAD(3)
  MemberSelector()
|
  "[" { add("["); } Expression() "]" { add("]"); }
|
  "." { add("."); } t=<IDENTIFIER> { add(t); }
|
  Arguments()
}

void Literal():
{}
{
  IntegerLiteral()
|
  t=<FLOATING_POINT_LITERAL> { add(t); }
|
  t=<CHARACTER_LITERAL> { add(t); }
|
  StringLiteral()
|
  BooleanLiteral()
|
  NullLiteral()
}

void StringLiteral():
{}
{
  t=<STRING_LITERAL>
  
  {
      add(t);
  }
}

void IntegerLiteral():
{}
{
    t=<INTEGER_LITERAL> { add(t.image); }   
}

void BooleanLiteral():
{}
{
  "true" { add("true"); }
|
  "false" { add("false"); }
}

void NullLiteral():
{}
{
  "null" { add("null"); }
}

void Arguments():
{
    boolean added = false;
}
{
    "(" { add("("); } [ ArgumentList() { added = true; } ] ")" { if (!added) trim(); add(")"); }
}

void ArgumentList():
{}
{
  Expression() ( "," { add(","); } Expression() )*
}

void AllocationExpression():
{}
{
  LOOKAHEAD(2)
  "new" { add("new "); } PrimitiveType() ArrayDimsAndInits()
|
  "new" { add("new "); } ClassOrInterfaceType() [ TypeArguments() ]
    (
      ArrayDimsAndInits()
    |
      Arguments() [ ClassOrInterfaceBody(false) ]
    )
}

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimsAndInits():
{}
{
  LOOKAHEAD(2)
  ( LOOKAHEAD(2) "[" { add("["); } Expression() "]" { add("]"); } )+ ( LOOKAHEAD(2) "[" "]" { add("[]"); } )*
|
  ( "[" "]" { add("[]"); } )+ ArrayInitializer()
}


/*
 * Statement syntax follows.
 */
void Statement():
{}
{
  LOOKAHEAD(2)
  LabeledStatement()
|
  AssertStatement()
|
  Block()
|
  EmptyStatement()
|
  StatementExpression() ";" { add(";"); write(); }
|
  SwitchStatement()
|
  IfStatement()
|
  WhileStatement()
|
  DoStatement()
|
  ForStatement()
|
  BreakStatement()
|
  ContinueStatement()
|
  ReturnStatement()
|
  ThrowStatement()
|
  SynchronizedStatement()
|
  TryStatement()
}

void AssertStatement():
{}
{
    "assert" { add("assert"); } Expression() [ ":" { add(":"); } Expression() ] ";" { add(";"); write(); }
}

void LabeledStatement():
{}
{
    t=<IDENTIFIER> { add(t); } ":" { add(":"); } Statement()
}

void Block(boolean trim):
{}
{
    "{" { if (trim) trim(); if (trim) add("{"); else add(" {"); if (IN_CU) write(); else writeln(); ++token_source.level; } 
        ( BlockStatement() )* 
    "}" { trimNL(); writeln(); add("}"); --token_source.level;  write(); }
}

void BlockStatement():
{}
{
  LOOKAHEAD([ "final" ] Type() <IDENTIFIER>)
  LocalVariableDeclaration() ";" { add(";"); write(); }
|
  Statement()
|
  ClassOrInterfaceDeclaration(0)
}


void TokenMgrDeclBlock():
{
    // an un-named block of code, added this for special handling for the
    // token_manager_decls() method
}
{
    "{" { writeln(); add("{"); writeln(); ++token_source.level; } ( TokenMgrDeclBlockStatement() )* "}" { writeln(); --token_source.level; add("}"); writeln(); }
}

void TokenMgrDeclBlockStatement():
{
    int modifiers;
}
{
        modifiers=Modifiers() 
            (
          LOOKAHEAD( Type() <IDENTIFIER> ( "[" "]" )* ( "," | "=" | ";" ) )
          FieldDeclaration(modifiers)
        |
          LOOKAHEAD(3)
          MethodDeclaration(modifiers)
        |
          Statement()
        |
          ClassOrInterfaceDeclaration(modifiers)
             )
}


void LocalVariableDeclaration():
{}
{
  [ "final" { add("final"); } ] Type() VariableDeclarator() ( "," { add(","); } VariableDeclarator() )*
}

void EmptyStatement():
{}
{
  ";" { add(token_source.ls); add(token_source.ls);  write(); add(";"); write(); }
}

void StatementExpression():
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{}
{
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  PrimaryExpression()
  [
    "++" { add("++"); }
  |
    "--" { add("--"); }
  |
    AssignmentOperator() Expression()
  ]
}

void SwitchStatement():
{}
{
    "switch" "(" { add("switch ("); } Expression() ")" "{" { add(") {"); write(); ++token_source.level; } 
        ( SwitchLabel() { ++token_source.level;} ( BlockStatement() )* { --token_source.level;} )*
    "}" { add("}"); --token_source.level; write(); }
}

void SwitchLabel():
{}
{
"case" { add("case"); } Expression() ":" { add(":"); write(); }
|
"default" ":" { add("default:"); write(); }
}

void IfStatement():
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{
    
}
{
    "if" "(" 
    {
        add("if (");
    } 
    Expression() ")" 
     { add(") ");} 
     
     Statement()  
     [ 
         LOOKAHEAD(1) "else" 
         { trimWhitespace(); trim(); add(" else "); } 
         Statement() 
     ]
}

void WhileStatement():
{
}
{
    "while" "(" { add("while ("); } Expression() ")" { add(")"); } 
    Statement()
}

void DoStatement():
{}
{
  "do" { add("do "); } Statement() "while" "(" { trimWhitespace(); add(" ^while ("); } Expression() ")" ";" { add(");"); write(); }
}

void ForStatement():
{
    boolean did_indent = false;
}
{
  "for" "(" { add("for ( "); }

  (
      LOOKAHEAD(Type() <IDENTIFIER> ":")
      Type() t=<IDENTIFIER> { add(t); } ":" { add(" : "); } Expression() 
    |
    [ ForInit() ] ";" { add("; "); } [ Expression() ] ";" { add("; "); } [ ForUpdate() ]
  )

  ")" { add(" )"); if (!getToken(1).image.equals("{")) { write(); ++token_source.level; did_indent = true; } }
  
  Statement() { if (did_indent) --token_source.level; did_indent = false;}
  
}

void ForInit():
{}
{
  LOOKAHEAD( [ "final" ] Type() <IDENTIFIER> )
  LocalVariableDeclaration()
|
  StatementExpressionList()
}

void StatementExpressionList():
{}
{
  StatementExpression() ( "," { add(","); } StatementExpression() )*
}

void ForUpdate():
{}
{
  StatementExpressionList()
}

void BreakStatement():
{}
{
  "break" { add("break"); } [ t=<IDENTIFIER> { add(t); } ] ";" { add(";"); write(); }
}

void ContinueStatement():
{}
{
  "continue" { add("continue"); } [ t=<IDENTIFIER> { add(t); } ] ";" { add(";"); write(); }
}

void ReturnStatement():
{}
{
  "return" { add("return"); } [ Expression() ] ";" { add(";"); write(); }
}

void ThrowStatement():
{}
{
  "throw" { add("throw"); } Expression() ";" { add(";"); write(); }
}

void SynchronizedStatement():
{}
{
  "synchronized" "(" { add("synchronized ( "); }Expression() ")" { add(" )"); } Block()
}

void TryStatement():
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{}
{
  "try" { add("try "); } Block()
  ( "catch" "(" { trimWhitespace(); add(" catch ( "); } FormalParameter() ")" { add(" ) "); } Block() )*
  [ "finally" { trimWhitespace(); add(" finally"); } Block() ]
}

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */

void RUNSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT &&
                ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT} )
   ">" ">" ">"
  )
}

void RSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT &&
                ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT} )
  ">" ">"
  )
}

/* Annotation syntax follows. */

void Annotation():
{}
{
   LOOKAHEAD( "@" Name() "(" ( <IDENTIFIER> "=" | ")" ))
   NormalAnnotation()
 |
   LOOKAHEAD( "@" Name() "(" )
   SingleMemberAnnotation()
 |
   MarkerAnnotation()
}

void NormalAnnotation():
{}
{
   "@" { add("@"); } Name() "(" { add("("); } [ MemberValuePairs() ] ")" { add(")"); }
}

void MarkerAnnotation():
{}
{
  "@" { add("@"); } Name()
}

void SingleMemberAnnotation():
{}
{
  "@" { add("@"); } Name() "(" { add("("); } MemberValue() ")" { add(")"); }
}

void MemberValuePairs():
{}
{
   MemberValuePair() ( "," { add(","); } MemberValuePair() )*
}

void MemberValuePair():
{}
{
    t=<IDENTIFIER> { add(t); } "=" { add("="); } MemberValue()
}

void MemberValue():
{}
{
   Annotation()
 |
   MemberValueArrayInitializer()
 |
   ConditionalExpression()
}

void  MemberValueArrayInitializer():
{}
{
    "{" { add("{"); } MemberValue() ( LOOKAHEAD(2) "," { add(","); } MemberValue() )* [ "," { add(","); } ] "}" { add("}"); write(); }
}


/* Annotation Types. */

void AnnotationTypeDeclaration(int modifiers):
{}
{
  "@" "interface" { add("@interface"); } t=<IDENTIFIER> { add(t); } AnnotationTypeBody()
}

void AnnotationTypeBody():
{}
{
    "{" { add("{"); } ( AnnotationTypeMemberDeclaration() )* "}" { add("}"); write(); }
}

void AnnotationTypeMemberDeclaration():
{
   int modifiers;
}
{
 modifiers = Modifiers()
 (
   LOOKAHEAD(Type() <IDENTIFIER> "(")
   Type() t=<IDENTIFIER> { add(t); } "(" ")" { add("()"); } [ DefaultValue() ] ";" { add(";"); write(); }
  |
   ClassOrInterfaceDeclaration(modifiers)
  |
   EnumDeclaration(modifiers)
  |
   AnnotationTypeDeclaration(modifiers)
  |
   FieldDeclaration(modifiers)
 )
 |
   ( ";" { add(";"); write(); } )
}

void DefaultValue():
{}
{
  "default" { add("default"); } MemberValue()
}
