/* Generated By:JavaCC: Do not edit this line. JavaCCParser.java */
package beauty.parsers.javacc;

import java.io.*;
import java.util.*;

public class JavaCCParser implements JavaCCParserConstants {
    Token t;
    String lineSep = System.getProperty("line.separator");

    boolean IN_CU = false;

    public String getText() {
        return token_source.getText();
    }

    public void resetTokenSource() {
        token_source.reset();
    }

    private void add(Token t) {
        token_source.add(t);
    }

    private void add(String s) {
        token_source.add(s);
    }

    private void trim() {
        token_source.trim();
    }

    private void trimNL() {
        token_source.trimNL();
    }

    void Block() {
        try {
            Block(false);
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }

    private void trimWhitespace() {
        token_source.trimWhitespace();
    }

    private void write() {
        token_source.write();
    }

    private void writeln() {
        token_source.writeln();
    }

    public void setLineSeparator(String le) {
        lineSep = le;
        token_source.setLineSeparator(le);
    }

  /*
   * Returns true if the next token is not in the FOLLOW list of "expansion".
   * It is used to decide when the end of an "expansion" has been reached.
   */
  boolean notTailOfExpansionUnit() {
    Token t = getToken(1);
    if (t.kind == BIT_OR || t.kind == COMMA || t.kind == RPAREN || t.kind == RBRACE || t.kind == RBRACKET) return false;
    return true;
  }

  public void parse() throws ParseException {
    javacc_input();
  }

  public JavaCCParser(String fileName)
   {
      this(System.in);
      try { ReInit(new FileInputStream(new File(fileName))); }
      catch(Exception e) { e.printStackTrace(); }
   }

  public static void main(String args[]) {
    JavaCCParser parser;
    if (args.length == 0) {
      System.out.println("Java Parser Version 1.1:  Reading from standard input . . .");
      parser = new JavaCCParser(System.in);
    } else if (args.length == 1) {
      System.out.println("Java Parser Version 1.1:  Reading from file " + args[0] + " . . .");
      try {
        parser = new JavaCCParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Java Parser Version 1.1:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("Java Parser Version 1.1:  Usage is one of:");
      System.out.println("         java JavaCCParser < inputfile");
      System.out.println("OR");
      System.out.println("         java JavaCCParser inputfile");
      return;
    }
    try {
      parser.CompilationUnit();
      System.out.println("Java Parser Version 1.1:  Java program parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("Java Parser Version 1.1:  Encountered errors during parse.");
    }
  }

/************************************************
 * THE JAVACC GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/
  final public void javacc_input() throws ParseException {
    javacc_options();
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("PARSER_BEGIN")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
                       write(); add(t); add(" (");
    identifier();
    jj_consume_token(RPAREN);
                                                                        add(")"); write();
    CompilationUnit();
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("PARSER_END")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
                       write(); add(t); add(" (");
    identifier();
    jj_consume_token(RPAREN);
                                                                        add(")"); write();
    label_1:
    while (true) {
      production();
      if (jj_2_1(1)) {
        ;
      } else {
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  final public void javacc_options() throws ParseException {
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("options")) {
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(LBRACE);
                           add(t); add(" {"); write(); ++token_source.level;
      label_2:
      while (true) {
        option_binding();
        if (jj_2_2(1)) {
          ;
        } else {
          break label_2;
        }
      }
      jj_consume_token(RBRACE);
                                                                                                          write(); --token_source.level; add("}"); write();
    } else {
      ;
    }
  }

  final public void option_binding() throws ParseException {
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("LOOKAHEAD")) {
      identifier();
    } else if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("IGNORE_CASE")) {
      identifier();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        identifier();
        break;
      case STATIC:
        jj_consume_token(STATIC);
             add("static");
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(ASSIGN);
        add(" = ");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      IntegerLiteral();
      break;
    case FALSE:
    case TRUE:
      BooleanLiteral();
      break;
    case STRING_LITERAL:
      StringLiteral();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
        add(";"); write();
  }

  final public void production() throws ParseException {
    if (jj_2_3(1)) {
      javacode_production();
    } else if (jj_2_4(1)) {
      regular_expr_production();
    } else if (jj_2_5(1)) {
      token_manager_decls();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case VOID:
      case IDENTIFIER:
        bnf_production();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void javacode_production() throws ParseException {
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("JAVACODE")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    identifier();
    ResultType();
    identifier();
    FormalParameters();
    if (jj_2_6(2)) {
      jj_consume_token(THROWS);
      Name();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_3;
        }
        jj_consume_token(COMMA);
        Name();
      }
    } else {
      ;
    }
    if (jj_2_7(2)) {
      node_descriptor();
    } else {
      ;
    }
    Block();
  }

  final public void bnf_production() throws ParseException {
    ResultType();
    identifier();
    FormalParameters();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      Name();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_4;
        }
        jj_consume_token(COMMA);
        Name();
      }
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 120:
      node_descriptor();
      break;
    default:
      ;
    }
    jj_consume_token(COLON);
        add(" :"); write();
    Block(true);
    jj_consume_token(LBRACE);
        write(); add("{"); write(); ++token_source.level;
    expansion_choices();
    jj_consume_token(RBRACE);
         writeln(); --token_source.level; add("}"); write();
  }

  final public void regular_expr_production() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      if (jj_2_8(2)) {
        jj_consume_token(LT);
        jj_consume_token(STAR);
        jj_consume_token(GT);
                               add("<*>"); write();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          jj_consume_token(LT);
          t = jj_consume_token(IDENTIFIER);
                         add("<"); add(t);
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              break label_5;
            }
            jj_consume_token(COMMA);
            t = jj_consume_token(IDENTIFIER);
                                                                    add(", "); add(t);
          }
          jj_consume_token(GT);
                                                                                                  add(">"); write();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      ;
    }
    regexpr_kind();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
                         add("[");
      if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("IGNORE_CASE")) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      identifier();
      jj_consume_token(RBRACKET);
                              add("]");
      break;
    default:
      ;
    }
    jj_consume_token(COLON);
                                add(" : "); write();
    jj_consume_token(LBRACE);
        add("{"); write(); ++token_source.level;
    regexpr_spec();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(BIT_OR);
           writeln(); add("| ");
      regexpr_spec();
    }
    jj_consume_token(RBRACE);
         writeln(); --token_source.level; add(token_source.ls + "}"); write();
  }

  final public void token_manager_decls() throws ParseException {
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("TOKEN_MGR_DECLS")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
                       add(t); add(" : ");
    TokenMgrDeclBlock();
  }

  final public void regexpr_kind() throws ParseException {
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("TOKEN")) {
      identifier();
    } else if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("SPECIAL_TOKEN")) {
      identifier();
    } else if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("SKIP")) {
      identifier();
    } else if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("MORE")) {
      identifier();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void regexpr_spec() throws ParseException {
    regular_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      Block();
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      t = jj_consume_token(IDENTIFIER);
                                                            add(" : "); add(t);
      break;
    default:
      ;
    }
  }

  final public void expansion_choices() throws ParseException {
    expansion();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        break label_7;
      }
      jj_consume_token(BIT_OR);
                        writeln(); add("| ");
      expansion();
                                                              write();
    }
  }

  final public void expansion() throws ParseException {
    if (jj_2_9(1)) {
      if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("LOOKAHEAD")) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
                         add(t); add(" ( ");
      local_lookahead();
      jj_consume_token(RPAREN);
                                                                       add(" ) "); writeln();
    } else {
      ;
    }
    label_8:
    while (true) {
      expansion_unit();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 120:
        node_descriptor();
        break;
      default:
        ;
      }
      if (notTailOfExpansionUnit()) {
        ;
      } else {
        break label_8;
      }
    }
  }

  final public void local_lookahead() throws ParseException {
          boolean commaAtEnd = false, emptyLA = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      IntegerLiteral();
          emptyLA = false;
      break;
    default:
      ;
    }
    if (!emptyLA && (getToken(1).kind != RPAREN)) {
      jj_consume_token(COMMA);
          add(", ");
          commaAtEnd = true;
    } else {
      ;
    }
    if (getToken(1).kind != RPAREN && getToken(1).kind != LBRACE) {
      expansion_choices();
          emptyLA = false; commaAtEnd = false;
    } else {
      ;
    }
    if (!emptyLA && !commaAtEnd && (getToken(1).kind != RPAREN)) {
      jj_consume_token(COMMA);
          add(", ");
          commaAtEnd = true;
    } else {
      ;
    }
    if (emptyLA || commaAtEnd) {
      jj_consume_token(LBRACE);
        add("{ ");
      Expression();
      jj_consume_token(RBRACE);
                                        add(" }");
    } else {
      ;
    }
  }

  final public void expansion_unit() throws ParseException {
    if (jj_2_11(1)) {
      if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("LOOKAHEAD")) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
                       add(t); add(" ( ");
      local_lookahead();
      jj_consume_token(RPAREN);
                                                                     add(" ) "); writeln();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        Block();
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        writeln(); add(" [ "); writeln(); ++token_source.level;
        expansion_choices();
        jj_consume_token(RBRACKET);
                                                                                            writeln(); --token_source.level; add(" ] "); writeln();
        break;
      case TRY:
        jj_consume_token(TRY);
        jj_consume_token(LBRACE);
              add("try {"); write();
        expansion_choices();
        jj_consume_token(RBRACE);
                                                                 write(); add("}");
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CATCH:
            ;
            break;
          default:
            break label_9;
          }
          jj_consume_token(CATCH);
          jj_consume_token(LPAREN);
                  add("catch ( ");
          Name();
          t = jj_consume_token(IDENTIFIER);
          jj_consume_token(RPAREN);
                                                                 add(t); add(" ) ");
          Block();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINALLY:
          jj_consume_token(FINALLY);
                add("finally ");
          Block();
          break;
        default:
          ;
        }
        break;
      default:
        if (jj_2_12(2147483647)) {
          if (jj_2_10(2147483647)) {
            PrimaryExpression();
            jj_consume_token(ASSIGN);
                              add(" = ");
          } else {
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING_LITERAL:
          case LT:
            regular_expression();
            break;
          case IDENTIFIER:
            identifier();
            Arguments();
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
            jj_consume_token(LPAREN);
        writeln(); add(" ( "); writeln(); ++token_source.level;
            expansion_choices();
            jj_consume_token(RPAREN);
                                                                                            writeln(); --token_source.level; add(" )"); writeln();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case HOOK:
            case PLUS:
            case STAR:
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case PLUS:
                jj_consume_token(PLUS);
                                                                                                                                                             trimWhitespace(); add("+"); writeln();
                break;
              case STAR:
                jj_consume_token(STAR);
                                                                                                                                                                                                              trimWhitespace(); add("*"); writeln();
                break;
              case HOOK:
                jj_consume_token(HOOK);
                                                                                                                                                                                                                                                               trimWhitespace(); add("?"); writeln();
                break;
              default:
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
            default:
              ;
            }
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

  final public void regular_expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      StringLiteral();
      break;
    default:
      if (jj_2_13(3)) {
        jj_consume_token(LT);
        add("<");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case 120:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 120:
            jj_consume_token(120);
                              add("#");
            break;
          default:
            ;
          }
          identifier();
          jj_consume_token(COLON);
                                                               add(": ");
          break;
        default:
          ;
        }
        complex_regular_expression_choices();
        jj_consume_token(GT);
                                                                                                                         add(">");
      } else if (jj_2_14(2)) {
        jj_consume_token(LT);
        add("<");
        identifier();
        jj_consume_token(GT);
                                       add(">");
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          jj_consume_token(LT);
        add("<");
          if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("EOF")) {

          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          identifier();
          jj_consume_token(GT);
        add(">");
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void complex_regular_expression_choices() throws ParseException {
    complex_regular_expression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        break label_10;
      }
      jj_consume_token(BIT_OR);
                                         add(token_source.ls + " | ");
      complex_regular_expression();
                                                                                                       write();
    }
  }

  final public void complex_regular_expression() throws ParseException {
    label_11:
    while (true) {
      complex_regular_expression_unit();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case LPAREN:
      case LBRACKET:
      case LT:
      case TILDE:
        ;
        break;
      default:
        break label_11;
      }
    }
  }

  final public void complex_regular_expression_unit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      StringLiteral();
      break;
    case LT:
      jj_consume_token(LT);
        add("<");
      identifier();
      jj_consume_token(GT);
                                       add(">");
      break;
    case LBRACKET:
    case TILDE:
      character_list();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
        add("( ");
      complex_regular_expression_choices();
      jj_consume_token(RPAREN);
                                                                add(" )");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HOOK:
      case PLUS:
      case STAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
                                                                                     add("+");
          break;
        case STAR:
          jj_consume_token(STAR);
                                                                                                         add("*");
          break;
        case HOOK:
          jj_consume_token(HOOK);
                                                                                                                             add("?");
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        ;
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void character_list() throws ParseException {
    writeln();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TILDE:
      jj_consume_token(TILDE);
          add("~");
      break;
    default:
      ;
    }
    jj_consume_token(LBRACKET);
                              add("[");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      character_descriptor();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_12;
        }
        jj_consume_token(COMMA);
                                                                           add(",");
        character_descriptor();
      }
      break;
    default:
      ;
    }
    jj_consume_token(RBRACKET);
                                                                                                                         add("]");
  }

  final public void character_descriptor() throws ParseException {
    StringLiteral();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
                          add("-");
      StringLiteral();
      break;
    default:
      ;
    }
  }

  final public void identifier() throws ParseException {
    t = jj_consume_token(IDENTIFIER);
      add(t);
  }

/**********************************************
 * THE JJTREE PRODUCTIONS START HERE          *
 **********************************************/
  final public void node_descriptor() throws ParseException {
    jj_consume_token(120);
        add("#");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      identifier();
      break;
    case VOID:
      t = jj_consume_token(VOID);
                                                add(t);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
         add("(");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
        jj_consume_token(GT);
                             add(">");
        break;
      default:
        ;
      }
      node_descriptor_expression();
      jj_consume_token(RPAREN);
                                                                              add(")");
      break;
    default:
      ;
    }
  }

  void node_descriptor_expression() throws ParseException {
  Token tok;
  int nesting = 1;
  while (true) {
    tok = getToken(1);
    if (tok.kind == 0) {
      throw new ParseException();
    }
    if (tok.kind == LPAREN) nesting++;
    if (tok.kind == RPAREN) {
      nesting--;
      if (nesting == 0) break;
    }
    tok = getNextToken();
  }
  }

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  final public void CompilationUnit() throws ParseException {
    IN_CU = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      PackageDeclaration();
      break;
    default:
      ;
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        break label_13;
      }
      ImportDeclaration();
    }
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case CLASS:
      case ENUM:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case SEMICOLON:
      case AT:
        ;
        break;
      default:
        break label_14;
      }
      TypeDeclaration();
    }
    IN_CU = false;
  }

  final public void PackageDeclaration() throws ParseException {
    t = jj_consume_token(PACKAGE);
                  add(t);
    Name();
    jj_consume_token(SEMICOLON);
                                         add(";"); write();
  }

  final public void ImportDeclaration() throws ParseException {
    jj_consume_token(IMPORT);
             add("import");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
                                           add("static");
      break;
    default:
      ;
    }
    Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(STAR);
                                                                                 add(".*");
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
                                                                                                      add(";"); write();
  }

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */
  final public int Modifiers() throws ParseException {
   int modifiers = 0;
    label_15:
    while (true) {
      if (jj_2_15(2)) {
        ;
      } else {
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
              modifiers |= ModifierSet.PUBLIC;
        break;
      case STATIC:
        jj_consume_token(STATIC);
              modifiers |= ModifierSet.STATIC;
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
                 modifiers |= ModifierSet.PROTECTED;
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
               modifiers |= ModifierSet.PRIVATE;
        break;
      case FINAL:
        jj_consume_token(FINAL);
             modifiers |= ModifierSet.FINAL;
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
                modifiers |= ModifierSet.ABSTRACT;
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
                    modifiers |= ModifierSet.SYNCHRONIZED;
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
              modifiers |= ModifierSet.NATIVE;
        break;
      case TRANSIENT:
        jj_consume_token(TRANSIENT);
                 modifiers |= ModifierSet.TRANSIENT;
        break;
      case VOLATILE:
        jj_consume_token(VOLATILE);
                modifiers |= ModifierSet.VOLATILE;
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
                modifiers |= ModifierSet.STRICTFP;
        break;
      case AT:
        Annotation();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return modifiers;}
    throw new Error("Missing return statement in function");
  }

/*
 * Declaration syntax follows.
 */
  final public void TypeDeclaration() throws ParseException {
   int modifiers;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
          add(";"); write();
      break;
    case ABSTRACT:
    case CLASS:
    case ENUM:
    case FINAL:
    case INTERFACE:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case AT:
      modifiers = Modifiers();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
      case INTERFACE:
        ClassOrInterfaceDeclaration(modifiers);
        break;
      case ENUM:
        EnumDeclaration(modifiers);
        break;
      case AT:
        AnnotationTypeDeclaration(modifiers);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ClassOrInterfaceDeclaration(int modifiers) throws ParseException {
   boolean isInterface = false;
   add(ModifierSet.toString(modifiers) + " ");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      jj_consume_token(CLASS);
              add("class");
      break;
    case INTERFACE:
      jj_consume_token(INTERFACE);
                                              add("interface");  isInterface = true;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(IDENTIFIER);
                   add(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      TypeParameters();
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      ExtendsList(isInterface);
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      ImplementsList(isInterface);
      break;
    default:
      ;
    }
    ClassOrInterfaceBody(isInterface);
  }

  final public void ExtendsList(boolean isInterface) throws ParseException {
   boolean extendsMoreThanOne = false;
    jj_consume_token(EXTENDS);
               add("extends");
    ClassOrInterfaceType();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_16;
      }
      jj_consume_token(COMMA);
           add(",");
      ClassOrInterfaceType();
                                                extendsMoreThanOne = true;
    }
      if (extendsMoreThanOne && !isInterface)
         {if (true) throw new ParseException("A class cannot extend more than one other class");}
  }

  final public void ImplementsList(boolean isInterface) throws ParseException {
    jj_consume_token(IMPLEMENTS);
                  add("implements");
    ClassOrInterfaceType();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_17;
      }
      jj_consume_token(COMMA);
           add(",");
      ClassOrInterfaceType();
    }
      if (isInterface)
         {if (true) throw new ParseException("An interface cannot implement other interfaces");}
  }

  final public void EnumDeclaration(int modifiers) throws ParseException {
    add(ModifierSet.toString(modifiers) + " ");
    jj_consume_token(ENUM);
           add("enum");
    t = jj_consume_token(IDENTIFIER);
                                           add(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      ImplementsList(false);
      break;
    default:
      ;
    }
    EnumBody();
  }

  final public void EnumBody() throws ParseException {
    jj_consume_token(LBRACE);
          add("{");
    EnumConstant();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_18;
      }
      jj_consume_token(COMMA);
                          add(",");
      EnumConstant();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
           add(";"); write();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case IDENTIFIER:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case LT:
          ;
          break;
        default:
          break label_19;
        }
        ClassOrInterfaceBodyDeclaration(false);
      }
      break;
    default:
      ;
    }
    jj_consume_token(RBRACE);
         add("}"); write();
  }

  final public void EnumConstant() throws ParseException {
    t = jj_consume_token(IDENTIFIER);
                   add(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      Arguments();
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      ClassOrInterfaceBody(false);
      break;
    default:
      ;
    }
  }

  final public void TypeParameters() throws ParseException {
    jj_consume_token(LT);
          add("<");
    TypeParameter();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_20;
      }
      jj_consume_token(COMMA);
                                              add(",");
      TypeParameter();
    }
    jj_consume_token(GT);
                                                                                   add("> ");
  }

  final public void TypeParameter() throws ParseException {
    t = jj_consume_token(IDENTIFIER);
                     add(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      TypeBound();
      break;
    default:
      ;
    }
  }

  final public void TypeBound() throws ParseException {
    jj_consume_token(EXTENDS);
                add("extends");
    ClassOrInterfaceType();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        break label_21;
      }
      jj_consume_token(BIT_AND);
                                                                 add("&");
      ClassOrInterfaceType();
    }
  }

  final public void ClassOrInterfaceBody(boolean isInterface) throws ParseException {
    jj_consume_token(LBRACE);
          add("{"); write(); ++token_source.level;
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case IDENTIFIER:
      case LBRACE:
      case SEMICOLON:
      case AT:
      case LT:
        ;
        break;
      default:
        break label_22;
      }
      ClassOrInterfaceBodyDeclaration(isInterface);
    }
    jj_consume_token(RBRACE);
                                                                                                             add("}"); --token_source.level; write();
  }

  final public void ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException {
   boolean isNestedInterface = false;
   int modifiers;
    if (jj_2_18(2)) {
      Initializer();
     if (isInterface)
        {if (true) throw new ParseException("An interface cannot have initializers");}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case IDENTIFIER:
      case AT:
      case LT:
        modifiers = Modifiers();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case INTERFACE:
          ClassOrInterfaceDeclaration(modifiers);
          break;
        case ENUM:
          EnumDeclaration(modifiers);
          break;
        default:
          if (jj_2_16(2147483647)) {
            ConstructorDeclaration(modifiers);
          } else if (jj_2_17(2147483647)) {
            FieldDeclaration(modifiers);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case VOID:
            case IDENTIFIER:
            case LT:
              MethodDeclaration(modifiers);
              break;
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        add(";"); write();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void FieldDeclaration(int modifiers) throws ParseException {
    add(ModifierSet.toString(modifiers) + " ");
    Type();
    VariableDeclarator();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_23;
      }
      jj_consume_token(COMMA);
                                      add(",");
      VariableDeclarator();
    }
    jj_consume_token(SEMICOLON);
                                                                                add(";"); write();
  }

  final public void VariableDeclarator() throws ParseException {
    VariableDeclaratorId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
                                 add(" = ");
      VariableInitializer();
      break;
    default:
      ;
    }
  }

  final public void VariableDeclaratorId() throws ParseException {
    t = jj_consume_token(IDENTIFIER);
                   add(t);
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        break label_24;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
                                         add("[]");
    }
  }

  final public void VariableInitializer() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      ArrayInitializer();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      Expression();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ArrayInitializer() throws ParseException {
    jj_consume_token(LBRACE);
          add("{");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      VariableInitializer();
      label_25:
      while (true) {
        if (jj_2_19(2)) {
          ;
        } else {
          break label_25;
        }
        jj_consume_token(COMMA);
                                                                   add(",");
        VariableInitializer();
      }
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
                                                                                                                  add(",");
      break;
    default:
      ;
    }
    jj_consume_token(RBRACE);
                                                                                                                                      add("}"); write();
  }

  final public void MethodDeclaration(int modifiers) throws ParseException {
    add(ModifierSet.toString(modifiers) + " ");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      TypeParameters();
      break;
    default:
      ;
    }
    ResultType();
    MethodDeclarator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
                                  add("throws");
      NameList();
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      Block();
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                    add(";"); write();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MethodDeclarator() throws ParseException {
    t = jj_consume_token(IDENTIFIER);
                   add(t);
    FormalParameters();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        break label_26;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
                                                            add("[]");
    }
  }

  final public void FormalParameters() throws ParseException {
    boolean added = false;
    jj_consume_token(LPAREN);
          add("(");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      FormalParameter();
                                            added = true;
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_27;
        }
        jj_consume_token(COMMA);
                                                                    add(",");
        FormalParameter();
      }
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
                                                                                                             if (!added) trim(); add(")");
  }

  final public void FormalParameter() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      jj_consume_token(FINAL);
              add("final");
      break;
    default:
      ;
    }
    Type();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELLIPSIS:
      jj_consume_token(ELLIPSIS);
                                                 trim(); add("...");
      break;
    default:
      ;
    }
    VariableDeclaratorId();
  }

  final public void ConstructorDeclaration(int modifiers) throws ParseException {
    add(ModifierSet.toString(modifiers) + " ");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      TypeParameters();
      break;
    default:
      ;
    }
    t = jj_consume_token(IDENTIFIER);
                   add(t);
    FormalParameters();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
                                                             add("throws");
      NameList();
      break;
    default:
      ;
    }
    jj_consume_token(LBRACE);
        add("{"); write(); ++token_source.level;
    if (jj_2_20(2147483647)) {
      ExplicitConstructorInvocation();
    } else {
      ;
    }
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        ;
        break;
      default:
        break label_28;
      }
      BlockStatement();
    }
    jj_consume_token(RBRACE);
        add("}"); --token_source.level; write();
  }

  final public void ExplicitConstructorInvocation() throws ParseException {
    if (jj_2_22(2147483647)) {
      jj_consume_token(THIS);
           add("this");
      Arguments();
      jj_consume_token(SEMICOLON);
                                            add(";"); write();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
        if (jj_2_21(2)) {
          PrimaryExpression();
          jj_consume_token(DOT);
        } else {
          ;
        }
        jj_consume_token(SUPER);
                                                     add("super");
        Arguments();
        jj_consume_token(SEMICOLON);
                                                                                       add(";"); write();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Initializer() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
               add("static ");
      break;
    default:
      ;
    }
    Block();
  }

/*
 * Type, name and expression syntax follows.
 */
  final public void Type() throws ParseException {
    if (jj_2_23(2)) {
      ReferenceType();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
        PrimitiveType();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ReferenceType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
      PrimitiveType();
      label_29:
      while (true) {
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                                            add("[]");
        if (jj_2_24(2)) {
          ;
        } else {
          break label_29;
        }
      }
      break;
    case IDENTIFIER:
      ClassOrInterfaceType();
      label_30:
      while (true) {
        if (jj_2_25(2)) {
          ;
        } else {
          break label_30;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                                                       add("[]");
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ClassOrInterfaceType() throws ParseException {
    t = jj_consume_token(IDENTIFIER);
                   add(t + " ");
    if (jj_2_26(2)) {
      TypeArguments();
    } else {
      ;
    }
    label_31:
    while (true) {
      if (jj_2_27(2)) {
        ;
      } else {
        break label_31;
      }
      jj_consume_token(DOT);
                       trim(); add(".");
      t = jj_consume_token(IDENTIFIER);
                                                            add(t + " ");
      if (jj_2_28(2)) {
        TypeArguments();
      } else {
        ;
      }
    }
  }

  final public void TypeArguments() throws ParseException {
    jj_consume_token(LT);
         add("<");
    TypeArgument();
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_32;
      }
      jj_consume_token(COMMA);
                                            trim(); add(", ");
      TypeArgument();
    }
    jj_consume_token(GT);
                                                                                         trim(); add("> ");
  }

  final public void TypeArgument() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      ReferenceType();
      break;
    case HOOK:
      jj_consume_token(HOOK);
         add("?");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
      case SUPER:
        WildcardBounds();
        break;
      default:
        ;
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void WildcardBounds() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
               add("extends");
      ReferenceType();
      break;
    case SUPER:
      jj_consume_token(SUPER);
             add("super");
      ReferenceType();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PrimitiveType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
      break;
    case BYTE:
      t = jj_consume_token(BYTE);
      break;
    case SHORT:
      t = jj_consume_token(SHORT);
      break;
    case INT:
      t = jj_consume_token(INT);
      break;
    case LONG:
      t = jj_consume_token(LONG);
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
      break;
    case DOUBLE:
      t = jj_consume_token(DOUBLE);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
        add(t + " ");
  }

  final public void ResultType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
           add("void ");
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      Type();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Name() throws ParseException {
    t = jj_consume_token(IDENTIFIER);
                     add(t);
    label_33:
    while (true) {
      if (jj_2_29(2)) {
        ;
      } else {
        break label_33;
      }
      jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER);
                                      add("."); add(t);
    }
  }

  final public void NameList() throws ParseException {
    Name();
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_34;
      }
      jj_consume_token(COMMA);
                 add(", ");
      Name();
    }
  }

/*
 * Expression syntax follows.
 */
  final public void Expression() throws ParseException {
    ConditionalExpression();
    if (jj_2_30(2)) {
      AssignmentOperator();
      Expression();
    } else {
      ;
    }
  }

  final public void AssignmentOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      t = jj_consume_token(ASSIGN);
      break;
    case STARASSIGN:
      t = jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      t = jj_consume_token(SLASHASSIGN);
      break;
    case REMASSIGN:
      t = jj_consume_token(REMASSIGN);
      break;
    case PLUSASSIGN:
      t = jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      t = jj_consume_token(MINUSASSIGN);
      break;
    case LSHIFTASSIGN:
      t = jj_consume_token(LSHIFTASSIGN);
      break;
    case RSIGNEDSHIFTASSIGN:
      t = jj_consume_token(RSIGNEDSHIFTASSIGN);
      break;
    case RUNSIGNEDSHIFTASSIGN:
      t = jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      break;
    case ANDASSIGN:
      t = jj_consume_token(ANDASSIGN);
      break;
    case XORASSIGN:
      t = jj_consume_token(XORASSIGN);
      break;
    case ORASSIGN:
      t = jj_consume_token(ORASSIGN);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    add(" " + t.image + " ");
  }

  final public void ConditionalExpression() throws ParseException {
    ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
                                      add(" ? ");
      Expression();
      jj_consume_token(COLON);
                                                                       add(" : ");
      Expression();
      break;
    default:
      ;
    }
  }

  final public void ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression();
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        break label_35;
      }
      jj_consume_token(SC_OR);
                                      add(" || ");
      ConditionalAndExpression();
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
    InclusiveOrExpression();
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        break label_36;
      }
      jj_consume_token(SC_AND);
                                   add(" && ");
      InclusiveOrExpression();
    }
  }

  final public void InclusiveOrExpression() throws ParseException {
    ExclusiveOrExpression();
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        break label_37;
      }
      jj_consume_token(BIT_OR);
                                  add(" | ");
      ExclusiveOrExpression();
    }
  }

  final public void ExclusiveOrExpression() throws ParseException {
    AndExpression();
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        break label_38;
      }
      jj_consume_token(XOR);
                          add(" ^ ");
      AndExpression();
    }
  }

  final public void AndExpression() throws ParseException {
    EqualityExpression();
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        break label_39;
      }
      jj_consume_token(BIT_AND);
                               add(" & ");
      EqualityExpression();
    }
  }

  final public void EqualityExpression() throws ParseException {
    InstanceOfExpression();
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_40;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
                                    add(" == ");
        break;
      case NE:
        jj_consume_token(NE);
                                                            add(" != ");
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
    }
  }

  final public void InstanceOfExpression() throws ParseException {
    RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
                                          add(" instanceof ");
      Type();
      break;
    default:
      ;
    }
  }

  final public void RelationalExpression() throws ParseException {
    ShiftExpression();
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
      case LE:
      case GE:
      case GT:
        ;
        break;
      default:
        break label_41;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
                              add(" < ");
        break;
      case GT:
        jj_consume_token(GT);
                                                    add(" > ");
        break;
      case LE:
        jj_consume_token(LE);
                                                                           add(" <= ");
        break;
      case GE:
        jj_consume_token(GE);
                                                                                                   add(" >= ");
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ShiftExpression();
    }
  }

  final public void ShiftExpression() throws ParseException {
    AdditiveExpression();
    label_42:
    while (true) {
      if (jj_2_31(1)) {
        ;
      } else {
        break label_42;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        jj_consume_token(LSHIFT);
                                  add(" << ");
        break;
      default:
        if (jj_2_32(1)) {
          RSIGNEDSHIFT();
        } else if (jj_2_33(1)) {
          RUNSIGNEDSHIFT();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      AdditiveExpression();
    }
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_43;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                                       add(" + ");
        break;
      case MINUS:
        jj_consume_token(MINUS);
                                                             add(" - ");
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        break label_44;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
                              add(" * ");
        break;
      case SLASH:
        jj_consume_token(SLASH);
                                                    add(" / ");
        break;
      case REM:
        jj_consume_token(REM);
                                                                          add(" % ");
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
          add(" + ");
        break;
      case MINUS:
        jj_consume_token(MINUS);
                                add(" - ");
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
      break;
    case INCR:
      PreIncrementExpression();
      break;
    case DECR:
      PreDecrementExpression();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
      UnaryExpressionNotPlusMinus();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PreIncrementExpression() throws ParseException {
    jj_consume_token(INCR);
         add(" ++");
    PrimaryExpression();
  }

  final public void PreDecrementExpression() throws ParseException {
    jj_consume_token(DECR);
         add(" --");
    PrimaryExpression();
  }

  final public void UnaryExpressionNotPlusMinus() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        jj_consume_token(TILDE);
          add(" ~ ");
        break;
      case BANG:
        jj_consume_token(BANG);
                                add(" ! ");
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
      break;
    default:
      if (jj_2_34(2147483647)) {
        CastExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          PostfixExpression();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
  final public void CastLookahead() throws ParseException {
    if (jj_2_35(2)) {
      jj_consume_token(LPAREN);
      PrimitiveType();
    } else if (jj_2_36(2147483647)) {
      jj_consume_token(LPAREN);
      Type();
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
                        add("[]");
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        Type();
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
          jj_consume_token(TILDE);
          break;
        case BANG:
          jj_consume_token(BANG);
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          break;
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        case THIS:
          jj_consume_token(THIS);
          break;
        case SUPER:
          jj_consume_token(SUPER);
          break;
        case NEW:
          jj_consume_token(NEW);
          break;
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          Literal();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void PostfixExpression() throws ParseException {
    PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        jj_consume_token(INCR);
                               trim(); add("++");
        break;
      case DECR:
        jj_consume_token(DECR);
                                                             trim(); add("--");
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      ;
    }
  }

  final public void CastExpression() throws ParseException {
    if (jj_2_37(2147483647)) {
      jj_consume_token(LPAREN);
        add("(");
      Type();
      jj_consume_token(RPAREN);
                                 trim(); add(") ");
      UnaryExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        add("(");
        Type();
        jj_consume_token(RPAREN);
                                 trim(); add(") ");
        UnaryExpressionNotPlusMinus();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void PrimaryExpression() throws ParseException {
    PrimaryPrefix();
    label_45:
    while (true) {
      if (jj_2_38(2)) {
        ;
      } else {
        break label_45;
      }
      PrimarySuffix();
    }
  }

  final public void MemberSelector() throws ParseException {
    jj_consume_token(DOT);
        add(".");
    TypeArguments();
    t = jj_consume_token(IDENTIFIER);
                                                     add(t);
  }

  final public void PrimaryPrefix() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      Literal();
      break;
    case THIS:
      jj_consume_token(THIS);
           add("this");
      break;
    case SUPER:
      jj_consume_token(SUPER);
      jj_consume_token(DOT);
                add("super.");
      t = jj_consume_token(IDENTIFIER);
                                                  add(t);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
        add("(");
      Expression();
      jj_consume_token(RPAREN);
                                       add(")");
      break;
    case NEW:
      AllocationExpression();
      break;
    default:
      if (jj_2_39(2147483647)) {
        ResultType();
        jj_consume_token(DOT);
        jj_consume_token(CLASS);
                             add(".class");
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Name();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void PrimarySuffix() throws ParseException {
    if (jj_2_40(2)) {
      jj_consume_token(DOT);
      jj_consume_token(THIS);
               add(".this");
    } else if (jj_2_41(2)) {
      jj_consume_token(DOT);
        add(".");
      AllocationExpression();
    } else if (jj_2_42(3)) {
      MemberSelector();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        add("[");
        Expression();
        jj_consume_token(RBRACKET);
                                       add("]");
        break;
      case DOT:
        jj_consume_token(DOT);
        add(".");
        t = jj_consume_token(IDENTIFIER);
                                     add(t);
        break;
      case LPAREN:
        Arguments();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      IntegerLiteral();
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
                               add(t);
      break;
    case CHARACTER_LITERAL:
      t = jj_consume_token(CHARACTER_LITERAL);
                          add(t);
      break;
    case STRING_LITERAL:
      StringLiteral();
      break;
    case FALSE:
    case TRUE:
      BooleanLiteral();
      break;
    case NULL:
      NullLiteral();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void StringLiteral() throws ParseException {
    t = jj_consume_token(STRING_LITERAL);
      add(t);
  }

  final public void IntegerLiteral() throws ParseException {
    t = jj_consume_token(INTEGER_LITERAL);
                          add(t.image);
  }

  final public void BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
           add("true");
      break;
    case FALSE:
      jj_consume_token(FALSE);
            add("false");
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NullLiteral() throws ParseException {
    jj_consume_token(NULL);
           add("null");
  }

  final public void Arguments() throws ParseException {
    boolean added = false;
    jj_consume_token(LPAREN);
          add("(");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      ArgumentList();
                                         added = true;
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
                                                                 if (!added) trim(); add(")");
  }

  final public void ArgumentList() throws ParseException {
    Expression();
    label_46:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_46;
      }
      jj_consume_token(COMMA);
                       add(",");
      Expression();
    }
  }

  final public void AllocationExpression() throws ParseException {
    if (jj_2_43(2)) {
      jj_consume_token(NEW);
          add("new ");
      PrimitiveType();
      ArrayDimsAndInits();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        jj_consume_token(NEW);
          add("new ");
        ClassOrInterfaceType();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          TypeArguments();
          break;
        default:
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ArrayDimsAndInits();
          break;
        case LPAREN:
          Arguments();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
            ClassOrInterfaceBody(false);
            break;
          default:
            ;
          }
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
  final public void ArrayDimsAndInits() throws ParseException {
    if (jj_2_46(2)) {
      label_47:
      while (true) {
        jj_consume_token(LBRACKET);
                       add("[");
        Expression();
        jj_consume_token(RBRACKET);
                                                      add("]");
        if (jj_2_44(2)) {
          ;
        } else {
          break label_47;
        }
      }
      label_48:
      while (true) {
        if (jj_2_45(2)) {
          ;
        } else {
          break label_48;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                                                                                              add("[]");
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        label_49:
        while (true) {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
              add("[]");
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            break label_49;
          }
        }
        ArrayInitializer();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
 * Statement syntax follows.
 */
  final public void Statement() throws ParseException {
    if (jj_2_47(2)) {
      LabeledStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
        AssertStatement();
        break;
      case LBRACE:
        Block();
        break;
      case SEMICOLON:
        EmptyStatement();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        StatementExpression();
        jj_consume_token(SEMICOLON);
                              add(";"); write();
        break;
      case SWITCH:
        SwitchStatement();
        break;
      case IF:
        IfStatement();
        break;
      case WHILE:
        WhileStatement();
        break;
      case DO:
        DoStatement();
        break;
      case FOR:
        ForStatement();
        break;
      case BREAK:
        BreakStatement();
        break;
      case CONTINUE:
        ContinueStatement();
        break;
      case RETURN:
        ReturnStatement();
        break;
      case THROW:
        ThrowStatement();
        break;
      case SYNCHRONIZED:
        SynchronizedStatement();
        break;
      case TRY:
        TryStatement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void AssertStatement() throws ParseException {
    jj_consume_token(ASSERT);
               add("assert");
    Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
                                                     add(":");
      Expression();
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
                                                                                      add(";"); write();
  }

  final public void LabeledStatement() throws ParseException {
    t = jj_consume_token(IDENTIFIER);
                     add(t);
    jj_consume_token(COLON);
                                     add(":");
    Statement();
  }

  final public void Block(boolean trim) throws ParseException {
    jj_consume_token(LBRACE);
          if (trim) trim(); if (trim) add("{"); else add(" {"); if (IN_CU) write(); else writeln(); ++token_source.level;
    label_50:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        ;
        break;
      default:
        break label_50;
      }
      BlockStatement();
    }
    jj_consume_token(RBRACE);
          trimNL(); writeln(); add("}"); --token_source.level;  write();
  }

  final public void BlockStatement() throws ParseException {
    if (jj_2_48(2147483647)) {
      LocalVariableDeclaration();
      jj_consume_token(SEMICOLON);
                                   add(";"); write();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        Statement();
        break;
      case CLASS:
      case INTERFACE:
        ClassOrInterfaceDeclaration(0);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void TokenMgrDeclBlock() throws ParseException {
    jj_consume_token(LBRACE);
          writeln(); add("{"); writeln(); ++token_source.level;
    label_51:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case NEW:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RETURN:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRANSIENT:
      case TRUE:
      case TRY:
      case VOID:
      case VOLATILE:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case AT:
      case LT:
      case INCR:
      case DECR:
        ;
        break;
      default:
        break label_51;
      }
      TokenMgrDeclBlockStatement();
    }
    jj_consume_token(RBRACE);
                                                                                                          writeln(); --token_source.level; add("}"); writeln();
  }

  final public void TokenMgrDeclBlockStatement() throws ParseException {
    int modifiers;
    modifiers = Modifiers();
    if (jj_2_49(2147483647)) {
      FieldDeclaration(modifiers);
    } else if (jj_2_50(3)) {
      MethodDeclaration(modifiers);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        Statement();
        break;
      case CLASS:
      case INTERFACE:
        ClassOrInterfaceDeclaration(modifiers);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void LocalVariableDeclaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      jj_consume_token(FINAL);
              add("final");
      break;
    default:
      ;
    }
    Type();
    VariableDeclarator();
    label_52:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_52;
      }
      jj_consume_token(COMMA);
                                                                    add(",");
      VariableDeclarator();
    }
  }

  final public void EmptyStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
        add(token_source.ls); add(token_source.ls);  write(); add(";"); write();
  }

  final public void StatementExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      PreIncrementExpression();
      break;
    case DECR:
      PreDecrementExpression();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case INCR:
      case DECR:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case LSHIFTASSIGN:
      case RSIGNEDSHIFTASSIGN:
      case RUNSIGNEDSHIFTASSIGN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          jj_consume_token(INCR);
           add("++");
          break;
        case DECR:
          jj_consume_token(DECR);
           add("--");
          break;
        case ASSIGN:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case LSHIFTASSIGN:
        case RSIGNEDSHIFTASSIGN:
        case RUNSIGNEDSHIFTASSIGN:
          AssignmentOperator();
          Expression();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        ;
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SwitchStatement() throws ParseException {
    jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
                   add("switch (");
    Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
                                                             add(") {"); write(); ++token_source.level;
    label_53:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        break label_53;
      }
      SwitchLabel();
                          ++token_source.level;
      label_54:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
          ;
          break;
        default:
          break label_54;
        }
        BlockStatement();
      }
                                                                         --token_source.level;
    }
    jj_consume_token(RBRACE);
          add("}"); --token_source.level; write();
  }

  final public void SwitchLabel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
         add("case");
      Expression();
      jj_consume_token(COLON);
                                           add(":"); write();
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
      jj_consume_token(COLON);
                add("default:"); write();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IfStatement() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
        add("if (");
    Expression();
    jj_consume_token(RPAREN);
       add(") ");
    Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
           trimWhitespace(); trim(); add(" else ");
      Statement();
      break;
    default:
      ;
    }
  }

  final public void WhileStatement() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
                  add("while (");
    Expression();
    jj_consume_token(RPAREN);
                                                       add(")");
    Statement();
  }

  final public void DoStatement() throws ParseException {
    jj_consume_token(DO);
         add("do ");
    Statement();
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
                                                 trimWhitespace(); add(" ^while (");
    Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
                                                                                                              add(");"); write();
  }

  final public void ForStatement() throws ParseException {
    boolean did_indent = false;
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
              add("for ( ");
    if (jj_2_51(2147483647)) {
      Type();
      t = jj_consume_token(IDENTIFIER);
                              add(t);
      jj_consume_token(COLON);
                                              add(" : ");
      Expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case SEMICOLON:
      case INCR:
      case DECR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
          ForInit();
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
                        add("; ");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          Expression();
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
                                                            add("; ");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
          ForUpdate();
          break;
        default:
          ;
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RPAREN);
        add(" )"); if (!getToken(1).image.equals("{")) { write(); ++token_source.level; did_indent = true; }
    Statement();
                if (did_indent) --token_source.level; did_indent = false;
  }

  final public void ForInit() throws ParseException {
    if (jj_2_52(2147483647)) {
      LocalVariableDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        StatementExpressionList();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void StatementExpressionList() throws ParseException {
    StatementExpression();
    label_55:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_55;
      }
      jj_consume_token(COMMA);
                                add(",");
      StatementExpression();
    }
  }

  final public void ForUpdate() throws ParseException {
    StatementExpressionList();
  }

  final public void BreakStatement() throws ParseException {
    jj_consume_token(BREAK);
            add("break");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                                               add(t);
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
                                                                 add(";"); write();
  }

  final public void ContinueStatement() throws ParseException {
    jj_consume_token(CONTINUE);
               add("continue");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                                                     add(t);
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
                                                                       add(";"); write();
  }

  final public void ReturnStatement() throws ParseException {
    jj_consume_token(RETURN);
             add("return");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      Expression();
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
                                                     add(";"); write();
  }

  final public void ThrowStatement() throws ParseException {
    jj_consume_token(THROW);
            add("throw");
    Expression();
    jj_consume_token(SEMICOLON);
                                               add(";"); write();
  }

  final public void SynchronizedStatement() throws ParseException {
    jj_consume_token(SYNCHRONIZED);
    jj_consume_token(LPAREN);
                       add("synchronized ( ");
    Expression();
    jj_consume_token(RPAREN);
                                                                   add(" )");
    Block();
  }

  final public void TryStatement() throws ParseException {
    jj_consume_token(TRY);
          add("try ");
    Block();
    label_56:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        ;
        break;
      default:
        break label_56;
      }
      jj_consume_token(CATCH);
      jj_consume_token(LPAREN);
                  trimWhitespace(); add(" catch ( ");
      FormalParameter();
      jj_consume_token(RPAREN);
                                                                                add(" ) ");
      Block();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
      jj_consume_token(FINALLY);
                trimWhitespace(); add(" finally");
      Block();
      break;
    default:
      ;
    }
  }

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */
  final public void RUNSIGNEDSHIFT() throws ParseException {
    if (getToken(1).kind == GT &&
                    ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GT);
    jj_consume_token(GT);
    jj_consume_token(GT);
  }

  final public void RSIGNEDSHIFT() throws ParseException {
    if (getToken(1).kind == GT &&
                    ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GT);
    jj_consume_token(GT);
  }

/* Annotation syntax follows. */
  final public void Annotation() throws ParseException {
    if (jj_2_53(2147483647)) {
      NormalAnnotation();
    } else if (jj_2_54(2147483647)) {
      SingleMemberAnnotation();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        MarkerAnnotation();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void NormalAnnotation() throws ParseException {
    jj_consume_token(AT);
         add("@");
    Name();
    jj_consume_token(LPAREN);
                                  add("(");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      MemberValuePairs();
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
                                                                           add(")");
  }

  final public void MarkerAnnotation() throws ParseException {
    jj_consume_token(AT);
        add("@");
    Name();
  }

  final public void SingleMemberAnnotation() throws ParseException {
    jj_consume_token(AT);
        add("@");
    Name();
    jj_consume_token(LPAREN);
                                 add("(");
    MemberValue();
    jj_consume_token(RPAREN);
                                                                 add(")");
  }

  final public void MemberValuePairs() throws ParseException {
    MemberValuePair();
    label_57:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_57;
      }
      jj_consume_token(COMMA);
                             add(",");
      MemberValuePair();
    }
  }

  final public void MemberValuePair() throws ParseException {
    t = jj_consume_token(IDENTIFIER);
                     add(t);
    jj_consume_token(ASSIGN);
                                     add("=");
    MemberValue();
  }

  final public void MemberValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      Annotation();
      break;
    case LBRACE:
      MemberValueArrayInitializer();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      ConditionalExpression();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MemberValueArrayInitializer() throws ParseException {
    jj_consume_token(LBRACE);
          add("{");
    MemberValue();
    label_58:
    while (true) {
      if (jj_2_55(2)) {
        ;
      } else {
        break label_58;
      }
      jj_consume_token(COMMA);
                                                         add(",");
      MemberValue();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
                                                                                              add(",");
      break;
    default:
      ;
    }
    jj_consume_token(RBRACE);
                                                                                                                  add("}"); write();
  }

/* Annotation Types. */
  final public void AnnotationTypeDeclaration(int modifiers) throws ParseException {
    jj_consume_token(AT);
    jj_consume_token(INTERFACE);
                    add("@interface");
    t = jj_consume_token(IDENTIFIER);
                                                          add(t);
    AnnotationTypeBody();
  }

  final public void AnnotationTypeBody() throws ParseException {
    jj_consume_token(LBRACE);
          add("{");
    label_59:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
      case SEMICOLON:
      case AT:
        ;
        break;
      default:
        break label_59;
      }
      AnnotationTypeMemberDeclaration();
    }
    jj_consume_token(RBRACE);
                                                                   add("}"); write();
  }

  final public void AnnotationTypeMemberDeclaration() throws ParseException {
   int modifiers;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case CLASS:
    case DOUBLE:
    case ENUM:
    case FINAL:
    case FLOAT:
    case INT:
    case INTERFACE:
    case LONG:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case IDENTIFIER:
    case AT:
      modifiers = Modifiers();
      if (jj_2_56(2147483647)) {
        Type();
        t = jj_consume_token(IDENTIFIER);
                           add(t);
        jj_consume_token(LPAREN);
        jj_consume_token(RPAREN);
                                               add("()");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _DEFAULT:
          DefaultValue();
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
                                                                                     add(";"); write();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case INTERFACE:
          ClassOrInterfaceDeclaration(modifiers);
          break;
        case ENUM:
          EnumDeclaration(modifiers);
          break;
        case AT:
          AnnotationTypeDeclaration(modifiers);
          break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case IDENTIFIER:
          FieldDeclaration(modifiers);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
           add(";"); write();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefaultValue() throws ParseException {
    jj_consume_token(_DEFAULT);
              add("default");
    MemberValue();
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_3R_115() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("LOOKAHEAD");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_114()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("IGNORE_CASE");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_97()) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_142()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_349() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_333() {
    if (jj_3R_65()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_349()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_392() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_3R_282()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_290() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_282() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_289()) {
    jj_scanpos = xsp;
    if (jj_3R_290()) return true;
    }
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_scan_token(HOOK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_275()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_141() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) return true;
    }
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_141()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_230()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_3R_89()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_314() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_333()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_348() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_347()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_3R_180()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_3R_103()) return true;
    Token xsp;
    if (jj_3_24()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) return true;
    }
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_358() {
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  private boolean jj_3R_336() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_366() {
    if (jj_3R_371()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_112()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_55()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_392()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_385() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_384()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3R_332() {
    if (jj_3R_347()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_348()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_316() {
    if (jj_3R_193()) return true;
    return false;
  }

  private boolean jj_3R_315() {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_384() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_313() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_304() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_313()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_185()) return true;
    xsp = jj_scanpos;
    if (jj_3R_314()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_315()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_316()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_371() {
    if (jj_3R_384()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_385()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_357() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_347() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_357()) jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    xsp = jj_scanpos;
    if (jj_3R_358()) jj_scanpos = xsp;
    if (jj_3R_334()) return true;
    return false;
  }

  private boolean jj_3R_319() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_333()) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_332()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_112()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_321() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_185()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_336()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_366()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) return true;
    }
    return false;
  }

  private boolean jj_3R_350() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_320() {
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_3R_191()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_153()) jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    if (jj_3R_154()) return true;
    xsp = jj_scanpos;
    if (jj_3R_319()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_320()) {
    jj_scanpos = xsp;
    if (jj_3R_321()) return true;
    }
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_3R_190()) return true;
    return false;
  }

  private boolean jj_3R_335() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    return false;
  }

  private boolean jj_3R_129() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_3R_189()) return true;
    return false;
  }

  private boolean jj_3R_318() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_317()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_272()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_273()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_144() {
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == GT &&
                ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_143()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) return true;
    }
    return false;
  }

  private boolean jj_3R_334() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_350()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_3R_281()) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == GT &&
                ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_144()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_381() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_317() {
    if (jj_3R_334()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_335()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_391() {
    if (jj_3R_400()) return true;
    return false;
  }

  private boolean jj_3R_380() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_383() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_382() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_347()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_305() {
    if (jj_3R_89()) return true;
    if (jj_3R_317()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_318()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_89()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_90()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_133()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_382()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_383()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_379() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_298() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_3R_305()) return true;
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_296() {
    if (jj_3R_304()) return true;
    return false;
  }

  private boolean jj_3R_295() {
    if (jj_3R_303()) return true;
    return false;
  }

  private boolean jj_3R_294() {
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_345() {
    if (jj_3R_254()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_3R_206()) return true;
    return false;
  }

  private boolean jj_3R_406() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_258()) return true;
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_381()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_287() {
    if (jj_3R_293()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_294()) {
    jj_scanpos = xsp;
    if (jj_3R_295()) {
    jj_scanpos = xsp;
    if (jj_3R_296()) {
    jj_scanpos = xsp;
    if (jj_3R_297()) {
    jj_scanpos = xsp;
    if (jj_3R_298()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_380()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_390() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_281() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_287()) {
    jj_scanpos = xsp;
    if (jj_3R_288()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_344() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_379()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_274()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_346() {
    if (jj_3R_281()) return true;
    return false;
  }

  private boolean jj_3R_400() {
    if (jj_3R_405()) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_180()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_220()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_405() {
    if (jj_3R_258()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_406()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_192()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_404() {
    if (jj_3R_405()) return true;
    return false;
  }

  private boolean jj_3R_330() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_329()) return true;
    return false;
  }

  private boolean jj_3R_403() {
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_399() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_403()) {
    jj_scanpos = xsp;
    if (jj_3R_404()) return true;
    }
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_175()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_176()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_3R_89()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_389() {
    if (jj_3R_399()) return true;
    return false;
  }

  private boolean jj_3R_329() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_344()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_345()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_378() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_389()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_390()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_391()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_377() {
    if (jj_3R_89()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_331() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_346()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_312() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_329()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_330()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_331()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_263() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_377()) {
    jj_scanpos = xsp;
    if (jj_3R_378()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_222()) return true;
    return false;
  }

  private boolean jj_3R_311() {
    if (jj_3R_328()) return true;
    return false;
  }

  private boolean jj_3R_388() {
    if (jj_3R_193()) return true;
    return false;
  }

  private boolean jj_3R_303() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_311()) jj_scanpos = xsp;
    if (jj_3R_312()) return true;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_222()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_222()) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_343() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3R_376() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_222()) return true;
    return false;
  }

  private boolean jj_3R_328() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_180()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_343()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_342() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3R_365() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_317()) return true;
    return false;
  }

  private boolean jj_3R_327() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_180()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_342()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_222()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_376()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_310() {
    if (jj_3R_328()) return true;
    return false;
  }

  private boolean jj_3R_309() {
    if (jj_3R_327()) return true;
    return false;
  }

  private boolean jj_3R_308() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_223() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3R_308()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_309()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_310()) jj_scanpos = xsp;
    if (jj_3R_254()) return true;
    return false;
  }

  private boolean jj_3R_375() {
    if (jj_3R_387()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_388()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_398() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_397() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_387() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_397()) {
    jj_scanpos = xsp;
    if (jj_3R_398()) return true;
    }
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_375()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_396() {
    if (jj_3R_97()) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_395() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  private boolean jj_3R_394() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  private boolean jj_3R_386() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_394()) {
    jj_scanpos = xsp;
    if (jj_3R_395()) {
    jj_scanpos = xsp;
    if (jj_3R_396()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_386()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_277() {
    if (jj_3R_284()) return true;
    return false;
  }

  private boolean jj_3R_276() {
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_258() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_276()) {
    jj_scanpos = xsp;
    if (jj_3R_277()) {
    jj_scanpos = xsp;
    if (jj_3R_278()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_3R_89()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_109()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  private boolean jj_3R_221() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_233()) jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    if (jj_3R_317()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_365()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_374() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_293() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_3R_222()) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_3R_193()) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_193() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_3R_221()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_177()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_222()) return true;
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_98()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_374()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_3R_269()) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_3R_268()) return true;
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_3R_255()) return true;
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_3R_267()) return true;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_3R_266()) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_3R_264()) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_3R_263()) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_3R_262()) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_3R_260()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(120)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    }
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_3R_259()) return true;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_3R_258()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_3R_257()) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_3R_256()) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) {
    jj_scanpos = xsp;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) {
    jj_scanpos = xsp;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_3R_254()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(BIT_OR)) return true;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_228() {
    Token xsp;
    if (jj_3R_253()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_253()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  private boolean jj_3_46() {
    Token xsp;
    if (jj_3_44()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_44()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_215() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) return true;
    }
    return false;
  }

  private boolean jj_3R_219() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_231()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACKET)) return true;
    xsp = jj_scanpos;
    if (jj_3R_232()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_229()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_3R_179()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_3R_219()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_180()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_216()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) return true;
    }
    return false;
  }

  private boolean jj_3R_188() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) return true;
    }
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_103()) return true;
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_3R_188()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(120)) return true;
    return false;
  }

  private boolean jj_3R_127() {
    Token xsp;
    if (jj_3R_171()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_171()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_3R_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_194()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_127()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_128()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(LT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_212() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) return true;
    }
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_3R_212()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_3R_187()) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_11() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("LOOKAHEAD");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_69()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_187() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_3R_211()) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_402() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_3R_105()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_3R_105()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_3R_187()) return true;
    return false;
  }

  private boolean jj_3R_401() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  private boolean jj_3R_393() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_401()) {
    jj_scanpos = xsp;
    if (jj_3R_402()) return true;
    }
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_326() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_124()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_38()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_9() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("LOOKAHEAD");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_67()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_364() {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  private boolean jj_3R_373() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_353()) return true;
    return false;
  }

  private boolean jj_3R_372() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_322()) return true;
    return false;
  }

  private boolean jj_3R_369() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_372()) {
    jj_scanpos = xsp;
    if (jj_3R_373()) return true;
    }
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_370() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_393()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_368() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_3R_184()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_325() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_356() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_363() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("TOKEN");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_160()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("SPECIAL_TOKEN");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_161()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("SKIP");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_162()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("MORE");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_163()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_361() {
    if (jj_3R_370()) return true;
    return false;
  }

  private boolean jj_3R_367() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  private boolean jj_3R_360() {
    if (jj_3R_369()) return true;
    return false;
  }

  private boolean jj_3R_359() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_367()) {
    jj_scanpos = xsp;
    if (jj_3R_368()) return true;
    }
    if (jj_3R_322()) return true;
    return false;
  }

  private boolean jj_3R_353() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_359()) {
    jj_scanpos = xsp;
    if (jj_3R_360()) {
    jj_scanpos = xsp;
    if (jj_3R_361()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_352() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("TOKEN_MGR_DECLS");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_121()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_324() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_355() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_341() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_355()) {
    jj_scanpos = xsp;
    if (jj_3R_356()) return true;
    }
    if (jj_3R_306()) return true;
    return false;
  }

  private boolean jj_3R_362() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_302() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3R_354() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_362()) {
    jj_scanpos = xsp;
    if (jj_3R_363()) {
    jj_scanpos = xsp;
    if (jj_3R_364()) return true;
    }
    }
    if (jj_3R_322()) return true;
    return false;
  }

  private boolean jj_3R_283() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(LSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_340() {
    if (jj_3R_353()) return true;
    return false;
  }

  private boolean jj_3_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) return true;
    }
    }
    if (jj_3R_299()) return true;
    return false;
  }

  private boolean jj_3R_339() {
    if (jj_3R_284()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_351() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_338() {
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) return true;
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(LT)) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_337() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_351()) {
    jj_scanpos = xsp;
    if (jj_3R_352()) return true;
    }
    if (jj_3R_322()) return true;
    return false;
  }

  private boolean jj_3R_322() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_337()) {
    jj_scanpos = xsp;
    if (jj_3R_338()) {
    jj_scanpos = xsp;
    if (jj_3R_339()) {
    jj_scanpos = xsp;
    if (jj_3R_340()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_323() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_307() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_323()) {
    jj_scanpos = xsp;
    if (jj_3R_324()) {
    jj_scanpos = xsp;
    if (jj_3R_325()) {
    jj_scanpos = xsp;
    if (jj_3R_326()) return true;
    }
    }
    }
    if (jj_3R_291()) return true;
    return false;
  }

  private boolean jj_3R_300() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_306() {
    if (jj_3R_322()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_354()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_301() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_292() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_301()) {
    jj_scanpos = xsp;
    if (jj_3R_302()) return true;
    }
    if (jj_3R_279()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_299() {
    if (jj_3R_306()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_341()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_291() {
    if (jj_3R_299()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_286() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_270()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    return false;
  }

  private boolean jj_3R_285() {
    if (jj_3R_291()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_307()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_224()) return true;
    return false;
  }

  private boolean jj_3R_280() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_251()) return true;
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_3R_285()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_300()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_62() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("JAVACODE");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_118()) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_210()) return true;
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_3R_279()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_292()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_158()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_3R_270()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_286()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_3R_251()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_280()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_3R_224()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_271()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_3R_210()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_252()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_3R_195()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_227()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_3R_183()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_214()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_75()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JavaCCParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;

  /** Constructor with InputStream. */
  public JavaCCParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JavaCCParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JavaCCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor. */
  public JavaCCParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JavaCCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor with generated Token Manager. */
  public JavaCCParser(JavaCCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(JavaCCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
