/* Generated By:JavaCC: Do not edit this line. HtmlParserTokenManager.java */
package beauty.parsers.html;

public class HtmlParserTokenManager implements HtmlParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjMoveStringLiteralDfa0_9()
{
   return jjMoveNfa_9(0, 0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
private final int jjMoveNfa_9(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 19;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7ff600000000000L & l) == 0L)
                     break;
                  kind = 23;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     jjCheckNAdd(1);
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(0, 3);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(0, 3);
                  break;
               case 3:
                  if ((0x10000000100000L & l) != 0L && kind > 21)
                     kind = 21;
                  break;
               case 4:
               case 8:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAdd(3);
                  break;
               case 5:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 13:
               case 16:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 14:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 19 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0)
{
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_8(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_8(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_8()
{
   switch(curChar)
   {
      case 37:
         return jjMoveStringLiteralDfa1_8(0x10000000L);
      case 47:
         return jjMoveStringLiteralDfa1_8(0x20000000L);
      case 60:
         return jjStopAtPos(0, 31);
      case 61:
         return jjStopAtPos(0, 30);
      case 62:
         return jjStopAtPos(0, 27);
      default :
         return jjMoveNfa_8(1, 0);
   }
}
private final int jjMoveStringLiteralDfa1_8(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_8(0, active0);
}
private final int jjMoveNfa_8(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 25;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x7ff600000000000L & l) == 0L)
                     break;
                  kind = 26;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_6(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_6(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 36);
      default :
         return jjMoveNfa_6(16, 0);
   }
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_6(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 42;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  if ((0xffffff67ffffffffL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjCheckNAddStates(4, 6);
                  }
                  else if ((0x1800000000L & l) != 0L)
                     jjCheckNAddTwoStates(2, 41);
                  if (curChar == 60)
                     jjCheckNAddTwoStates(36, 37);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 7;
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 0:
                  if ((0xffffff67ffffffffL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(4, 6);
                  break;
               case 1:
                  if ((0x1800000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xffffff7fffffffffL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(4, 6);
                  break;
               case 5:
                  if (curChar == 35)
                     jjCheckNAdd(4);
                  break;
               case 6:
                  if (curChar == 36)
                     jjCheckNAdd(4);
                  break;
               case 8:
                  if ((0xffffff7bffffffffL & l) != 0L)
                     jjCheckNAddStates(7, 10);
                  break;
               case 9:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 10);
                  break;
               case 12:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 13:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 39)
                     jjCheckNAddStates(7, 10);
                  break;
               case 18:
                  if ((0xffffff7bffffffffL & l) != 0L)
                     jjCheckNAddStates(11, 14);
                  break;
               case 19:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 20:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if (curChar == 34)
                     jjCheckNAddStates(11, 14);
                  break;
               case 22:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 23:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar == 39)
                     jjCheckNAddStates(11, 14);
                  break;
               case 26:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 27:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 28:
                  if ((0xffffffdfffffffffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 29:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 31:
                  if (curChar == 62 && kind > 44)
                     kind = 44;
                  break;
               case 32:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 34:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 36:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 37:
                  if (curChar == 47)
                     jjCheckNAdd(36);
                  break;
               case 38:
                  if (curChar == 62 && kind > 45)
                     kind = 45;
                  break;
               case 39:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if ((0x1800000000L & l) != 0L)
                     jjCheckNAddTwoStates(2, 41);
                  break;
               case 41:
                  if (curChar == 39 && kind > 38)
                     kind = 38;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(4, 6);
                  if (curChar == 92)
                     jjAddStates(21, 22);
                  break;
               case 0:
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(4, 6);
                  break;
               case 2:
                  if ((0xf7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(4, 6);
                  break;
               case 3:
                  if (curChar == 92)
                     jjAddStates(21, 22);
                  break;
               case 4:
                  if (curChar != 123)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(4, 6);
                  break;
               case 7:
                  if (curChar == 123)
                     jjCheckNAddStates(7, 10);
                  break;
               case 8:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(7, 10);
                  break;
               case 10:
                  jjAddStates(23, 24);
                  break;
               case 13:
                  jjAddStates(25, 26);
                  break;
               case 15:
                  if (curChar == 125 && kind > 42)
                     kind = 42;
                  break;
               case 17:
                  if (curChar == 123)
                     jjCheckNAddStates(11, 14);
                  break;
               case 18:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(11, 14);
                  break;
               case 20:
                  jjAddStates(27, 28);
                  break;
               case 23:
                  jjAddStates(29, 30);
                  break;
               case 25:
                  if (curChar == 125 && kind > 43)
                     kind = 43;
                  break;
               case 28:
               case 30:
                  jjCheckNAddStates(15, 17);
                  break;
               case 36:
                  jjAddStates(18, 20);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 16:
               case 0:
               case 2:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(4, 6);
                  break;
               case 8:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(7, 10);
                  break;
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(23, 24);
                  break;
               case 13:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(25, 26);
                  break;
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(11, 14);
                  break;
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(27, 28);
                  break;
               case 23:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(29, 30);
                  break;
               case 28:
               case 30:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 36:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(18, 20);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 42 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_4()
{
   return jjMoveNfa_4(0, 0);
}
private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xbfffff7affffd9ffL & l) == 0L)
                     break;
                  kind = 46;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 46;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_10(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xa0000L) != 0L)
         {
            jjmatchedKind = 16;
            return 8;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_10(int pos, long active0)
{
   return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_10(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_10(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_10()
{
   switch(curChar)
   {
      case 60:
         return jjMoveStringLiteralDfa1_10(0xa0000L);
      default :
         return jjMoveNfa_10(4, 0);
   }
}
private final int jjMoveStringLiteralDfa1_10(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_10(1, 19, 14);
         break;
      case 47:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_10(0, active0);
}
private final int jjMoveNfa_10(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 18;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xefffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjCheckNAdd(6);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  else if (curChar == 60)
                     jjAddStates(31, 34);
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  else if (curChar == 60)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAdd(5);
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 8:
                  if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAdd(5);
                  }
                  else if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 14;
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 10;
                  if (curChar == 37)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAdd(9);
                  }
                  break;
               case 0:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 1:
                  if (curChar == 10 && kind > 15)
                     kind = 15;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 5:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if ((0xefffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if (curChar == 60)
                     jjAddStates(31, 34);
                  break;
               case 9:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(9);
                  break;
               case 11:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 12:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (curChar == 45 && kind > 18)
                     kind = 18;
                  break;
               case 14:
               case 16:
                  if (curChar == 45)
                     jjCheckNAdd(13);
                  break;
               case 15:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 6:
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(6);
                  break;
               case 10:
                  if (curChar != 64)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 6:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 18 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 45:
         return jjStartNfaWithStates_3(0, 48, 12);
      default :
         return jjMoveNfa_3(1, 0);
   }
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 18;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 12:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 62)
                  {
                     if (kind > 47)
                        kind = 47;
                  }
                  if (curChar == 45)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 1:
                  if ((0xffffdf7bffffdbffL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(3);
                  }
                  else if ((0x8400000000L & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                  }
                  else if (curChar == 45)
                     jjCheckNAddStates(38, 40);
                  if (curChar == 39)
                     jjCheckNAddTwoStates(8, 9);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(5, 6);
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 10 && kind > 49)
                     kind = 49;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 49)
                     kind = 49;
                  break;
               case 3:
                  if ((0xffffdf7bffffdbffL & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 34 && kind > 50)
                     kind = 50;
                  break;
               case 7:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 39 && kind > 50)
                     kind = 50;
                  break;
               case 10:
                  if ((0x8400000000L & l) != 0L && kind > 50)
                     kind = 50;
                  break;
               case 11:
                  if (curChar == 45)
                     jjCheckNAddStates(38, 40);
                  break;
               case 13:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 62 && kind > 47)
                     kind = 47;
                  break;
               case 15:
                  if (curChar == 62 && kind > 47)
                     kind = 47;
                  break;
               case 16:
                  if (curChar == 37)
                     jjCheckNAdd(15);
                  break;
               case 17:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 3:
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(3);
                  break;
               case 5:
                  jjAddStates(21, 22);
                  break;
               case 8:
                  jjAddStates(41, 42);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 3:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(3);
                  break;
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 8:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(41, 42);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 18 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_7(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_7(int pos, long active0)
{
   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_7(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_7(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 34);
      case 39:
         return jjStopAtPos(0, 33);
      default :
         return jjMoveNfa_7(0, 0);
   }
}
private final int jjMoveNfa_7(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 35;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 39);
      default :
         return jjMoveNfa_5(16, 0);
   }
}
private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 42;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  if ((0xefffffe3ffffffffL & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAddStates(4, 6);
                  }
                  else if ((0x1800000000L & l) != 0L)
                     jjCheckNAddTwoStates(2, 41);
                  else if (curChar == 60)
                     jjCheckNAddTwoStates(36, 37);
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 0:
                  if ((0xefffffe3ffffffffL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(4, 6);
                  break;
               case 1:
                  if ((0x1800000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xfffffffbffffffffL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(4, 6);
                  break;
               case 5:
                  if (curChar == 35)
                     jjCheckNAdd(4);
                  break;
               case 6:
                  if (curChar == 36)
                     jjCheckNAdd(4);
                  break;
               case 8:
                  if ((0xffffff7bffffffffL & l) != 0L)
                     jjCheckNAddStates(7, 10);
                  break;
               case 9:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 10);
                  break;
               case 12:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 13:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 39)
                     jjCheckNAddStates(7, 10);
                  break;
               case 18:
                  if ((0xffffff7bffffffffL & l) != 0L)
                     jjCheckNAddStates(11, 14);
                  break;
               case 19:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 20:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if (curChar == 34)
                     jjCheckNAddStates(11, 14);
                  break;
               case 22:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 23:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar == 39)
                     jjCheckNAddStates(11, 14);
                  break;
               case 26:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 27:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 28:
                  if ((0xffffffdfffffffffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 29:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 31:
                  if (curChar == 62 && kind > 44)
                     kind = 44;
                  break;
               case 32:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 34:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 36:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 37:
                  if (curChar == 47)
                     jjCheckNAdd(36);
                  break;
               case 38:
                  if (curChar == 62 && kind > 45)
                     kind = 45;
                  break;
               case 39:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if ((0x1800000000L & l) != 0L)
                     jjCheckNAddTwoStates(2, 41);
                  break;
               case 41:
                  if (curChar == 34 && kind > 41)
                     kind = 41;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(4, 6);
                  if (curChar == 92)
                     jjAddStates(21, 22);
                  break;
               case 0:
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(4, 6);
                  break;
               case 2:
                  if ((0xf7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(4, 6);
                  break;
               case 3:
                  if (curChar == 92)
                     jjAddStates(21, 22);
                  break;
               case 4:
                  if (curChar != 123)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(4, 6);
                  break;
               case 7:
                  if (curChar == 123)
                     jjCheckNAddStates(7, 10);
                  break;
               case 8:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(7, 10);
                  break;
               case 10:
                  jjAddStates(23, 24);
                  break;
               case 13:
                  jjAddStates(25, 26);
                  break;
               case 15:
                  if (curChar == 125 && kind > 42)
                     kind = 42;
                  break;
               case 17:
                  if (curChar == 123)
                     jjCheckNAddStates(11, 14);
                  break;
               case 18:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(11, 14);
                  break;
               case 20:
                  jjAddStates(27, 28);
                  break;
               case 23:
                  jjAddStates(29, 30);
                  break;
               case 25:
                  if (curChar == 125 && kind > 43)
                     kind = 43;
                  break;
               case 28:
               case 30:
                  jjCheckNAddStates(15, 17);
                  break;
               case 36:
                  jjAddStates(18, 20);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 16:
               case 0:
               case 2:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(4, 6);
                  break;
               case 8:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(7, 10);
                  break;
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(23, 24);
                  break;
               case 13:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(25, 26);
                  break;
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(11, 14);
                  break;
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(27, 28);
                  break;
               case 23:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(29, 30);
                  break;
               case 28:
               case 30:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 36:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(18, 20);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 42 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 60:
         return jjStartNfaWithStates_1(0, 56, 19);
      default :
         return jjMoveNfa_1(1, 0);
   }
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 27;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 19:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 25;
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 1:
                  if ((0xefffff7bffffdbffL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(3);
                  }
                  else if ((0x8400000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                  }
                  else if (curChar == 60)
                     jjAddStates(43, 44);
                  if (curChar == 39)
                     jjCheckNAddTwoStates(8, 9);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(5, 6);
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 10 && kind > 55)
                     kind = 55;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 55)
                     kind = 55;
                  break;
               case 3:
                  if ((0xefffff7bffffdbffL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 34 && kind > 57)
                     kind = 57;
                  break;
               case 7:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 39 && kind > 57)
                     kind = 57;
                  break;
               case 10:
                  if ((0x8400000000L & l) != 0L && kind > 57)
                     kind = 57;
                  break;
               case 11:
                  if (curChar == 60)
                     jjAddStates(43, 44);
                  break;
               case 12:
                  if (curChar == 62 && kind > 53)
                     kind = 53;
                  break;
               case 26:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 3:
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(3);
                  break;
               case 5:
                  jjAddStates(21, 22);
                  break;
               case 8:
                  jjAddStates(41, 42);
                  break;
               case 13:
               case 20:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 14:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 21:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 3:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(3);
                  break;
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 8:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(41, 42);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 27 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 62:
         return jjStopAtPos(0, 52);
      default :
         return jjMoveNfa_2(7, 0);
   }
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0xbfffffffffffffffL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddStates(45, 47);
                  }
                  if (curChar == 39)
                     jjCheckNAddTwoStates(5, 6);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 0:
                  if ((0xbfffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(45, 47);
                  break;
               case 1:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar != 34)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(45, 47);
                  break;
               case 4:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar != 39)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(45, 47);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 7:
               case 0:
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(45, 47);
                  break;
               case 2:
                  jjAddStates(48, 49);
                  break;
               case 5:
                  jjAddStates(21, 22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 7:
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(45, 47);
                  break;
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(21, 22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 60:
         return jjStartNfaWithStates_0(0, 56, 18);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 25;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 18:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 23;
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 1:
                  if ((0xefffff7bffffdbffL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(3);
                  }
                  else if ((0x8400000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                  }
                  else if (curChar == 60)
                     jjAddStates(50, 51);
                  if (curChar == 39)
                     jjCheckNAddTwoStates(8, 9);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(5, 6);
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 10 && kind > 55)
                     kind = 55;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 55)
                     kind = 55;
                  break;
               case 3:
                  if ((0xefffff7bffffdbffL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 34 && kind > 57)
                     kind = 57;
                  break;
               case 7:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 39 && kind > 57)
                     kind = 57;
                  break;
               case 10:
                  if ((0x8400000000L & l) != 0L && kind > 57)
                     kind = 57;
                  break;
               case 11:
                  if (curChar == 60)
                     jjAddStates(50, 51);
                  break;
               case 12:
                  if (curChar == 62 && kind > 54)
                     kind = 54;
                  break;
               case 24:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 3:
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(3);
                  break;
               case 5:
                  jjAddStates(21, 22);
                  break;
               case 8:
                  jjAddStates(41, 42);
                  break;
               case 13:
               case 19:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 14:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 20:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 3:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(3);
                  break;
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 8:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(41, 42);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 25 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   7, 11, 15, 18, 0, 1, 3, 8, 9, 12, 15, 18, 19, 22, 25, 28, 
   29, 32, 36, 37, 39, 5, 6, 10, 11, 13, 14, 20, 21, 23, 24, 8, 
   12, 15, 17, 0, 2, 3, 12, 15, 17, 8, 9, 19, 26, 0, 1, 4, 
   2, 3, 18, 24, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\74\57", null, "\74\41", null, null, null, null, null, null, 
null, "\76", "\45\76", "\57\76", "\75", "\74", null, "\47", "\42", null, "\47", null, 
null, "\42", null, null, null, null, null, null, null, null, "\55", null, null, null, 
"\76", null, null, null, "\74", null, };
public static final String[] lexStateNames = {
   "LexStyle", 
   "LexScript", 
   "LexDecl", 
   "LexComment", 
   "LexInAttrVal", 
   "AttrValueBetweenDoubleQuotesState", 
   "AttrValueBetweenSingleQuotesState", 
   "LexAttrVal", 
   "LexInTag", 
   "LexStartTag", 
   "DEFAULT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 9, 3, 2, -1, 8, 8, 8, 10, 
   -1, -1, 10, 10, 10, 7, 9, -1, 6, 5, -1, 8, -1, 8, 8, -1, 8, -1, -1, -1, -1, 7, 10, -1, -1, 
   -1, -1, 10, 10, 10, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x3fffff7fdff8001L, 
};
static final long[] jjtoSkip = {
   0x802000000L, 
};
static final long[] jjtoSpecial = {
   0x802000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[42];
private final int[] jjstateSet = new int[84];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public HtmlParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public HtmlParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 42; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 11 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 10;
int defaultLexState = 10;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
     case 6:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_6();
       break;
     case 7:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_7();
       break;
     case 8:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_8();
       if (jjmatchedPos == 0 && jjmatchedKind > 32)
       {
          jjmatchedKind = 32;
       }
       break;
     case 9:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_9();
       if (jjmatchedPos == 0 && jjmatchedKind > 24)
       {
          jjmatchedKind = 24;
       }
       break;
     case 10:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_10();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 31 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[31]);
    Token t = new Token();
    t.image       = "<";
    t.kind        = TAG_START;
    t.next        = matchedToken.next;
    t.beginLine   = matchedToken.beginLine;
    t.beginColumn = matchedToken.beginColumn;
    t.endLine     = matchedToken.endLine;
    t.endColumn   = matchedToken.endColumn;
    matchedToken.next  = t;
    matchedToken.kind  = TAG_END;
    matchedToken.image = ">";
         break;
      default : 
         break;
   }
}
}
