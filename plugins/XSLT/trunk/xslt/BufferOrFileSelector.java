/* * BufferOrFileSelector.java * * Copyright 2010 Eric Le Lay * abstracted from InputSelectionPanel.java@r17377 * * This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License * as published by the Free Software Foundation; either version 2 * of the License, or any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program; if not, write to the Free Software * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. */package xslt;import java.awt.BorderLayout;import java.awt.GridLayout;import java.awt.event.ActionEvent;import javax.swing.ButtonGroup;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JRadioButton;import javax.swing.JComponent;import org.gjt.sp.jedit.jEdit;/** * 2 radio buttons (buffer and file). * When file is selected, more options are enabled. * * @author Eric Le Lay - kerik-sf@users.sourceforge.net */public abstract class BufferOrFileSelector extends JPanel {	private static final String LAST_CURRENT_BUFFER = "last-current-buffer";		private JRadioButton bufferRadio;	private JRadioButton fileRadio;	private final XsltAction radioSelectAction;		/** the property prefix for this component (e.g. "xslt.source")*/	protected final String propertyPrefix;		BufferOrFileSelector(String propertyPrefix) {		super (new BorderLayout());		this.propertyPrefix = propertyPrefix;		radioSelectAction = new RadioSelectAction(propertyPrefix);		JPanel radioPanel = new JPanel(new GridLayout(3,1));		radioPanel.add(new JLabel(jEdit.getProperty(propertyPrefix+".label")),BorderLayout.NORTH);		createRadioButtons(propertyPrefix);				radioPanel.add(bufferRadio);		radioPanel.add(fileRadio);				add(radioPanel, BorderLayout.NORTH);	}		/**	 * call this to add a component for file operations, like	 * a text-field and a browse button.	 * @param	sourceField	component to be added	 */	protected final void setSourceField(JComponent sourceField){		add(sourceField,BorderLayout.CENTER);	}		/**	 * called on actions on the radio buttons.	 * @param	enabled	is the 'file' radio-button selected ?	 */	protected abstract void setFileSelectionEnabled(boolean enabled);		private void createRadioButtons(String propertyPrefix) {  	  ButtonGroup radioGroup = new ButtonGroup();  	  bufferRadio = radioSelectAction.getRadioButton(propertyPrefix+".buffer");  	  fileRadio = radioSelectAction.getRadioButton(propertyPrefix+".file");  	    	  bufferRadio.setActionCommand("buffer");  	  bufferRadio.setSelected(jEdit.getBooleanProperty(propertyPrefix+LAST_CURRENT_BUFFER));  	  fileRadio.setActionCommand("file");  	  fileRadio.setSelected(!jEdit.getBooleanProperty(propertyPrefix+LAST_CURRENT_BUFFER));  	    	  radioGroup.add(bufferRadio);  	  radioGroup.add(fileRadio);		}		public boolean isFileSelected() {		return fileRadio.isSelected();	}	private class RadioSelectAction extends XsltAction {		private String propertyPrefix;				RadioSelectAction(String propertyPrefix){			super(propertyPrefix+".radioselect");			this.propertyPrefix=propertyPrefix;		}				public void actionPerformed(ActionEvent e) {			if ("buffer".equals(e.getActionCommand())) {				setFileSelectionEnabled(false);				jEdit.setBooleanProperty(propertyPrefix+LAST_CURRENT_BUFFER,true);			}else if ("file".equals(e.getActionCommand())) { 				setFileSelectionEnabled(true);				jEdit.setBooleanProperty(propertyPrefix+LAST_CURRENT_BUFFER,false);			}		}	}}