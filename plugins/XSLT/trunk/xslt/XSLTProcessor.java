/* * XSLTProcessor.java - GUI for performing XSL Transformations * * Copyright (C) 2002 Greg Merrill *               2002, 2003 Robert McKinnon * * This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License * as published by the Free Software Foundation; either version 2 * of the License, or any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program; if not, write to the Free Software * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. */package xslt;import org.gjt.sp.jedit.Buffer;import org.gjt.sp.jedit.GUIUtilities;import org.gjt.sp.jedit.MiscUtilities;import org.gjt.sp.jedit.View;import org.gjt.sp.jedit.jEdit;import org.gjt.sp.util.Log;import javax.swing.ImageIcon;import javax.swing.JButton;import javax.swing.JFileChooser;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JMenuItem;import javax.swing.JPanel;import javax.swing.JPopupMenu;import javax.swing.JSplitPane;import javax.swing.JTextField;import java.awt.Component;import java.awt.Container;import java.awt.Cursor;import java.awt.Dimension;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyEvent;import java.awt.event.KeyListener;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import java.io.IOException;import java.net.URL;import java.util.Date;import java.util.Map;/** * GUI for performing XSL Transformations. * * @author Greg Merrill * @author Robert McKinnon - robmckinnon@users.sourceforge.net */public class XSLTProcessor extends JPanel implements ActionListener, KeyListener, MouseListener {  private static final String SOURCE_SELECT = "source.select";  private static final String RESULT_NAME = "result.name";  private static final String SAVE_SETTINGS = "settings.save";  private static final String LOAD_SETTINGS = "settings.load";  private static final String TRANSFORM = "transform";  private static final String LAST_SOURCE = "xslt.last-source";  private static final String LAST_RESULT = "xslt.last-result";  private static final String FILE_OPEN = "xslt.file.open.label";  private View view;  private JTextField sourceFileTextField;  private JTextField resultFileTextField;  private JButton selectButton;  private JButton nameResultButton;  private JButton saveSettingsButton;  private JButton loadSettingsButton;  private JButton transformButton;  private OpenFilePopupMenu openFileMenu;  private StylesheetPanel stylesheetPanel;  private StylesheetParameterPanel parameterPanel;  /**   * Constructor for the XSLTProcessor object.   *   *@param theView   */  public XSLTProcessor(View theView) {    super(new GridBagLayout());    this.view = theView;    this.sourceFileTextField = initFileTextField(LAST_SOURCE, "xslt.source.prompt");    this.resultFileTextField = initFileTextField(LAST_RESULT, "xslt.result.prompt");    this.openFileMenu = initOpenFileMenu();    this.selectButton = initButton(SOURCE_SELECT, this, true);    this.nameResultButton = initButton(RESULT_NAME, this, true);    this.stylesheetPanel = new StylesheetPanel(view, this);    this.parameterPanel = new StylesheetParameterPanel();    this.loadSettingsButton = initButton(LOAD_SETTINGS, this, true);    this.saveSettingsButton = initButton(SAVE_SETTINGS, this, true);    this.transformButton = initButton(TRANSFORM, this, stylesheetPanel.stylesheetsExist());    addSourceComponents();    addStylesheetComponents();    addResultComponents();    addTransformComponents();  }  private OpenFilePopupMenu initOpenFileMenu() {    JMenuItem item = new JMenuItem(jEdit.getProperty(FILE_OPEN));    item.setActionCommand(FILE_OPEN);    item.addActionListener(this);    OpenFilePopupMenu menu = new OpenFilePopupMenu();    menu.add(item);    return menu;  }  /**   * Clicks the transform XML button.   */  public void clickTransformButton() {    transformButton.doClick();  }  /**   * Clicks the load settings button.   */  public void clickLoadSettingsButton() {    loadSettingsButton.doClick();  }  /**   * Clicks the save settings button.   */  public void clickSaveSettingsButton() {    saveSettingsButton.doClick();  }  public void setTransformEnabled(boolean isEnabled) {    this.transformButton.setEnabled(isEnabled);  }  /**   * Implementation of {@link java.awt.event.KeyListener} interface method.   */  public void keyTyped(KeyEvent e) {  }  /**   * If enter key is pressed, opens relevant file depending on the source of the key press event.   * Implementation of {@link java.awt.event.KeyListener} interface method.   */  public void keyPressed(KeyEvent e) {    if(e.getKeyCode() == KeyEvent.VK_ENTER) {      openFile(e.getSource());      e.consume();    }  }  /**   * Implementation of {@link java.awt.event.KeyListener} interface method.   */  public void keyReleased(KeyEvent e) {  }  /**   * Implementation of {@link java.awt.event.MouseListener} interface method.   */  public void mouseClicked(MouseEvent event) {    Log.log(Log.DEBUG, this, "is popup trigger " + GUIUtilities.isPopupTrigger(event));    Object eventSource = event.getSource();    if(event.getClickCount() >= 2) {      openFile(eventSource);      event.consume();    } else if(GUIUtilities.isPopupTrigger(event)) {      openFileMenu.setEventSource(eventSource);      GUIUtilities.showPopupMenu(openFileMenu, (Component)eventSource, event.getX(), event.getY());    }  }  /**   * Implementation of {@link java.awt.event.MouseListener} interface method.   */  public void mousePressed(MouseEvent event) {    if(GUIUtilities.isPopupTrigger(event)) {      stylesheetPanel.setSelected(event.getPoint());    }  }  /**   * Implementation of {@link java.awt.event.MouseListener} interface method.   */  public void mouseReleased(MouseEvent e) {  }  /**   * Implementation of {@link java.awt.event.MouseListener} interface method.   */  public void mouseEntered(MouseEvent e) {  }  /**   * Implementation of {@link java.awt.event.MouseListener} interface method.   */  public void mouseExited(MouseEvent e) {  }  private void openFile(Object eventSource) {    String file = null;    if(eventSource == sourceFileTextField && isSourceFileDefined()) {      file = getSourceFile();    } else if(eventSource == resultFileTextField && isResultFileDefined()) {      file = getResultFile();    } else {      file = stylesheetPanel.getSelectedStylesheet();    }    if(file != null) {      jEdit.openFile(view, file);    }  }  private JTextField initFileTextField(String lastProperty, String descriptionProperty) {    JTextField textField = new JTextField();    textField.setEditable(false);    String lastSource = jEdit.getProperty(lastProperty);    if(lastSource == null) {      textField.setText(jEdit.getProperty(descriptionProperty));    } else {      textField.setText(lastSource);    }    textField.addKeyListener(this);    textField.addMouseListener(this);    return textField;  }  static JButton initButton(String buttonType, ActionListener actionListener, boolean isEnabled) {    String iconName = jEdit.getProperty("xslt." + buttonType + ".button.icon");    String toolTipText = jEdit.getProperty("xslt." + buttonType + ".button.tooltip");    String shortcut = jEdit.getProperty("xslt." + buttonType + ".shortcut");    if(shortcut != null) {      toolTipText = toolTipText + " - " + shortcut;    }    URL url = XSLTProcessor.class.getResource(iconName);    JButton button = new JButton(new ImageIcon(url));    button.setActionCommand(buttonType);    button.setToolTipText(toolTipText);    button.addActionListener(actionListener);    button.setEnabled(isEnabled);    Dimension dimension = new Dimension(30, 30);    if(buttonType.equals("transform")) {      dimension.setSize(74, 30);    }    button.setMinimumSize(dimension);    button.setPreferredSize(dimension);    return button;  }  static GridBagConstraints getConstraints(int gridy, Insets insets) {    GridBagConstraints constraints = new GridBagConstraints();    constraints.gridy = gridy;    constraints.insets = insets;    return constraints;  }  private void addSourceComponents() {    GridBagConstraints constraints = getConstraints(0, new Insets(4, 4, 0, 4));    constraints.anchor = GridBagConstraints.WEST;    add(new JLabel(jEdit.getProperty("xslt.source.label")), constraints);    constraints = getConstraints(1, new Insets(4, 4, 4, 4));    constraints.weightx = 5;    constraints.fill = GridBagConstraints.HORIZONTAL;    add(sourceFileTextField, constraints);    constraints = getConstraints(1, new Insets(2, 2, 4, 2));    constraints.anchor = GridBagConstraints.EAST;    add(selectButton, constraints);  }  private void addStylesheetComponents() {    JSplitPane splitPane1 = new JSplitPane(JSplitPane.VERTICAL_SPLIT, stylesheetPanel, parameterPanel);    splitPane1.setOneTouchExpandable(true);    JSplitPane splitPane = splitPane1;    GridBagConstraints constraints = getConstraints(2, new Insets(4, 4, 4, 4));    constraints.gridheight = 5;    constraints.gridwidth = 2;    constraints.weightx = constraints.weighty = 5;    constraints.fill = GridBagConstraints.BOTH;    add(splitPane, constraints);  }  private void addTransformComponents() {    GridBagConstraints constraints = getConstraints(8, new Insets(4, 4, 4, 4));    constraints.gridwidth = 2;    constraints.anchor = GridBagConstraints.CENTER;    JPanel panel = new JPanel();    panel.add(this.loadSettingsButton);    panel.add(this.saveSettingsButton);    panel.add(this.transformButton);    add(panel, constraints);  }  private void addResultComponents() {    GridBagConstraints constraints = getConstraints(9, new Insets(4, 4, 0, 4));    constraints.anchor = GridBagConstraints.WEST;    add(new JLabel(jEdit.getProperty("xslt.result.label")), constraints);    constraints = getConstraints(10, new Insets(4, 4, 4, 4));    constraints.weightx = 5;    constraints.fill = GridBagConstraints.HORIZONTAL;    add(this.resultFileTextField, constraints);    constraints = getConstraints(10, new Insets(2, 2, 4, 2));    constraints.anchor = GridBagConstraints.EAST;    add(this.nameResultButton, constraints);  }  public void actionPerformed(ActionEvent e) {    String action = e.getActionCommand();    if(action == TRANSFORM) {      transform();    } else if(action == SOURCE_SELECT) {      chooseFile(true);    } else if(action == RESULT_NAME) {      chooseFile(false);    } else if(action == LOAD_SETTINGS) {      loadSettings();    } else if(action == SAVE_SETTINGS) {      saveSettings();    } else if(action == FILE_OPEN) {      openFile(openFileMenu.getEventSource());    }  }  public View getView() {    return view;  }  public StylesheetPanel getStylesheetPanel() {    return stylesheetPanel;  }  public StylesheetParameterPanel getParameterPanel() {    return parameterPanel;  }  public String getSourceFile() {    return this.sourceFileTextField.getText();  }  public String getResultFile() {    return this.resultFileTextField.getText();  }  public void setResultFile(String resultFile) {    resultFileTextField.setText(resultFile);    jEdit.setProperty(LAST_RESULT, resultFile);  }  public void setSourceFile(String sourceFile) {    sourceFileTextField.setText(sourceFile);    jEdit.setProperty(LAST_SOURCE, sourceFile);  }  public void setStylesheets(String[] stylesheets) {    this.stylesheetPanel.setStylesheets(stylesheets);  }  public void setStylesheetParameters(String[] names, String[] values) {    this.parameterPanel.setParameters(names, values);  }  /**   * Attempts to load settings from a user specified file.   */  private void loadSettings() {    try {      XsltSettings settings = new XsltSettings(this);      settings.loadFromFile();    } catch(Exception e) {      Log.log(Log.ERROR, this, e.toString());    }  }  /**   * Attempts to save settings to a user specified file.   */  private void saveSettings() {    try {      XsltSettings settings = new XsltSettings(this);      settings.writeToFile();    } catch(IOException e) {      Log.log(Log.ERROR, this, e.toString());    }  }  private void chooseFile(boolean isSourceFile) {    String path = null;    if(isSourceFile && getSourceFile() != null && !getSourceFile().equals("")) {      path = MiscUtilities.getParentOfPath(getSourceFile());    } else if(!isSourceFile && isResultFileDefined()) {      path = MiscUtilities.getParentOfPath(getResultFile());    }    String[] selections = GUIUtilities.showVFSFileDialog(view, path, JFileChooser.OPEN_DIALOG, false);    if(selections != null) {      if(isSourceFile) {        setSourceFile(selections[0]);      } else {        setResultFile(selections[0]);      }    }    Container topLevelAncestor = XSLTProcessor.this.getTopLevelAncestor();    if(topLevelAncestor instanceof JFrame) {      ((JFrame) topLevelAncestor).toFront();    }  }  public boolean isSourceFileDefined() {    return !getSourceFile().equals(jEdit.getProperty("xslt.source.prompt"));  }  public boolean isResultFileDefined() {    return !getResultFile().equals(jEdit.getProperty("xslt.result.prompt"));  }  private void transform() {    if(!getStylesheetPanel().stylesheetsExist()) {      XSLTPlugin.showMessageDialog("xslt.transform.message.no-stylesheets", this);    } else if(!isSourceFileDefined()) {      XSLTPlugin.showMessageDialog("xslt.transform.message.no-source", this);    } else if(!isResultFileDefined()) {      XSLTPlugin.showMessageDialog("xslt.transform.message.no-result", this);    } else {      doTransform();    }  }  private void doTransform() {    try {      Date start = new Date();      setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));      XSLTUtilities.transform(getSourceFile(), getStylesheets(), getStylesheetParameters(), getResultFile());      Buffer buffer = jEdit.getBuffer(getResultFile());      if(buffer == null) {        jEdit.openFile(view, getResultFile());      } else {        buffer.reload(view);      }      view.getTextArea().setCaretPosition(0);      logTimeTaken(start);    } catch(Exception e) {      setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));      String message = jEdit.getProperty("xslt.transform.message.failure");      XSLTPlugin.processException(e, message, XSLTProcessor.this);    } finally {      setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));    }  }  private Object[] getStylesheets() {    return getStylesheetPanel().getStylesheets();  }  private Map getStylesheetParameters() {    return getParameterPanel().getParametersMap();  }  private void logTimeTaken(Date start) {    Date end = new Date();    long timeTaken = end.getTime() - start.getTime();    long secondsTaken = timeTaken / 1000;    long partialSecondsTaken = timeTaken % 1000;    Object[] param = {secondsTaken + "." + partialSecondsTaken};    String status = jEdit.getProperty("xslt.transform.message.success", param);    Log.log(Log.MESSAGE, this, status);  }  /**   * Open file popup menu, holds event source.   */  class OpenFilePopupMenu extends JPopupMenu {    private Object eventSource;    public void setEventSource(Object eventSource) {      this.eventSource = eventSource;    }    public Object getEventSource() {      return eventSource;    }  }}