/* * XSLTProcessor.java - GUI for performing XSL Transformations * * Copyright 2002 Greg Merrill *           2002, 2003 Robert McKinnon *           2010 Eric Le Lay * * This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License * as published by the Free Software Foundation; either version 2 * of the License, or any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program; if not, write to the Free Software * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. */package xslt;import java.awt.BorderLayout;import java.awt.Cursor;import java.awt.Color;import java.awt.Dimension;import java.awt.GridLayout;import java.awt.GridBagLayout;import java.awt.GridBagConstraints;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.File;import java.io.Writer;import java.io.FileWriter;import java.io.StringWriter;import java.io.IOException;import java.util.Date;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JComponent;import javax.swing.JPanel;import javax.swing.JSplitPane;import javax.swing.JToolBar;import javax.swing.JCheckBox;import org.gjt.sp.jedit.Buffer;import org.gjt.sp.jedit.View;import org.gjt.sp.jedit.jEdit;import org.gjt.sp.jedit.gui.DockableWindowManager;import org.gjt.sp.jedit.gui.DefaultFocusComponent;import org.gjt.sp.util.Log;import errorlist.*;import org.xml.sax.InputSource;import org.xml.sax.SAXParseException;import javax.xml.transform.Result;import javax.xml.transform.stream.StreamResult;/** * GUI for performing XSL Transformations. * * @author Greg Merrill * @author Robert McKinnon - robmckinnon@users.sourceforge.net * @author Eric Le Lay */public class XSLTProcessor extends JPanel implements DefaultFocusComponent {	private static final String OPEN_RESULT = "xslt.open-result";	private View view;	private BufferOrFileVFSSelector result;	private XsltAction saveSettingsAction = new SaveSettingsAction();	private XsltAction loadSettingsAction = new LoadSettingsAction();	private XsltAction transformAction = new TransformAction();	private BufferOrFileVFSSelector inputSelectionPanel;	private StylesheetPanel stylesheetPanel;	private StylesheetParameterPanel parameterPanel;	private JButton transformButton;	private JCheckBox openResultCheckBox;	/**	 * Constructor for the XSLTProcessor object.	 *	 */	public XSLTProcessor(View theView, String position) {		super();		this.view = theView;		boolean sideBySide = position.equals(DockableWindowManager.TOP) || position.equals(DockableWindowManager.BOTTOM);		this.result = new BufferOrFileVFSSelector(view,"xslt.result");		this.inputSelectionPanel = new BufferOrFileVFSSelector(view,"xslt.source");		this.stylesheetPanel = new StylesheetPanel(view, this);		this.parameterPanel = new StylesheetParameterPanel();		JPanel resultPanel = initResultPanel(result);		JComponent transformPanel = initTransformToolBar();		if (sideBySide) {			createHorizontalLayout(inputSelectionPanel, transformPanel, resultPanel);		} else {			createVerticalLayout(inputSelectionPanel, transformPanel, resultPanel);		}		XSLTPlugin.setProcessor(this);	}	public void focusOnDefaultComponent() {		if(transformButton != null) {			transformButton.requestFocus();		}	}	private void createVerticalLayout(JComponent sourcePanel, JComponent transformPanel, JComponent resultPanel) {		setLayout(new GridBagLayout());				stylesheetPanel.setBorder(BorderFactory.createEmptyBorder(8,0,0,0));		transformPanel.setBorder(BorderFactory.createEmptyBorder(8,0,0,0));		resultPanel.setBorder(BorderFactory.createEmptyBorder(8,0,0,0));				GridBagConstraints c = new GridBagConstraints();				c.gridx = 0;		c.gridy = 0;		c.gridwidth = 1;		c.gridheight = 4;		c.weightx = 1;		c.weighty = 0;		c.fill = GridBagConstraints.BOTH;		add(sourcePanel,c);		JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, stylesheetPanel, parameterPanel);		splitPane.setOneTouchExpandable(true);				c.gridy += c.gridheight;		c.gridheight = 10;		c.weighty = 1;		add(splitPane,c);				c.gridy += c.gridheight;		c.gridheight = 1;		c.weighty = 0;		c.fill = GridBagConstraints.NONE;		c.anchor = GridBagConstraints.CENTER;		add(transformPanel,c);		c.gridy += c.gridheight;		c.gridheight = 5;		c.fill = GridBagConstraints.BOTH;		add(resultPanel,c);	}	private void createHorizontalLayout(JComponent sourcePanel, JComponent transformPanel, JComponent resultPanel) {		JPanel topPanel = new JPanel(new BorderLayout());		topPanel.add(sourcePanel, BorderLayout.NORTH);		topPanel.add(transformPanel, BorderLayout.SOUTH);		JPanel midPanel = new JPanel(new BorderLayout());		midPanel.add(topPanel, BorderLayout.NORTH);		midPanel.add(resultPanel, BorderLayout.SOUTH);		JPanel panel = new JPanel(new BorderLayout());		panel.add(midPanel, BorderLayout.NORTH);		setLayout(new GridLayout(1, 3, 6, 0));		add(stylesheetPanel);		add(parameterPanel);		add(panel);	}	/**	 * Performs the transform action.	 */	public void clickTransformButton() {		transformAction.actionPerformed(null);	}	/**	 * Performs the load settings action.	 */	public void clickLoadSettingsButton() {		loadSettingsAction.actionPerformed(null);	}	/**	 * Performs the save settings action.	 */	public void clickSaveSettingsButton() {		saveSettingsAction.actionPerformed(null);	}	public void setTransformEnabled(boolean isEnabled) {		this.transformAction.setEnabled(isEnabled);	}	private JPanel initResultPanel(JComponent centerComponent) {		openResultCheckBox = new JCheckBox(jEdit.getProperty("xslt.result.open-result.label"));		openResultCheckBox.setSelected(jEdit.getBooleanProperty(OPEN_RESULT));		openResultCheckBox.setName("open-result");		openResultCheckBox.setToolTipText("xslt.result.open-result.tooltip");				// save preference for next time		openResultCheckBox.addActionListener(new ActionListener(){				public void actionPerformed(ActionEvent e){					jEdit.setBooleanProperty(OPEN_RESULT,openResultCheckBox.isSelected());				}			});				JPanel panel = new JPanel(new BorderLayout());				panel.add(centerComponent);		panel.add(openResultCheckBox,BorderLayout.SOUTH);		return panel;	}	private JComponent initTransformToolBar() {		this.transformAction.setEnabled(stylesheetPanel.stylesheetsExist());		JToolBar toolBar = new JToolBar(JToolBar.HORIZONTAL);		toolBar.setFloatable(false);		toolBar.add(loadSettingsAction.getButton());		toolBar.add(saveSettingsAction.getButton());		toolBar.addSeparator();		transformButton = transformAction.getButton();		toolBar.add(transformButton);		return toolBar;	}	public View getView() {		return view;	}	public BufferOrFileVFSSelector getInputSelectionPanel() {		return inputSelectionPanel;	}	public StylesheetPanel getStylesheetPanel() {		return stylesheetPanel;	}	public StylesheetParameterPanel getParameterPanel() {		return parameterPanel;	}	public BufferOrFileVFSSelector getResult() {		return this.result;	}	public String getResultFile() {		return this.result.getSourceFile();	}	public void setStylesheets(String[] stylesheets) {		this.stylesheetPanel.setStylesheets(stylesheets);	}	public void setStylesheetParameters(String[] names, String[] values) {		this.parameterPanel.setParameters(names, values);	}	/**	 * Attempts to load settings from a user specified file.	 */	private void loadSettings() {		try {			XsltSettings settings = new XsltSettings(this);			settings.loadFromFile();		} catch (Exception e) {			Log.log(Log.ERROR, this, e.toString());		}	}	/**	 * Attempts to save settings to a user specified file.	 */	private void saveSettings() {		try {			XsltSettings settings = new XsltSettings(this);			settings.writeToFile();		} catch (IOException e) {			Log.log(Log.ERROR, this, e.toString());		}	}	public boolean shouldOpenResult() {		return openResultCheckBox.isSelected();	}	private void transform() {		if (!getStylesheetPanel().stylesheetsExist()) {			XSLTPlugin.showMessageDialog("xslt.transform.message.no-stylesheets", this);		} else if (!inputSelectionPanel.isSourceFileDefined()) {			XSLTPlugin.showMessageDialog("xslt.transform.message.no-source", this);		} else if (!result.isSourceFileDefined()) {			XSLTPlugin.showMessageDialog("xslt.transform.message.no-result", this);		} else {			doTransform();		}	}	private void doTransform() {		ErrorListenerToErrorList listener = new ErrorListenerToErrorList("");		try {			Date start = new Date();			setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));			String path;			InputSource inputSource;			if (inputSelectionPanel.isFileSelected()) {				path = inputSelectionPanel.getSourceFile();			} else {				Buffer buffer = view.getBuffer();				path = buffer.getPath();			}			inputSource = xml.Resolver.instance().resolveEntity(/*publicId*/null,path);						// get the stylesheets now, before the current buffer has changed			Object[] stylesheets = getStylesheets();						boolean outputToBuffer = !result.isFileSelected();			Buffer outputBuffer = null;			Result result;			Writer outputWriter = null;			File resultFile = null;			if(outputToBuffer) {				outputBuffer = jEdit.newFile(view);				outputWriter = new StringWriter();				result = new StreamResult(outputWriter);				result.setSystemId(xml.SchemaMappingManager.pathToURL(outputBuffer.getPath()));			} else {				resultFile = new File(getResultFile());				outputBuffer = jEdit.getBuffer(resultFile.getAbsolutePath());				outputWriter = new FileWriter(resultFile);				result = new StreamResult(outputWriter);				result.setSystemId(resultFile.toURI().toString());			}			// clear any existing error			XSLTPlugin.getErrorSource().clear();									XSLTUtilities.transform(inputSource, stylesheets , getStylesheetParameters(), result, listener);			// close the output (is it necessary ?)			outputWriter.flush();			outputWriter.close();						if(outputToBuffer){				// pull the content to the Untitled buffer				outputBuffer.insert(0,outputWriter.toString());			}else if (outputBuffer == null) {				// output to file, which wasn't open before				if(shouldOpenResult()) {					jEdit.openFile(view, resultFile.getAbsolutePath());				}			} else {				// output to file, which was already open				outputBuffer.reload(view);			}			logTimeTaken(start);		} catch(SAXParseException spe){			listener.sendSAXError(spe);			String message = jEdit.getProperty("xslt.transform.message.failure");			XSLTPlugin.processException(spe, message, XSLTProcessor.this);		} catch (Exception e) {			String message = jEdit.getProperty("xslt.transform.message.failure");			XSLTPlugin.processException(e, message, XSLTProcessor.this);		} finally {			setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));		}	}	private Object[] getStylesheets() {			if (getStylesheetPanel().isFileSelected()) {				return getStylesheetPanel().getStylesheets();			} else {				Buffer buffer = view.getBuffer();				return new Object[]{buffer.getPath()};			}	}	private Map getStylesheetParameters() {		return getParameterPanel().getParametersMap();	}	private void logTimeTaken(Date start) {		Date end = new Date();		long timeTaken = end.getTime() - start.getTime();		long secondsTaken = timeTaken / 1000;		long partialSecondsTaken = timeTaken % 1000;		Object[] param = {secondsTaken + "." + partialSecondsTaken};		String status = jEdit.getProperty("xslt.transform.message.success", param);		Log.log(Log.MESSAGE, this, status);	}	private class TransformAction extends XsltAction {				TransformAction() {			super("xslt.transform");		}		public void actionPerformed(ActionEvent e) {			transform();		}		protected Dimension getButtonDimension() {			Dimension dimension = new Dimension(74, 30);			return dimension;		}	}	private class SaveSettingsAction extends XsltAction {				SaveSettingsAction() {			super("xslt.settings.save");		}		public void actionPerformed(ActionEvent e) {			saveSettings();		}	}	private class LoadSettingsAction extends XsltAction {				LoadSettingsAction() {			super("xslt.settings.load");		}				public void actionPerformed(ActionEvent e) {			loadSettings();		}	}}