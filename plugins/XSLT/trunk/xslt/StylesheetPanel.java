/* * StylesheetPanel.java - GUI panel for list of XSL files * * Copyright (C) 2003 Robert McKinnon * * This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License * as published by the Free Software Foundation; either version 2 * of the License, or any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program; if not, write to the Free Software * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. */package xslt;import org.gjt.sp.jedit.GUIUtilities;import org.gjt.sp.jedit.MiscUtilities;import org.gjt.sp.jedit.View;import org.gjt.sp.jedit.jEdit;import javax.swing.DefaultListModel;import javax.swing.JFileChooser;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JList;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.ListSelectionModel;import javax.swing.JToolBar;import javax.swing.JPopupMenu;import javax.swing.event.ListSelectionEvent;import javax.swing.event.ListSelectionListener;import java.awt.Container;import java.awt.Point;import java.awt.BorderLayout;import java.awt.event.ActionEvent;import java.awt.event.KeyListener;import java.awt.event.MouseListener;import java.util.Arrays;import java.util.Iterator;import java.util.List;/** * GUI panel for list of XSL files * * @author Robert McKinnon - robmckinnon@users.sourceforge.net */public class StylesheetPanel extends JPanel implements ListSelectionListener {  private static final String LAST_STYLESHEETS = "xslt.last-stylesheet";  private View view;  private XSLTProcessor processor;  private DefaultListModel stylesheetsListModel;  private JList stylesheetsList;  private XsltAction addStylesheetAction = new AddStylesheetAction();  private XsltAction removeStylesheetAction = new RemoveStylesheetAction();  private XsltAction upAction = new MoveStylesheetUpAction();  private XsltAction downAction = new MoveStylesheetDownAction();  /**   * Constructor for the XSLTProcessor object.   */  public StylesheetPanel(View view, XSLTProcessor processor, KeyListener keyListener, MouseListener mouseListener) {    super(new BorderLayout());    this.view = view;    this.processor = processor;    this.stylesheetsListModel = initStylesheetListModel();    this.stylesheetsList = initStylesheetList(mouseListener, keyListener);    JLabel label = new JLabel(jEdit.getProperty("xslt.stylesheets.label"));    JScrollPane editorComponent = new JScrollPane(stylesheetsList);    JToolBar toolBar = initToolBar();    add(label, BorderLayout.NORTH);    add(editorComponent, BorderLayout.CENTER);    add(toolBar, BorderLayout.EAST);  }  JPopupMenu initStylesheetMenu(XsltAction fileOpenAction) {    XsltAction[] actions = new XsltAction[] {fileOpenAction, null, upAction, downAction, null, addStylesheetAction, removeStylesheetAction, };    return XsltAction.initMenu(actions);  }  boolean isStylesheetListEventSource(Object eventSource) {    return this.stylesheetsList == eventSource;  }  /**   * Returns the selected stylesheet file name, or if none are selected returns null.   */  public String getSelectedStylesheet() {    int selectedIndex = stylesheetsList.getSelectedIndex();    if(selectedIndex == -1) {      return null;    } else {      return getStylesheet(selectedIndex);    }  }  public String getStylesheet(int index) {    return (String)stylesheetsListModel.get(index);  }  public Object[] getStylesheets() {    return stylesheetsListModel.toArray();  }  public void setSelected(Point location) {    int index = this.stylesheetsList.locationToIndex(location);    if(index != -1) {      stylesheetsList.setSelectedIndex(index);    }  }  public void setStylesheets(String[] stylesheets) {    stylesheetsListModel.clear();    for(int i = 0; i < stylesheets.length; i++) {      stylesheetsListModel.add(i, stylesheets[i]);    }    boolean isEnabled = getStylesheetCount() > 0;    processor.setTransformEnabled(isEnabled);    storeStylesheets();  }  public boolean stylesheetsExist() {    return stylesheetsListModel.size() > 0;  }  public int getStylesheetCount() {    return stylesheetsListModel.size();  }  public void valueChanged(ListSelectionEvent e) {    boolean selectionExists = stylesheetsList.getSelectedIndex() != -1;    removeStylesheetAction.setEnabled(selectionExists);    upAction.setEnabled(selectionExists && (stylesheetsListModel.getSize() > 1)        && (stylesheetsList.getSelectedIndex() != 0));    downAction.setEnabled(selectionExists && (stylesheetsListModel.getSize() > 1)        && (stylesheetsList.getSelectedIndex() < stylesheetsListModel.getSize() - 1));  }  private DefaultListModel initStylesheetListModel() {    DefaultListModel stylesheetsListModel = new DefaultListModel();    List values = PropertyUtil.getEnumeratedProperty(LAST_STYLESHEETS, jEdit.getProperties());    Iterator it = values.iterator();    while(it.hasNext()) {      stylesheetsListModel.addElement(it.next());    }    return stylesheetsListModel;  }  private JList initStylesheetList(MouseListener mouseListener, KeyListener keyListener) {    JList list = new JList(stylesheetsListModel);    list.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);    list.getSelectionModel().addListSelectionListener(this);    list.addKeyListener(keyListener); // processor opens file if enter key pressed    list.addMouseListener(mouseListener); // processor opens file if mouse double clicked    return list;  }  private JToolBar initToolBar() {    this.upAction.setEnabled(false);    this.downAction.setEnabled(false);    this.removeStylesheetAction.setEnabled(stylesheetsExist());    JToolBar toolBar = new JToolBar(JToolBar.VERTICAL);    toolBar.setFloatable(false);    toolBar.add(addStylesheetAction.getButton());    toolBar.add(removeStylesheetAction.getButton());    toolBar.addSeparator();    toolBar.add(upAction.getButton());    toolBar.add(downAction.getButton());    return toolBar;  }  private void storeStylesheets() {    List stylesheetsList = Arrays.asList(stylesheetsListModel.toArray());    PropertyUtil.setEnumeratedProperty(LAST_STYLESHEETS, stylesheetsList, jEdit.getProperties());  }  private class AddStylesheetAction extends XsltAction {    public void actionPerformed(ActionEvent e) {      String path = null;      if(stylesheetsExist()) {        path = MiscUtilities.getParentOfPath(getStylesheet(0));      }      String[] selections = GUIUtilities.showVFSFileDialog(view, path, JFileChooser.OPEN_DIALOG, false);      if(selections != null) {        stylesheetsListModel.addElement(selections[0]);        processor.setTransformEnabled(true);        if((stylesheetsList.getSelectedIndex() != -1) && (stylesheetsListModel.getSize() > 1)) {          downAction.setEnabled(true);        }        storeStylesheets();      }      Container topLevelAncestor = StylesheetPanel.this.getTopLevelAncestor();      if(topLevelAncestor instanceof JFrame) {        ((JFrame)topLevelAncestor).toFront();      }    }    protected String getActionName() {      return "stylesheets.add";    }  }  private class RemoveStylesheetAction extends XsltAction {    public void actionPerformed(ActionEvent e) {      int index = stylesheetsList.getSelectedIndex();      stylesheetsListModel.remove(index);      if(stylesheetsListModel.getSize() > 0) {        stylesheetsList.setSelectedIndex(0);      } else {        removeStylesheetAction.setEnabled(false);        processor.setTransformEnabled(false);      }      storeStylesheets();    }    protected String getActionName() {      return "stylesheets.remove";    }  }  private abstract class MoveStylesheetAction extends XsltAction {    protected int increment;    public void actionPerformed(ActionEvent e) {      int selectedIndex = stylesheetsList.getSelectedIndex();      Object selected = stylesheetsListModel.get(selectedIndex);      stylesheetsListModel.remove(selectedIndex);      stylesheetsListModel.insertElementAt(selected, selectedIndex + increment);      stylesheetsList.setSelectedIndex(selectedIndex + increment);      storeStylesheets();    }  }  private class MoveStylesheetUpAction extends MoveStylesheetAction {    public MoveStylesheetUpAction() {      this.increment = -1;    }    protected String getActionName() {      return "stylesheets.up";    }  }  private class MoveStylesheetDownAction extends MoveStylesheetAction {    public MoveStylesheetDownAction() {      this.increment = 1;    }    protected String getActionName() {      return "stylesheets.down";    }  }}