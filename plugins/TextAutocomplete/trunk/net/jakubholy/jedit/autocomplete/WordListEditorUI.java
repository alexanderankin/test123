/*
 * NewJFrame.java
 *
 * Created on 7. bï¿½ezen 2006, 19:43
 */

package net.jakubholy.jedit.autocomplete;

import javax.swing.DefaultListModel;
import javax.swing.JScrollPane;

/**
 * GUI to display and edit the list of remembered words of a buffer.
 * @author  Jakub Holy
 */
public class WordListEditorUI extends javax.swing.JFrame {
	
	/** The autocomplete this editor is for. */
	private AutoComplete autoComplete;
    
    /** Creates new form NewJFrame */
    public WordListEditorUI(AutoComplete autoComplete) {
    	this.autoComplete = autoComplete;
    	setBufferName( autoComplete.getBuffer().getName() );
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        headerPanel = new javax.swing.JPanel();
        headerLabel = new javax.swing.JLabel();
        forBufferPanel = new javax.swing.JPanel();
        forLabel = new javax.swing.JLabel();
        bufferNameLabel = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        wordList = new javax.swing.JList();
        modificationsPanel = new javax.swing.JPanel();
        addWordField = new javax.swing.JTextField();
        buttonsPanel = new javax.swing.JPanel();
        addWordButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        deleteAllButton = new javax.swing.JButton();
        footerPanel = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        headerPanel.setLayout(new javax.swing.BoxLayout(headerPanel, javax.swing.BoxLayout.Y_AXIS));

        headerLabel.setFont(new java.awt.Font("Dialog", 1, 24));
        headerLabel.setText("TextAutocomplete Word List");
        headerPanel.add(headerLabel);

        forBufferPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        forLabel.setText("for");
        forBufferPanel.add(forLabel);

        bufferNameLabel.setText(getBufferName());
        forBufferPanel.add(bufferNameLabel);

        headerPanel.add(forBufferPanel);

        getContentPane().add(headerPanel, java.awt.BorderLayout.NORTH);

        mainPanel.setLayout(new java.awt.BorderLayout(0, 3));

        mainPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        wordList.setModel( wordListModel );
        /*(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });*/
        JScrollPane wordListScroll = new JScrollPane(wordList);
        mainPanel.add(wordListScroll, java.awt.BorderLayout.CENTER);

        modificationsPanel.setLayout(new javax.swing.BoxLayout(modificationsPanel, javax.swing.BoxLayout.Y_AXIS));

        addWordField.setToolTipText("Type the word to add to the list");
        modificationsPanel.add(addWordField);

        addWordButton.setText("Add word");
        addWordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addWordButtonActionPerformed(evt);
            }
        });

        buttonsPanel.add(addWordButton);

        deleteButton.setText("Delete selected");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        buttonsPanel.add(deleteButton);

        deleteAllButton.setText("Delete all");
        deleteAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllButtonActionPerformed(evt);
            }
        });

        buttonsPanel.add(deleteAllButton);

        modificationsPanel.add(buttonsPanel);

        mainPanel.add(modificationsPanel, java.awt.BorderLayout.SOUTH);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        footerPanel.add(closeButton);

        getContentPane().add(footerPanel, java.awt.BorderLayout.SOUTH);
        
        // Set the content of the word list
        this.rereadWords();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void deleteAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllButtonActionPerformed
    	autoComplete.getWordList().clear();
    	wordListModel.clear();
    	// TODO: refresh list    	
    }//GEN-LAST:event_deleteAllButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) 
    {
    	int[] selected = wordList.getSelectedIndices();
    	for (int i = 0; i < selected.length; i++)
    	{
    		autoComplete.forgetWord( (String)wordListModel.get(selected[i]) );
    		wordListModel.remove(selected[i]);
		}
    }

    private void addWordButtonActionPerformed(java.awt.event.ActionEvent evt) 
    {
    	if(addWordField.getText().trim().length() > 0)
    	{ this.autoComplete.rememberWord( addWordField.getText() ); }
    	// We don't know at which position will the word go so let it up to the WordList
    	rereadWords();
    }
    
    /** Reread the list of remebered words and re-display them on the list. */
    private void rereadWords() 
    {
//    	 FIXME: Doesn't work, the list is empty
    	Completion[] words = autoComplete.getWordList().getAllWords();
    	wordListModel.clear();
    	for (int i = 0; i < words.length; i++) {
    		wordListModel.addElement( words[i].getWord() );
		}
    }
    
    /* *
     * @param args the command line arguments
     * /
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WordListEditorUI().setVisible(true);
            }
        });
    }*/
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addWordButton;
    private javax.swing.JTextField addWordField;
    private javax.swing.JLabel bufferNameLabel;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton deleteAllButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel forLabel;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel footerPanel;
    private javax.swing.JPanel forBufferPanel;
    private javax.swing.JPanel modificationsPanel;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JList wordList;
    private DefaultListModel wordListModel = new DefaultListModel();
    // End of variables declaration//GEN-END:variables
    String bufferName = "<unknown buffer name>";
    
    public String getBufferName()
    { return this.bufferName; }
    
    
    public void setBufferName(String bufferName)
    { this.bufferName = bufferName; }
}
