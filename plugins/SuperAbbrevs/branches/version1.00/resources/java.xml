<mode>
  <name>java</name>
  <abbreviations>
    <abbreviation>
      <name>And</name>
      <abbreviation>and</abbreviation>
      <expansion>&amp;&amp;</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>BufferedReader</name>
      <abbreviation>br</abbreviation>
      <expansion>BufferedReader ${1:br} = new BufferedReader($end);</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Call to super</name>
      <abbreviation>super</abbreviation>
      <expansion>super($1);</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Case</name>
      <abbreviation>case</abbreviation>
      <expansion>case ${1:key}:
	$end
break;</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Cast</name>
      <abbreviation>cast</abbreviation>
      <expansion>${2:Type} $3 = ($2)$1;</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Catch statement</name>
      <abbreviation>catch</abbreviation>
      <expansion>catch ($1) {
	$end
}</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Class</name>
      <abbreviation>class</abbreviation>
      <expansion>&lt;# cs = &quot;public,,public abstract,public final,final&quot;; #&gt;
&lt;#=tpg.completeField(1, cs)#&gt;${1=std.ifNotEmpty(s,&quot; &quot;)}class ${2:Name} {
	$end
}</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Code block</name>
      <abbreviation>{</abbreviation>
      <expansion>{
	&lt;#= input #&gt;$end
}</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>LINE</replacementType>
        <replacementSelectionType>SELECTED_LINES</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Constructor</name>
      <abbreviation>consf</abbreviation>
      <expansion>&lt;#
pattern = Pattern.compile(&quot;class\\s+(\\w+)&quot;);

getClassName() {
	Matcher m = pattern.matcher(tpg.getBufferText());
	if (m.find()) {
		return m.group(1);
	}
	return &quot;&quot;;
}

className = getClassName();
if (className.equals(&quot;&quot;)) className = &quot;${2:name}&quot;;

p = &quot;(\\w+)\\s+(\\w+)&quot;;

createFields(s) {
	std.foreach(s,p,&quot;private $1 $2;\n&quot;);
}

createAssignments(s) {
	std.foreach(s,p,&quot;this.$2 = $2;\n&quot;);
}
#&gt;
${3=indent(&quot;&quot;,createFields(s))}
${1:public}${1=std.ifNotEmpty(s,&quot; &quot;)}&lt;#=className#&gt;(${3:}){
	${3=std.indent(&quot;\t&quot;,createAssignments(s))}$end
}</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Constructor</name>
      <abbreviation>cons</abbreviation>
      <expansion>&lt;#
pattern = Pattern.compile(&quot;class\\s+(\\w+)&quot;);

getClassName() {
	Matcher m = pattern.matcher(tpg.getBufferText());
	if (m.find()) {
		return m.group(1);
	}
	return &quot;&quot;;
}

className = getClassName();
if (className.equals(&quot;&quot;)) className = &quot;${2:name}&quot;;
#&gt;
${1:public}${1=std.ifNotEmpty(s,&quot; &quot;)}&lt;#=className#&gt;(${3:}){
	$end
}</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Do while loop</name>
      <abbreviation>do</abbreviation>
      <expansion>do
{
	&lt;#= input #&gt;$end
}
while($1);</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>LINE</replacementType>
        <replacementSelectionType>SELECTION</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Else statement</name>
      <abbreviation>else</abbreviation>
      <expansion>else {
	&lt;#= input #&gt;$end
}</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>LINE</replacementType>
        <replacementSelectionType>SELECTION</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Else-if statement</name>
      <abbreviation>elseif</abbreviation>
      <expansion>else if ($1) {
	&lt;#= input #&gt;$end
}</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>LINE</replacementType>
        <replacementSelectionType>SELECTION</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Equals method</name>
      <abbreviation>equals</abbreviation>
      <expansion>public boolean equals(Object o) {
	$end
}</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Error print line</name>
      <abbreviation>serr</abbreviation>
      <expansion>System.err.println($end);</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>WORD</replacementType>
        <replacementSelectionType>SELECTION</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Exception</name>
      <abbreviation>ex</abbreviation>
      <expansion>Exception</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Field</name>
      <abbreviation>field</abbreviation>
      <expansion>${1:private}${1=std.ifNotEmpty(s,&quot; &quot;)}${3:String} ${2:name};</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Field with getter</name>
      <abbreviation>fieldget</abbreviation>
      <expansion>private ${2:String} ${1:field};

public $2 get${1=std.firstUp(s)}() {
	return $1;
}</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Field with getter and setter</name>
      <abbreviation>fieldgetset</abbreviation>
      <expansion>private ${2:String} ${1:field};

public $2 get${1=std.firstUp(s)}() {
	return $1;
}

public void set${1=std.firstUp(s)}($2 $1){
	this.$1 = $1;
}
</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Field with setter</name>
      <abbreviation>fieldset</abbreviation>
      <expansion>private ${2:String} ${1:field};  

public void set${1=std.firstUp(s)}($2 $1){ 
	this.$1 = $1; 
}</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>For loop</name>
      <abbreviation>for</abbreviation>
      <expansion>for (int ${1:i}=${2:0}; $1&lt;${3:to}; $1++){
	&lt;#= input #&gt;$end
}</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>SELECTED_LINES</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Foreach loop</name>
      <abbreviation>foreach</abbreviation>
      <expansion>for (${3:Type} ${2:element} : ${1:collection}) {
	&lt;#=input#&gt;$end
}</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>SELECTED_LINES</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Getter</name>
      <abbreviation>get</abbreviation>
      <expansion>&lt;#
if(!input.trim().equals(&quot;&quot;)){
	Pattern p = Pattern.compile(&quot;private\\s+(\\w+)\\s+(\\w+)\\s*;\\s*&quot;);
	Matcher m = p.matcher(input);
	int end = 0;
	while(m.find()){
		tpg.print(input.substring(end,m.start()));
#&gt;
private &lt;#=m.group(1)#&gt; &lt;#=m.group(2)#&gt;;

public &lt;#=m.group(1)#&gt; get&lt;#=std.firstUp(m.group(2))#&gt;() {
	return &lt;#=m.group(2)#&gt;;
}
&lt;#	
	end = m.end();
	}
	tpg.print(input.substring(end));
} else {#&gt;
public ${2:String} get${1=std.firstUp(s)}() {
	return ${1:field};
}
&lt;#}#&gt;</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>LINE</replacementType>
        <replacementSelectionType>SELECTED_LINES</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Getter and setter</name>
      <abbreviation>getset</abbreviation>
      <expansion>&lt;#
if(!input.trim().equals(&quot;&quot;)){
	Pattern p = Pattern.compile(&quot;private\\s+(\\w+)\\s+(\\w+)\\s*;\\s*&quot;);
	Matcher m = p.matcher(input);
	int end = 0;
	while(m.find()){
		tpg.print(input.substring(end,m.start()));
#&gt;
private &lt;#=m.group(1)#&gt; &lt;#=m.group(2)#&gt;;

public &lt;#=m.group(1)#&gt; get&lt;#=std.firstUp(m.group(2))#&gt;() {
	return &lt;#=m.group(2)#&gt;;
}

public void set&lt;#=std.firstUp(m.group(2))#&gt;(&lt;#=m.group(1)#&gt; &lt;#=m.group(2)#&gt;){
	this.&lt;#=m.group(2)#&gt; = &lt;#=m.group(2)#&gt;;
}
&lt;#	
	end = m.end();
	}
	tpg.print(input.substring(end));
} else {#&gt;
public ${2:Type} get${1=std.firstUp(s)}() {
	return ${1:field};
}

public void set${1=std.firstUp(s)}($2 $1){
	this.$1 = $1;
}
&lt;#}#&gt;</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>LINE</replacementType>
        <replacementSelectionType>SELECTED_LINES</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>If statement</name>
      <abbreviation>if</abbreviation>
      <expansion>if ($1) {
	&lt;#= input #&gt;$end
}</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>SELECTION</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Import declaration</name>
      <abbreviation>import</abbreviation>
      <expansion>import ${1:java.util.*};</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Import org.gjt.sp</name>
      <abbreviation>ogs</abbreviation>
      <expansion>import org.gjt.sp.$1;</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Import org.gjt.sp.jedit</name>
      <abbreviation>ogsj</abbreviation>
      <expansion>import org.gjt.sp.jedit.$1;</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Import org.gjt.sp.util</name>
      <abbreviation>ogsu</abbreviation>
      <expansion>import org.gjt.sp.util.$1;</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Important comment</name>
      <abbreviation>important</abbreviation>
      <expansion>&lt;#
ws = &quot;                              &quot;;
wsStart(s) {
	std.substring(ws,s.length()/2);
}

wsEnd(s) {
	std.substring(ws,s.length()/2+s.length()%2);
}
#&gt;
/**************************************************************
 *${1=wsStart(s)}${1:message}${1=wsEnd(s)}*
 **************************************************************/
</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Invoke later</name>
      <abbreviation>il</abbreviation>
      <expansion>SwingUtilities.invokeLater(new Runnable()
{
	public void run()
	{
		$end
	}
});</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Iterate over an array</name>
      <abbreviation>iter</abbreviation>
      <expansion>for(int ${1:i} = 0; $1 &lt; ${2:array}.length; $1++)
{
	${3:int} ${4:element} = $2[$1];
	&lt;#=input#&gt;$end
}</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>LINE</replacementType>
        <replacementSelectionType>SELECTED_LINES</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Iterate over an ArrayList</name>
      <abbreviation>iter</abbreviation>
      <expansion>for(int ${1:i} = 0; $1 &lt; ${2:arrayList}.size(); $1++)
{
	${3:String} ${4:element} = ($3)$2.get($1);
	&lt;#=input#&gt;$end
}</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>LINE</replacementType>
        <replacementSelectionType>SELECTED_LINES</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Iterate over collection</name>
      <abbreviation>iter</abbreviation>
      <expansion>Iterator ${2:iter} = ${1:collection}.iterator();
while ($2.hasNext()){
	${3:Type} ${4:element} = ($3)$2.next();
	&lt;#= input #&gt;$end
}</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>LINE</replacementType>
        <replacementSelectionType>SELECTED_LINES</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Log debug</name>
      <abbreviation>logd</abbreviation>
      <expansion>Log.log(Log.DEBUG,this,$end);</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Log error</name>
      <abbreviation>loge</abbreviation>
      <expansion>Log.log(Log.ERROR,this,$end);</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Log message</name>
      <abbreviation>logm</abbreviation>
      <expansion>Log.log(Log.MESSAGE,this,$end);</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Log notice</name>
      <abbreviation>logn</abbreviation>
      <expansion>Log.log(Log.NOTICE,this,$end);</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Log warning</name>
      <abbreviation>logw</abbreviation>
      <expansion>Log.log(Log.WARNING,this,$end);</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Main method</name>
      <abbreviation>main</abbreviation>
      <expansion>public static void main(String[] args) {
	$end
}</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>MalformedURLException</name>
      <abbreviation>mal</abbreviation>
      <expansion>MalformedURLException</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Method</name>
      <abbreviation>fun</abbreviation>
      <expansion>${1:public}${1=std.ifNotEmpty(s,&quot; &quot;)}${4:void} ${2:name}($3) {
	$end
}</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>New ArrayList</name>
      <abbreviation>al</abbreviation>
      <expansion>ArrayList&lt;${1:V}&gt; ${2:arrayList} = new ArrayList&lt;$1&gt;();</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>New Hashtable</name>
      <abbreviation>ht</abbreviation>
      <expansion>Hashtable&lt;${1:K},${2:V}&gt; ${3:hashtable} = new Hashtable&lt;$1,$2&gt;();</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>New object</name>
      <abbreviation>new</abbreviation>
      <expansion>$1 ${3:name} = new ${1:Type}($2);</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Object</name>
      <abbreviation>o</abbreviation>
      <expansion>Object</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Or</name>
      <abbreviation>or</abbreviation>
      <expansion>||</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Package declaration</name>
      <abbreviation>pack</abbreviation>
      <expansion>package ${1:packageName};</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Print line</name>
      <abbreviation>sout</abbreviation>
      <expansion>System.out.println(&quot;$1&quot;${2=ifNotEmpty(s,&quot;+&quot;)}${2:&lt;#=input#&gt;});</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>SELECTION</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Setter</name>
      <abbreviation>set</abbreviation>
      <expansion>&lt;#
if(!input.trim().equals(&quot;&quot;)){
	Pattern p = Pattern.compile(&quot;private\\s+(\\w+)\\s+(\\w+)\\s*;\\s*&quot;);
	Matcher m = p.matcher(input);
	int end = 0;
	while(m.find()){
		tpg.print(input.substring(end,m.start()));
#&gt;
private &lt;#=m.group(1)#&gt; &lt;#=m.group(2)#&gt;;

public void set&lt;#=std.firstUp(m.group(2))#&gt;(&lt;#=m.group(1)#&gt; &lt;#=m.group(2)#&gt;){
	this.&lt;#=m.group(2)#&gt; = &lt;#=m.group(2)#&gt;;
}
&lt;#	
	end = m.end();
	}
	tpg.print(input.substring(end));
} else {#&gt;
public void set${1=std.firstUp(s)}(${2:Type} $1){
	this.$1 = ${1:field};
}
&lt;#}#&gt;</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>LINE</replacementType>
        <replacementSelectionType>SELECTED_LINES</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Switch statement</name>
      <abbreviation>switch</abbreviation>
      <expansion>switch ($1) {
	case $2:
		$3
	break;$end
}</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>This</name>
      <abbreviation>this</abbreviation>
      <expansion>this.$1 = ${1:field};</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>ToString method</name>
      <abbreviation>tostring</abbreviation>
      <expansion>public String toString(){
	$end
}</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>NOTHING</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>Try statement</name>
      <abbreviation>try</abbreviation>
      <expansion>try {
	&lt;#= input #&gt;$end
}</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>SELECTED_LINES</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
    <abbreviation>
      <name>While loop</name>
      <abbreviation>while</abbreviation>
      <expansion>while ($1) {
	&lt;#= input #&gt;$end
}</expansion>
      <autoIndent>false</autoIndent>
      <whenInvokedAsCommand>
        <replacementType>AT_CARET</replacementType>
        <replacementSelectionType>SELECTED_LINES</replacementSelectionType>
      </whenInvokedAsCommand>
    </abbreviation>
  </abbreviations>
  <variables/>
</mode>