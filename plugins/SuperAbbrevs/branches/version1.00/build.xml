<?xml version="1.0"?>

<!--
     This build.xml file for building the SuperAbbrevs  plugin is based
	 upon the model file used for building the QuickNotepad plugin.

     The 'dist' target compiles the plugin and creates the JAR file.
     Before running the 'dist' target, you will need to generate the
     documentation using one of these two targets:

     - 'docs-xsltproc': Creates documentation using the xsltproc tool

     See INSTALL.txt
-->
<project name="SuperAbbrevs" default="dist" basedir=".">
    
    <property file="build.properties"/>
    
    <property name="jar.name" value="SuperAbbrevs.jar"/>
    <property name="src.dir" value="src"/>
    <property name="test.dir" value="test"/>
    <property name="lib.dir" value="lib"/>
    <property name="extlib.dir" value="extlib"/>
    <property name="build.dir" value="build"/>
    
    <target name="setup-mac">
        <copy file="build.mac.properties" tofile="build.properties"/>
    </target>
    
    <target name="setup-linux">
        <copy file="build.linux.properties" tofile="build.properties"/>
    </target>
    
    <target name="setup-windows">
        <copy file="build.windows.properties" tofile="build.properties"/>
    </target>
    
    <path id="project.class.path">
        <pathelement location="${jedit.install.dir}/jedit.jar"/>
        <pathelement location="${lib.dir}/xpp3_min-1.1.3.4.O.jar"/>
        <pathelement location="${lib.dir}/xstream-1.2.1.jar"/>
        <pathelement location="${extlib.dir}/junit-3.8.1.jar"/>
        <pathelement location="${build.dir}/"/>
    </path>
    
    <!-- make tags with ctags-exuberant -->
    <target name="tags">
        <exec executable="ctags-exuberant">
            <arg value="-R"/>
            <arg value="."/>
        </exec>
    </target>
    
    <!-- 
  You need to install jflex to compile this target. But you only need to build 
  this target if you change the lexer files.
  -->
    <target name="jflex">
        <exec executable="jflex">
            <arg value="superabbrevs/lexer/*.lex"/>
        </exec>
    </target>
    
    <target name="init">
        <mkdir dir="${build.dir}"/>
    </target>
    
    <target name="compile" depends="init">
        <javac 
            target="1.6"
            source="1.6"
            srcdir="${src.dir}"
            destdir="${build.dir}"
            debug="on"
            deprecation="on"
            includeJavaRuntime="yes">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath refid="project.class.path"/>
        </javac>
        <javac 
            target="1.6"
            source="1.6"
            srcdir="${test.dir}"
            destdir="${build.dir}"
            debug="on"
            deprecation="on"
            includeJavaRuntime="yes">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath refid="project.class.path"/>
        </javac>
    </target>
    
    <target name="dist" depends="compile">
        <mkdir dir="${install.dir}"/>
        <jar jarfile="${install.dir}/${jar.name}">
            <fileset dir="${build.dir}"/>
            <fileset dir="${src.dir}">
                <include name="actions.xml"/>
                <include name="**/*.gif"/>
                <include name="**/*.png"/>
                <include name="**/*.props"/>
            </fileset>
            <fileset dir=".">
                <include name="**/*.html"/>
                <include name="**/*.gif"/>
                <include name="**/*.png"/>
                <include name="resources/*"/>
            </fileset>
        </jar>
        <copy todir="${install.dir}">
            <fileset dir="${lib.dir}">
                <include name="*.jar"/>
            </fileset>
        </copy>
    </target>
    
    <target name="test" depends="compile">
      <junit fork="yes" haltonfailure="yes">
        <test name="BackwardsTrieTest" />
        <formatter type="plain" usefile="false" />
        <classpath refid="project.class.path" />
      </junit>
    </target>
    
    <target name="generate-docbook-wrapper">
        <delete file="doc/docbook-wrapper.xsl"/>
        <echo file="doc/docbook-wrapper.xsl" message="&lt;xsl:stylesheet"/>
        <echo file="doc/docbook-wrapper.xsl" append="true" message=" xmlns:xsl='http://www.w3.org/1999/XSL/Transform'"/>
        <echo file="doc/docbook-wrapper.xsl" append="true" message=" version='1.0'&gt;"/>
        <echo file="doc/docbook-wrapper.xsl" append="true" message="&lt;xsl:import href='${docbook.xsl}/${stylesheet}'/>"/>
        <echo file="doc/docbook-wrapper.xsl" append="true" message="&lt;/xsl:stylesheet&gt;"/>
    </target>
    
    <!-- Generate docs with xsltproc tool from www.xmlsoft.org -->
    <target name="docs">
        <antcall target="generate-docbook-wrapper"/>
        <exec executable="xsltproc" dir="doc">
            <arg value="users-guide.xsl"/>
            <arg value="users-guide.xml"/>
        </exec>
    </target>
    
    <target name="clean-docs">
        <delete>
            <fileset dir="doc" includes="*~" defaultexcludes="no"/>
            <fileset dir="doc" includes="*.html" defaultexcludes="no"/>
        </delete>
    </target>
    
    <target name="clean" depends="clean-docs">
        <delete dir="${build.dir}"/>
        <delete>
            <fileset dir="." includes="**/*~" defaultexcludes="no"/>
        </delete>
        <delete file="build.platform.properties"/>
    </target>
    
</project>
