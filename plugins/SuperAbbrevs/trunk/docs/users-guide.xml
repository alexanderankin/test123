<?xml version="1.0"?>
<!-- jEdit buffer-local properties: -->
<!-- :tabSize=2:indentSize=2:noTabs=true:wrap=hard: -->
<book xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation='http://www.docbook.org/xsd/4.4/docbook.xsd' >

  <bookinfo>
    <title>SuperAbbrevs plugin user's guide</title>

    <copyright>
      <year>2005</year>
      <year>2010</year>
      <year>2012</year>
      <holder>Sune Simonsen</holder>
    </copyright>

    <legalnotice><title>Legal Notice</title>
      <para>
        Permission is granted to copy, distribute and/or modify this document
        under the terms of the GNU Free Documentation License, Version 1.1 or
        any later version published by the Free Software Foundation; with no
        <quote>Invariant Sections</quote>, <quote>Front-Cover Texts</quote> or
        <quote>Back-Cover Texts</quote>, each as defined in the license. A copy
        of the license can be found in the file <filename>COPYING.txt</filename>
        included with jEdit.
      </para>
    </legalnotice>
  </bookinfo>

  <chapter id="Introduction"><title>Introduction</title>
    <para>
      This plugin gives you the ability to expand an abbreviation to a userdefined
      code template. When expanded, you can jump between the variables in the
      template using the TAB key. If you change the text of a variable, the text
      will instantly change at the variable's other positions in the template. 
    </para>
    <para>
      There are already some predefined abbreviations when you install the plugin. 
      You can find them in the <application>SuperAbbrevs</application>
      optionpane. Each mode has a list of defined abbreviations, and you can select
      the mode with a dropdown menu at the top of the optionpane. 
      The abbreviations associated with the mode will be shown in the table below.
      There is a special mode added, <emphasis>global</emphasis>, that defines
      abbreviations that work across all modes. 
    </para>
    <para>
    	You can define, edit or delete abbreviations from this optionpane. 
      This will be explained further in <xref linkend="UsingPlugin"/>. 
    </para>
    <para>
      Additionnaly, you can use the Zen Coding syntax. Zen Coding is an editor 
      plugin for high-speed HTML, XML, XSL (or any other structured code format) 
      coding and editing. His core of is a powerful abbreviation engine which 
      allows you to expand expressions—similar to CSS selectors—into HTML code. 
      For further information please look into the <xref linkend="ZenCoding"/> section. 
    </para>
  </chapter>

  <chapter id="UsingPlugin"><title>Using the plugin</title>
    <section id="expand"><title>Expand an abbreviation</title>
    <para>
      To expand an abbreviation, you must be in the mode the abbreviation is
      associated with, and the cursor should be placed after the abbreviation.
      Press the TAB key, and the template will be
      inserted, and the first variable will be selected. If you change the text
      of the variable, it changes everywhere the variable is placed in the
      template. By pressing the TAB key once more, the
      next variable is selected. If you want to jump back to an earlier variable 
      you should just press S+TAB.
    </para>
    </section>
    <section id="expandselection"><title>Expand an abbreviation on a selection</title>
    <para>
      To expand an abbreviation when you have selected some text, you should invoke 
      the <guimenu>Show expandsion dialog</guimenu> action in the 
      <guimenu>Plugins</guimenu> menu. Type in the abbreviation and press ENTER.
      The abbreviation will be expanded and the selection will be available to
      the template generating code.
    </para>
    </section>
    <section id="add"><title>Add a new abbreviation</title>
    <para>
      In the SuperAbbrevs optionpane, find the mode in the dropdown menu, for which
      you want to add the abbreviation. Then press the plus button below the
      abbreviation table. An abbreviation editor will appear. Type in the
      abbreviation and the template according to the syntax explained in <xref
      linkend="WritingTemplates"/>. Press the Ok button. The abbreviation is not saved
      yet - you must press Apply or the Ok button, at the bottom of the
      optionpane, to save all the changes you made to the abbreviations.
    </para>
    </section>
    <section id="addInline"><title>Add a new abbreviation from the buffer</title>
    <para>
      If you want to add a new abbreviation from the buffer, type the abbreviation and press
      S+TAB. An abbreviation editor dialog will be shown. This dialog is used the
      same way as in <xref linkend="add"/> - the only difference is that there are two
      buttons instead of the Ok button, one for adding the abbreviation to the
      <emphasis>global</emphasis> mode and one for adding it to the current mode.
    </para>
    </section>
    <section id="edit"><title>Edit a existing abbreviation</title>
    <para>
      To edit an abbreviation, double click it, an abbreviation editor dialog
      will appear. Type in the abbreviation and the template according to the 
      syntax explained in <xref linkend="WritingTemplates"/>. Press the Ok button. 
      The abbreviation is not saved yet, you still have to press Apply or the Ok button, 
      at the bottom of the optionpane, to save all the changes you made to the 
      abbreviations.
    </para>
    </section>
    <section id="editInline"><title>Add a new abbreviation from the buffer</title>
    <para>
      If you want to edit an abbreviation from the buffer, type the abbreviation 
      and press S+TAB.  An abbreviation editor dialog will be shown. This dialog is 
      used the same way as <xref linkend="edit"/>, the only difference is that there are two
      buttons instead of the ok button, one for adding the abbreviation to the
      <emphasis>global</emphasis> mode and one for adding it to the current mode.
    </para>
    </section>
  </chapter>

  <chapter id="WritingTemplates"><title>Writing templates</title>

    <para>
      A template can consist of the following things:
    </para>  
    <itemizedlist>
      <listitem>
        <para>
          <emphasis role="bold">Variable</emphasis>:
          Variables are the essential part of a template. You write a variable
          in a template as <literal>${number:value}</literal>
          where number is the TAB index of the 
          variable, and value is the text that will be inserted in the
          variable when the template is expanded. The value will be inserted
          instead of the variable when the template is expanded.
        </para>
        <para>
        	The characters \ { } have to be escaped in the value as \\ \{ \}.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="bold">Variable reference</emphasis>: 
          You can refer to a variable by inserting <literal>$number</literal>,
          where number is the TAB index of the variable you are referring to.
          This inserts the text of the variable instead of the reference.
        </para>
      </listitem>
      <listitem>
        <para>
        <emphasis role="bold">Transformation variable reference</emphasis>: 
          This is a special kind of reference where you can run beanshell code
          on the text of the referred variable. You insert it in the template
          as ${number=code} where number is the TAB index of the variable you
          are referring to, and code is arbitrary beanshell code. In the code,
          the beanshell variable <emphasis>s</emphasis> holds the text of the
          referred variable. The functions in the file 
          <emphasis>.jedit/SuperAbbrevs/abbrevs_functions.bsh</emphasis> are
          also available in the code.
        </para>
      </listitem>
      <listitem>
        <para>
        <emphasis role="bold">The end variable</emphasis>: 
          A special variable is <literal>$end</literal>. 
          This variable will always be defined for a
          template, and represents the last place the cursor will jump to in the
          template. If the <literal>$end</literal> variable is not explicitly defined,
          it will be inserted at the end of the template. When you type in the end variable
          the template becomes inactive and the TAB key functions as normal.
        </para>
      </listitem>
      <listitem>
        <para>
        <emphasis role="bold">Normal text</emphasis>:
          Everything else is just normal text that's inserted and not
          manipulated by the template engine. 
        </para>
        <para>
          One thing to be aware of is that there are some character sequences that 
          have to be escaped.
        	If you want to write <literal>$</literal> in the text you have to escape it as 
        	<literal>\$</literal>. Similarly, <literal>\</literal> should be escaped 
        	as <literal>\\</literal>.
        </para>
      </listitem>
    </itemizedlist>
    <para>
    	This example shows you how to make a Java field with getter and setters.
      The firstUp function makes the first character of the variable uppercase.
    </para>
    <para>
      <programlisting><![CDATA[
private ${2:Type} ${1:field};

/**
 * Getter function for the field $1
 */ 
public $2 get${1=firstUp(s)}() {
	return $1;
}

/**
 * Setter function for the field $1
 */
public void set${1=firstUp(s)}($2 $1){
	this.$1 = $1;
}
]]></programlisting>
    </para>
    <para>
    	The best advice I can give you is to look at the already defined
      templates and play around with them.
    </para>
  </chapter>
  <chapter id="TemplateGeneration"><title>Template generation</title>
    <para>
    	This is only for advanced users.
    </para>
    <para>
    	It's possible to generate a template with beanshell code, 
      you embed code into the template in between &lt;# code #&gt;, the template 
      is then turned inside out, so all the normal text is turned into print 
      statements, and the code will be executed. It's possible to print new code
      to the template with &lt;#= code #&gt; where the code have to evaluate to
      a string. All the functions in the files 
      <emphasis>.jedit/SuperAbbrevs/template_generation_functions.bsh</emphasis>
      <emphasis>.jedit/SuperAbbrevs/abbrevs_functions.bsh</emphasis> is
      available, as well as a variable <emphasis>selection</emphasis>, holding
      the selection.
    </para>
    <para>
    	This example shows how to generate an HTML multiplying table of 5 rows and
      5 columns - not that useful by itself, but only your imagination holds you back.
    </para>
    <para>
      <programlisting><![CDATA[
<table>
<# for(i=0; i<=5; i++){ #>
  <tr>
  <# for(j=0; j<=5; j++){ #>
    <td><#= i*j #></td>
  <# } #>
  </tr>
<# } #>
</table>
]]></programlisting>
    </para>
  </chapter>
  
  <chapter id="ZenCoding"><title>Zen Coding</title>
    <para>
    	Below, the features of Zen Coding engine:
    </para>
    <itemizedlist>
        <listitem>
        <para>
            ID and CLASS attributes: <code>div#page.section.main</code>. 
        </para>
        </listitem>
        <listitem>
        <para>
            Custom attributes: <code>div[title]</code>, <code>a[title="Hello world" rel]</code>,
            <code>td[colspan=2]</code>. 
        </para>
        </listitem>
        <listitem>
        <para>
            Element multiplication: <code>li*5</code> will output li tag five times. 
        </para>
        </listitem>
        <listitem>
        <para>
            Item numbering with <code>$</code> character: <code>li.item$*3</code> will output li tag
            three times, replacing <code>$</code> character with item number.  
        </para>
        </listitem>
        <listitem>
        <para>
            Multiple <code>$</code> characters in a row are used as zero padding, 
            i.e.: <code>li.item$$$</code> → <code>li.item001</code>. 
        </para>
        </listitem>
        <listitem>
        <para>
            Abbreviation groups with unlimited nesting: 
            <code>div#page>(div#header>ul#nav>li*4>a)+(div#page>(h1>span)+p*2)+div#footer</code>. 
            You can literally write a full document markup with just a single line.  
        </para>
        </listitem>
        <listitem>
        <para>
            Filters support. For example <code>div#content|e</code> will expand in 
            <programlisting><![CDATA[&lt;div id="content"&gt;]]></programlisting>.
        </para>
        </listitem>
        <listitem>
        <para>
            div tag name can be omitted when writing element starting from ID or 
            CLASS: <code>#content>.section</code> is the same as <code>div#content>div.section</code>.  
        </para>
        </listitem>
        <listitem>
        <para>
            Text support: <code>p>{Click }+a{here}+{ to continue}</code>. 
        </para>
        </listitem>
    </itemizedlist>
    <para>
    	The example <code>div#page>div.logo+ul#navigation>li*5>a[title]</code> will expand in:
    </para>
    <para>
      <programlisting><![CDATA[
 <div id="page">
 	<div class="logo"></div>
 	<ul id="navigation">
 		<li>
 			<a title="" href=""></a>
 		</li>
 		<li>
 			<a title="" href=""></a>
 		</li>
 		<li>
 			<a title="" href=""></a>
 		</li>
 		<li>
 			<a title="" href=""></a>
 		</li>
 		<li>
 			<a title="" href=""></a>
 		</li>
 	</ul>
 </div>
]]></programlisting>
    </para>
    
  </chapter>
</book>
