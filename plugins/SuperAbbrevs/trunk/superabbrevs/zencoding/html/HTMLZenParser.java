/* Generated By:JavaCC: Do not edit this line. HTMLZenParser.java */
package superabbrevs.zencoding.html;

import superabbrevs.zencoding.ZenParser;
import java.util.*;
import java.text.MessageFormat;

public class HTMLZenParser implements ZenParser, HTMLZenParserConstants {
        private int index = 1;

        //{{{ getTabs() method
        private String getTabs(int indent)
        {
                StringBuilder builder = new StringBuilder();
                for (int i = 0;i<indent;i++)
                {
                        builder.append('\u005ct');
                }
                return builder.toString();
        } //}}}

        private String pad(int i, int num)
        {
                String t = Integer.toString(i);
                while (t.length() < num)
                {
                        t = '0' + t;
                }
                return t;
        }

        //{{{ merge() method
        private void merge(LinkedList<String> begin, LinkedList<String> middle, LinkedList<String> end, StringBuilder builder)
        {
                if (builder.length() != 0)
                        builder.append('\u005cn');
                for (int i = 0;i<begin.size();i++)
                {
                        if (i != 0)
                        {
                                builder.append(getTabs(i));
                        }
                        builder.append(begin.get(i));
                        builder.append("\u005cn");
                }
                for (int i = 0;i<middle.size();i++)
                {
                        builder.append(getTabs(begin.size()));
                        builder.append(middle.get(i));
                        if (i < middle.size() - 1)
                        {
                                builder.append("\u005cn");
                        }
                        else if (!end.isEmpty())
                        {
                                builder.append("\u005cn").append(getTabs(begin.size() - 1));
                        }
                }
                for (int i = end.size() - 1;i>= 0;i--)
                {
                        builder.append(end.get(i));
                        if (i != 0)
                        {
                                builder.append("\u005cn").append(getTabs(i-1));
                        }
                }
                middle.clear();
        }

  //}}}

//{{{ parse() method
  final public String parse() throws ParseException {
        LinkedList<String> begin = new LinkedList<String>();
        LinkedList<String> end = new LinkedList<String>();
        LinkedList<String> middle = new LinkedList<String>();
        StringBuilder builder = new StringBuilder();
    tag(begin,middle, end, builder);
                merge(begin, middle, end, builder);
                {if (true) return builder.toString();}
    throw new Error("Missing return statement in function");
  }

  //}}}

//{{{ tag() method
  final public void tag(LinkedList<String> begin, LinkedList<String> middle, LinkedList<String> end, StringBuilder b) throws ParseException {
        String temp;
        boolean finalTag = true;
        String tagName = "div";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
                         tagName = token.image;
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
                begin.add('<'+tagName);
                end.add("</"+tagName+'>');
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SHARP:
      temp = id();
                        String last = begin.removeLast();
                        begin.add(last + temp);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      temp = cssClass();
                        String last = begin.removeLast();
                        begin.add(last + temp);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      temp = attributes();
                        String last = begin.removeLast();
                        begin.add(last + temp);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID_MULTIPLIER:
    case MULTIPLIER:
      multiplier(begin, middle, end);
                        finalTag = false;
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GT:
      jj_consume_token(GT);
                        finalTag = false;
                        temp = begin.removeLast();
                        begin.add(temp + ">");
      tag(begin, middle, end, b);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
                if (finalTag)
                {
                        temp = begin.removeLast();
                        middle.add(temp + ">$" + index++ + end.removeLast());
                }
    if (jj_2_1(2)) {
      jj_consume_token(PLUS);
      tag(begin, middle, end, b);
    } else {
      ;
    }
  }

  //}}}

//{{{ multiplier() method
  final public void multiplier(LinkedList<String> begin, LinkedList<String> middle, LinkedList<String> end) throws ParseException {
        Token multiplier;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID_MULTIPLIER:
      multiplier = jj_consume_token(ID_MULTIPLIER);
      break;
    case MULTIPLIER:
      multiplier = jj_consume_token(MULTIPLIER);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                String[] split = multiplier.image.split("\u005c\u005c*");
                int count = Integer.parseInt(split[1]);
                String _s = begin.removeLast();
                String _e = end.removeLast();
                int pad = split[0].length();
                if (pad != 0)
                {
                        _s = _s.substring(0, _s.length()-1);
                        for (int i = 0;i<count;i++)
                        {
                                String id = pad(i+1, pad);
                                middle.add(_s + id + "\u005c">$" + index++ + _e);
                        }
                }
                else
                {
                        for (int i = 0;i<count;i++)
                        {
                                middle.add(_s + ">$" + index++ + _e);
                        }
                }
  }

  //}}}

//{{{ id() method
  final public String id() throws ParseException {
    jj_consume_token(SHARP);
    jj_consume_token(IDENTIFIER);
                {if (true) return " id=\u005c""+token.image+"\u005c"";}
    throw new Error("Missing return statement in function");
  }

  //}}}

//{{{ cssClass() method
  final public String cssClass() throws ParseException {
        String ret = "";
    jj_consume_token(DOT);
    jj_consume_token(IDENTIFIER);
                ret += " " + token.image;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_1;
      }
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
                        ret += " " + token.image;
    }
                {if (true) return " class=\u005c""+ret.trim()+"\u005c"";}
    throw new Error("Missing return statement in function");
  }

  //}}}

//{{{ cssClass() method
  final public String attributes() throws ParseException {
        String ret = "";
        boolean shouldAddDoublequote;
    jj_consume_token(LBRACKET);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
                        shouldAddDoublequote = true;
      jj_consume_token(IDENTIFIER);
                               ret += ' ' + token.image + '=';
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
                                shouldAddDoublequote = false;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
                                                       ret += '"' + token.image + '"';
          break;
        case INTEGER_LITERAL:
          jj_consume_token(INTEGER_LITERAL);
                                                            ret += '"' + token.image + '"';
          break;
        case LITERAL:
          jj_consume_token(LITERAL);
                                                    ret += token.image;
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
                        if (shouldAddDoublequote)
                                ret += "\u005c"$"+index++ +"\u005c"";
    }
    jj_consume_token(RBRACKET);
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_4() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_5()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(SHARP)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public HTMLZenParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000,0x20,0x40,0x400,0xc000,0x80,0xc000,0x40,0x2000,0x13000,0x200,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public HTMLZenParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HTMLZenParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HTMLZenParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public HTMLZenParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HTMLZenParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public HTMLZenParser(HTMLZenParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(HTMLZenParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[19];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 19; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

          //}}}
}
