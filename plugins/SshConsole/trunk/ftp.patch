Index: ftp/FtpAddress.java
===================================================================
--- ftp/FtpAddress.java	(revision 11002)
+++ ftp/FtpAddress.java	(working copy)
@@ -22,9 +22,6 @@
 
 package ftp;
 
-import org.gjt.sp.jedit.jEdit;
-import org.gjt.sp.util.Log;
-
 public class FtpAddress
 {
 	public boolean secure;
Index: ftp/Connection.java
===================================================================
--- ftp/Connection.java	(revision 0)
+++ ftp/Connection.java	(revision 0)
@@ -0,0 +1,104 @@
+/**
+ * 
+ */
+package ftp;
+
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+import javax.swing.Timer;
+
+import org.gjt.sp.util.Log;
+
+/**
+ * Abstract base class for (s)ftp connections.
+ */
+public abstract class Connection
+{
+	static int COUNTER;
+
+	int id;
+	ConnectionInfo info;
+	String home;
+	boolean inUse;
+	Timer closeTimer;
+
+	Connection(ConnectionInfo info)
+	{
+		id = COUNTER++;
+		this.info = info;
+
+		closeTimer = new Timer(0,new ActionListener()
+		{
+			public void actionPerformed(ActionEvent evt)
+			{
+				ConnectionManager.closeConnection(Connection.this);
+			}
+		});
+	}
+
+	abstract FtpVFS.FtpDirectoryEntry[] listDirectory(String path) throws IOException;
+	abstract FtpVFS.FtpDirectoryEntry getDirectoryEntry(String path) throws IOException;
+	abstract boolean removeFile(String path) throws IOException;
+	abstract boolean removeDirectory(String path) throws IOException;
+	abstract boolean rename(String from, String to) throws IOException;
+	abstract boolean makeDirectory(String path) throws IOException;
+	abstract InputStream retrieve(String path) throws IOException;
+	abstract OutputStream store(String path) throws IOException;
+	abstract void chmod(String path, int permissions) throws IOException;
+	abstract boolean checkIfOpen() throws IOException;
+	abstract String resolveSymlink(String path, String[] name) throws IOException;
+	abstract void logout() throws IOException;
+
+	boolean inUse()
+	{
+		return inUse;
+	}
+
+	void lock()
+	{
+		if(inUse)
+		{
+			throw new InternalError("Trying to lock "
+				+ "connection twice!");
+		}
+		else
+		{
+			Log.log(Log.DEBUG,ConnectionManager.class,
+				Thread.currentThread() +
+				": Connection " + this + " locked");
+			inUse = true;
+			closeTimer.stop();
+		}
+	}
+
+	void unlock()
+	{
+		if(!inUse)
+		{
+			Log.log(Log.ERROR,ConnectionManager.class,
+				new Exception(Thread.currentThread() +
+				": Trying to release connection twice!"));
+		}
+		else
+		{
+			Log.log(Log.DEBUG,ConnectionManager.class,
+				Thread.currentThread() +
+				": Connection " + this + " released");
+		}
+
+		inUse = false;
+		closeTimer.stop();
+		closeTimer.setInitialDelay(ConnectionManager.connectionTimeout);
+		closeTimer.setRepeats(false);
+		closeTimer.start();
+	}
+
+	public String toString()
+	{
+		return id + ":" + info.host;
+	}
+}
\ No newline at end of file

Property changes on: ftp/Connection.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: ftp/PasswordDialog.java
===================================================================
--- ftp/PasswordDialog.java	(revision 11002)
+++ ftp/PasswordDialog.java	(working copy)
@@ -21,20 +21,26 @@
 */
 package ftp;
 
-import javax.swing.*;
-import javax.swing.border.*;
-import javax.swing.event.*;
-import java.awt.*;
-import java.awt.event.*;
-import java.io.File;
-import java.io.IOException;
-import org.gjt.sp.jedit.gui.*;
-import org.gjt.sp.jedit.*;
-import org.gjt.sp.util.Log;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
 
+import javax.swing.Box;
+import javax.swing.BoxLayout;
+import javax.swing.JButton;
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+import javax.swing.JPasswordField;
+import javax.swing.border.EmptyBorder;
+
+import org.gjt.sp.jedit.GUIUtilities;
+import org.gjt.sp.jedit.jEdit;
+import org.gjt.sp.jedit.gui.EnhancedDialog;
+import org.gjt.sp.jedit.gui.VariableGridLayout;
+
 public class PasswordDialog extends EnhancedDialog implements ActionListener
 {
-	public PasswordDialog(JFrame comp,String title, String message)
+	public PasswordDialog(JFrame comp, String title, String message)
 	{
 		super(comp,title,true);
 		JPanel content = new JPanel(new VariableGridLayout(
Index: ftp/FtpPlugin.java
===================================================================
--- ftp/FtpPlugin.java	(revision 11002)
+++ ftp/FtpPlugin.java	(working copy)
@@ -23,21 +23,17 @@
 package ftp;
 
 //{{{ Imports
-import java.io.File;
-import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import org.gjt.sp.jedit.Buffer;
 import org.gjt.sp.jedit.EditPlugin;
 import org.gjt.sp.jedit.GUIUtilities;
-import org.gjt.sp.jedit.MiscUtilities;
 import org.gjt.sp.jedit.OperatingSystem;
 import org.gjt.sp.jedit.View;
 import org.gjt.sp.jedit.jEdit;
 import org.gjt.sp.jedit.browser.VFSBrowser;
 import org.gjt.sp.jedit.io.VFSManager;
-import org.gjt.sp.util.Log;
 //}}}
 
 public class FtpPlugin extends EditPlugin
Index: ftp/FtpVFS.java
===================================================================
--- ftp/FtpVFS.java	(revision 11002)
+++ ftp/FtpVFS.java	(working copy)
@@ -145,10 +145,10 @@
 	//{{{ FtpSession class
 	static class FtpSession
 	{
-		ConnectionManager.ConnectionInfo info;
-		ConnectionManager.Connection connection;
+		ConnectionInfo info;
+		Connection connection;
 		
-		FtpSession(ConnectionManager.ConnectionInfo info)
+		FtpSession(ConnectionInfo info)
 		{
 			this.info = info;
 		}
@@ -159,7 +159,7 @@
 	{
 		try
 		{
-			ConnectionManager.ConnectionInfo info =
+			ConnectionInfo info =
 			ConnectionManager.getConnectionInfo(comp,
 				path == null ? null : new FtpAddress(path),
 				secure);
@@ -194,7 +194,7 @@
 		
 		if(address.path.startsWith("/~"))
 		{
-			ConnectionManager.Connection session
+			Connection session
 			= getConnection(_session);
 			
 			if(session.home != null)
@@ -222,7 +222,7 @@
 		if(directory != null)
 			return directory;
 		
-		ConnectionManager.Connection session = getConnection(_session);
+		Connection session = getConnection(_session);
 		
 		FtpAddress address = new FtpAddress(url);
 		
@@ -284,7 +284,7 @@
 		Component comp)
 	throws IOException
 	{
-		ConnectionManager.Connection session = getConnection(_session);
+		Connection session = getConnection(_session);
 		
 		FtpAddress address = new FtpAddress(path);
 		
@@ -333,7 +333,7 @@
 	public boolean _delete(Object _session, String url, Component comp)
 	throws IOException
 	{
-		ConnectionManager.Connection session = getConnection(_session);
+		Connection session = getConnection(_session);
 		
 		FtpAddress address = new FtpAddress(url);
 		
@@ -359,7 +359,7 @@
 	public boolean _rename(Object _session, String from, String to,
 		Component comp) throws IOException
 	{
-		ConnectionManager.Connection session = getConnection(_session);
+		Connection session = getConnection(_session);
 		
 		FtpAddress address = new FtpAddress(from);
 		
@@ -389,7 +389,7 @@
 	public boolean _mkdir(Object _session, String directory, Component comp)
 	throws IOException
 	{
-		ConnectionManager.Connection session = getConnection(_session);
+		Connection session = getConnection(_session);
 		
 		FtpAddress address = new FtpAddress(directory);
 		
@@ -405,7 +405,7 @@
 	public InputStream _createInputStream(Object _session, String path,
 		boolean ignoreErrors, Component comp) throws IOException
 	{
-		ConnectionManager.Connection session = getConnection(_session);
+		Connection session = getConnection(_session);
 		
 		FtpAddress address = new FtpAddress(path);
 		
@@ -416,7 +416,7 @@
 	public OutputStream _createOutputStream(Object _session, String path,
 		Component comp) throws IOException
 	{
-		ConnectionManager.Connection session = getConnection(_session);
+		Connection session = getConnection(_session);
 		
 		FtpAddress address = new FtpAddress(path);
 		
@@ -430,7 +430,7 @@
 	public void _finishTwoStageSave(Object _session, Buffer buffer, String path,
 		Component comp) throws IOException
 	{
-		ConnectionManager.Connection session = getConnection(_session);
+		Connection session = getConnection(_session);
 		
 		FtpAddress address = new FtpAddress(path);
 		
@@ -451,7 +451,7 @@
 	private boolean secure;
 	
 	//{{{ getConnection() method
-	private static ConnectionManager.Connection getConnection(Object _session)
+	private static Connection getConnection(Object _session)
 	throws IOException
 	{
 		FtpSession session = (FtpSession)_session;
@@ -468,7 +468,7 @@
 	private void resolveSymlink(Object _session, String url, FtpDirectoryEntry entry)
 	throws IOException
 	{
-		ConnectionManager.Connection session = getConnection(_session);
+		Connection session = getConnection(_session);
 		
 		String path = constructPath(url,entry.getName());
 		String[] nameArray = new String[] { entry.getName() };
Index: ftp/LoginDialog.java
===================================================================
--- ftp/LoginDialog.java	(revision 11002)
+++ ftp/LoginDialog.java	(working copy)
@@ -27,11 +27,8 @@
 import javax.swing.event.*;
 import java.awt.*;
 import java.awt.event.*;
-import java.io.File;
-import java.io.IOException;
 import org.gjt.sp.jedit.gui.*;
 import org.gjt.sp.jedit.*;
-import org.gjt.sp.util.Log;
 
 public class LoginDialog extends EnhancedDialog implements ActionListener
 {
Index: ftp/FtpConnection.java
===================================================================
--- ftp/FtpConnection.java	(revision 11002)
+++ ftp/FtpConnection.java	(working copy)
@@ -27,9 +27,9 @@
 import org.gjt.sp.jedit.MiscUtilities;
 import org.gjt.sp.util.Log;
 
-class FtpConnection extends ConnectionManager.Connection
+class FtpConnection extends Connection
 {
-	FtpConnection(ConnectionManager.ConnectionInfo info) throws IOException
+	FtpConnection(ConnectionInfo info) throws IOException
 	{
 		super(info);
 
Index: ftp/ConnectionManager.java
===================================================================
--- ftp/ConnectionManager.java	(revision 11002)
+++ ftp/ConnectionManager.java	(working copy)
@@ -27,17 +27,32 @@
 import java.awt.event.*;
 import java.io.*;
 import java.util.*;
-import javax.swing.Timer;
 import org.gjt.sp.jedit.GUIUtilities;
 import org.gjt.sp.jedit.MiscUtilities;
 import org.gjt.sp.jedit.jEdit;
 import org.gjt.sp.util.Log;
 
+import com.jcraft.jsch.JSch;
 import com.jcraft.jsch.jcraft.Compression;
 //}}}
 
 public class ConnectionManager
 {
+	// {{{ members 
+	protected static Object lock;
+	protected static ArrayList<Connection> connections;
+	/**
+	 * cached logins by host
+	 */
+	protected static HashMap<String, ConnectionInfo> logins;
+	protected static HashMap<String, String> passwords;
+	protected static HashMap<String, String> passphrases;
+	static int connectionTimeout = 120000;
+	private static File passwordFile = null;
+	public static JSch client = null;
+
+	// }}}
+	
 	//{{{ forgetPasswords() method
 	public static void forgetPasswords()
 	{
@@ -52,6 +67,7 @@
 		passwords.clear();
 		passphrases.clear();
 		logins.clear();
+		client = null;
 	} //}}}
 
 	//{{{ getPassword() method
@@ -63,17 +79,17 @@
 	//{{{ setPassword() method
 	protected static void setPassword(String hostInfo, String password)
 	{
-		passwords.put(hostInfo,password);
+		passwords.put(hostInfo, password);
 	} //}}}
 	
 	//{{{ getPassphrase() method
-	protected static String getPassphrase(String keyFile)
+	public static String getPassphrase(String keyFile)
 	{
-		return (String)passphrases.get(keyFile);
+		return passphrases.get(keyFile);
 	} //}}}
 	
 	//{{{ setPassphrase() method
-	protected static void setPassphrase(String keyFile, String passphrase)
+	public static void setPassphrase(String keyFile, String passphrase)
 	{
 		passphrases.put(keyFile,passphrase);
 	} //}}}
@@ -240,7 +256,7 @@
 				host = host + ":" + FtpVFS.getDefaultPort(secure);
 			user = address.user;
 
-			ConnectionInfo info = (ConnectionInfo)logins.get(host);
+			ConnectionInfo info = logins.get(host);
 
 			if(info != null && (info.user.equals(user) || user == null))
 			{
@@ -290,14 +306,15 @@
 		return info;
 	} //}}}
 
+	
+	
 	//{{{ getConnection() method
 	public static Connection getConnection(ConnectionInfo info)
 		throws IOException
 	{
+		Connection connect = null;
 		synchronized(lock)
 		{
-			Connection connect = null;
-
 			for(int i = 0; i < connections.size(); i++)
 			{
 				Connection _connect = (Connection)connections.get(i);
@@ -330,18 +347,17 @@
 				Log.log(Log.DEBUG,ConnectionManager.class,
 					Thread.currentThread() +
 					": Connecting to " + info);
-				if(info.secure)
+				if(info.secure) 
 					connect = new SFtpConnection(info);
 				else
 					connect = new FtpConnection(info);
-
 				connections.add(connect);
 			}
 
 			connect.lock();
-
-			return connect;
 		}
+		return connect;
+		
 	} //}}}
 
 	//{{{ releaseConnection() method
@@ -353,144 +369,6 @@
 		}
 	} //}}}
 
-	//{{{ ConnectionInfo class
-	static class ConnectionInfo
-	{
-		public boolean secure;
-		public String host;
-		public int port;
-		public String user;
-		public String password;
-		public String privateKey;
-		public ConnectionInfo(boolean secure, String host, int port,
-			String user, String password, String privateKey)
-		{
-			this.secure = secure;
-			this.host = host;
-			this.port = port;
-			this.user = user;
-			this.password = password;
-			this.privateKey = privateKey;
-		}
-
-		public boolean equals(Object o)
-		{
-			if(!(o instanceof ConnectionInfo))
-				return false;
-
-			ConnectionInfo c = (ConnectionInfo)o;
-			return c.secure == secure
-				&& c.host.equals(host)
-				&& c.port == port
-				&& c.user.equals(user)
-				&& ( (c.password==null && password==null) ||
-				     (c.password!=null && password!=null &&
-				      c.password.equals(password)))
-				&& ( (c.privateKey==null && privateKey==null) ||
-				     (c.privateKey!=null && privateKey!=null &&
-				      c.privateKey.equals(privateKey)));
-		}
-
-		public String toString()
-		{
-			return (secure ? FtpVFS.SFTP_PROTOCOL : FtpVFS.FTP_PROTOCOL)
-				+ "://" + host + ":" + port;
-		}
-
-		public int hashCode()
-		{
-			return host.hashCode();
-		}
-	} //}}}
-
-	//{{{ Connection class
-	abstract static class Connection
-	{
-		static int COUNTER;
-
-		int id;
-		ConnectionInfo info;
-		String home;
-		boolean inUse;
-		Timer closeTimer;
-
-		Connection(ConnectionInfo info)
-		{
-			id = COUNTER++;
-			this.info = info;
-
-			closeTimer = new Timer(0,new ActionListener()
-			{
-				public void actionPerformed(ActionEvent evt)
-				{
-					ConnectionManager.closeConnection(Connection.this);
-				}
-			});
-		}
-
-		abstract FtpVFS.FtpDirectoryEntry[] listDirectory(String path) throws IOException;
-		abstract FtpVFS.FtpDirectoryEntry getDirectoryEntry(String path) throws IOException;
-		abstract boolean removeFile(String path) throws IOException;
-		abstract boolean removeDirectory(String path) throws IOException;
-		abstract boolean rename(String from, String to) throws IOException;
-		abstract boolean makeDirectory(String path) throws IOException;
-		abstract InputStream retrieve(String path) throws IOException;
-		abstract OutputStream store(String path) throws IOException;
-		abstract void chmod(String path, int permissions) throws IOException;
-		abstract boolean checkIfOpen() throws IOException;
-		abstract String resolveSymlink(String path, String[] name) throws IOException;
-		abstract void logout() throws IOException;
-
-		boolean inUse()
-		{
-			return inUse;
-		}
-
-		void lock()
-		{
-			if(inUse)
-			{
-				throw new InternalError("Trying to lock "
-					+ "connection twice!");
-			}
-			else
-			{
-				Log.log(Log.DEBUG,ConnectionManager.class,
-					Thread.currentThread() +
-					": Connection " + this + " locked");
-				inUse = true;
-				closeTimer.stop();
-			}
-		}
-
-		void unlock()
-		{
-			if(!inUse)
-			{
-				Log.log(Log.ERROR,ConnectionManager.class,
-					new Exception(Thread.currentThread() +
-					": Trying to release connection twice!"));
-			}
-			else
-			{
-				Log.log(Log.DEBUG,ConnectionManager.class,
-					Thread.currentThread() +
-					": Connection " + this + " released");
-			}
-
-			inUse = false;
-			closeTimer.stop();
-			closeTimer.setInitialDelay(connectionTimeout);
-			closeTimer.setRepeats(false);
-			closeTimer.start();
-		}
-
-		public String toString()
-		{
-			return id + ":" + info.host;
-		}
-	} //}}}
-
 	//{{{ closeConnection() method
 	static void closeConnection(Connection connect)
 	{
@@ -516,20 +394,13 @@
 	} //}}}
 
 	//{{{ Private members
-	private static Object lock;
-	private static ArrayList connections;
-	private static HashMap logins;
-	private static HashMap passwords;
-	private static HashMap passphrases;
-	private static int connectionTimeout = 120000;
-	private static File passwordFile = null;
 	static
 	{
 		lock = new Object();
-		connections = new ArrayList();
-		logins = new HashMap();
-		passwords = new HashMap();
-		passphrases = new HashMap();
+		connections = new ArrayList<Connection>();
+		logins = new HashMap<String, ConnectionInfo>();
+		passwords = new HashMap<String, String>();
+		passphrases = new HashMap<String, String>();
 
 		String settingsDirectory = jEdit.getSettingsDirectory();
 		if(settingsDirectory == null)
@@ -552,4 +423,5 @@
 			}
 		}
 	} //}}}
+
 }
Index: ftp/ConnectionInfo.java
===================================================================
--- ftp/ConnectionInfo.java	(revision 0)
+++ ftp/ConnectionInfo.java	(revision 0)
@@ -0,0 +1,73 @@
+/**
+ * 
+ */
+package ftp;
+
+/**
+ * Broken out of the ConnectionManager class so that it can be reused from SshPlugin.
+  */
+public class ConnectionInfo
+{
+	// {{{ members
+	public boolean secure;
+	public String host;
+	public int port;
+	public String user;
+	public String password;
+	public String privateKey;
+	// }}}
+	public ConnectionInfo(boolean secure, String host, int port,
+		String user, String password, String privateKey)
+	{
+		this.secure = secure;
+		this.host = host;
+		this.port = port;
+		this.user = user;
+		this.password = password;
+		this.privateKey = privateKey;
+	}
+
+	public boolean equals(Object o)
+	{
+		if(!(o instanceof ConnectionInfo))
+			return false;
+
+		ConnectionInfo c = (ConnectionInfo)o;
+		return c.secure == secure
+			&& c.host.equals(host)
+			&& c.port == port
+			&& c.user.equals(user)
+			&& ( (c.password==null && password==null) ||
+			     (c.password!=null && password!=null &&
+			      c.password.equals(password)))
+			&& ( (c.privateKey==null && privateKey==null) ||
+			     (c.privateKey!=null && privateKey!=null &&
+			      c.privateKey.equals(privateKey)));
+	}
+
+	public String toString()
+	{
+		return (secure ? FtpVFS.SFTP_PROTOCOL : FtpVFS.FTP_PROTOCOL)
+			+ "://" + host + ":" + port;
+	}
+
+	public int hashCode()
+	{
+		return host.hashCode();
+	}
+	
+	public String getHost() {
+		return host;
+	}
+	
+	public String getPassword() {
+		return password;
+	}
+	public int getPort() {
+		return port;
+	}
+	public String getUser() {
+		return user;
+	}
+	
+}

Property changes on: ftp/ConnectionInfo.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: ftp/SFtpConnection.java
===================================================================
--- ftp/SFtpConnection.java	(revision 11002)
+++ ftp/SFtpConnection.java	(working copy)
@@ -27,20 +27,20 @@
 import java.io.*;
 import java.util.*;
 import javax.swing.JOptionPane;
-import org.gjt.sp.jedit.GUIUtilities;
-import org.gjt.sp.jedit.JARClassLoader;
 import org.gjt.sp.jedit.jEdit;
 import org.gjt.sp.jedit.MiscUtilities;
 import org.gjt.sp.util.Log;
 
-class SFtpConnection extends ConnectionManager.Connection implements UserInfo
+public class SFtpConnection extends Connection implements UserInfo
 {
-	SFtpConnection(final ConnectionManager.ConnectionInfo info) throws IOException
+	SFtpConnection(final ConnectionInfo info) throws IOException
 	{
 		super(info);
 		try {
-			client = new JSch();
-			client.setLogger(new SftpLogger());
+			if (ConnectionManager.client == null)  {
+				ConnectionManager.client = new JSch();
+			}
+			ConnectionManager.client.setLogger(new SftpLogger());
 			String settingsDirectory = jEdit.getSettingsDirectory();
 			if(settingsDirectory != null)
 			{
@@ -49,17 +49,17 @@
 				String known_hosts = MiscUtilities.constructPath(cacheDir,"known_hosts");
 				try {
 					(new File(known_hosts)).createNewFile();
-					client.setKnownHosts(known_hosts);
+					ConnectionManager.client.setKnownHosts(known_hosts);
 				} catch(IOException e) {
 					Log.log(Log.WARNING,ConnectionManager.class,
 						"Unable to create password file:"+known_hosts);
 				}
 			}
-			Session session=client.getSession(info.user, info.host,info.port);
+			Session session=ConnectionManager.client.getSession(info.user, info.host, info.port);
 			if (info.privateKey != null) {
 				Log.log(Log.DEBUG,this,"Attempting public key authentication");
 				Log.log(Log.DEBUG,this,"Using key: "+info.privateKey);
-				client.addIdentity(info.privateKey);
+				ConnectionManager.client.addIdentity(info.privateKey);
 			}
 			keyAttempts = 0;
 			session.setUserInfo(this);
@@ -98,7 +98,7 @@
 		} catch (SftpException e) {
 			return null;
 		}
-		FtpVFS.FtpDirectoryEntry[] result = (FtpVFS.FtpDirectoryEntry[])listing.toArray(
+		FtpVFS.FtpDirectoryEntry[] result = (FtpVFS.FtpDirectoryEntry[]) listing.toArray(
 			new FtpVFS.FtpDirectoryEntry[listing.size()]);
 		return result;
 	}
@@ -213,7 +213,6 @@
 		sftp.disconnect();
 	}
 	
-	private JSch client;
 	private ChannelSftp sftp;
 	private int keyAttempts = 0;
 	
Index: FTP.props
===================================================================
--- FTP.props	(revision 11002)
+++ FTP.props	(working copy)
@@ -3,7 +3,7 @@
 
 plugin.ftp.FtpPlugin.name=FTP
 plugin.ftp.FtpPlugin.author=Slava Pestov
-plugin.ftp.FtpPlugin.version=0.9.1
+plugin.ftp.FtpPlugin.version=0.9.2
 plugin.ftp.FtpPlugin.docs=index.html
 plugin.ftp.FtpPlugin.depend.0=jedit 04.03.04.00
 plugin.ftp.FtpPlugin.depend.1=jdk 1.5
Index: users-guide.xml
===================================================================
--- users-guide.xml	(revision 11002)
+++ users-guide.xml	(working copy)
@@ -6,11 +6,8 @@
 <!-- jEdit buffer-local properties: -->
 <!-- :indentSize=1:noTabs=true:folding=sidekick: -->
 
-<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
-  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
-
-<book>
-
+<book xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:noNamespaceSchemaLocation='http://www.docbook.org/xsd/4.4/docbook.xsd' >
 <bookinfo><title>FTP plugin user's guide</title>
 
  <authorgroup>
@@ -153,6 +150,12 @@
    
 
  <itemizedlist>
+   <listitem><para> <emphasis role="bold">Version 0.9.2</emphasis>
+   Requires jEdit 4.3pre4 </para>
+   <itemizedlist>
+   <listitem><para> Refactoring to make its connections reusable from the SshConsole plugin (ezust). </para></listitem>
+   </itemizedlist>
+   </listitem>
 
    <listitem><para> <emphasis role="bold">Version 0.9.1</emphasis>
    Requires jEdit 4.3pre4 (Nicholas O'leary) </para>
