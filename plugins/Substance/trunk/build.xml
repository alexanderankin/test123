<?xml version="1.0"?>

<!--

		 This is the standard build.xml file for building a jEdit plugin.

		 The 'dist' target compiles the plugin, generates documentation, and creates
		 the JAR file.  Before running the 'dist' target, you will need to choose
		 whether to generate the documentation using one of these two targets:

		 - 'docs-xsltproc': Creates documentation using the xsltproc tool from
			 libxslt, available at http://xmlsoft.org/XSLT
		 - 'docs-xalan': Creates documentation using the Xalan XSLT processor,
			 available at http://xml.apache.org/

		 The default processor is xsltproc. You can change the processor to Xalan by
		 setting the 'docs-proc.target' property to xalan. This can be done on the
		 command line by adding '-Ddocs-proc.target=xalan' or in any of the
		 build.properties files that are imported. If you do not have any
		 documentation, set the 'build-docs.not-required' property to any value and
		 the 'docs' target will be skipped.

		 To use this template for building your own plugin, make these changes:

		 - Change 'name' property for the <project> to the name of your plugin
		 - Change definition of 'jedit.install.dir' to point to the directory
			 containing jedit.jar
		 - If necessary, add any dependencies to the 'project.class.path' definition
		 - If necessary, change the list of files in the 'dist' target

		 All properties specified in this build.xml can be overridden by properties
		 file in the following locations:

		 - ${base.dir}/build.properties : Specify properties that are to affect this
			 project only.
		 - ../build.properties : If building from CVS, this file comes in handy
			 because it allows you to specify properties that affect all plugins.
		 - ${user.home}/.build.properties : Allows you to specify global properties
			 that are to be shared across all Ant projects.  This file is hidden by
			 unix file standard.
		 - ${user.home}/.build.properties : Allows you to specify global properties
			 that are to be shared across all Ant projects.

		 When the same property is specified across the different properties file,
		 the following precendence order applies - ${base.dir}/bulid.properties ->
		 ../build.properties -> ${user.home}/.build.properties ->
		 ${user.home}/build.properties.

-->

<project name="SubstanceLookAndFeel" default="build" basedir=".">
	<!-- Properties -->
    <property file="build.properties"/>
    <property file="../build.properties"/>
    <property file="${user.home}/.build.properties"/>
    <property file="${user.home}/build.properties"/>
    <property name="src.dir" value="lookandfeel"/>

    <import file="${build.support}/plugin-build.xml" />

    <property name="build.dir" value="build"/>
    <property name="lib.dir" value="lib"/>

	<!-- Patterns -->
	<!--
		Put patterns here that should be included in the plugin jar from
		the source directory.
	-->
    <selector id="extraFiles">
        <and>
            <or>
                <filename name="**/services.xml" />
                <filename name="**/*.props" />
                <filename name="**/index.html"/>
            </or>
        </and>
    </selector>
    <fileset dir="${lib.dir}" id="libraries">
        <patternset>
            <include name="*.jar"/>
        </patternset>
    </fileset>

	<!-- Paths -->
    <path id="project.class.path">
        <pathelement location="${jedit.install.dir}/jedit.jar"/>
        <pathelement location="${install.dir}/LookAndFeel.jar"/>
        <fileset refid="libraries" />
        <pathelement location="${src.dir}"/>
    </path>

    <target name="build.post">
        <copy todir="${install.dir}">
            <fileset refid="libraries" />
        </copy>
    </target>

</project>
