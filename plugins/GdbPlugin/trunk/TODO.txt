To do:
- Make sure all views are always in sync regarding gdb state and frame selection.
  - Need some major refactoring. Kind of 'DebugBus' like EditBus in jEdit.
  - Make sure the drawing of the current instruction goes away when gdb is not
    running or when outside of any buffer.
- A view that is opened in the middle of a debug session should update itself
  automatically upon opening.
--> Locals/Watches/Variables:
  + Add a toolbar button for modifying the value of the currently selected variable.
  - Support changes in tree structure of variable.
  - Provide an action and a context menu item to change the currently selected
    variable (leafs only).
- Watches:
  - Provide actions and context menu items for:
    - Add an item to the tree.
    - Remove an item from the tree.
    - Modify an item in the tree.
- Control panel: Should be aware of the gdb state, enable/disable buttons.

Future:
- Variables:
  - Format specificiation (e.g. hexa/decimal/octal/binary)
  - Editing watches (e.g. just change index of array element in watch expression)
  - Casting
- Launch configurations:
  - Support for core files
  - Support for attaching to processes
- Tooltips for variables under caret in the buffer.
- Multi-threading support, including views, stack trace etc.
- Memory/Disassembly/Registers view.
- Symbol query commands.

Done:
+ Launch configurations:
  + Move to debugger-specific extension
  + Improved GUI for the launch configurations (e.g. file dialogs)
+ Breakpoint window:
  + Move to debugger-specific extension
  + Skip count
  + Conditions
  + Watch points
+ Program output view:
  + Add program stderr. (at first, merged with stdout)
  + Allow clearing of contents.
  + Clear automatically whenever session begins.
+ Complete gdb command-set (e.g. exec-until).
+ Write a short user guide.
+ gdb output console:
  + Send all gdb output there.
  + Allow entering commands manually.
