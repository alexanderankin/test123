--  This macro will start the Android emulator with a selected virtual device.

	OPTION_PREFIX = String "options.android."

 --													verify default locations:
	set_adk_location.main([String "check"])
	
	--												build virtual device panel:
   	sdk=JTextField(jEdit.getProperty(OPTION_PREFIX"sdk","Please enter Android SDK path here                           "))
   	
   	scaleText="Please enter emulator scale here(0.1-3)                         "
   	scaleopt=JTextField(scaleText)
--   	scaleopt=JTextField("Please enter emulator scale here(0.1-3)                         ")
   					
	targetlist=getTargets(sdk.getText) 
	say "dump return targetlist"
	targetarray=String[targetlist["tlc"]]
	loop i=1 to targetlist["tlc"]
		targetarray[i-1]=targetlist[i].substr(1,120)
		say targetlist[i]
		end  	
		
	tbox=JComboBox(targetarray)
   	
   	display=[Object String("Android SDK location:"),sdk, -
   					String("Target Device:"), tbox, -
   					String("Scale:"), scaleopt -
   					]

 --								display virtual device panel and verify responses:
	fail="yes"   					
	loop while fail="yes"   					
						
		rt=JOptionPane.showConfirmDialog(view, display, "Select Android Device", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE)

		say "rt="rt
		if rt\=JOptionPane.OK_OPTION then return		-- 	done here
			
		say "sdk="sdk.getText
		sdk.setText(set_adk_location.check(sdk.getText))
		scale=scaleopt.getText
		if scale=scaleText then scale=".7"
--		if scale="Please enter emulator scale here(0.1-3)                         " then scale=".7"
		say "scale="scale
		say "tbox item="tbox.getSelectedItem
		
		fail="no"		

   		end
 
-------------------------------  start emulator with selected device  ---------------------------   		
   		
	tbi=Rexx(String tbox.getSelectedItem)	--		extract target device name:
	parse tbi . tid .
	
	--										set current dir to Android SDK:	
	sdkesc=Rexx(sdk.getText).changestr("\\","\\\\")
	shell.cmd('cd' sdkesc)
	
--	cdc='runInSystemShell(view ,"cd 'sdkesc'");'
--	BeanShell.eval(view, BeanShell.getNameSpace, cdc)  		
	
	--									create emulator command and run it:
  		
	fs=File.separator
	sdkloc=jEdit.getProperty(OPTION_PREFIX"sdk","")
	if sdkloc="" then emulator="emulator"
		else emulator=sdkloc||fs"tools"fs"emulator"   		
	
   	cpc=emulator "-avd" tid "-scale" scale
--   	cpc="emulator -avd" tid "-scale" scale

   		say "cmd="cpc
   		
   		shell.cmd(cpc,"detach noconsole")
	
----------------------------------- start of subroutine methods ----------------------------------
   	
   	method getTargets(sdk=String) static returns Rexx	--	This method runs a shell command that puts output in a jEdit buffer
   														--	Then it reads and analyzes the data from the jEdit buffer
   		view=jEdit.getActiveView
			fs=File.separator
			OPTION_PREFIX = String "options.android."
			sdkloc=jEdit.getProperty(OPTION_PREFIX"sdk","")
			if sdkloc="" then android="android"
				else android=sdkloc||fs"tools"fs"android"
   		
   		buffer=shell.tobuffer(android "list avd")
--   		shell.tobuffer("android list avd")
  		
--   		buffer=view.getBuffer
   		lc=buffer.getLineCount;say "lc="lc
   		
   		loop for 999 while lc<6
   			loop i=1 to 999;end	--	wait a while for buffer to finish setup
   			lc=buffer.getLineCount;say "lc="lc
   			end
   				
   		targetlist=""
   		tlc=0
   		
   		loop i=0 to buffer.getLineCount-1
   			s=Rexx(buffer.getLineText(i))
   			parse s p1 .
   			if p1="Available" then iterate
   			if p1="Description:" then iterate
   			if p1="Libraries:" then iterate
   			if p1="*" then iterate
   			if p1="---------" then iterate
   			if p1="Path:" then iterate
   			if p1="Sdcard:" then iterate
   			if p1="Snapshot:" then iterate
   			if p1="Name:" then tlc=tlc+1
   			targetlist[tlc]=targetlist[tlc] s.strip
   			say s.toString
   			end
  			
   		jEdit._closeBuffer(view,buffer)
   		targetlist["tlc"]=tlc	
   		return targetlist
