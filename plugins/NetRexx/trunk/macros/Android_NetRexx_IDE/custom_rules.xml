<?xml version="1.0"?>

<project default="build-debug" basedir=".">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked in in Version
         Control Systems. -->
    <property file="nrxbuild.properties" />

	<!-- Allow properties to be overridden: -->
    <property file="${user.home}/.build.properties" />
    <property file="${user.home}/build.properties" />
	<property name="build.sysclasspath" value="ignore"/>       
    
	<!-- Project properties -->
	<property name="project.version" value="${src.version}" description="Project's build version"/>
	<property name="project.root.dir" value="." description="Project's root directory"/>
	<property name="project.src.dir" value="${src.dir}" description="Project's source directory"/>
	<property name="project.settings.dir" value="${project.root.dir}" description="Project's settings directory"/>
	<property name="project.netrexx.libdir" value="${nrc.dir}" description="Location of NetRexxC.jar file"/>
	<property name="project.android.libdir" value="${android.sdk.dir}\platforms\${platform}" description="Location of android.jar file"/>
	
	<!-- <import file="build.xml" optional="false" />  This kind of blows the mind of Antelope although Ant does not mind - not needed if invoked via build.xml anyway -->

  <target name="prepare">
    <mkdir dir="NetRexx"/>
        
	<propertyset id="android-lib-projects">
	  <propertyref prefix="android.library.reference."/>
	</propertyset>
    
    <script language="NetRexx"  >
     <classpath>
     <pathelement path="${project.netrexx.libdir}"/>
      <fileset dir="${build.path}">
        <include name="**/*.jar"/>
      </fileset>
      </classpath>
     import org.apache.tools.ant.
      propset=PropertySet project.getReference('android-lib-projects')
      it=propset.iterator
      if it.hasNext then includes=""
      else includes="no_libraries_found"
      loop while it.hasNext
      	f=File(basedir||File.separator||it.next)
        cp=f.getCanonicalPath
        if Rexx(cp).substr(2,2)=":\\" then cp=Rexx(cp).substr(4)
        else if Rexx(cp).substr(1,1)="/" then cp=Rexx(cp).substr(2)
        includes=includes cp||File.separator'libs'File.separator'**/*.jar' cp||File.separator'bin/classes.jar'
        end
        project.setProperty('android.library.includes',includes)
     </script>
 
     <!-- Build Classpath has build.classes prepended, all libs included -->
    <path id="build.class.path">
      <pathelement path="${project.netrexx.libdir}"/>
      <pathelement path="${project.android.libdir}/android.jar"/>
      <pathelement path="./bin/classes"/>
      <fileset dir="libs">
        <include name="**/*.jar"/>
      </fileset>
      <fileset dir="\" includes="${android.library.includes}"  />
<!--       <pathelement path="${android.library.reference.1}/bin/classes.jar"/>
      <fileset dir="${android.library.reference.1}/libs" erroronmissingdir="false">
        <include name="**/*.jar"/>
      </fileset>
      <pathelement path="${android.library.reference.2}/bin/classes.jar"/>
      <fileset dir="${android.library.reference.2}/libs" erroronmissingdir="false">
        <include name="**/*.jar"/>
      </fileset>
      <pathelement path="${android.library.reference.3}/bin/classes.jar"/>
      <fileset dir="${android.library.reference.3}/libs" erroronmissingdir="false">
        <include name="**/*.jar"/>
      </fileset> -->
      <fileset dir="${build.path}">
        <include name="**/*.jar"/>
      </fileset>
    </path>
    <pathconvert property="build.classpath" refid="build.class.path"/>
    <echo message="build.classpath:${build.classpath}"/>
 
    <!-- define special Ant NetRexx task -->
    <taskdef name="buildnrc" classname="org.apache.tools.ant.taskdefs.optional.NetRexx" classpath="${build.classpath}"/>

  </target>
  
    <target name="buildnrx" depends="prepare" description="Compiles NetRexx source files">

        <buildnrc srcDir="${project.src.dir}"  javaDir="${project.src.dir}" destDir="bin/classes/${pack.dir}" includes="*.nrx"
        	classpath=".${path.separator}${build.classpath}${path.separator}${prj.libs}"
        	comments="true" savelog="false" time="true" compact="false" compile="true" format="false" removeSourceCopies="true"
        	verbose='verbose3' crossref="false" />
    </target>
    
    <target name="-post-package" description="Restores NetRexx source files to source directory">
		<move todir="${project.src.dir}" includeemptydirs="false">
			<fileset dir="NetRexx">
			  <include name="*.nrx"/>
			</fileset>
		  </move>
		 <delete>
			<fileset dir="NetRexx" />
		  </delete>

    </target>    
  
    <target name="-post-compile" depends="buildnrx" description="NetRexx source files must be temporairily removed from src dir or they will be added to the APK file">
		<move todir="NetRexx" includeemptydirs="false">
			<fileset dir="${project.src.dir}">
			  <include name="*.nrx"/>
			</fileset>
		  </move>    
    	<delete>
			<fileset dir="${project.src.dir}" includes="*.nrx"/>
		 </delete>
		 
            <!-- if the project is a library then we generate a jar file - Android build.xml does this step prematurely so we redo it here after the NetRexx compile step -->
            <if condition="${project.is.library}">
                <then>
                    <echo level="info">re-Creating library output jar file...</echo>
                    <property name="out.library.jar.file" location="${out.absolute.dir}/classes.jar" />
  
                    <propertybyreplace name="project.app.package.path" input="${project.app.package}" replace="." with="/" />

                    <jar destfile="${out.library.jar.file}">
                        <fileset dir="${out.classes.absolute.dir}"
                                includes="**/*.class"
                                excludes="${project.app.package.path}/R.class ${project.app.package.path}/R$*.class ${project.app.package.path}/BuildConfig.class"/>
                        <fileset dir="${source.absolute.dir}" excludes="**/*.java ${android.package.excludes}  **/*.nrx"  />
                    </jar>
                </then>
            </if>		 
		 
    </target>
    
    <target name="build-debug" depends="debug,-post-package" description="Compiles NetRexx source files, then Android debug build">
    </target>
    
    <target name="build-release" depends="release,-post-package" description="Compiles NetRexx source files, then Android release build">
    </target>
    
   <target name="showprops" depends="prepare,-setup" description="Displays default property settings">
      <echoproperties />
    </target>    
    
</project>