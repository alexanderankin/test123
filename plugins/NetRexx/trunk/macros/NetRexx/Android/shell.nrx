options strictcase

import org.gjt.sp.jedit
import console.Shell
import console.Console
import console.BufferOutput

/*   The code to pass commands to the Console plugin for shell execution is here   */	
/* This code requires the Console plugin to be installed and the NetRexxScript preparse option turned on!  */ 

Class shell
	
 		properties static
 
			view=jEdit.getActiveView()
			sshell=String "System"
			sconsole = Console
			syshell = Shell
			thisshell=shell

	method init static 
		 	
 		-- Open the console if it isn't already open
			view.getDockableWindowManager().addDockableWindow("console")
			
		if sconsole=null then do
	-- Obtain the console instance
			sconsole = Console view.getDockableWindowManager().getDockable("console")
	-- Set the shell to use
			syshell = Shell.getShell(sshell)
			end
	
   method cmd(cpc=String,wait=Rexx "wait") static		--	run command in system shell with output to Console plugin window

					init
   		if wait.wordpos("detach")>0 then do
					cpc=cpc "&"
					end
   		say "shell cmd="cpc
   		say "shell wait="wait
   			
			sconsole.run(syshell, cpc)

			if wait.wordpos("noconsole")>0 then
						view.getDockableWindowManager().hideDockableWindow("console")
							
   		if wait.wordpos("wait")>0 then waitFor()
   		
   method tobuffer(cpc=String,wait=Rexx "wait noconsole") static	returns Buffer  --	run command in system shell with output to a new edit buffer for further processing

   	 init
   		say "tobuffer cmd="cpc
   		say "tobuffer wait="wait
   		
   		if wait.wordpos("detach")>0 then cpc=cpc "&"  
   			
			sconsole.run(syshell, BufferOutput(sconsole),cpc)

   		if wait.wordpos("wait")>0 then waitFor()
   			
   		do
				Thread.currentThread().sleep(1000)				--		buffer writes are async?
				catch e=InterruptedException
					say e
   		end

   		loop for 50																											--	 next 5 seconds try to find the new output buffer
   			if view.getBuffer().isNewFile() then do
   								if wait.wordpos("noconsole")>0 then
										view.getDockableWindowManager().hideDockableWindow("console")
									return view.getBuffer()
									end
   			Thread.currentThread().sleep(100)				--		buffer writes are async?
	
				catch e=InterruptedException
					say e  			
   			end
   				
   		return null

   	method clear static
   		init
   		sconsole.clear
   		
   	method waitFor static
   		init
   		sconsole.getShell().waitFor(sconsole)
   		

