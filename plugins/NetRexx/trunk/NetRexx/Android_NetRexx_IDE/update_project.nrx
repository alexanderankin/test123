--  This macro will update an Android project.
	
	OPTION_PREFIX = String "options.android."
	fs=File.separator

 --													verify default locations:
	set_adk_location.main([String "check"])
	set_nrx_run_time_location.main([String "check"])
	set_NetRexxC_location.main([String "check"])
	set_project_base_location.main([String "check"])
	
    sdkname=jEdit.getProperty(OPTION_PREFIX"sdk","")
    lap=jEdit.getProperty(OPTION_PREFIX"lastproject","")
    if lap="" then pro=sdkname;else pro=lap
	chooser = JFileChooser(pro);
    filter = FileNameExtensionFilter("Android build", [String "xml"]);
    chooser.setFileFilter(filter);
    if lap\="" then chooser.setSelectedFile(File(lap||fs"custom_rules.xml"))
    
    returnVal = chooser.showOpenDialog(view);
    if returnVal \= JFileChooser.APPROVE_OPTION then return
    	
    adir=chooser.getSelectedFile.getParent
    abld=chooser.getSelectedFile.getName
    say adir
    say abld
    jEdit.setProperty(OPTION_PREFIX"lastproject",adir)
	--										set current dir to Android project:	
	dir=Rexx(adir).changestr("\\","\\\\")
	nrpf=File(adir||fs||"nrxbuild.properties")
	nrpfo=File(adir||fs||"build.properties")
	buildprops="not found"
	if nrpf.exists then buildprops=getProps(adir||fs||"nrxbuild.properties")
		else if nrpfo.exists then 	buildprops=getProps(adir||fs||"build.properties")

	--												build new project panel:
   	sdk=JTextField(jEdit.getProperty(OPTION_PREFIX"sdk","Please enter Android SDK path here                           "))
   	rtl=JTextField(jEdit.getProperty(OPTION_PREFIX"nrxrtl","Please enter NetRexx runtime path here                           "))
   	nrc=JTextField(jEdit.getProperty(OPTION_PREFIX"netrexxc","Please enter NetRexxC path here                           "))
   	base=JTextField(jEdit.getProperty(OPTION_PREFIX"basedir","Please enter base project directory path here                           "))
   					
	targetlist=android_info.getTargets(sdk.getText) 
	targetarray=String[targetlist["tlc"]]
	selindex=int -1
	loop i=1 to targetlist["tlc"]
		if targetlist[i].pos(buildprops["platform"])<>0 then selindex=i-1
		targetarray[i-1]=targetlist[i]
		end  	
		
	tbox=JComboBox(targetarray)
	tbox.setSelectedIndex(selindex)
   	
   	projectname=JTextField(jEdit.getProperty(OPTION_PREFIX"projectname","Optional project name here"))
   	if buildprops.exists("ant.project.name") then projectname.setText(buildprops["ant.project.name"].toString)
   	projectname.selectAll
   	projectpath=JTextField(jEdit.getProperty(OPTION_PREFIX"projectpath","Enter project path here"))
   	projectpath.setText(File(adir).getName)
   	projectpath.selectAll
	projectpackage=JTextField(jEdit.getProperty(OPTION_PREFIX"projectpackage","Enter project package here"))
	sd=buildprops["src.dir"]
	projectpackage.setText(sd.substr(sd.pos('/')+1).changestr('/','.'))
   	projectpackage.selectAll
   	
   	display=[Object String("Android SDK location:"),sdk, -
   					String("NetRexx runtime location:"),rtl, -
   					String("NetRexxC compiler location:"),nrc, -
   					String("Base directory for projects:"),base, -
   					String("Target Platform:"), tbox, -
   					String("Project Name:"), projectname, -
   					String("Project Path:"), projectpath, -
   					String("Project Package:"), projectpackage -
   					]
 --								display new project panel and verify responses:
	fail="yes"   					
	loop while fail="yes"   					
						
		rt=JOptionPane.showConfirmDialog(view, display, "Update Android Project", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE)

		say "rt="rt
		if rt\=JOptionPane.OK_OPTION then return		-- 	done here
			
		say "sdk="sdk.getText
		say "rtl="rtl.getText
		say "nrc="nrc.getText
		say "basedir="base.getText
		say "tbox item="tbox.getSelectedItem
		say "projectname="projectname.getText
		say "projectpath="projectpath.getText
		
	sdk.setText(set_adk_location.check(sdk.getText))
	rtl.setText(set_nrx_run_time_location.check(rtl.getText))
	nrc.setText(set_NetRexxC_location.check(nrc.getText))
	base.setText(set_project_base_location.check(base.getText))
	
		fail="no"	
		
		pname=""
		if projectname.getText="Optional project name here" | projectname.getText="" then projectname.setText(pname)
		
		if projectpath.getText="Enter project path here" | projectpath.getText="" then do
			projectpath.setText(pname)
			Macros.error(view,"project path is required")
			fail="yes"
			iterate
			end
		
		if projectpackage.getText="Enter project package here" | projectpackage.getText="" then do
			Macros.error(view,"project package name is required")
			fail="yes"
			iterate
			end			
   		end
   		
-------------------------------  start update project now  ---------------------------   		

	tbi=Rexx(String tbox.getSelectedItem)	--		extract target platform id:
	parse tbi . tid .
	
	--										set current dir to Android SDK:	
	sdkesc=Rexx(sdk.getText).changestr("\\","\\\\")
	shell.cmd("cd" sdkesc)

	--									update base Android project files and directories:
	
		if nrpf.exists then say "delete file" adir||fs||"nrxbuild.properties   rc="nrpf.delete
		if nrpfo.exists then 	say "delete file" adir||fs||"build.properties   rc="nrpfo.delete			--		keep your bloody hands off android update!
	
	projpath=Rexx(base.getText||File.separator||projectpath.getText).changestr("\\","\\\\")
		
	sdkloc=jEdit.getProperty(OPTION_PREFIX"sdk","")
			if sdkloc="" then android="android"
				else android=sdkloc||fs"tools"fs"android"			

   	cpc=android "update project" -
   		"--target" tid	-
   		"--name"  projectname.getText	-
   		"--path"  projpath

   		say "cmd="cpc
   		
   		shell.cmd(cpc)

--										init some directory names:
   	pp1=Rexx(projpath)
   	pack=Rexx(projectpackage.getText)
   	pp2=pack.changestr(".",'/')
 	say "pp1="pp1
   	say "pp2="pp2
   	say "pack="pack
   	psp=pp1||fs"src"fs||pp2
   	say "psp="psp
   	basedir=pp1
 
		--										copy NetRexxR.jar run time lib to project		
   	rtld=pp1||fs"libs"
   	if File.pathSeparator=";" then rtlcc="copy" rtl.getText rtld
   											else  rtlcc="cp" rtl.getText rtld
   	rtlcc=rtlcc.changestr("\\","\\\\")
   	say "rtlcc="rtlcc
   	shell.cmd(rtlcc)
   	
--										copy custom_rules.xml to project dir:	
   	orf=pp1||fs"netrexx-build.xml"					--	an old build file?
   	porf=File(orf)
   	if porf.exists then porf.delete			--	kill it
   	prod=pp1||fs||"custom_rules.xml"			--		new build file
   	say "prod="prod
   	pf=File(prod)
   	if pf.exists then pf.delete
   	build=File(scriptPath).getParent||fs"custom_rules.xml"
   	say "build="build
   	copy(build,prod)

		--									add parms to nrxbuild.properties:
   	props=String
   	pd=pp1
   	say "pd="pd
   	pof=pd||fs"nrxbuild.properties"
--	parse tbi .	"Name: Android" pn .
--  for some reason Google has changed the platform directory names - check both
	parse tbi .	"Name: Android" pn . "API level:" apilevel .
	trydir="android-"pn
	checkfile=File(sdk.getText||fs'platforms'fs||trydir)
	say checkfile
	if checkfile.exists then platform=pn
		else do
			trydir="android-"apilevel
			checkfile=File(sdk.getText||fs'platforms'fs||trydir)
			say checkfile
			if checkfile.exists then platform=apilevel
		     end
   	props="ant.project.name="projectname.getText"\n" -
   	||"src.version=0.2.0\n" -
   	||"android.sdk.dir="Rexx(sdkloc).changestr("\\","/")"\n" -
   	||"src.dir=src/"pp2"\n" -
   	||"pack.dir="pp2"\n" -
   	||"nrc.dir="Rexx(nrc.getText).changestr("\\","/")"\n" -
   	||"platform=android-"platform"\n" -
   	||"build.path="Rexx(File(scriptPath).getParent).changestr("\\","/")"\n"
   	say "props=\n"props
   	
   	buildfile(props,pof)
   	jEdit.setProperty(OPTION_PREFIX"lastproject",pd)	--	save location of last project
	
----------------------------------- start of subroutine methods ----------------------------------

	method copy(input=String,output=String) static
		do
			scriptreader=BufferedReader(FileReader(input))
			filecopy(scriptreader,output)
			catch err=Exception
				say "error ==>" err
			end			
			
	method filecopy(scriptreader=BufferedReader,output=String) static
		do
			of=File(output)
			say "mkdir rc="of.getParentFile.mkdirs		--		make any needed directories
			tofw=BufferedWriter(FileWriter(output,0))	--		open new file with append
			copyfile(scriptreader,tofw)					--		copy the input file to output file
			tofw.close
			scriptreader.close
			catch err=Exception
				say "error ==>" err
			end
			
	method buildfile(script=String,tf=String) static
		do
			scriptreader=BufferedReader(StringReader(script))
			filecopy(scriptreader,tf)
			end

	method copyfile(ifq=java.io.BufferedReader,ofq=java.io.BufferedWriter) static signals IOException
		trace off
		line=ifq.readLine
		if line = null then return
		ofq.write(String line,0,line.length)
	  loop forever
		line=ifq.readLine
		if line = null then leave
		ofq.newLine()
		ofq.write(String line,0,line.length)
		end		   	

	method getProps(propname=String) static returns Rexx signals IOException, FileNotFoundException
		props=Rexx(propname)
		if \File(propname).exists then return props
		br=BufferedReader(InputStreamReader(FileInputStream(propname)))
		loop forever
			nextline=br.readLine
			if nextline=null then do;br.close;return props;end
			nl=Rexx(nextline)
			if nl.left(1)="#" then iterate
			if nl.verify(' ')=0 then iterate
			parse nl name '=' value
			props[name]=value
			end
		
   	method getTargets(sdk=String) static returns Rexx		--	This method runs a shell command that puts output in a jEdit buffer
   									--	Then it reads and analyzes the data from the jEdit buffer
   		view=jEdit.getActiveView
   		
	OPTION_PREFIX = String "options.android."
	fs=File.separator
	sdkloc=jEdit.getProperty(OPTION_PREFIX"sdk","")
			if sdkloc="" then android="android"
				else android=sdkloc||fs"tools"fs"android"
		   		
			buffer=shell.tobuffer(android "list targets",'wait noconsole')
--			buffer=shell.tobuffer("android list targets")
   		if buffer=null then do ;Macros.error(view,"could not obtain target list"); exit; end
--   		shell.tobuffer("android list targets")
--   		buffer=view.getBuffer
   		lc=buffer.getLineCount;say "lc="lc
   		
   		loop while lc<8
   			loop i=1 to 999;end	--	wait a while for buffer to finish setup
   			lc=buffer.getLineCount;say "lc="lc
   			end
   				
   		targetlist=""
   		tlc=0
   		
   		loop i=0 to buffer.getLineCount-1
   			s=Rexx(buffer.getLineText(i))
   			parse s p1 .
   			if p1="Available" then iterate
   			if p1="Type:" then iterate
   			if p1="ABIs" then iterate
   			if p1="Vendor:" then iterate
--   			if p1="API" then iterate
   			if p1="----------" then iterate
   			if p1="Description:" then iterate
   			if p1="Libraries:" then iterate
   			if p1="*" then iterate
   			if p1="Skins:" then iterate
   			if p1="id:" then do
				tlc=tlc+1
				targetlist[tlc]="" 
				end
   			targetlist[tlc]=targetlist[tlc] s.strip
   			say s.toString
   			end
  			
   		jEdit._closeBuffer(view,buffer)
   		targetlist["tlc"]=tlc	
   		return targetlist
