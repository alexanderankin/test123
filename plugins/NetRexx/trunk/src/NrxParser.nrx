
/*
 * NrxParser.java - NetRexx Parser for SideKick implementation
 * Copyright (C) 2000 Satguru Srivastava
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * Modificado regex para que trate corectamente oneline comments y hotchars
 * cadenas en literales
 *
 * C:\home\drequena\downloads
 * >java -cp . regexdemo.AppRegexDemo
 * 
 */
 
/**
 * Implements a simple NetRexx Parser which can be used by the SideKick Plugin
 */
 
options binary strictsignal strictcase

import java.util
import javax.swing
import javax.swing.tree
import javax.swing.text

import sidekick
import errorlist
import org.gjt.sp.jedit
import org.gjt.sp.jedit.msg
import org.gjt.sp.jedit.search
import org.gjt.sp.jedit.textarea

package netrexxplugin

class NrxParser extends SideKickParser implements EBComponent
	
	properties inheritable
		sortEntries = boolean
		sortCaseSensitive = boolean
		nodeComparator = AssetComparator
		
	properties public constant
		TRUE = 1
		FALSE = 0
		NRE_PAYLOAD_GROUP = 3
		NRE_STMT_TYPE_GROUP = 6
		NRE_COMMENT_MATCH_GROUP = 11
		REGEX_EXPRESSION = "((^|;)\\s*((((class|method|properties)\\s+)|(([\\w_]*)\\s*=))([^;\\n]*))(;|\\n))|(/\\*|\\*/)"
		SB_GROUP_FULL = 0
		SB_GROUP_CLASSIC = 1
		SB_GROUP_IDENT_CONSTRUCTORS = 2
		SB_GROUP_CONSTRUCTORS = 4
		SB_GROUP_METHODS = 8
		SB_GROUP_SHARED = 16
		SB_GROUP_NESTED = 32
		NODE_TYPE_METHODS = 0
		NODE_TYPE_CONSTRUCTORS= 1
		NODE_TYPE_SHARED = 2
		NODE_TYPE_NESTED_CONSTRUCTORS = 4


	properties static
		pattern = Pattern
		stdMatcher = Matcher

	properties private
		ConstructorsNode=DefaultMutableTreeNode null
		MethodsNode=DefaultMutableTreeNode null
		SharedNode=DefaultMutableTreeNode null
		NestedConstructorsNode=DefaultMutableTreeNode null
		sbGroupOption = int
		doIdentifyConstructors = boolean
		reinitOnParse = boolean FALSE

	method NrxParser();
		super("nrxParser") -- jEdit shall know this parser as "nrxParser"
		initParsingParameters()
		EditBus.addToBus(EBComponent this)
		
	method parse(CurrentBuffer=Buffer, errorSource=DefaultErrorSource) returns SideKickParsedData
		if reinitOnParse then do
			initParsingParameters()
			reinitOnParse = FALSE
			end
		matches = Vector
		matches = parseSrcCode(CurrentBuffer)
		return createSideKickParsedData(matches, CurrentBuffer)

	method parseSrcCode(CurrentBuffer=Buffer) private returns Vector
		
		vMatches = Vector()

		parseText = CurrentBuffer.getText(0,CurrentBuffer.getLength())
		pattern = Pattern.compile(NrxParser.REGEX_EXPRESSION, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
		stdMatcher = pattern.matcher(parseText)
		
		relevantGrp = int
		loop while stdMatcher.find()
			select
				when null \= stdMatcher.group(NrxParser.NRE_COMMENT_MATCH_GROUP)
					then relevantGrp = NrxParser.NRE_COMMENT_MATCH_GROUP
				otherwise relevantGrp = NrxParser.NRE_PAYLOAD_GROUP
			end
			
			match = Rexx stdMatcher.group(relevantGrp)
			match["type"] = stdMatcher.group(NrxParser.NRE_STMT_TYPE_GROUP)
			match["startindex"] = stdMatcher.start(relevantGrp)
			match["endindex"] = stdMatcher.end(relevantGrp)
			vMatches.addElement( match )
		end
	return vMatches
		
	method createSideKickParsedData(matches=Vector, CurrentBuffer=Buffer) private returns SideKickParsedData
		
		StmtPos=int
		StmtType=String
		StmtValue=String
		ClassLevel=int 0
		PrevClassLevel=int 0

		i=int
		inCommentBlk = boolean 0
		inMethod = boolean 0
		inClass = boolean 0
		isConstructor = boolean 0

		TopNode=DefaultMutableTreeNode null
		ParentNode=DefaultMutableTreeNode null
		PropNode=DefaultMutableTreeNode null
		ConstructorsNode = null
		MethodsNode = null
		SharedNode = null
		NestedConstructorsNode = null
		

		SKParsedData = SideKickParsedData(CurrentBuffer.getName())
		TopNode = SKParsedData.root		
		ParentNode = TopNode
		currentMatch = Rexx

		loop  i = 0 to matches.size()-1
			
			currentMatch = Rexx matches.elementAt(i)
			
			if currentMatch = "/*" then
				do
					inCommentBlk=1
					iterate
				end
				
			if currentMatch = "*/" then
				do
					inCommentBlk=0
					iterate
				end
			
			if inCommentBlk then iterate

			StmtType = currentMatch["type"]
			select 
				when StmtType.equalsIgnoreCase("class") then
				do
					parse currentMatch["matchtext"] . ClassName .
					lastdot = ClassName.lastpos(".") + 1
					parse ClassName =(lastdot) shortClassName
					-- check if this is minor class
					PrevClassLevel=ClassLevel
					ClassLevel=ClassName.countstr('.')
					if ClassLevel > 0 then StmtType="MinorClass"
					else StmtType="CLASS"
					inClass = 1
					inMethod = 0
				end
				when StmtType.equalsIgnoreCase("method") then
				do
					StmtType="METHOD"
					parse currentMatch["matchtext"] . methodName "(" tail
					if doIdentifyConstructors & inClass then
						if (methodName = ClassName | methodName = shortClassName) then do
							currentMatch["matchtext"] = "constructor" methodName"("tail
							isConstructor = TRUE
							end
					else isConstructor = FALSE
					inMethod = 1
				end
				when StmtType.equalsIgnoreCase("properties") then
				do
					StmtType="PROPERTY"
				end
				otherwise
				     StmtType="DPROPERTY"
			end

			if ((\ inClass) & (StmtType=="PROPERTY" | StmtType=="DPROPERTY")) then iterate
			if (inMethod & (StmtType=="PROPERTY" | StmtType=="DPROPERTY")) then iterate

			StmtValue = currentMatch["matchtext"]
			StmtPos = currentMatch["startindex"]

			aNrxAsset=NrxAsset(StmtPos,StmtValue,CurrentBuffer)
			select 
				when StmtType=="CLASS" then
				do
					ParentNode=DefaultMutableTreeNode(aNrxAsset)
					TopNode.add(ParentNode)
					PropNode=null
					ConstructorsNode = null
					MethodsNode = null
					ConstructorsNode = null
					SharedNode = null
					NestedConstructorsNode = null
				end
				-- minor class
				when StmtType=="MinorClass" then
				do
					MinorClassNode=DefaultMutableTreeNode(aNrxAsset)
					select 
						when (ClassLevel == PrevClassLevel) then
							(DefaultMutableTreeNode ParentNode.getParent()).add(MinorClassNode)
						when (ClassLevel > PrevClassLevel) then ParentNode.add(MinorClassNode)
						otherwise
							(DefaultMutableTreeNode ParentNode.getParent().getParent()).add(MinorClassNode)
					end
					ParentNode=MinorClassNode
					PropNode=null
					ConstructorsNode = null
					MethodsNode = null
					ConstructorsNode = null
					SharedNode = null
					NestedConstructorsNode = null
				end		
				-- method						
				when StmtType == "METHOD" then
					processMethodDefinition(ParentNode, aNrxAsset,-
						isConstructor, StmtPos, CurrentBuffer)
					
				-- explicit properties definition
				when StmtType == "PROPERTY" then
				do
					PropNode = DefaultMutableTreeNode(aNrxAsset)
					ParentNode.add(PropNode)
				end
				-- implicit properties
				when StmtType == "DPROPERTY" then
				do
					if PropNode == null then
					do
						aDPropAsset = NrxAsset(StmtPos,"Properties",CurrentBuffer)
						PropNode=DefaultMutableTreeNode(aDPropAsset)
						ParentNode.add(PropNode)
						
					end
					PropNode.add(DefaultMutableTreeNode(aNrxAsset))
				end
				otherwise
					nop
			end
		end

		TopNodeEnd=CurrentBuffer.createPosition(CurrentBuffer.getLength())
		setChildNodesAssetEnd(TopNode, TopNodeEnd,CurrentBuffer)

	return SKParsedData
	
	/**
	 * This method sets the 'end' property of the 'asset' object of each and every node
	 * under the node passed to it as a parameter 		
	 * It calls itself recursively untill all the nodes (child, granchild, greatgrandchild etc)
	 * are covered
	 */
	method setChildNodesAssetEnd(aTreeNode=DefaultMutableTreeNode,aTreeNodeEnd=Position,CurrentBuffer=Buffer)

		n = int aTreeNode.getChildCount()
		if n=0 then return 
		prevChildNode = DefaultMutableTreeNode aTreeNode.getChildAt(0)
		prevAsset =  NrxAsset prevChildNode.getUserObject()

		loop i = 1 to n-1
			ChildNode = DefaultMutableTreeNode aTreeNode.getChildAt(i)
			nodeAsset = NrxAsset ChildNode.getUserObject()

			prevLineNum=CurrentBuffer.getLineOfOffset(nodeAsset.SP)-1
			prevLineOffset=CurrentBuffer.getLineEndOffset(prevLineNum)-1
			prevAsset.setEnd(CurrentBuffer.createPosition(prevLineOffset))
			setChildNodesAssetEnd(prevChildNode, prevAsset.getEnd(),CurrentBuffer)

			prevChildNode = ChildNode
			prevAsset = nodeAsset
			end
		
		prevAsset.setEnd(aTreeNodeEnd)
		setChildNodesAssetEnd(prevChildNode, prevAsset.getEnd(),CurrentBuffer)
		if sortEntries then sortChildren(aTreeNode, nodeComparator)
	return
	
	method sortChildren(node = DefaultMutableTreeNode, comparator = Comparator) static
	if node.getChildCount() = 0 then
		return

	childCount = node.getChildCount()
	list = ArrayList(childCount)
	loop while node.getChildCount() > 0
		n = DefaultMutableTreeNode node.getChildAt(0)
		n.removeFromParent();
		list.add(n)
		end

	Collections.sort(list, comparator)
	
	iter = list.iterator()
	loop while iter.hasNext()
		n = DefaultMutableTreeNode iter.next()
		node.add( n )
		end
		
	method initParsingParameters()

		sbGroupOption = jEdit.getIntegerProperty( -
			"plugin.netrexxde.parsing.sbgrouping")
		if sbGroupOption = 1 then
			doIdentifyConstructors = FALSE
		else
			doIdentifyConstructors = TRUE
				
		sortEntries = jEdit.getBooleanProperty( -
			"plugin.netrexxde.parsing.sortentries")
		sortCaseSensitive = jEdit.getBooleanProperty( -
			"plugin.netrexxde.parsing.sortentries.casesensitive")
		nodeComparator = AssetComparator(sortCaseSensitive)

			
	method processMethodDefinition(-
		parentNode=DefaultMutableTreeNode, aNrxAsset=NrxAsset,-
		asConstructor=boolean, StmtPos=int, currentBuffer=Buffer)
		efectiveNode = DefaultMutableTreeNode
		
		select
			when sbGroupOption = SB_GROUP_FULL then do
				if asConstructor then
					efectiveNode = getInsertionNode( -
						NODE_TYPE_CONSTRUCTORS, parentNode, -
						StmtPos, currentBuffer)
				else
					efectiveNode = getInsertionNode( -
						NODE_TYPE_METHODS, parentNode, -
						StmtPos, currentBuffer)
				end

			when sbGroupOption = SB_GROUP_CONSTRUCTORS then do
				if asConstructor then
					efectiveNode = getInsertionNode( -
						NODE_TYPE_CONSTRUCTORS, parentNode, -
						StmtPos, currentBuffer)
				else
					efectiveNode = parentNode
				end
				
			when sbGroupOption = SB_GROUP_METHODS then do
				if asConstructor then
					efectiveNode = parentNode
				else
					efectiveNode = getInsertionNode( -
						NODE_TYPE_METHODS, parentNode, -
						StmtPos, currentBuffer)
				end
				
			when sbGroupOption = SB_GROUP_SHARED then do
				efectiveNode = getInsertionNode( -
					NODE_TYPE_SHARED, parentNode, -
					StmtPos, currentBuffer)
				end
				
			when sbGroupOption = SB_GROUP_NESTED then do
				if asConstructor then
					efectiveNode = getInsertionNode( -
						NODE_TYPE_NESTED_CONSTRUCTORS, -
						parentNode, -
						StmtPos, currentBuffer)
				else
					efectiveNode = getInsertionNode( -
						NODE_TYPE_METHODS, parentNode, -
						StmtPos, currentBuffer)
				end
				
			otherwise
				efectiveNode = parentNode
			end

		efectiveNode.add(DefaultMutableTreeNode(aNrxAsset))
			
	method getInsertionNode(nodeType=int, parentNode=DefaultMutableTreeNode,-
		StmtPos=int, currentBuffer=Buffer) -
		returns DefaultMutableTreeNode

		select
			when nodeType = NODE_TYPE_METHODS then do
				if MethodsNode == null then do
					aMethodsAsset = NrxAsset(StmtPos,"methods",currentBuffer)
					MethodsNode = DefaultMutableTreeNode(aMethodsAsset)
					parentNode.add(MethodsNode)
					end
				return MethodsNode
				end
				
			when nodeType = NODE_TYPE_CONSTRUCTORS then do
				if ConstructorsNode == null then do
					aMethodsAsset = NrxAsset(StmtPos,"constructors",currentBuffer)
					ConstructorsNode = DefaultMutableTreeNode(aMethodsAsset)
					parentNode.add(ConstructorsNode)
					end
				return ConstructorsNode
				end
				
			when nodeType = NODE_TYPE_SHARED then do
				if SharedNode == null then do
					aMethodsAsset = NrxAsset(StmtPos,"methods",currentBuffer)
					SharedNode = DefaultMutableTreeNode(aMethodsAsset)
					parentNode.add(SharedNode)
					end
				return SharedNode
				end
				
			when nodeType = NODE_TYPE_NESTED_CONSTRUCTORS then do
				if NestedConstructorsNode = null then do
					parentNode = getInsertionNode(NODE_TYPE_METHODS,-
						parentNode, StmtPos, currentBuffer)
					aMethodsAsset = NrxAsset(StmtPos,"constructors",currentBuffer)
					NestedConstructorsNode = DefaultMutableTreeNode(aMethodsAsset)
					parentNode.add(NestedConstructorsNode)
					end
					return NestedConstructorsNode
				end
			end
			
	method handleMessage(message=EBMessage) 
		if (message <= PropertiesChanged) then do
			initParsingParameters()
			end
		else if (message <= PropertiesChanging) then do
			reinitOnParse = TRUE
			end


class NrxParser.NrxAsset extends Asset
	
	properties public
		SP = int

	Method NrxAsset(StartOffset=int,SV=String,CurrentBuffer=Buffer)
		super(SV)
		this.SP = StartOffset
		this.start = CurrentBuffer.createPosition(StartOffset)
		this.end = this.start
	return

	Method toString() returns String
	return this.name
		
	-- implement Asset's abstract methods
		
	Method getIcon() returns Icon
	return null
	
	Method getShortString() returns String
	return this.name
		
	Method getLongString() returns String
	return this.name

class NrxParser.AssetComparator implements java.util.Comparator
	
	properties private
		caseSensitive = boolean
		
	method AssetComparator(beCaseSensitive=boolean)
		caseSensitive = beCaseSensitive
		
	method compare(assetA=Object, assetB=Object) returns int
		
		usrObjA = NrxParser.NrxAsset (DefaultMutableTreeNode assetA).getUserObject()
		usrObjB = NrxParser.NrxAsset (DefaultMutableTreeNode assetB).getUserObject()
		
		-- want always properties at top, then constructors, then methods
		-- and finally minor classes at bottom
		nameA = Rexx usrObjA.toString()
		parse nameA prefixA .
		select
			when prefixA = "PROPERTIES " then
				nameA = "AAAAA" nameA
			when prefixA = "CONSTRUCTOR " then
				nameA = "KKKKK" nameA
			when prefixA = "CLASS " then
				nameA = "ZZZZZ" nameA
			otherwise
				nameA = "OOOOO" nameA
			end
			
		nameB = Rexx usrObjB.toString()
		parse nameB prefixB .
		select
			when prefixB = "PROPERTIES " then
				nameB = "AAAAA" nameB
			when prefixB = "CONSTRUCTOR " then
				nameB = "KKKKK" nameB
			when prefixB = "CLASS " then
				nameB = "ZZZZZ" nameB
			otherwise
				nameB = "OOOOO" nameB
			end
		
		if caseSensitive then do
			return (String nameA).compareTo(String nameB)
			end
		else do
			return (String nameA).compareToIgnoreCase(String nameB)
			end

