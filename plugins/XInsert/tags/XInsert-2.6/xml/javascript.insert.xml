<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 javascript.xinsert.xml
 Copyright (c) 2006 by Martin Raspe (hertzhaft@biblhertz.it)
 Bibliotheca Hertziana (Max Planck Institute for Art History), Rome, Italy
 $Id$
-->

<!--
 License: German Free Software License (D-FSL)
 (see http://www.d-fsl.org)

 This license conforms to the GNU General Public License and is 
 adapted to the particular requirements of German and European law. 
 It was inspired by the 'Berlin Declaration on Open Access to 
 Knowledge in the Sciences and Humanities' which was signed by the 
 'Max Planck Society for the Advancement of Science'.
-->

<menu name="JavaScript">

<menu name="Statements">

<item name="break">break
</item>

<item name="continue">continue
</item>

<item name="return">return;
</item>

<item name="var">var | = ;
</item>

<item name="with">
	with (|) {
		}
</item>

</menu>

<!-- ############# -->

<menu name="Common objects">

<item name="Array"> = new Array()</item>

<item name="Date">= new Date()</item>

<item name="document">document</item>

<item name="history">history</item>

<item name="Math">Math.</item>

<item name="window">window</item>

</menu>

<!-- ############# -->

<menu name="Conditions">

<item name="if (short)">
	if (|)
		;
</item>

<item name="if (brackets)">
	if (|) {
		}
</item>

<item name="else if (short)">
	else if (|)
		;
</item>

<item name="else if (brackets)">
	else if (|) {
		}
</item>

<item name="else (short)">
	else
		|;</item>

<item name="else (brackets)">
	else {
		|
		};
</item>
<item name="switch">
	switch () {
		case |:
			break;
		default:
			break;
		}
</item>

</menu>

<!-- ############# -->

<menu name="Loops">

<item name="for (infinite)">
	for (;;) {
		|
		}
</item>

<item name="for (var i)">
	for (var i = 0; i&lt;|; i++) {
		}
</item>

<item name="while">
	while (|) {
		}
</item>

<item name="do ... while">
	do {
		|
		} while ();
</item>

</menu>

<!-- ############# -->

<menu name="HTML Links">

<item name="void(0)">
	&lt;a href=javascript:void(0) onClick="|"&gt;
</item>

<item name="back">
	&lt;a href=javascript:history.go(-1)&gt;
</item>

<item name="forward">
	&lt;a href=javascript:history.go(+1)&gt;
</item>

</menu>

<!-- ############# -->

<menu name="Misc">

<item name="write">document.write("|")</item>

<item name="writeln">document.writeln("|")</item>

<item name="Function">function |()\n{\n\t\n}</item>

<item name="alert">alert("|")</item>

<item name="confirm">if(confirm("|")){\n\t\n}</item>

<item name="prompt"> = prompt("|",)</item>

<item name="userAgent">navigator.userAgent</item>

<item name="appName">navigator.appName</item>

<item name="appVersion">navigator.appVersion</item>

<item name="function">
function |(args) {
	var i = 0;
	return;
	}

</item>

</menu>

<!-- ############# -->

<menu name="Snippets">

<item name="No frames">
&lt;script language="javascript"&gt;
	&lt;!-- // Load me in a new window if caught in a frame
	if (self != top)
		top.location.href = self.location.href;
	// --&gt;
&lt;/script&gt;
</item>

<item name="Screen Resolution">
&lt;script language="javascript"&gt;
	&lt;!-- // Save screen width in x_res and screen height in y_res
	var x_res = screen.width;
	var y_res = screen.height;
	// --&gt;
&lt;/script&gt;
</item>

<item name="Image Preload" type="xinsert_script">
	{%img "Enter image id:"}
	var {$=img}_on = new Image();
	{$=img}_on.src = "{$=img}_on.png";
	var {$=img}_off = new Image();
	{$=img}_off.src = "{$=img}_off.png";
</item>

<item name="Image Rollover">
// register these functions as mouseover/mouseout handlers for the images
function onMouseOver(evt){
	img_file = this.id + '_on.png';
	this.setAttribute('src', img_file);
	}

function onMouseOut(evt){
	img_file = this.id + '_off.png';
	this.setAttribute('src', img_file);
	}
</item>

<item name="window.open (min)">
	window.open("|","");
</item>

<item name="window.open (max)">
window.open("|","","height=,width=,screenX=,screenY=,resizeable,scrollbars,dependent,hotkeys,location,menubar,toolbar,status,directories");
</item>

<item name="Statusbar messagee">
function statusbar_message(content) {
	status = content;
	return true;
	}
</item>

</menu>

<!-- ############# -->

<menu name="Advanced">

<item name="constructor">
Class = function(arg) {
	this.arg = arg;
	return this;
	}
</item>

<item name="method">
Class.method = function(args) {
	}
</item>

<item name="method prototype">
Class.prototype.method = function(args) {
	}
</item>

<item name="getElement">
function getElement(tagid, quiet) {
    // returns the element object with the id tagid
    var e;
    if (document.getElementById) {
        e = document.getElementById(tagid);
    } else if (document.all) {
        alert("document.all!");
        e = document.all[tagid];
    } else if (document.layers) {
        e = document.layers[tagid];
    } 
    if (e) {
        return e;
    } else {
        if (! quiet) {
            alert("unable to find element: "+tagid);
        }
        return null;
    }
}
</item>

<item name="registerEvents">
function registerEvent(type, elem, handler) {
    // register the given event handler on the indicated element
    if (elem.addEventListener) {
        elem.addEventListener(type, handler, false);    // bubble
        }
    else if (elem.attachEvent) {
        elem.attachEvent("on" + type, handler);
        }
    else if (elem.captureEvents) {
        if (Event) { 
            t = type.toUpperCase();
            elem.captureEvents(Event[t]);
            elem[ "on" + type ] = handler;
            }
        }
    else {
        alert("Could not register event of type " + type);
        return false;
        }
    return true;
    }
</item>

<item name="unregisterEvent">
function unregisterEvent(type, elem, handler) {
    // unregister the given event handler from the indicated element
    if (elem.removeEventListener) {
        elem.removeEventListener(type, handler, false);
            }
    else if (elem.detachEvent) {
        elem.detachEvent("on" + type, handler);
        }
    else if (elem.releaseEvents) {
        if (Event) { 
            t = type.toUpperCase();
            elem.releaseEvents(Event[t]);
            elem[ "on" + type ] = null;
            }
        }
    else {
        alert("Could not unregister event of type " + type);
        return false;
        }
    return true;
}
</item>

<item name="stopEvent">
function stopEvent(e) {
    if (!e)
		var e = window.event;
    if (e.stopPropagation)
		e.stopPropagation();
    e.cancelBubble = true;
    return false;
}
</item>

<item name="getEventSource">
function getEventSource(e) {
    if (e.target)
		return e.target;
    if (e.srcElement)
		return e.srcElement;
}
</item>

<item name="onWindowLoad">
// initialize everything here
function init() {
	}

// onload registration for window
registerEvent("load", window, init);
</item>

<item name="register object method as event handler">
function registerHandler(event, element, obj, methodname) {
    // make a closure
	var handler = function(evt) {
        return obj[methodname](evt, this)
			// the method should be able to process two parameters
			// "evt" is the event object,
			// "this" is the HTML element on which the event was registered
        };
    return registerEvent(event, element, handler);
	}
</item>

</menu>
</menu>

