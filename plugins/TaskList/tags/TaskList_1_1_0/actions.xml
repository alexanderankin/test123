<!DOCTYPE ACTIONS SYSTEM "actions.dtd">
<!-- user action description file for TaskList plugin
$Id$
-->

<ACTIONS>
	<ACTION NAME="tasklist.parse-buffer">
		<CODE>
			tasklist.TaskListPlugin.parseBuffer(buffer);
		</CODE>
	</ACTION>
	<ACTION NAME="tasklist.reset-patterns">
		<CODE>
			tasklist.TaskListPlugin.resetPatterns(view);
		</CODE>
	</ACTION>
	<ACTION NAME="tasklist.parse-project">
		<CODE>
		<![CDATA[
            /**
             * A macro to show all of the tasks that the TaskList plugin would show
             * if the TaskList plugin had any concept of ProjectViewer.  This macro
             * gets the list of files from ProjectViewer for the current project,
             * passes each of them to TaskList to find the tasks for each file, and
             * combines them all into a single tree display.  This puts all the tasks
             * for the entire project in a single display.
             *
             * @author Dale Anson, 3 Nov 2008
             */
            
            import projectviewer.*;
            import projectviewer.vpt.*;
            import tasklist.*;
            import javax.swing.tree.*;
            
            void projectTaskList() {
                // make sure that ProjectViewer is present
                EditPlugin pv = jEdit.getPlugin( "projectviewer.ProjectPlugin", false );
                if ( pv == null ) {
                    return ;
                }
            
                // make sure that TaskList is present
                EditPlugin tl = jEdit.getPlugin( "tasklist.TaskListPlugin", false );
                if ( tl == null ) {
                    return ;
                }
                
                // The larger the project, the longer this takes, so I put in a thread to
                // not bother the gui
                SwingUtilities.invokeLater( new Thread() {
                            public void run() {
                                // get the openable nodes of the project
                                VPTProject project = ProjectViewer.getActiveProject( jEdit.getActiveView() );
                                String path = project.getRootPath();
                                Collection nodes = project.getOpenableNodes();
                                
                                // results go here
                                DefaultMutableTreeNode root = new DefaultMutableTreeNode( project.getName() );
                                
                                // check each openable node for tasks
                                Iterator it = nodes.iterator();
                                for ( Iterator it = nodes.iterator(); it.hasNext(); ) {
                                    VPTNode node = ( VPTNode ) it.next();
                                    
                                    // I'm only handling file nodes, which probably covers
                                    // better than 99.9% of the nodes in ProjectViewer
                                    if ( node.isFile() ) {
                                        VPTFile file_node = ( VPTFile ) node;
                                        if (file_node.getFile() == null) {
                                            continue;   
                                        }
                                        File file = new File( file_node.getFile().getPath() );
            
                                        // added this check for binary files just to speed things up.
                                        // Initially, I'm just checking filename extension for standard
                                        // image filename extensions, plus .class and .jar files.  There
                                        // could be others.
                                        if ( isBinary( file ) ) {
                                            continue;
                                        }
            
                                        // the buffer could already be open in jEdit.  If so, don't
                                        // close it below.
                                        Buffer buffer = jEdit.getBuffer( file.getAbsolutePath() );
                                        boolean can_close = false;
                                        if ( buffer == null ) {
                                            // file is not open, so open it.  Note that the mode must be
                                            // set explicitly since openTemporary won't actually set the mode
                                            // and TaskList will fail if the mode is missing.  openTemporary
                                            // is preferred over openFile since openTemporary won't send EditBus
                                            // messages nor is the buffer added to the buffer list.
                                            buffer = jEdit.openTemporary( jEdit.getActiveView(), file.getParent(), file.getName(), false );
                                            buffer.setMode(findMode(file));
                                            
                                            // files open this way can be closed when TaskList parsing is complete.
                                            can_close = true;
                                        }
                                        try {
                                            // pass the buffer to TaskList for parsing, add tree nodes for each buffer
                                            // and child nodes for each task found.  Use "parseBuffer" rather than
                                            // "extractTasks" since extractTasks just calls parseBuffer in a swing
                                            // thread, and I'm already in a swing thread.  Also, parseBuffer will
                                            // only parse buffers of the modes allowed by the TaskList mode configuration.
                                            HashMap tasks = TaskListPlugin.requestTasksForBuffer( buffer );
                                            if (tasks == null || tasks.isEmpty()) {
                                                TaskListPlugin.parseBuffer( buffer );
                                                tasks = TaskListPlugin.requestTasksForBuffer( buffer );
                                            }
                                            
                                            if ( tasks != null && tasks.size() > 0 ) {
                                                // tasks were found for this buffer, so create the tree node for the buffer itself,
                                                // then add tree nodes for the individual tasks.
                                                // TODO: TaskList has some display options that need to be supported here
                                                DefaultMutableTreeNode buffer_node = new DefaultMutableTreeNode( file.getName() + "(" + file.getParent() + ")" );
                                                root.add( buffer_node );
                                                
                                                // the "tasks" hashtable has the line number as the key, so putting
                                                // "tasks" into a TreeMap sorts by line number
                                                // TODO: TaskList has other sort options than line number, those need to be
                                                // supported here.
                                                TreeMap sorted_tasks = new TreeMap(tasks);
                                                
                                                
                                                for ( Iterator tli = sorted_tasks.values().iterator(); tli.hasNext(); ) {
                                                    Task task = ( Task ) tli.next();
                                                    DefaultMutableTreeNode task_node = new DefaultMutableTreeNode( task );
                                                    buffer_node.add( task_node );
                                                }
                                            }
                                        }
                                        catch ( Exception e ) {
                                            // ignore any exception, there really isn't anything to do about
                                            // it.  The most likely cause is the buffer didn't get loaded by
                                            // jEdit before TaskList tried to parse it.
                                        }
            
                                        // TODO: I sent email to the dev list asking about the proper way to
                                        // close a temporary buffer. For now all I'm doing to close the buffer 
                                        // if it wasn't already open is set it to null.  If can_close is true,
                                        // then the buffer was opened with openTemporary, so just set it to null
                                        // and let the garbage collector handle it.  Calling any of the jEdit
                                        // 'close buffer' methods with a temporary buffer confuses the internal
                                        // jEdit buffer lists, which causes lots of problems, plus the 'close
                                        // buffer' methods all send EditBus messages, which I want to avoid.
                                        if ( can_close ) {
                                            buffer == null;
                                        }
                                    }
                                }
            
                                // build the display
                                if ( root.getChildCount() > 0 ) {
                                    JTree tree = new JTree( root );
                                    for ( int i = tree.getRowCount(); i > 0; i-- ) {
                                        tree.expandRow( i );
                                    }
                                    tree.addMouseListener( new TreeMouseListener( tree ) );
                                    tree.setCellRenderer( new TaskRenderer() );
                                    JFrame frame = new JFrame( "Tasks for " + project.getName() );
                                    frame.setContentPane( new JScrollPane( tree ) );
                                    frame.pack();
                                    frame.setSize( 600, 400 );
                                    frame.setVisible( true );
                                }
                                else {
                                    Macros.message( jEdit.getActiveView(), "No tasks found for project " + project.getName() );
                                }
                            }
                        }
                                          );
            }
            
            // Helper method to determine binary files.
            String[] exts = new String[] {".jpg", ".gif", ".png", ".ico", ".bmp", ".class", ".jar", ".war"};
            boolean isBinary( File file ) {
                String filename = file.getName().toLowerCase();
                for ( String ext : exts ) {
                    if ( filename.endsWith( ext ) ) {
                        return true;
                    }
                }
                return false;
            }
            
            // Helper method to find the mode for the given file.
            Mode findMode(File file) {
                try {
                    BufferedReader reader = new BufferedReader(new FileReader(file));
                    String firstLine = reader.readLine();
                    reader.close();
                    Mode[] modes = jEdit.getModes();
                    for (Mode mode : modes) {
                        if (mode.accept(file.getAbsolutePath(), firstLine)) {
                            return mode;   
                        }
                    }
                }
                catch (Exception e) {
                }
                return null;
            }
            
            // mouse listener for the tree so clicking on a tree node shows the corresponding
            // line in the edit pane
            class TreeMouseListener extends MouseAdapter {
                JTree tree = null;
                public TreeMouseListener( JTree tree ) {
                    this.tree = tree;
                }
                public void mouseReleased( MouseEvent me ) {
                    handleClick( me );
                }
            
                public void mousePressed( MouseEvent me ) {
                    handleClick( me );
                }
            
                private void handleClick( MouseEvent e ) {
                    if (e.getClickCount() == 2 || (e.getClickCount() == 1 && tasklist.TaskListPlugin.getAllowSingleClickSelection())) {
                        javax.swing.tree.TreePath path = tree.getClosestPathForLocation( e.getX(), e.getY() );
                        tasklist.Task task = null;
                        if ( path.getPathCount() > 2 ) {
                            task = ( tasklist.Task ) ( ( javax.swing.tree.DefaultMutableTreeNode ) path.getLastPathComponent() ).getUserObject();
                            Buffer buffer = task.getBuffer();
                            int line_number = task.getLineNumber();
                            int start_offset = task.getStartOffset();
                            jEdit.openFile( jEdit.getActiveView(), buffer.getPath() );
                            EditPane edit_pane = jEdit.getActiveView().showBuffer( buffer );
                            edit_pane.getTextArea().scrollTo( line_number, start_offset, true );
                            edit_pane.getTextArea().setCaretPosition( task.getStartPosition().getOffset() );
                        }
                    }
                }
            }
            
            // Custom cell renderer to be able to use the icons from TaskList plugin.
            class TaskRenderer extends javax.swing.tree.DefaultTreeCellRenderer {
                public Component getTreeCellRendererComponent(
                    JTree tree,
                    Object value,       // this will be a DefaultMutableTreeNode
                    boolean sel,
                    boolean expanded,
                    boolean leaf,
                    int row,
                    boolean hasFocus) {
            
                    super.getTreeCellRendererComponent(
                        tree, value, sel,
                        expanded, leaf, row,
                        hasFocus);
                    
                    // set the icon for the node
                    Object obj = ((javax.swing.tree.DefaultMutableTreeNode)value).getUserObject();
                    if (obj instanceof tasklist.Task) {
                        setIcon(((tasklist.Task)obj).getIcon());
                    }
                    else {
                        setIcon(null);
                    }
                    return this;
                }
            }
            
            projectTaskList();
        ]]>
        </CODE>
	</ACTION>
	
</ACTIONS>

