<?xml version="1.0"?>
<!-- jEdit buffer-local properties: -->
<!-- :tabSize=1:indentSize=1:noTabs=true:folding=sidekick: -->
<book>

<bookinfo><title>Project Builder</title>

<authorgroup>
 <author><firstname>Damien</firstname><surname>Radtke</surname></author>
 <author><firstname>Eric</firstname><surname>Berry</surname></author>
</authorgroup>
<!--
 <legalnotice><title>Legal Notice</title>
  <para>
   Permission is granted to copy, distribute and/or modify this document
   under the terms of the GNU Free Documentation License, Version 1.1 or
   any later version published by the Free Software Foundation; with no
   <quote>Invariant Sections</quote>, <quote>Front-Cover Texts</quote> or
   <quote>Back-Cover Texts</quote>, each as defined in the license. A copy of
   the license can be found in the file <filename>COPYING.DOC.txt</filename>
   included with jEdit.
  </para>
 </legalnotice>
-->
</bookinfo>

<chapter id="intro"><title>Introduction</title>
 <para>
  The ProjectBuilder plugin provides jEdit with project-creation tools similar
  to those of other IDE's. Project types (or natures) are defined through
  the use of a template system that makes it easy to create and share them.
  The plugin comes pre-packaged with two templates: Java Application and
  jEdit Plugin.
 </para>
 <para>
  ProjectBuilder ties in closely with ProjectViewer. New projects are imported
  into the plugin directly, and all of the tools provided by ProjectBuilder
  are accessible in the ProjectViewer window, through either the context
  menu or the properties dialog.
 </para>
</chapter>
<chapter id="creating-projects"><title>Creating Projects</title>
 <para>
  To create a project, go to <guimenu>Plugins</guimenu> -> <guimenu>Project 
  Builder</guimenu> -> <guimenu>Create new Project</guimenu>. A small dialog
  will pop up with a combo box to select the project type. Click Next and fill
  in the basic project information. After clicking Create, the project will be
  created and imported into ProjectViewer.
 </para>
 <para>
  The initial structure of a project is barebones when compared to other IDE's.
  Creating the project simply lays out the required base structure for the
  selected project type. For information on how to configure and work with
  the newly-created project, read on.
 </para>
</chapter>
<chapter id="working-with-projects"><title>Working With Projects</title>
 <sect1 id="configuring-projects"><title>Configuring Projects</title>
  <para>
   Project templates will (often) define an option group in the ProjectViewer's
   properties window. In the ProjectViewer window, right-click on the project
   node and select Properties (or alternatively, go to 
   <guimenu>Plugins</guimenu> -> <guimenu>Project Viewer</guimenu> ->
   <guimenu>Edit Project Options</guimenu>). If the project template defined
   any option panes (both Java Application and jEdit Plugin do), an option
   group named after the project type will appear on the left.
  </para>
  <sect2 id="configure-java-app"><title>Java Application</title>
  <para>
   A Java Application will have two option panes. In General you can define
   a main class (required to make the project executable) and any manifest that
   you want packaged with the resulting jar. In Dependencies you can add any
   external libraries that may be required to build your project.
  </para>
  </sect2>
  <sect2 id="configure-jedit-plugin"><title>jEdit Plugin</title>
  <para>
   jEdit Plugins need a certain amount of information before you can build them
   successfully. Generally, this information is kept in a file called
   build.properties and is kept in a location that is accessible by all plugins
   on your system (the location of your build.properties file can be chosen
   in the Build Properties File pane). For those who don't want to go about
   the trouble of creating a reusable property file, it is also possible to
   manually configure the plugin in the Manual Configuration pane (NOTE: for
   a manual configuration to work, the build properties file field
   must be blank, otherwise your configuration will be overridden). If you
   create a build.properties file, it should look something like this:
  </para>
  <para>
   <programlisting>
    <![CDATA[
    build.support=[/path/to/build-support]
    install.dir=[/path/to/settings]/jars
    jedit.install.dir=[/path/to/jEdit]
    jedit.plugins.dir=${install.dir}
    ]]>
   </programlisting>
  </para>
  <para>
   If your plugin depends on any existing plugins, you can specify those
   dependencies in the Plugin Dependencies pane. Simply move the required
   plugins to the right side, and they will automatically be added to your
   project's classpath.
  </para>
  </sect2>
 </sect1>
 <sect1 id="project-actions"><title>Project Actions</title>
  <para>
   Projects will define a number of actions that make it easier to execute
   common tasks on them. There are several different ways to execute one,
   depending on your preference. You can right-click anywhere in the
   ProjectViewer window and select one from the submenu named after the
   project type. For the more keyboard-focused, there is an action in the
   Plugin menu ("Run on Project...") that you can assign to a keyboard shortcut
   which will open up a dialog with a list of actions to be selected using
   the arrow keys and executed by hitting Enter. And lastly, you can turn on
   the ProjectBuilder toolbar with <guimenu>Plugins</guimenu> -> <guimenu>
   Project Builder</guimenu> -> <guimenu>Show Toolbar</guimenu>.
  </para>
  <para>
   These actions can be used to compile the project, clean it, generate an
   executable, documentation, or conceivably anything. Both Java Application
   and jEdit Plugin use Ant for these actions, which means you'll need the
   Console plugin and (a) the AntFarm plugin, or (b) ant installed somewhere
   on your system path.
  </para>
 </sect1>
 <sect1 id="converting-projects"><title>Converting Projects</title>
  <para>
   ProjectBuilder uses its template system to define a type for its projects,
   which makes it easy to convert a project by simply changing its type.
   There are a couple scenarios where it might be a good idea to convert a
   project, the most obvious one being to turn an existing set of files
   into a ProjectBuilder project (to gain access to that project type's set
   of actions, for example). Or if you have a project created with
   ProjectBuilder, you can remove its type by converting it to type "None".
  </para>
  <para>
   To convert a project, right-click on the project node in the ProjectViewer
   window and open up the "Convert Project" submenu. This will display a list
   of available templates, and you can convert the project by simply selecting
   the desired project type.
  </para>
  <para>
   Note that working on a project created this way from an existing source
   may break the option panes, as configuring a file this way currently relies
   on specially-named markers in the project's build files; without the markers,
   making a change in a project's configuration is useless.
  </para>
 </sect1>
</chapter>
<chapter id="creating-templates"><title>Creating Templates</title>
 <para>
  The power in ProjectBuilder lies in the flexibility of the template system.
  Custom templates should be placed in the settings directory, in a subfolder
  called "project-templates". You should not need to restart jEdit for it
  to find new templates.
  </para>
  <sect1 id="template-parts"><title>Parts of a Template</title>
  <para>
   A template contains the following (replace "Project_Name" with the name
   of your template with spaces replaced by underscores):
   <itemizedlist>
    <listitem>Project_Name.groovy: the script that lays out the project's
    skeleton, creating directories and necessary files</listitem>
    <listitem>Project_Name.props: used to define actions and option panes
    </listitem>
    <listitem>update.groovy: a script that is called when the project is first
    created and when saving changes to the configuration; makes necessary
    changes to the files based on the project's properties</listitem>
    <listitem>icon.png: a 16x16 image used as the project's icon</listitem>
    <listitem>Any number of template files</listitem>
    <listitem>Any number of beanshell scripts (must be referenced in the .props
    file in order to be found, however)</listitem>
   </itemizedlist>
  </para>
  <para>
   It's a good idea to look at the templates that come with ProjectBuilder
   to get an idea of what these files contain. They can be found in
   ProjectBuilder's "home" directory (from your settings directory, go to
   plugins/projectbuilder.ProjectBuilderPlugin/templates).
  </para>
   <sect2 id="project-script"><title>Project_Name.groovy</title>
   <para>
    ProjectBuilder uses groovy, a scripting variant of Java, as the foundation
    for its templating system. The primary reason is that this allows the
    template-creation script to actually be quite short. For those new to
    groovy, the syntax is very similar to Java, and should be pretty easy
    to pick up as we go along.
   </para>
   <para>
    Templates create a project layout by using a handy method called build()
    in the ProjectBuilder class, with nested calls to f() and d() to create
    files and directories respectively. Calls to d() can further nest calls
    in order to create subdirectories and files. Directories only need a name
    specified, but files need a couple extra parameters; "template", which is
    the path of the template file to create the file from; and "templateData",
    a map object that will map a variable name with its value. Technically these
    are optional, but then you'd be creating blank files, and who wants to do
    that?
   </para>
   <para>
    The script has several useful variables pre-defined:
    <itemizedlist>
     <listitem>project: a reference to the VPTProject object that represents
     this project</listitem>
     <listitem>workspace: the path of the directory containing this project
     </listitem>
     <listitem>name: the name of this project</listitem>
     <listitem>root: the root directory of this project (equivalent to 
     workspace/name)</listitem>
     <listitem>templateDir: the root directory of the template being used
     </listitem>
    </itemizedlist>
    In addition, the standard beanshell-defined variables (view, editPane,
    textArea, wm, and buffer) are defined just in case you find a use for them.
   </para>
   <para>
    IMPORTANT: At the end of your script, you must return true. If the creation
    fails at any time for any reason, you may return false in order to abort
    and the project will not be created. But without returning true at the end,
    creation will always fail and the template will be useless.
   </para>
  </sect2>
  <sect2 id="project-props"><title>Project_Name.props</title>
  <para>
   This file is used for two things: defining project actions, and defining
   option panes. This can also be used to define arbitrary properties you
   want stored in the project's properties object, although it is recommended
   to use the update.groovy script for other purposees.
  </para>
  <para>
   Project actions are simply beanshell scripts. To define a list of actions
   for your project, you need to set the "project.bsh" property. This should
   be a whitespace-separated list of names similar to defining a plugin menu
   (use a name of "-" to create a separator). For each name, you must define
   "project.bsh.NAME.label" and "project.bsh.NAME.script". label is the
   name for the action that the user will see, and script is a relative path
   to the beanshell script to run when this action is invoked.
  </para>
  <para>
   For convenience, ProjectBuilder offers a utility beanshell script for running
   Ant targets. As a result, all of the scripts for Java Application and jEdit
   Plugin are very short, but they can be as long as you like. Similar to the
   project script, these beanshell scripts have the variable "project"
   pre-defined as a reference to the project that the script is acting on.
  </para>
  <para>
   To define option panes for the project, set the property "project.options"
   with another whitespace-separated list of names. For each name, you should
   define "project.options.NAME.label" as the displayed name, and
   "project.options.NAME" as a whitespace-separated list of components to
   add to that pane (ProjectBuilder uses the EasyOptionPane in CommonControls
   to create the panes, so refer to that documentation and the existing
   templates for how to structure each component's string. In addition,
   components "pathbuilder" [for configuring paths], "textArea" [as an
   alternative to CommonControls' "textarea"], and "custom" [for creating a
   custom component using a beanshell snippet] are defined).
  </para>
  </sect2>
  <sect2 id="update-script"><title>update.groovy</title>
  <para>
   This script will handle all the conversions between project properties
   and what appears on disk. If a property is null, it should set some default
   value, and then act on that value if necessary. A utility method in the
   ProjectBuilder class ("mark") is defined to make it easier to write
   into existing files.
  </para>
 </sect2>
 </sect1>
</chapter>
</book>
