<?xml version="1.0"?>
<!-- jEdit buffer-local properties: -->
<!-- :tabSize=1:indentSize=1:noTabs=true:folding=sidekick: -->
<book>

<bookinfo><title>Project Builder</title>

<authorgroup>
 <author><firstname>Damien</firstname><surname>Radtke</surname></author>
 <author><firstname>Eric</firstname><surname>Berry</surname></author>
</authorgroup>
<!--
 <legalnotice><title>Legal Notice</title>
  <para>
   Permission is granted to copy, distribute and/or modify this document
   under the terms of the GNU Free Documentation License, Version 1.1 or
   any later version published by the Free Software Foundation; with no
   <quote>Invariant Sections</quote>, <quote>Front-Cover Texts</quote> or
   <quote>Back-Cover Texts</quote>, each as defined in the license. A copy of
   the license can be found in the file <filename>COPYING.DOC.txt</filename>
   included with jEdit.
  </para>
 </legalnotice>
-->
</bookinfo>

<chapter id="intro"><title>Introduction</title>
 <para>
  The Project Builder plugin gives jEdit the ability to create projects of different
  types, as well as provide tools for building and running them. Projects are displayed in Project
  Viewer, and the projects themselves are created through a template framework.
 </para>
 <para>
  The plugin comes bundled with templates
  for creating jEdit Plugins and standalone Java Applications. New templates
  can be written in Groovy, a scripting variant of Java, and the process for creating
  custom templates is fairly simple.
 </para>
</chapter>
<chapter id="creating-projects"><title>Creating Projects</title>
 <para>
 Projects can be created by going to <guimenu>Plugins</guimenu> -> 
 <guimenu>Project Builder</guimenu> -> <guimenu>New Project</guimenu>, and selecting a project type
 from the sub-menu. Selecting one will present you with a window like this:
 </para>
 <para>
 <image>
  <src>docs/create-project.png</src>
 </image>
 </para>
 <para>
 This window lets you choose a name for your project (in this case we're calling it "HelloWorld"), a
 project type (which should already be chosen, but if you picked the wrong one you can change it here),
 a ProjectViewer group to store the new project in, and the directory to create the project in. The last
 field will default to a subdirectory called "workspace" in your system's home folder, but you can browse
 to whatever location you like by clicking on the button next to the text box.
 </para>
 <para>
 After clicking OK, another dialog may or not show up, depending on which type of project you are creating.
 jEdit Plugin, for example, won't show any dialog, but Java Application will. This dialog will ask for project-
 specific details. If we continue with our above example, a dialog like this would show up:
 </para>
 <para>
 <image>
   <src>docs/java-project.png</src>
 </image>
 </para>
 <para>
 A Java Application will prompt you for a main class name and an author. Here we're creating a class called "World"
 in the root package, called "hello". It is recommended that you store Java project files in a package hierarchy,
 and so creating a root package for your main class is a good idea.
 </para>
 <para>
 Once you click OK, your main class file will be opened and the "Import Files" dialog will show up. Simply click Import to import
 all the created files into your project in the Project Viewer window. If the Project Viewer popped up rudely
 at this step, then you didn't have it docked. Docking this window to one side of your screen will eliminate
 that in the future.
 </para>
</chapter>
<chapter id="project-settings"><title>Project Settings</title>
 <para>
 Aside from making it easier to create projects, Project Builder offers ways to easily build and run those projects
 from within jEdit. From the Project Viewer window, right-click on the root node, select "Properties", and then
 click on the "Build/Run Settings" option on the left to view available build and run settings.
 </para>
 <para>
 The settings window is split in two, with build settings on the top and run settings on the bottom. A list of
 pre-defined settings will be displayed in the boxes, but for added flexibility you can create new settings and
 remove existing ones. In most cases the defaults should work well.
 </para>
 <para>
 To select which setting to use when building or running the project, select an option from the appropriate combo box
 and click OK. If you don't want to go to this panel every time you want to use a different setting, you can turn on
 the toolbar by going to <guimenu>Plugins</guimenu> -> <guimenu>Project Builder</guimenu> -> <guimenu>Show Toolbar</guimenu>.
 The toolbar makes it easier to switch between these settings and allows a one-click method of running them.
 </para>
 <para>
 A configurable project options pane for each template type is on the TODO list for this plugin, but has not
 yet been implemented. For template developers, this means that you will be able to create a pane in the
 Project Viewer's properties dialog for your template in order to specify miscellaneous project-wide
 settings. For template users, this means that the templates will be much more robust in the future,
 allowing for new levels of functionality.
 </para>
 <sect1 id="shells"><title>Shells</title>
  <para>
  ProjectBuilder executes build and run commands through the Console plugin, and certain settings may require
  additional shells to be installed. System commands will not require additional plugins, but projects that need
  Ant will need the Ant shell provided by the AntFarm plugin.
  </para>
 </sect1>
</chapter>
<chapter id="creating-templates"><title>Creating Project Templates</title>
 <para>
 While creating Java Applications and jEdit Plugins is all well and good, the power of
 Project Builder comes from its flexibility due to the Groovy template framework.
 Using the pre-existing templates as a starting point, it's easy to create and share new templates.
 The flexilibity of the system also allows for interaction with external project-creation tools
 through the command-line.
 </para>
 <para>
 First, you'll want to create a folder called "project-templates" in your jEdit settings directory
 (<guimenu>Utilities</guimenu> -> <guimenu>Settings Directory</guimenu> -> first menu item).
 When creating the list of available templates, Project Builder looks in two locations: this folder, and
 the plugin's home folder ("plugins/projectbuilder.ProjectBuilderPlugin/templates").
 The former is intended for custom user-defined templates, while the latter is for plugins to use.
 </para>
 <sect1 id="template-contents"><title>What Makes up a Template</title>
   <para>
   A Project Builder template consists of the following files:<orderedlist>
     <listitem> A groovy script </listitem>
     <listitem> menu-icon.png and icon.png (both optional) </listitem>
     <listitem> Any number of ".template" files </listitem>
     <listitem> version.txt (if you plan on versioning your template) </listitem>
   </orderedlist>
   </para>
   <para>
   The groovy script is where all the actual work for your template will be done. menu-icon.png will
   create a small icon to show next to your template in the "New Project" menu, and icon.png will
   be used in your template's project settings dialog (if applicable). Any files your template will
   need (for example, both Java Application and jEdit Plugin require an Ant buildfile) should be named
   with a ".template" extension, and will be used by the groovy script to create the necessary project
   files. version.txt is only necessary if you plan on distributing your template and then providing
   updates in the future.
   </para>
   <para>
   All of these files should be contained in a folder within the project-templates directory that
   is named after your template, with spaces replaced by underscores. For example, the folder for
   the Java Application template is called Java_Application. The groovy script should have the same
   name, so that script is called Java_Application.groovy.
   </para>
 </sect1>
 <sect1 id="template-script"><title>Writing the Template Script</title>                           
  <para>
  The groovy script is where most of the work of your template will be done. Looking at the scripts
  provided by Java Application and jEdit Plugin will give you a reference to work with. Let's break
  down the script for Java Application and see what does what.
  </para> <para />
  <code>
  import projectbuilder.builder.ProjectBuilder as PB<br />
  import groovy.swing.SwingBuilder<br />
  import javax.swing.*<br />
  import org.gjt.sp.jedit.*<br />
  import org.gjt.sp.jedit.jEdit as JEDIT<br />
  import java.awt.GridBagConstraints as GBC<br />
  import javax.swing.SwingConstants as SC<br />
  <br />
  def templateDir = "${templatesDir}/Java_Application"<br />
  def dist = "${project.directory.path}/${project.name}/dist"<br />
  def templateData = [:]<br />
  templateData.name = project.name<br />
  </code>
  <para>
  The beginning of the file just imports any required java packages and makes a few initial
  variable declarations. The syntax of groovy may be a little bit strange to Java developers,
  but it's really fairly simple. The class imports are the same, except the "as" keyword changes
  the name that will reference the imported class. For example, to access static methods
  of the ProjectBuilder class this script will simply need to write PB. Also note that in groovy,
  semicolons are optional.
  </para>
  <para>
  The declarations are made using the def keyword, and as in other scripting languages like bash,
  variable substitution is done using the ${} syntax. The groovy script is passed several
  variables when it is called, providing information such as the project's creation directory and
  name. Your script should define a similar templateDir variable (def templateDir = "${templatesDir}/My_Template"),
  and a templateData object, which is used to store data that will be needed
  by template files. The dist declaration is used in setting the project's run command later on.
  </para>
  <para>
   <programlisting>
      <![CDATA[
      def swing = new SwingBuilder()
      def form = swing.panel() {
         gridBagLayout()
         def gbc = swing.gbc(gridx: 0, gridy: 0, weightx: 0.0f, weighty: 0.0f, gridwidth: 1, gridheight: 1, fill: GBC.HORIZONTAL)
         gbc.insets = [10, 10, 0, 0]
         // Labels
         label(text: "Main class:", horizontalAlignment: SC.RIGHT, constraints: gbc)
         gbc.gridy++
         label(text: "Author:", horizontalAlignment: SC.RIGHT, constraints: gbc)
         
         // Text fields
         gbc.gridx++
         gbc.gridy = 0
         textField(id: "main_class", columns:20, constraints: gbc)
         gbc.gridy++
         textField(id: "author", columns:20, constraints: gbc)
      }
      def answer = JOptionPane.showConfirmDialog(view, form, "Java Project Details : ${project.name}", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, new ImageIcon("${templateDir}/icon.png"))
      ]]>
   </programlisting>
  </para>
  <para>
  This section creates the additional project-specific popup. Groovy syntax for creating swing components
  is very different from Java, but also more compact and easy to work with. Feel free to play around
  with this in your own scripts. In designing a dialog it may be easier to write it in its own script
  to make testing easier. Just remember to add the groovy jar (which can be found in jars/ in your settings
  directory) to the classpath and import the groovy.swing.SwingBuilder class and any actual swing
  components used.
  </para>
  <para>
   <programlisting>
      <![CDATA[
      if (answer == JOptionPane.OK_OPTION) {
         def mainClass = swing.main_class.text
         templateData.mainClass = "${mainClass}"
         templateData.author = swing.author.text
         int dot = mainClass.lastIndexOf(".")
         def deep = (dot != -1)
         def mainClassDir = ""
         if (deep) {
            templateData.pkg = "package ${mainClass.substring(0, dot)};"
         } else {
            templateData.pkg = ""
         }
         PB.build(project.name, project.directory.path) {
            f("build.xml", template: "${templateDir}/JavaBuild.template", templateData: templateData)
            d("build") {}
            d("lib") {}
            d("dist") {}
            d("src") {
               if (deep) {
                  // Add the main class file to an arbitrarily deep directory
                  // This code is essentially a workaround to be able to have the folder structure
                  // replicate the given package. There should hopefully be a better way to do this
                  def pkg = mainClass.substring(0, dot)
                  def dir = pkg.replace(".", File.separator)
                  def cls = mainClass.substring(dot+1, mainClass.length())
                  def file = "${cls}.java"
                  new File("${project.directory.path}/${project.name}/src/${dir}").mkdirs()
                  PrintWriter pw = new PrintWriter("${project.directory.path}/${project.name}/src/${dir}/${file}")
                  pw.println("package ${pkg};")
                  pw.println("public class ${cls} {")
                  pw.println("   public static void main(String[] args) {")
                  pw.println("      ")
                  pw.println("   }")
                  pw.println("}")
                  pw.close()
                  open.add("${project.directory.path}/${project.name}/src/${dir}/${file}")
               } else {
                  f("${mainClass}.java", template: "${templateDir}/JavaMainClass.template", templateData: templateData)
                  open.add("${project.directory.path}/${project.name}/src/${mainClass}.java")
               }
            }
         }
         // Add an Ant build-command to the project's build settings
         project.build.add("Build Executable:ANT[target=,buildfile=${project.directory.path}/${project.name}/build.xml]")
         project.build.add("Clean:ANT[target=clean,buildfile=${project.directory.path}/${project.name}/build.xml]")
         // Add a system command to the project's run settings
         project.run.add("Run Executable:SYSTEM[cmd=java -jar ${dist}/${project.name}.jar]")
      } else {
         abort = true
      }
      ]]>
   </programlisting>
	  </para>
   <para>
   This section is where the actual project is built. First, you will need to check to see if the user
   clicked OK. If they didn't, you must set a variable called "abort" to true, otherwise Project Builder
   will continue to attempt creating the project after your script is run. Putting abort = true tells
   the plugin to quit the project creation process altogether.
   </para>
   <para>
   Within the if statement, the first section is pulling necessary data from the form we created and
   determining a few things based on that data. The call to PB.build() is where you will put all
   actual file and directory creation commands, using calls to f() and d() respectively. Files will
   require that a template be specified, and the templateData object must be passed in to make
   the required data available to the template. The if (deep) test in this particular template is
   a workaround that allows the main class file to be placed arbitrarily deep within the "src"
   directory. Hopefully, this will be changed in the future.
   </para>
   <para>
   Also note the calls to open.add(). "open" is initially defined as an empty list, and you can
   add any file paths to it. Any files added to this list will be opened in jEdit upon the
   project's creation.
   </para>
   <para>
   After PB.build(), the template adds two build commands to the project's settings, and one run
   command. These commands are defined using a string of the format "Setting name:TYPE[var1=val1, var2
   =val2, ...]". The string before the colon is that setting's name and identifier. TYPE specifies
   what will be used to run the setting, and within the square brackets is a comma-separated list
   of properties pertaining to the given type. Here are the available types:
   </para>
   <para>
   <orderedlist>
     <listitem> SYSTEM (build and run). The only property necessary for SYSTEM is cmd, which
     will specify a command for jEdit to run in the system shell (first cd'ing into the new project's
     root directory).</listitem>
     <listitem> ANT (build only). ANT has two properties: a buildfile and a target. The buildfile,
     if not specified, defaults to build.xml in the project's root dirctory. If target is not specified
     then the buildfile's default target will be run.</listitem>
   </orderedlist>
   </para>
   <para>
   While none of the pre-defined templates use it, Project Builder also allows external tools to be
   used in project creation through a command-line call. Use the method PB.cmd(String command, String
   dir) to run a command (command) in a specified directory (dir) using the system shell. For example,
   an option specified in the project-specific form could ask for the location of an executable required
   to build the project, which could then be run via PB.cmd("my-executable", "${executableDir}").
   </para>
 </sect1>
 <sect1 id="template-share"><title>Sharing Your Templates</title>
 <para>
 As it stands now, Project Builder's functionality is limited compared to what it is capable
 of. There are only two pre-defined templates, but jEdit being the incredibly versatile editor than
 it is, the plugin is capable of so many more. In particular, templates for creating C/C++ projects with
 Makefiles would be very useful, as would a template for Python projects or Ruby on Rails. If you feel that you've
 created a template that should be included with the plugin, send a message to the jEdit development mailing
 list or add an artifact to the plugin feature requests tracker on jEdit's sourceforge page
 (http://sourceforge.net/projects/jedit/develop).
 </para>
 <para>My personal thanks in advance to anyone who
 helps contribute. =)
 </para>
 </sect1>
 </chapter>
</book>            
