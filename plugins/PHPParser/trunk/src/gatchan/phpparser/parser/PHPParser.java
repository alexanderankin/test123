/* Generated By:JavaCC: Do not edit this line. PHPParser.java */
package gatchan.phpparser.parser;

import java.util.ArrayList;
import java.io.StringReader;
import java.io.*;
import java.util.List;
import java.util.Stack;

import net.sourceforge.phpdt.internal.compiler.ast.declarations.VariableUsage;
import net.sourceforge.phpdt.internal.compiler.ast.*;
import net.sourceforge.phpdt.internal.compiler.parser.OutlineableWithChildren;
import net.sourceforge.phpdt.internal.compiler.parser.Outlineable;

/**
 * A PHP Parser originaly written for phpeclipse (http://www.phpeclipse.de).
 *
 * @author Matthieu Casanova <chocolat.mou@gmail.com>
 * @version $Id$
 */
public final class PHPParser implements PHPParserConstants {

  //{{{ Fields

//{{{ constants for methods and function distinction (some keywords are allowed in method classes

  public static final int CONST_METHOD = 0;
  public static final int CONST_FUNCTION = 1;
  //}}}

  //todo : fix the variables names bug
  //todo : handle tilde operator

  //todo: put this in an interface
  public static final int ERROR = 2;
  public static final int WARNING = 1;
  public static final int INFO = 0;

  /** The current segment. */
  private OutlineableWithChildren currentSegment;

  /** The message of the current ParseException. If it's null it's because the parse exception wasn't handled */
  private String errorMessage;

  private int errorStart = -1;
  private int errorEnd = -1;
  private PHPDocument phpDocument;

  private static final String SYNTAX_ERROR_CHAR = "syntax error";
  /**
  * The point where html starts.
  * It will be used by the token manager to create HTMLCode objects
  */
  private int htmlStart;
  private int htmlLineStart;
  private int htmlColumnStart;

  //ast stack
  private static final int AstStackIncrement = 100;
  /** The stack of node. */
  private Statement[] nodes;
  /** The cursor in expression stack. */
  private int nodePtr;

  public static final boolean PARSER_DEBUG = false;

  private final List parserListeners = new ArrayList();

  private String path;

  /** Tell if the parsing should be stopped. */
  private boolean shouldStop;

  private boolean php5Enabled;

  private Stack scopeStack;

  private Scope scope;

  private List tempList = new ArrayList();
  //}}}

  //{{{ PHPParser()

  public PHPParser() {
  }

  //}}}
  //{{{ getPath()

  /**
   * Set the path of the file that is currently parsed.
   * This path will be sent in parse errors and messages
   *
   * @param path the path of the parsed file
   */
  public void setPath(String path) {
    this.path = path;
  } //}}}
  //{{{ getPath()

  public String getPath() {
    return path;
  } //}}}
  //{{{ setPhp5Enabled(boolean php5Enabled)
  public void setPhp5Enabled(boolean php5Enabled) {
    this.php5Enabled = php5Enabled;
  } //}}}

  //{{{ stop()

  /**
   * Ask the parser to stop his work.
   */
  public void stop() {
    shouldStop = true;
  }

  //}}}
  //{{{ isStopped()

  public boolean isStopped() {
    return shouldStop;
  }

  //}}}
  //{{{ addParserListener(PHPParserListener listener)

  public void addParserListener(PHPParserListener listener) {
    if (!parserListeners.contains(listener)) {
      parserListeners.add(listener);
    }
  }

  //}}}
  //{{{ removeParserListener(PHPParserListener listener)

  public void removeParserListener(PHPParserListener listener) {
    parserListeners.remove(listener);
  }

  //}}}
  //{{{ fireParseError(PHPParseErrorEvent e)

  public void fireParseError(PHPParseErrorEvent e) {
    for (int i = 0;i < parserListeners.size();i++) {
        PHPParserListener listener = (PHPParserListener) parserListeners.get(i);
        listener.parseError(e);
    }
  }

  //}}}

  //{{{ fireParseError(String message, String expected, Token token)

  public void fireParseError(String message, String expected, Token token) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          message,
                                          expected,
                                          token));
  }

  //}}}
  //{{{ fireParseMessage(PHPParseMessageEvent e)

  public void fireParseMessage(PHPParseMessageEvent e) {
    for (int i = 0;i < parserListeners.size();i++) {
        PHPParserListener listener = (PHPParserListener) parserListeners.get(i);
        listener.parseMessage(e);
    }
  }

  //}}}
  //{{{ phpParserTester(String strEval)

  public final void phpParserTester(String strEval) throws ParseException {
    StringReader stream = new StringReader(strEval);
    if (jj_input_stream == null) {
      jj_input_stream = new JavaCharStream(stream, 1, 1);
      token_source = new PHPParserTokenManager(jj_input_stream);
    }
    ReInit(new StringReader(strEval));
    init();
    phpDocument = new PHPDocument("_root");
    scope = new Scope();
    scopeStack = new Stack();
    scopeStack.push(scope);
    currentSegment = phpDocument;
    token_source.SwitchTo(PHPParserTokenManager.PHPPARSING);
    phpTest();
  }//}}}

  //{{{ htmlParserTester(File fileName)

  public final void htmlParserTester(File fileName) throws FileNotFoundException, ParseException {
    Reader stream = new FileReader(fileName);
    if (jj_input_stream == null) {
      jj_input_stream = new JavaCharStream(stream, 1, 1);
      token_source = new PHPParserTokenManager(jj_input_stream);
    }
    ReInit(stream);
    init();
    phpDocument = new PHPDocument("_root");
    scope = new Scope();
    scopeStack = new Stack();
    scopeStack.push(scope);
    currentSegment = phpDocument;
    phpFile();
  }

  //}}}
  //{{{ htmlParserTester(String strEval)

  public final void htmlParserTester(String strEval) throws ParseException {
    StringReader stream = new StringReader(strEval);
    if (jj_input_stream == null) {
      jj_input_stream = new JavaCharStream(stream, 1, 1);
      token_source = new PHPParserTokenManager(jj_input_stream);
    }
    ReInit(stream);
    init();
    phpDocument = new PHPDocument("_root");
    scope = new Scope();
    scopeStack = new Stack();
    scopeStack.push(scope);
    currentSegment = phpDocument;
    phpFile();
  }

  //}}}
  //{{{ init()

  /**
   * Reinitialize the parser.
   */
  private void init() {
    nodes = new Statement[AstStackIncrement];
    nodePtr = -1;
    htmlStart = 0;
    htmlColumnStart = 0;
    htmlLineStart = 0;
  }

  //}}}
  //{{{ pushOnAstNodes(Statement node)

  /**
   * Add an php node on the stack.
   * @param node the node that will be added to the stack
   */
  private void pushOnAstNodes(Statement node) {
    try {
      nodes[++nodePtr] = node;
    } catch (IndexOutOfBoundsException e) {
      int oldStackLength = nodes.length;
      Statement[] oldStack = nodes;
      nodes = new Statement[oldStackLength + AstStackIncrement];
      System.arraycopy(oldStack, 0, nodes, 0, oldStackLength);
      nodePtr = oldStackLength;
      nodes[nodePtr] = node;
    }
  }

  //}}}
  //{{{ parse(String s)

  public final void parse(String s) throws ParseException {
    Reader reader = new StringReader(s);
    parse(reader);
  }

  //}}}
  //{{{ parse(Reader reader)

  public final void parse(Reader reader) throws ParseException {
    phpDocument = new PHPDocument("_root");
    scope = new Scope();
    scopeStack = new Stack();
    scopeStack.push(scope);
    currentSegment = phpDocument;
    if (jj_input_stream == null) {
      jj_input_stream = new JavaCharStream(reader, 1, 1);
      token_source = new PHPParserTokenManager(jj_input_stream);
    }
    ReInit(reader);
    init();
    parse();
    Statement[] astNodes = new Statement[nodes.length];
    phpDocument.setNodes(astNodes);
    System.arraycopy(nodes,0,astNodes,0,nodes.length);
    phpDocument.analyzeCode(this);
  }

  //}}}
  //{{{ createNewHTMLCode()

  /**
   * Put a new html block in the stack.
   */
  public final void createNewHTMLCode() {
    int currentPosition = token.sourceStart;
    if (currentPosition == htmlStart ||
          currentPosition < htmlStart ||
          currentPosition > jj_input_stream.getCurrentBuffer().length()) {
      return;
    }
    // todo : reactivate this
    //final String html = jj_input_stream.getCurrentBuffer().substring(htmlStart, currentPosition);
    String html = "";
    pushOnAstNodes(new HTMLCode(html, htmlStart,currentPosition,htmlLineStart,token.endLine,htmlColumnStart,token.endColumn));
  }

  //}}}
  //{{{ error_skipto(int kind)

  Token error_skipto(int kind) {
    //  ParseException e = generateParseException();  // generate the exception object.
    //  System.out.println(e.toString());  // print the error message
    Token t;
    do {
      t = getNextToken();
    } while (t.kind != kind && t.kind != PHPParserConstants.EOF && t.kind != PHPParserConstants.RBRACE);
    return t;
  }

  //}}}
  //{{{ parse()

  public final void parse() throws ParseException {
          phpFile();
  }

  //}}}
  //{{{ getPHPDocument()

  public PHPDocument getPHPDocument() {
    return phpDocument;
  }

  //}}}

  //{{{ setTypeFromScope(Variable variable)
  private void setTypeFromScope(Variable variable) {
    VariableUsage usage = scope.getVariable(variable.getName(),variable.getBeginLine(),variable.getBeginColumn());
    if (usage != null) {
      variable.setType(usage.getType());
    }
  }

//}}}



//{{{ PHP Structures

//{{{ phpTest()
  final public void phpTest() throws ParseException {
    Php();
    jj_consume_token(0);
  }

//}}}
//{{{ phpFile()
  final public void phpFile() throws ParseException {
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PHPSTARTSHORT:
        case PHPSTARTLONG:
        case PHPECHOSTART:
        case PHPEND:
        case ABSTRACT:
        case INTERFACE:
        case TRY:
        case THROW:
        case CLASS:
        case FUNCTION:
        case IF:
        case ARRAY:
        case BREAK:
        case LIST:
        case PRINT:
        case ECHO:
        case INCLUDE:
        case REQUIRE:
        case INCLUDE_ONCE:
        case REQUIRE_ONCE:
        case GLOBAL:
        case STATIC:
        case CONTINUE:
        case DO:
        case FOR:
        case NEW:
        case RETURN:
        case SWITCH:
        case WHILE:
        case FOREACH:
        case DEFINE:
        case GOTO:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case FALSE:
        case STRING:
        case OBJECT:
        case BOOL:
        case BOOLEAN:
        case REAL:
        case DOUBLE:
        case FLOAT:
        case INT:
        case INTEGER:
        case AT:
        case BANG:
        case TILDE:
        case PLUS_PLUS:
        case MINUS_MINUS:
        case PLUS:
        case MINUS:
        case BIT_AND:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case DOUBLEQUOTE:
        case HEREDOCSTARTTOKEN:
        case DOLLAR:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        PhpBlock();
      }
      createNewHTMLCode();
    } catch (TokenMgrError e) {
    //{{{ Parse Error
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          e.getMessage(),
                                          e.getMessage(),
                                          null,
                                          jj_input_stream.getBeginOffset(),
                                          jj_input_stream.getEndOffset(),
                                          jj_input_stream.getBeginLine(),
                                          jj_input_stream.getEndLine(),
                                          jj_input_stream.getBeginColumn(),
                                          jj_input_stream.getEndColumn())); //}}}

    }
  }

//}}}
//{{{ PhpBlock()

/**
 * A php block is a <?= expression [;]?>
 * or <?php somephpcode ?>
 * or <? somephpcode ?>
 */
  final public void PhpBlock() throws ParseException {
  final PHPEchoBlock phpEchoBlock;
  final Token token,phpEnd;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PHPECHOSTART:
      phpEchoBlock = phpEchoBlock();
   pushOnAstNodes(phpEchoBlock);
      break;
    case PHPSTARTSHORT:
    case PHPSTARTLONG:
    case PHPEND:
    case ABSTRACT:
    case INTERFACE:
    case TRY:
    case THROW:
    case CLASS:
    case FUNCTION:
    case IF:
    case ARRAY:
    case BREAK:
    case LIST:
    case PRINT:
    case ECHO:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case GLOBAL:
    case STATIC:
    case CONTINUE:
    case DO:
    case FOR:
    case NEW:
    case RETURN:
    case SWITCH:
    case WHILE:
    case FOREACH:
    case DEFINE:
    case GOTO:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case FALSE:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOUBLEQUOTE:
    case HEREDOCSTARTTOKEN:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case SEMICOLON:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHPSTARTSHORT:
      case PHPSTARTLONG:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PHPSTARTLONG:
          jj_consume_token(PHPSTARTLONG);
          break;
        case PHPSTARTSHORT:
          token = jj_consume_token(PHPSTARTSHORT);
      fireParseMessage(new PHPParseMessageEvent(INFO,
                                                PHPParseMessageEvent.MESSAGE_SHORT_OPEN_TAG,
                                                path,
                                                "You should use '<?php' instead of '<?' it will avoid some problems with XML",
                                                token));
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
    createNewHTMLCode();
      Php();
      try {
        phpEnd = jj_consume_token(PHPEND);
    htmlStart = phpEnd.sourceEnd;
    htmlLineStart = phpEnd.endLine;
    htmlColumnStart = phpEnd.endColumn;
      } catch (ParseException e) {
      fireParseMessage(new PHPParseMessageEvent(INFO,
                                                PHPParseMessageEvent.MESSAGE_PHP_CLOSING_MISSING,
                                                path,
                                                "'?>' is missing",
                                                e.currentToken));
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//}}}
//{{{ phpEchoBlock()
  final public PHPEchoBlock phpEchoBlock() throws ParseException {
  final Expression expr;
  PHPEchoBlock echoBlock;
  final Token token, token2;
    token = jj_consume_token(PHPECHOSTART);
                          createNewHTMLCode();
    expr = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    try {
      token2 = jj_consume_token(PHPEND);
      htmlStart = token2.sourceEnd;
      htmlLineStart = token2.endLine;
      htmlColumnStart = token2.endColumn;

      echoBlock = new PHPEchoBlock(expr,token.sourceStart,token2.sourceEnd, token.beginLine,token2.endLine,token.beginColumn,token2.endColumn);
    } catch (ParseException e) {
    fireParseMessage(new PHPParseMessageEvent(INFO,
                                              PHPParseMessageEvent.MESSAGE_PHP_CLOSING_MISSING,
                                              path,
                                              "'?>' is missing",
                                              e.currentToken));
    echoBlock = new PHPEchoBlock(expr,
                                 token.sourceStart,
                                 e.currentToken.sourceEnd,
                                 token.beginLine,
                                 e.currentToken.endLine,
                                 token.beginColumn,
                                 e.currentToken.endColumn);
    }
    pushOnAstNodes(echoBlock);
    {if (true) return echoBlock;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ Php()
  final public void Php() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case INTERFACE:
      case TRY:
      case THROW:
      case CLASS:
      case FUNCTION:
      case IF:
      case ARRAY:
      case BREAK:
      case LIST:
      case PRINT:
      case ECHO:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case GLOBAL:
      case STATIC:
      case CONTINUE:
      case DO:
      case FOR:
      case NEW:
      case RETURN:
      case SWITCH:
      case WHILE:
      case FOREACH:
      case DEFINE:
      case GOTO:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case FALSE:
      case STRING:
      case OBJECT:
      case BOOL:
      case BOOLEAN:
      case REAL:
      case DOUBLE:
      case FLOAT:
      case INT:
      case INTEGER:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOUBLEQUOTE:
      case HEREDOCSTARTTOKEN:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      BlockStatement();
    }
  }

//}}}


//}}}

//{{{ interfaceDeclaration()
  final public InterfaceDeclaration interfaceDeclaration() throws ParseException {
  Token visibilityToken = null;
  Token interfaceToken, rBraceToken;
  Token nameToken = null;
  InterfaceDeclaration interfaceDeclaration;
  String interfaceNameImage = SYNTAX_ERROR_CHAR;
  MethodDeclaration methodDeclaration;
  List superInterfaces = null;
    interfaceToken = jj_consume_token(INTERFACE);
    try {
      nameToken = jj_consume_token(IDENTIFIER);
      interfaceNameImage = nameToken.image;
    } catch (ParseException e) {
    fireParseError("identifier expected","identifier",e.currentToken);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
        superInterfaces = new ArrayList();
      jj_consume_token(EXTENDS);
      nameToken = jj_consume_token(IDENTIFIER);
        superInterfaces.add(nameToken.image);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        nameToken = jj_consume_token(IDENTIFIER);
        superInterfaces.add(nameToken.image);
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    interfaceDeclaration = new InterfaceDeclaration(path,
                                                    currentSegment,
                                                    interfaceNameImage,
                                                    superInterfaces,
                                                    interfaceToken.sourceStart,
                                                    interfaceToken.beginLine,
                                                    interfaceToken.beginColumn);
    currentSegment.add(interfaceDeclaration);
    currentSegment = interfaceDeclaration;
    scope = new Scope();
    scopeStack.push(scope);
    jj_consume_token(LBRACE);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case PROTECTED:
      case PRIVATE:
      case FUNCTION:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case PROTECTED:
      case PRIVATE:
        visibilityToken = visibility();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      methodDeclaration = interfaceMethodDeclaration();
      //todo use visibilityToken
      interfaceDeclaration.add(methodDeclaration);
    }
    rBraceToken = jj_consume_token(RBRACE);
    currentSegment = interfaceDeclaration.getParent();
    scope = (Scope) scopeStack.pop();
    interfaceDeclaration.setSourceEnd(rBraceToken.sourceEnd);
    interfaceDeclaration.setEndLine(rBraceToken.endLine);
    interfaceDeclaration.setEndColumn(rBraceToken.endColumn);
    {if (true) return interfaceDeclaration;}
    throw new Error("Missing return statement in function");
  }

  //}}}

//{{{ interfaceMethodDeclaration()
/**
 * A Method Declaration.
 * <b>function</b> MetodDeclarator() Block()
 *
 * @return a MethodDeclaration
 */
  final public MethodDeclaration interfaceMethodDeclaration() throws ParseException {
  final MethodDeclaration functionDeclaration;
  final MethodHeader methodHeader;
  final Block block;
  final OutlineableWithChildren seg = currentSegment;
  final Token functionToken;
    functionToken = jj_consume_token(FUNCTION);
    methodHeader = methodHeader(functionToken,CONST_METHOD);
    functionDeclaration = new MethodDeclaration(currentSegment,methodHeader);
    try {
      jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
    fireParseError("unexpected token : "+e.currentToken.image, ";", e.currentToken);
    }
    {if (true) return functionDeclaration;}
    throw new Error("Missing return statement in function");
  }

  //}}}


//{{{ Class methods

//{{{ ClassDeclaration()

/**
 * A Class declaration.
 * class <IDENTIFIER> [extends <IDENTIFIER>] Class body
 *
 * @return a ClassDeclaration
 */
  final public ClassDeclaration ClassDeclaration() throws ParseException {
  final ClassHeader classHeader;
  final ClassDeclaration classDeclaration;
  Token abstractToken = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      abstractToken = jj_consume_token(ABSTRACT);
    if (!php5Enabled) {
      fireParseError("unexpected token : abstract", "", abstractToken);
    }
      classHeader = classHeader(abstractToken);
    classDeclaration = new ClassDeclaration(currentSegment,
                                            classHeader,
                                            classHeader.getSourceStart(),
                                            classHeader.getSourceEnd(),
                                            classHeader.getBeginLine(),
                                            classHeader.getEndLine(),
                                            classHeader.getBeginColumn(),
                                            classHeader.getEndColumn());
      currentSegment.add(classDeclaration);
      currentSegment = classDeclaration;
      scope = new Scope();
      scopeStack.push(scope);
      abstractClassBody(classDeclaration);
    currentSegment = currentSegment.getParent();
    scope = (Scope) scopeStack.pop();
    pushOnAstNodes(classDeclaration);
    {if (true) return classDeclaration;}
      break;
    case CLASS:
      classHeader = classHeader(null);
    classDeclaration = new ClassDeclaration(currentSegment,
                                            classHeader,
                                            classHeader.getSourceStart(),
                                            classHeader.getSourceEnd(),
                                            classHeader.getBeginLine(),
                                            classHeader.getEndLine(),
                                            classHeader.getBeginColumn(),
                                            classHeader.getEndColumn());
      currentSegment.add(classDeclaration);
      currentSegment = classDeclaration;
      scope = new Scope();
      scopeStack.push(scope);
      ClassBody(classDeclaration);
    currentSegment = currentSegment.getParent();
    scope = (Scope) scopeStack.pop();
    pushOnAstNodes(classDeclaration);
    {if (true) return classDeclaration;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//}}}

//{{{ classHeader(Token abstractToken)
  final public ClassHeader classHeader(Token abstractToken) throws ParseException {
  Token classToken;
  Token className = null;
  Token superclassName;
  Token firstToken = abstractToken;
  String classNameImage = SYNTAX_ERROR_CHAR;
  String superclassNameImage = null;
  Token interfaceToken;
  List interfaceNames = null;
    classToken = jj_consume_token(CLASS);
    if (firstToken == null) firstToken = classToken;
    try {
      className = jj_consume_token(IDENTIFIER);
      classNameImage = className.image;
    } catch (ParseException e) {
    //{{{ Parse error
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "identifier expected",
                                          "identifier",
                                          e.currentToken.image,
                                          classToken.sourceEnd,
                                          classToken.sourceEnd+1,
                                          classToken.endLine,
                                          classToken.endLine,
                                          classToken.endColumn,
                                          classToken.endColumn+1)); //}}}

    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      try {
        superclassName = jj_consume_token(IDENTIFIER);
      superclassNameImage = superclassName.image;
      } catch (ParseException e) {
    //{{{ Parse error
    fireParseError("identifier expected", "identifier", e.currentToken.next);
    superclassNameImage = SYNTAX_ERROR_CHAR;
    error_skipto(LBRACE);//}}}

      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
          interfaceNames = new ArrayList();
      jj_consume_token(IMPLEMENTS);
      interfaceToken = jj_consume_token(IDENTIFIER);
        interfaceNames.add(interfaceToken.image);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        interfaceToken = jj_consume_token(IDENTIFIER);
        interfaceNames.add(interfaceToken.image);
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    final int end,endLine,endColumn;
    if (className == null) {
      end         = firstToken.sourceEnd;
      endLine     = firstToken.endLine;
      endColumn   = firstToken.endColumn;
    } else {
      end         = className.sourceEnd;
      endLine     = className.endLine;
      endColumn   = className.endColumn;
    }
    {if (true) return new ClassHeader(path,
                           classNameImage,
                           superclassNameImage,
                           interfaceNames,
                           firstToken.sourceStart,
                           end,
                           firstToken.beginLine,
                           endLine,
                           firstToken.beginColumn,
                           endColumn);}
    throw new Error("Missing return statement in function");
  }

 //}}}

//{{{ ClassBody(ClassDeclaration classDeclaration)
  final public void ClassBody(ClassDeclaration classDeclaration) throws ParseException {
  final Token lBraceToken;
  Token rBraceToken;
    try {
      lBraceToken = jj_consume_token(LBRACE);
      classDeclaration.setBodyLineStart(lBraceToken.beginLine);
      classDeclaration.setBodyColumnStart(lBraceToken.beginColumn);
    } catch (ParseException e) {
    fireParseError("'{' expected", "{", e.currentToken);
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case PROTECTED:
      case PRIVATE:
      case FINAL:
      case FUNCTION:
      case VAR:
      case STATIC:
      case CONST:
      case DOLLAR:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      ClassBodyDeclaration(classDeclaration);
    }
    try {
      rBraceToken = jj_consume_token(RBRACE);
      classDeclaration.setBodyLineEnd(rBraceToken.endLine);
      classDeclaration.setBodyColumnEnd(rBraceToken.endColumn);
    } catch (ParseException e) {
    //{{{ Parse error
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'}' expected",
                                          "}",
                                          e.currentToken.image,
                                          e.currentToken.sourceStart,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1)); //}}}
    rBraceToken = error_skipto(RBRACE);
    classDeclaration.setBodyLineEnd(rBraceToken.endLine);
    classDeclaration.setBodyColumnEnd(rBraceToken.endColumn);
    }
  }

//}}}
//{{{ abstractClassBody(ClassDeclaration classDeclaration)
  final public void abstractClassBody(ClassDeclaration classDeclaration) throws ParseException {
  final Token lBraceToken;
  Token rBraceToken;
    try {
      lBraceToken = jj_consume_token(LBRACE);
      classDeclaration.setBodyLineStart(lBraceToken.beginLine);
      classDeclaration.setBodyColumnStart(lBraceToken.beginColumn);
    } catch (ParseException e) {
    //{{{ Parse error
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'{' expected",
                                          "{",
                                          e.currentToken.image,
                                          e.currentToken.sourceStart,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1)); //}}}

    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case PROTECTED:
      case PRIVATE:
      case ABSTRACT:
      case FINAL:
      case FUNCTION:
      case VAR:
      case STATIC:
      case CONST:
      case DOLLAR:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
      abstractClassBodyDeclaration(classDeclaration);
    }
    try {
      rBraceToken = jj_consume_token(RBRACE);
      classDeclaration.setBodyLineEnd(rBraceToken.endLine);
      classDeclaration.setBodyColumnEnd(rBraceToken.endColumn);
    } catch (ParseException e) {
    //{{{ Parse error
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'}' expected",
                                          "}",
                                          e.currentToken.image,
                                          e.currentToken.sourceStart,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1)); //}}}
    rBraceToken = error_skipto(RBRACE);
    classDeclaration.setBodyLineEnd(rBraceToken.endLine);
    classDeclaration.setBodyColumnEnd(rBraceToken.endColumn);
    }
  }

  //}}}

//{{{ ClassBodyDeclaration(final ClassDeclaration classDeclaration)

/**
 * A class can contain only methods and fields.
 */
  final public void ClassBodyDeclaration(final ClassDeclaration classDeclaration) throws ParseException {
  final MethodDeclaration method;
  final FieldDeclaration field;
  Token visibilityToken = null;
  Token visibilityToken2 = null;
  Token finalToken = null;
  List fieldList;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
    case PROTECTED:
    case PRIVATE:
    case FINAL:
    case FUNCTION:
    case STATIC:
    case CONST:
    case DOLLAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case PROTECTED:
      case PRIVATE:
        visibilityToken = visibility();
     if (!php5Enabled) {
       fireParseError("unexpected token " + visibilityToken.image, "", visibilityToken);
     }
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATIC:
        case CONST:
        case DOLLAR:
          field = FieldDeclarationPHP5(visibilityToken);
         if (field != null) classDeclaration.addField(field);
          break;
        case FINAL:
        case FUNCTION:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FINAL:
            finalToken = jj_consume_token(FINAL);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case PUBLIC:
            case PROTECTED:
            case PRIVATE:
              visibilityToken2 = visibility();
             if (!php5Enabled) {
               fireParseError("unexpected token " + visibilityToken.image, "", visibilityToken);
             }
             if (visibilityToken != null) {
               fireParseError("unexpected token " + visibilityToken2.image, "", visibilityToken2);
             }
              break;
            default:
              jj_la1[17] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[18] = jj_gen;
            ;
          }
          method = MethodDeclaration(CONST_METHOD,visibilityToken);
       //  method.analyzeCode(this);
         classDeclaration.addMethod(method);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    fireParseError("unexpected token " + e.currentToken.image, "", e.currentToken);
      }
      break;
    case VAR:
      fieldList = FieldDeclaration();
    if (fieldList != null) {
      for (int i = 0;i<fieldList.size();i++) {
        classDeclaration.addField((FieldDeclaration) fieldList.get(i));
      }
    }
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//}}}
//{{{ abstractClassBodyDeclaration(ClassDeclaration classDeclaration)

/**
 * A class can contain only methods and fields.
 */
  final public void abstractClassBodyDeclaration(ClassDeclaration classDeclaration) throws ParseException {
  final MethodDeclaration method;
  final FieldDeclaration field;
  Token visibilityToken = null;
  Token visibilityToken2;
  Token finalToken = null;
  List fieldList;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
    case PROTECTED:
    case PRIVATE:
    case ABSTRACT:
    case FINAL:
    case FUNCTION:
    case STATIC:
    case CONST:
    case DOLLAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case PROTECTED:
      case PRIVATE:
        visibilityToken = visibility();
     //{{{ Parse error if not in php5
     if (!php5Enabled) {
       fireParseError("unexpected token " + visibilityToken.image, "", visibilityToken);
     } //}}}

        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATIC:
        case CONST:
        case DOLLAR:
          field = FieldDeclarationPHP5(visibilityToken);
         if (field != null) classDeclaration.addField(field);
          break;
        case FINAL:
        case FUNCTION:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FINAL:
            finalToken = jj_consume_token(FINAL);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case PUBLIC:
            case PROTECTED:
            case PRIVATE:
              visibilityToken2 = visibility();
             if (!php5Enabled) {
               fireParseError("unexpected token " + visibilityToken.image, "", visibilityToken);
             }
             if (visibilityToken != null) {
               fireParseError("unexpected token " + visibilityToken2.image, "", visibilityToken2);
             }
              break;
            default:
              jj_la1[22] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[23] = jj_gen;
            ;
          }
          method = MethodDeclaration(CONST_METHOD,visibilityToken);
         //method.analyzeCode(this);
         classDeclaration.addMethod(method);
          break;
        case ABSTRACT:
          method = abstractMethodDeclaration(CONST_METHOD,visibilityToken);
         classDeclaration.addMethod(method);
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    fireParseError("unexpected token " + e.currentToken.image, "", e.currentToken);
      }
      break;
    case VAR:
      fieldList = FieldDeclaration();
    if (fieldList != null) {
      for (int i = 0;i<fieldList.size();i++) {
        classDeclaration.addField((FieldDeclaration) fieldList.get(i));
      }
    }
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//}}}

//{{{ FieldDeclaration()

/**
 * A class field declaration : it's var VariableDeclarator() (, VariableDeclarator())*;.
 * it is only used by ClassBodyDeclaration()
 */
  final public List FieldDeclaration() throws ParseException {
  VariableDeclaration variableDeclaration;
  final ArrayList arrayList = new ArrayList();
  final Token varToken;
  Token semicolonToken = null;
    varToken = jj_consume_token(VAR);
    if (php5Enabled) {
      fireParseMessage(new PHPParseMessageEvent(INFO,
                       PHPParseMessageEvent.MESSAGE_DEPRECATED_VAR_TOKEN,
                       path,
                       "The var token is deprecated in php 5",
                       token));
    }
    try {
      variableDeclaration = VariableDeclaratorNoSuffix();
        arrayList.add(new FieldDeclaration(path,
                                           variableDeclaration,
                                           currentSegment,
                                           variableDeclaration.getSourceStart(),
                                           variableDeclaration.getSourceEnd(),
                                           variableDeclaration.getBeginLine(),
                                           variableDeclaration.getEndLine(),
                                           variableDeclaration.getBeginColumn(),
                                           variableDeclaration.getEndColumn()));
    } catch (ParseException e) {
      final Token semicolon = error_skipto(SEMICOLON);
      fireParseError(new PHPParseErrorEvent(ERROR,
                                            path,
                                            "variable expected",
                                            "variable",
                                            e.currentToken.next.image,
                                            varToken.sourceEnd,
                                            semicolon.sourceEnd,
                                            varToken.beginLine,
                                            semicolon.endLine,
                                            varToken.endColumn,
                                            semicolon.endColumn));
      {if (true) return null;}
    }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      variableDeclaration = VariableDeclaratorNoSuffix();
        arrayList.add(new FieldDeclaration(path,
                                           variableDeclaration,
                                           currentSegment,
                                           variableDeclaration.getSourceStart(),
                                           variableDeclaration.getSourceEnd(),
                                           variableDeclaration.getBeginLine(),
                                           variableDeclaration.getEndLine(),
                                           variableDeclaration.getBeginColumn(),
                                           variableDeclaration.getEndColumn()));
    }
    try {
      semicolonToken = jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
    fireParseError("';' expected", ";", e.currentToken);
    }
    {if (true) return arrayList;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ FieldDeclarationPHP5()
/**
 * A class field declaration : it's var VariableDeclarator() (, VariableDeclarator())*;.
 * it is only used by ClassBodyDeclaration()
 */
  final public FieldDeclaration FieldDeclarationPHP5(Token visibilityToken) throws ParseException {
  VariableDeclaration variableDeclaration;
  Token semicolonToken = null;
  Token varToken = null;
  Token modifierToken = null;
  Token visibility2 = null;
  int start = -1;
  int beginLine = -1;
  int beginColumn = -1;
  int end,endLine,endColumn;
    //{{{ if not php5 skipping to semicolon and fire parse error
    if (!php5Enabled) {
      final Token semicolon = error_skipto(SEMICOLON);
      fireParseError(new PHPParseErrorEvent(ERROR,
                                            path,
                                            "unexpected token "+varToken.image,
                                            "",
                                            semicolon.image,
                                            semicolon.sourceStart-1,
                                            semicolon.sourceStart,
                                            semicolon.beginLine,
                                            semicolon.beginLine,
                                            semicolon.beginColumn-1,
                                            semicolon.beginColumn));
      {if (true) return null;}
    } //}}}

    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
    case CONST:
      modifierToken = modifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case PROTECTED:
      case PRIVATE:
        visibility2 = visibility();
        if (visibilityToken != null) {
          fireParseError(new PHPParseErrorEvent(ERROR,
                                                path,
                                                "unexpected token "+visibility2.image,
                                                "",
                                                visibility2.image,
                                                visibility2.sourceStart,
                                                visibility2.sourceEnd,
                                                visibility2.beginLine,
                                                visibility2.endLine,
                                                visibility2.endColumn,
                                                visibility2.endColumn));
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      //{{{
      if (visibilityToken != null) {
        modifierToken = visibilityToken;
      } else {
      }
      start       = modifierToken.sourceStart;
      beginLine   = modifierToken.beginLine;
      beginColumn = modifierToken.beginColumn;
      //}}}

      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    try {
      variableDeclaration = VariableDeclaratorNoSuffix();
        if (start == -1) {
          start       = variableDeclaration.getSourceStart();
          beginLine   = variableDeclaration.getBeginLine();
          beginColumn = variableDeclaration.getBeginColumn();
        }
        if (!php5Enabled && varToken == null) {
          fireParseError(new PHPParseErrorEvent(ERROR,
                                                path,
                                                "var token expected",
                                                "var",
                                                variableDeclaration.toStringExpression(),
                                                variableDeclaration.getSourceStart()-1,
                                                variableDeclaration.getSourceStart(),
                                                variableDeclaration.getBeginLine(),
                                                variableDeclaration.getBeginLine(),
                                                variableDeclaration.getBeginColumn()-1,
                                                variableDeclaration.getBeginColumn()));
        }
    } catch (ParseException e) {
      start       = e.currentToken.sourceStart;
      beginLine   = e.currentToken.beginLine;
      beginColumn = e.currentToken.beginColumn;
      final Token semicolon = error_skipto(SEMICOLON);
      fireParseError(new PHPParseErrorEvent(ERROR,
                                            path,
                                            "variable expected",
                                            "variable",
                                            e.currentToken.next.image,
                                            varToken.sourceEnd,
                                            semicolon.sourceEnd,
                                            varToken.beginLine,
                                            semicolon.endLine,
                                            varToken.endColumn,
                                            semicolon.endColumn));
      {if (true) return null;}
    }
    try {
      semicolonToken = jj_consume_token(SEMICOLON);
      end       = semicolonToken.sourceEnd;
      endLine   = semicolonToken.endLine;
      endColumn = semicolonToken.endColumn;
    } catch (ParseException e) {
    end       = e.currentToken.sourceEnd;
    endLine   = e.currentToken.endLine;
    endColumn = e.currentToken.endColumn;
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "';' expected",
                                          ";",
                                          e.currentToken.image,
                                          e.currentToken.sourceStart,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    int visibility = (visibilityToken == null) ? PUBLIC : visibilityToken.kind;
    {if (true) return new FieldDeclaration(visibility,
                                path,
                                variableDeclaration,
                                currentSegment,
                                start,
                                end,
                                beginLine,
                                endLine,
                                beginColumn,
                                endColumn);}
    throw new Error("Missing return statement in function");
  }

 //}}}

//{{{ abstractMethodDeclaration(int type, Token visibility)
/**
 * A Method Declaration.
 * <b>function</b> MetodDeclarator() Block()
 *
 * @return a MethodDeclaration
 */
  final public MethodDeclaration abstractMethodDeclaration(int type, Token visibility) throws ParseException {
  final MethodDeclaration functionDeclaration;
  final MethodHeader methodHeader;
  final Block block;
  final OutlineableWithChildren seg = currentSegment;
  final Token functionToken;
  Token abstractToken = null;
  Token visibility2 = null;
    abstractToken = jj_consume_token(ABSTRACT);
    //{{{ if not php5 fire parse error
    if (!php5Enabled) {
      final Token semicolon = error_skipto(SEMICOLON);
      fireParseError("unexpected token abstract", "", abstractToken);
      {if (true) return null;}
    } //}}}

    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
    case PROTECTED:
    case PRIVATE:
      visibility2 = visibility();
      if (visibility != null) {
        fireParseError("unexpected token : "+visibility2.image, "", visibility2);
      }
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    functionToken = jj_consume_token(FUNCTION);
    methodHeader = methodHeader(functionToken,type);
    functionDeclaration = new MethodDeclaration(currentSegment,methodHeader);
    try {
      jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
      fireParseError("unexpected token : "+e.currentToken.image, ";", e.currentToken);
    }
    {if (true) return functionDeclaration;}
    throw new Error("Missing return statement in function");
  }

  //}}}



//{{{ modifier()
  final public Token modifier() throws ParseException {
  Token modifierToken;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      modifierToken = jj_consume_token(STATIC);
                                {if (true) return modifierToken;}
      break;
    case CONST:
      modifierToken = jj_consume_token(CONST);
                                {if (true) return modifierToken;}
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  //}}}
//{{{ visibility()
  final public Token visibility() throws ParseException {
  Token visibilityToken;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      visibilityToken = jj_consume_token(PUBLIC);
                                  {if (true) return visibilityToken;}
      break;
    case PROTECTED:
      visibilityToken = jj_consume_token(PROTECTED);
                                  {if (true) return visibilityToken;}
      break;
    case PRIVATE:
      visibilityToken = jj_consume_token(PRIVATE);
                                  {if (true) return visibilityToken;}
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  //}}}

//}}}

//{{{ Variables

//{{{ VariableDeclaratorNoSuffix()

/**
 * a strict variable declarator : there cannot be a suffix here.
 * It will be used by fields and formal parameters
 */
  final public VariableDeclaration VariableDeclaratorNoSuffix() throws ParseException {
  final Token identifierToken, lbrace,rbrace;
  final Expression expr;
  Expression initializer = null;
  Token assignToken = null;
  final Token dollarToken;
  Variable variable = null;
    dollarToken = jj_consume_token(DOLLAR);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        identifierToken = jj_consume_token(IDENTIFIER);
         variable = new Variable(identifierToken.image,
                                 dollarToken.sourceStart,
                                 identifierToken.sourceEnd,
                                 dollarToken.beginLine,
                                 identifierToken.endLine,
                                 dollarToken.beginColumn,
                                 identifierToken.endColumn);
        break;
      case LBRACE:
        lbrace = jj_consume_token(LBRACE);
        expr = Expression();
        rbrace = jj_consume_token(RBRACE);
         variable = new Variable(expr,
                                 lbrace.sourceStart,
                                 rbrace.sourceEnd,
                                 lbrace.beginLine,
                                 rbrace.endLine,
                                 lbrace.beginColumn,
                                 rbrace.endColumn);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
    fireParseError("identifier expected", "", e.currentToken);
    variable = new Variable("",
                            e.currentToken.sourceStart,
                            e.currentToken.sourceEnd,
                            e.currentToken.beginLine,
                            e.currentToken.endLine,
                            e.currentToken.beginColumn,
                            e.currentToken.endColumn);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      assignToken = jj_consume_token(ASSIGN);
      try {
        initializer = VariableInitializer();
      } catch (ParseException e) {
      fireParseError(new PHPParseErrorEvent(ERROR,
                                            path,
                                            "Literal expression expected in variable initializer",
                                            "literal",
                                            e.currentToken.image,
                                            assignToken.sourceEnd,
                                            assignToken.sourceEnd +1,
                                            e.currentToken.beginLine,
                                            e.currentToken.endLine,
                                            e.currentToken.endColumn,
                                            e.currentToken.endColumn+1));
      }
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    setTypeFromScope(variable);
    if (assignToken == null) {
      {if (true) return new VariableDeclaration(currentSegment,
                                     variable,
                                     variable.getSourceStart(),
                                     variable.getSourceEnd(),
                                     variable.getBeginLine(),
                                     variable.getEndLine(),
                                     variable.getBeginColumn(),
                                     variable.getEndColumn());}
    }
    if (initializer == null) {
      {if (true) return new VariableDeclaration(currentSegment,
                                     variable,
                                     null,
                                     "=",
                                     variable.getSourceStart(),
                                     assignToken.sourceEnd,
                                     variable.getBeginLine(),
                                     assignToken.endLine,
                                     variable.getBeginColumn(),
                                     assignToken.endColumn);}
    }
    {if (true) return new VariableDeclaration(currentSegment,
                                   variable,
                                   initializer,
                                   "=",
                                   variable.getSourceStart(),
                                   initializer.getSourceEnd(),
                                   variable.getBeginLine(),
                                   initializer.getEndLine(),
                                   variable.getBeginColumn(),
                                   initializer.getEndColumn());}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ VariableDeclarator()

/**
 * this will be used by static statement
 */
  final public VariableDeclaration VariableDeclarator() throws ParseException {
  final AbstractVariable variable;
  Expression initializer = null;
  Token assignToken = null;
    variable = VariableDeclaratorId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      assignToken = jj_consume_token(ASSIGN);
      try {
        initializer = VariableInitializer();
      } catch (ParseException e) {
      fireParseError(new PHPParseErrorEvent(ERROR,
                                            path,
                                            "Literal expression expected in variable initializer",
                                            "literal",
                                            e.currentToken.image,
                                            token.sourceEnd,
                                            token.sourceEnd+1,
                                            e.currentToken.beginLine,
                                            e.currentToken.endLine,
                                            e.currentToken.endColumn,
                                            e.currentToken.endColumn+1));
      }
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
  if (assignToken == null) {
    {if (true) return new VariableDeclaration(currentSegment,
                                   variable,
                                   variable.getSourceStart(),
                                   variable.getSourceEnd(),
                                   variable.getBeginLine(),
                                   variable.getEndLine(),
                                   variable.getBeginColumn(),
                                   variable.getEndColumn());}
  }
  if (initializer == null) {
    {if (true) return new VariableDeclaration(currentSegment,
                                   variable,
                                   null,
                                   "=",
                                   variable.getSourceStart(),
                                   assignToken.sourceEnd,
                                   variable.getBeginLine(),
                                   assignToken.endLine,
                                   variable.getBeginColumn(),
                                   assignToken.endColumn);}
  }
  {if (true) return new VariableDeclaration(currentSegment,
                                 variable,
                                 initializer,
                                 "=",
                                 variable.getSourceStart(),
                                 initializer.getSourceEnd(),
                                 variable.getBeginLine(),
                                 initializer.getEndLine(),
                                 variable.getBeginColumn(),
                                 initializer.getEndColumn());}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ VariableDeclaratorId()

/**
 * A Variable name.
 * @return the variable name (with suffix)
 */
  final public AbstractVariable VariableDeclaratorId() throws ParseException {
  AbstractVariable var;
    var = Variable();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASSACCESS:
      case LBRACE:
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_9;
      }
      var = VariableSuffix(var);
    }
    {if (true) return var;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ Variable()
  final public Variable Variable() throws ParseException {
  Variable variable;
  final Token dollarToken;
    dollarToken = jj_consume_token(DOLLAR);
    try {
      variable = Var();
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "identifier expected",
                                          "identifier",
                                          e.currentToken.image,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.next.sourceStart,
                                          e.currentToken.endLine,
                                          e.currentToken.next.beginLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.next.beginColumn));
    variable = new  Variable("",
                             dollarToken.sourceStart,
                             e.currentToken.next.sourceStart,
                             dollarToken.beginLine,
                             e.currentToken.next.beginLine,
                             dollarToken.beginColumn,
                             e.currentToken.next.beginColumn);
    }
    {if (true) return variable;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ Var()
  final public Variable Var() throws ParseException {
  Variable variable = null;
  final Token token, token2;
  final Expression expression;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR:
      token = jj_consume_token(DOLLAR);
      variable = Var();
      variable = new Variable(variable,
                              variable.getSourceStart(),
                              variable.getSourceEnd(),
                              variable.getBeginLine(),
                              variable.getEndLine(),
                              variable.getBeginColumn(),
                              variable.getBeginColumn());
      break;
    case LBRACE:
      token = jj_consume_token(LBRACE);
      expression = Expression();
      token2 = jj_consume_token(RBRACE);
      variable = new Variable(expression,
                              token.sourceStart,
                              token2.sourceEnd,
                              token.beginLine,
                              token2.endLine,
                              token.beginColumn,
                              token2.endColumn);
      break;
    case IDENTIFIER:
      token = jj_consume_token(IDENTIFIER);
      variable = new Variable(token.image,
                              token.sourceStart,
                              token.sourceEnd,
                              token.beginLine,
                              token.endLine,
                              token.beginColumn,
                              token.endColumn);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    setTypeFromScope(variable);
    {if (true) return variable;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ VariableInitializer()
  final public Expression VariableInitializer() throws ParseException {
  final Expression expr;
  final Token token, token2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOUBLEQUOTE:
    case HEREDOCSTARTTOKEN:
      expr = Literal();
    {if (true) return expr;}
      break;
    case MINUS:
      token2 = jj_consume_token(MINUS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        token = jj_consume_token(INTEGER_LITERAL);
        break;
      case FLOATING_POINT_LITERAL:
        token = jj_consume_token(FLOATING_POINT_LITERAL);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return new PrefixedUnaryExpression(new NumberLiteral(Type.INTEGER,token),
                                       token2.kind,
                                       token2.sourceStart,
                                       token2.beginLine,
                                       token2.beginColumn);}
      break;
    case PLUS:
      token2 = jj_consume_token(PLUS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        token = jj_consume_token(INTEGER_LITERAL);
        break;
      case FLOATING_POINT_LITERAL:
        token = jj_consume_token(FLOATING_POINT_LITERAL);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return new PrefixedUnaryExpression(new NumberLiteral(Type.INTEGER,token),
                                       token2.kind,
                                       token2.sourceStart,
                                       token2.beginLine,
                                       token2.beginColumn);}
      break;
    case ARRAY:
      expr = ArrayDeclarator();
    {if (true) return expr;}
      break;
    case IDENTIFIER:
      token = jj_consume_token(IDENTIFIER);
    {if (true) return new ConstantIdentifier(token);}
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//}}}


//}}}

//{{{ Arrays

//{{{ ArrayVariable()
  final public ArrayVariableDeclaration ArrayVariable() throws ParseException {
final Expression expr,expr2;
final Token arrayAssignToken;
    expr = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAYASSIGN:
      arrayAssignToken = jj_consume_token(ARRAYASSIGN);
      expr2 = Expression();
      int sourceEnd,endLine,endColumn;
      if (expr2 == null) {
        sourceEnd = arrayAssignToken.sourceEnd;
        endLine   = arrayAssignToken.endLine;
        endColumn = arrayAssignToken.endColumn;
      } else {
        sourceEnd = expr2.getSourceEnd();
        endLine   = expr2.getEndLine();
        endColumn = expr2.getEndColumn();
      }

      {if (true) return new ArrayVariableDeclaration(expr,expr2,expr.getSourceStart(),sourceEnd,expr.getBeginLine(),endLine,expr.getBeginColumn(),endColumn);}
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    {if (true) return new ArrayVariableDeclaration(expr,expr.getSourceEnd(),expr.getBeginLine(),expr.getEndLine(),expr.getBeginColumn(),expr.getEndColumn());}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ ArrayInitializer()
  final public ArrayVariableDeclaration[] ArrayInitializer() throws ParseException {
  ArrayVariableDeclaration expr;
  final ArrayList list = new ArrayList();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
    case LIST:
    case PRINT:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case NEW:
    case DEFINE:
    case GOTO:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case FALSE:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOUBLEQUOTE:
    case HEREDOCSTARTTOKEN:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
      expr = ArrayVariable();
       list.add(expr);
      label_10:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_10;
        }
        jj_consume_token(COMMA);
        expr = ArrayVariable();
          list.add(expr);
      }
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
               list.add(null);
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    ArrayVariableDeclaration[] vars = new ArrayVariableDeclaration[list.size()];
    list.toArray(vars);
    {if (true) return vars;}
    throw new Error("Missing return statement in function");
  }

//}}}


//}}}

//{{{ METHODS

//{{{ MethodDeclaration(int type, Token visibility)

/**
 * A Method Declaration.
 * <b>function</b> MetodDeclarator() Block()
 *
 * @return a MethodDeclaration
 */
  final public MethodDeclaration MethodDeclaration(int type, Token visibility) throws ParseException {
  final MethodDeclaration functionDeclaration;
  final MethodHeader methodHeader;
  final Block block;
  final OutlineableWithChildren seg = currentSegment;
  final Token functionToken;
  Token visibility2 = null;
    functionToken = jj_consume_token(FUNCTION);
    methodHeader = methodHeader(functionToken,type);
    functionDeclaration = new MethodDeclaration(currentSegment,methodHeader);
    currentSegment = functionDeclaration;
    scope = new Scope();
    scopeStack.push(scope);
    block = Block();
    functionDeclaration.setStatements(block.getStatements());
    functionDeclaration.setBodyLineStart(block.getBeginLine());
    functionDeclaration.setBodyColumnStart(block.getBeginColumn());
    functionDeclaration.setBodyLineEnd(block.getEndLine());
    functionDeclaration.setBodyColumnEnd(block.getEndColumn());
    currentSegment = seg;
    scope = new Scope();
    scopeStack.push(scope);
    {if (true) return functionDeclaration;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ methodHeader(int functionToken,int type)

/**
 * A MethodDeclarator.
 * [&] IDENTIFIER(parameters ...).
 *
 * @return a function description for the outline
 */
  final public MethodHeader methodHeader(Token functionToken,int type) throws ParseException {
  Token reference = null;
  final ArrayList formalParameters = new ArrayList();
  final Token methodNameToken;
  Token visibilityToken = null;
  String identifierChar = SYNTAX_ERROR_CHAR;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BIT_AND:
      reference = jj_consume_token(BIT_AND);
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    try {
      if (type == CONST_FUNCTION) {
        methodNameToken = functionIdentifier();
      } else {
        methodNameToken = methodIdentifier();
      }
      identifierChar = methodNameToken.image;
    } catch (ParseException e) {
      if (e.currentToken.next.kind == PHPParserConstants.LPAREN) {
        //{{{ Parse error
        fireParseError(new PHPParseErrorEvent(ERROR,
                                              path,
                                              "identifier expected",
                                              "identifier",
                                              e.currentToken.image,
                                              functionToken.sourceStart,
                                              e.currentToken.sourceStart,
                                              e.currentToken.beginLine,
                                              e.currentToken.endLine,
                                              e.currentToken.beginColumn-1,
                                              e.currentToken.endColumn)); //}}}
      } else {
        fireParseError("unexpected token","identifier",e.currentToken.next);
      }
    }
    FormalParameters(formalParameters);
    {if (true) return new MethodHeader(path,
                            identifierChar,
                            reference != null,
                            formalParameters,
                            functionToken.sourceStart,
                            token.sourceEnd,
                            functionToken.beginLine,
                            token.endLine,
                            functionToken.beginColumn,
                            token.endColumn);}
    throw new Error("Missing return statement in function");
  }

 //}}}
//{{{ functionIdentifier()
/**
 * This is a function identifier.
 * It's not exactly the same as methodIdentifier since methods can use a lot of keywords for their names.
 *
 * @return an identifier for a function
 */
  final public Token functionIdentifier() throws ParseException {
  Token methodIdentifier;
    methodIdentifier = jj_consume_token(IDENTIFIER);
                                    {if (true) return methodIdentifier;}
    throw new Error("Missing return statement in function");
  }

  //}}}

//{{{ methodIdentifier()
/**
 * This is a method identifier.
 * It can returns a lot of keywords since those are allowed (but discouraged for method names).
 *
 * @return an identifier for a function
 */
  final public Token methodIdentifier() throws ParseException {
  Token methodIdentifier;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      methodIdentifier = jj_consume_token(IDENTIFIER);
      break;
    case DEFINE:
      methodIdentifier = jj_consume_token(DEFINE);
      break;
    case GOTO:
      methodIdentifier = jj_consume_token(GOTO);
      break;
    case NEW:
      methodIdentifier = jj_consume_token(NEW);
      break;
    case SUPER:
      methodIdentifier = jj_consume_token(SUPER);
      break;
    case THIS:
      methodIdentifier = jj_consume_token(THIS);
      break;
    case TRUE:
      methodIdentifier = jj_consume_token(TRUE);
      break;
    case FALSE:
      methodIdentifier = jj_consume_token(FALSE);
      break;
    case STRING:
      methodIdentifier = jj_consume_token(STRING);
      break;
    case OBJECT:
      methodIdentifier = jj_consume_token(OBJECT);
      break;
    case BOOL:
      methodIdentifier = jj_consume_token(BOOL);
      break;
    case BOOLEAN:
      methodIdentifier = jj_consume_token(BOOLEAN);
      break;
    case REAL:
      methodIdentifier = jj_consume_token(REAL);
      break;
    case DOUBLE:
      methodIdentifier = jj_consume_token(DOUBLE);
      break;
    case FLOAT:
      methodIdentifier = jj_consume_token(FLOAT);
      break;
    case INT:
      methodIdentifier = jj_consume_token(INT);
      break;
    case INTEGER:
      methodIdentifier = jj_consume_token(INTEGER);
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return methodIdentifier;}
    throw new Error("Missing return statement in function");
  }

  //}}}

//{{{ constantIdentifier()
/**
 * This is a constant identifier.
 * It can returns a lot of keywords
 *
 * @return an identifier for a function
 */
  final public Token constantIdentifier() throws ParseException {
  Token constantIdentifier;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      constantIdentifier = jj_consume_token(IDENTIFIER);
      break;
    case DEFINE:
      constantIdentifier = jj_consume_token(DEFINE);
      break;
    case GOTO:
      constantIdentifier = jj_consume_token(GOTO);
      break;
    case SUPER:
      constantIdentifier = jj_consume_token(SUPER);
      break;
    case THIS:
      constantIdentifier = jj_consume_token(THIS);
      break;
    case STRING:
      constantIdentifier = jj_consume_token(STRING);
      break;
    case OBJECT:
      constantIdentifier = jj_consume_token(OBJECT);
      break;
    case BOOL:
      constantIdentifier = jj_consume_token(BOOL);
      break;
    case BOOLEAN:
      constantIdentifier = jj_consume_token(BOOLEAN);
      break;
    case REAL:
      constantIdentifier = jj_consume_token(REAL);
      break;
    case DOUBLE:
      constantIdentifier = jj_consume_token(DOUBLE);
      break;
    case FLOAT:
      constantIdentifier = jj_consume_token(FLOAT);
      break;
    case INT:
      constantIdentifier = jj_consume_token(INT);
      break;
    case INTEGER:
      constantIdentifier = jj_consume_token(INTEGER);
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return constantIdentifier;}
    throw new Error("Missing return statement in function");
  }

  //}}}

//{{{ FormalParameters(ArrayList parameters)

/**
 * FormalParameters follows method identifier.
 * (FormalParameter())
 */
  final public void FormalParameters(ArrayList parameters) throws ParseException {
  FormalParameter var;
    try {
      jj_consume_token(LPAREN);
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'(' expected",
                                          "(",
                                          e.currentToken.image,
                                          e.currentToken.sourceStart,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BIT_AND:
    case DOLLAR:
    case IDENTIFIER:
      var = FormalParameter();
     parameters.add(var);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[46] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMMA);
        try {
          var = FormalParameter();
           parameters.add(var);
        } catch (ParseException e) {
          fireParseError(new PHPParseErrorEvent(ERROR,
                                                path,
                                                "parameter expected",
                                                "parameter",
                                                e.currentToken.image,
                                                e.currentToken.sourceStart,
                                                e.currentToken.sourceEnd,
                                                e.currentToken.beginLine,
                                                e.currentToken.endLine,
                                                e.currentToken.endColumn,
                                                e.currentToken.endColumn+1));
        }
      }
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    try {
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
                               //recup rparen si avant lbrace
      Token nextToken = getNextToken();
      while (nextToken.kind != EOF && nextToken.kind != RPAREN && nextToken.kind != LBRACE) {
        nextToken = getNextToken();
      }
      if (nextToken.kind == EOF) {
        fireParseError(new PHPParseErrorEvent(ERROR,
                                              path,
                                              "unexpected end of file",
                                              ")",
                                              e.currentToken.next.image,
                                              e.currentToken.sourceEnd,
                                              nextToken.sourceStart,
                                              e.currentToken.beginLine,
                                              nextToken.endLine,
                                              e.currentToken.endColumn,
                                              nextToken.endColumn));
      } else if (nextToken.kind == RPAREN) {
        fireParseError(new PHPParseErrorEvent(ERROR,
                                              path,
                                              "unexpected tokens",
                                              "",
                                              e.currentToken.next.image,
                                              e.currentToken.next.sourceEnd,
                                              nextToken.sourceStart,
                                              e.currentToken.next.beginLine,
                                              nextToken.beginLine,
                                              e.currentToken.next.endColumn+1,
                                              nextToken.beginColumn-1));
      } else {
        fireParseError(new PHPParseErrorEvent(ERROR,
                                        path,
                                        "')' expected",
                                        ")",
                                        e.currentToken.next.image,
                                        e.currentToken.sourceEnd,
                                        nextToken.sourceStart,
                                        e.currentToken.beginLine,
                                        nextToken.endLine,
                                        e.currentToken.endColumn+1,
                                        nextToken.endColumn-1));
      }
    }
  }

//}}}
//{{{ FormalParameter()

/**
 * A formal parameter.
 * $varname[=value] (,$varname[=value])
 */
  final public FormalParameter FormalParameter() throws ParseException {
  final VariableDeclaration variableDeclaration;
  final FormalParameter parameter;
  Token bitAndToken = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BIT_AND:
      bitAndToken = jj_consume_token(BIT_AND);
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    variableDeclaration = VariableDeclaratorNoSuffix();
    if (bitAndToken != null) {
      variableDeclaration.setReference(true,bitAndToken.sourceStart,bitAndToken.beginLine,bitAndToken.beginColumn);
    }
    Expression initialization = variableDeclaration.getInitialization();
    if (initialization == null) {
      parameter = new FormalParameter(variableDeclaration.getName(),
                                      bitAndToken != null,
                                      variableDeclaration.getSourceStart(),
                                      variableDeclaration.getSourceEnd(),
                                      variableDeclaration.getBeginLine(),
                                      variableDeclaration.getEndLine(),
                                      variableDeclaration.getBeginColumn(),
                                      variableDeclaration.getEndColumn());
    } else {
      parameter = new FormalParameter(variableDeclaration.getName(),
                                      bitAndToken != null,
                                      variableDeclaration.getInitialization().toStringExpression(),
                                      variableDeclaration.getSourceStart(),
                                      variableDeclaration.getSourceEnd(),
                                      variableDeclaration.getBeginLine(),
                                      variableDeclaration.getEndLine(),
                                      variableDeclaration.getBeginColumn(),
                                      variableDeclaration.getEndColumn());
    }
    {if (true) return parameter;}
    throw new Error("Missing return statement in function");
  }

//}}}

//}}}

//{{{ Type()
  final public ConstantIdentifier Type() throws ParseException {
  final Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      token = jj_consume_token(STRING);
      break;
    case BOOL:
      token = jj_consume_token(BOOL);
      break;
    case BOOLEAN:
      token = jj_consume_token(BOOLEAN);
      break;
    case REAL:
      token = jj_consume_token(REAL);
      break;
    case DOUBLE:
      token = jj_consume_token(DOUBLE);
      break;
    case FLOAT:
      token = jj_consume_token(FLOAT);
      break;
    case INT:
      token = jj_consume_token(INT);
      break;
    case INTEGER:
      token = jj_consume_token(INTEGER);
      break;
    case OBJECT:
      token = jj_consume_token(OBJECT);
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new ConstantIdentifier(token);}
    throw new Error("Missing return statement in function");
  }

//}}}

//{{{ EXPRESSIONS

//{{{ Expression()
  final public Expression Expression() throws ParseException {
  final Expression expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRINT:
      expr = PrintExpression();
                               {if (true) return expr;}
      break;
    default:
      jj_la1[51] = jj_gen;
      if (jj_2_2(2147483647)) {
        expr = assignment();
    {if (true) return expr;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARRAY:
        case LIST:
        case INCLUDE:
        case REQUIRE:
        case INCLUDE_ONCE:
        case REQUIRE_ONCE:
        case NEW:
        case DEFINE:
        case GOTO:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case FALSE:
        case STRING:
        case OBJECT:
        case BOOL:
        case BOOLEAN:
        case REAL:
        case DOUBLE:
        case FLOAT:
        case INT:
        case INTEGER:
        case AT:
        case BANG:
        case TILDE:
        case PLUS_PLUS:
        case MINUS_MINUS:
        case PLUS:
        case MINUS:
        case BIT_AND:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case DOUBLEQUOTE:
        case HEREDOCSTARTTOKEN:
        case DOLLAR:
        case IDENTIFIER:
        case LPAREN:
          try {
            expr = ConditionalExpression();
        {if (true) return expr;}
          } catch (ParseException e) {
      //{{{ Parse Exception
      fireParseError(new PHPParseErrorEvent(ERROR,
                     path,
                     "expression expected",
                     "expression",
                     e.currentToken.image,
                     token.sourceEnd,
                     token.sourceEnd,
                     e.currentToken.beginLine,
                     e.currentToken.endLine,
                     e.currentToken.endColumn,
                     e.currentToken.endColumn)); //}}}
      {if (true) return new DummyExpression(e.currentToken.sourceStart,
                                 e.currentToken.sourceEnd,
                                 e.currentToken.beginLine,
                                 e.currentToken.endLine,
                                 e.currentToken.beginColumn,
                                 e.currentToken.endColumn);}
          }
          break;
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  //}}}
//{{{ assignment()
  final public Expression assignment() throws ParseException {
  final Expression expr,initializer;
  final Token assignOperator;
    expr = prefixedPrimaryExpression();
    assignOperator = AssignmentOperator();
    initializer = Expression();
    {if (true) return new Assignment(expr,
                          initializer,
                          assignOperator.kind,
                          expr.getSourceStart(),
                          initializer.getSourceEnd(),
                          expr.getBeginLine(),
                          initializer.getEndLine(),
                          expr.getBeginColumn(),
                          initializer.getEndColumn());}
    throw new Error("Missing return statement in function");
  }

  //}}}

//{{{ prefixedPrimaryExpression()
  final public Expression prefixedPrimaryExpression() throws ParseException {
  Expression expr;
  Token prefixToken;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
      prefixToken = jj_consume_token(BANG);
      expr = prefixedPrimaryExpression();
    {if (true) return new PrefixedUnaryExpression(expr,PHPParserConstants.BANG,prefixToken.sourceStart,prefixToken.beginLine,prefixToken.beginColumn);}
      break;
    case AT:
      prefixToken = jj_consume_token(AT);
      expr = prefixedPrimaryExpression();
    {if (true) return new PrefixedUnaryExpression(expr,PHPParserConstants.AT,prefixToken.sourceStart,prefixToken.beginLine,prefixToken.beginColumn);}
      break;
    case TILDE:
      prefixToken = jj_consume_token(TILDE);
      expr = prefixedPrimaryExpression();
    {if (true) return new PrefixedUnaryExpression(expr,PHPParserConstants.TILDE,prefixToken.sourceStart,prefixToken.beginLine,prefixToken.beginColumn);}
      break;
    case ARRAY:
    case LIST:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case NEW:
    case DEFINE:
    case GOTO:
    case SUPER:
    case THIS:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case BIT_AND:
    case DOLLAR:
    case IDENTIFIER:
      expr = PrimaryExpression();
   {if (true) return expr;}
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  //}}}

//}}}
//{{{ AssignmentOperator()

/**
 * Any assignement operator.
 *
 * @return the assignement operator token
 */
  final public Token AssignmentOperator() throws ParseException {
  final Token assignOperator;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      assignOperator = jj_consume_token(ASSIGN);
      break;
    case STARASSIGN:
      assignOperator = jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      assignOperator = jj_consume_token(SLASHASSIGN);
      break;
    case REMASSIGN:
      assignOperator = jj_consume_token(REMASSIGN);
      break;
    case PLUSASSIGN:
      assignOperator = jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      assignOperator = jj_consume_token(MINUSASSIGN);
      break;
    case LSHIFTASSIGN:
      assignOperator = jj_consume_token(LSHIFTASSIGN);
      break;
    case RSIGNEDSHIFTASSIGN:
      assignOperator = jj_consume_token(RSIGNEDSHIFTASSIGN);
      break;
    case ANDASSIGN:
      assignOperator = jj_consume_token(ANDASSIGN);
      break;
    case XORASSIGN:
      assignOperator = jj_consume_token(XORASSIGN);
      break;
    case ORASSIGN:
      assignOperator = jj_consume_token(ORASSIGN);
      break;
    case DOTASSIGN:
      assignOperator = jj_consume_token(DOTASSIGN);
      break;
    case TILDEEQUAL:
      assignOperator = jj_consume_token(TILDEEQUAL);
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return assignOperator;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ ConditionalExpression()
  final public Expression ConditionalExpression() throws ParseException {
  final Expression expr;
  Expression expr2 = null;
  Expression expr3 = null;
    expr = ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
      expr2 = Expression();
      jj_consume_token(COLON);
      expr3 = Expression();
      break;
    default:
      jj_la1[55] = jj_gen;
      ;
    }
  if (expr3 == null) {
    {if (true) return expr;}
  }
  ConditionalExpression conditionalExpression = new ConditionalExpression(expr,expr2,expr3);
  //conditionalExpression.analyzeCode(this);
  {if (true) return conditionalExpression;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ ConditionalOrExpression()
  final public Expression ConditionalOrExpression() throws ParseException {
  Expression expr,expr2;
  int sourceEnd,endLine,endColumn;
  Token orToken;
    expr = ConditionalAndExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR_OR:
      case _ORL:
      case XOR:
        ;
        break;
      default:
        jj_la1[56] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR_OR:
        orToken = jj_consume_token(OR_OR);
        break;
      case _ORL:
        orToken = jj_consume_token(_ORL);
        break;
      case XOR:
        orToken = jj_consume_token(XOR);
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr2 = ConditionalAndExpression();
      if (expr2 == null) {
        sourceEnd = orToken.sourceEnd;
        endLine   = orToken.endLine;
        endColumn = orToken.endColumn;
      } else {
        sourceEnd = expr2.getSourceEnd();
        endLine   = expr2.getEndLine();
        endColumn = expr2.getEndColumn();
      }
      expr = new BinaryExpression(expr,expr2,orToken.kind,expr.getSourceStart(),sourceEnd,expr.getBeginLine(),endLine,expr.getBeginColumn(),endColumn);
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ ConditionalAndExpression()
  final public Expression ConditionalAndExpression() throws ParseException {
  Expression expr,expr2;
  int sourceEnd,endLine,endColumn;
  Token andToken;
    expr = ConcatExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND_AND:
      case _ANDL:
        ;
        break;
      default:
        jj_la1[58] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND_AND:
        andToken = jj_consume_token(AND_AND);
        break;
      case _ANDL:
        andToken = jj_consume_token(_ANDL);
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr2 = ConcatExpression();
     if (expr2 == null) {
       sourceEnd = andToken.sourceEnd;
       endLine   = andToken.endLine;
       endColumn = andToken.endColumn;
     } else {
       sourceEnd = expr2.getSourceEnd();
       endLine   = expr2.getEndLine();
       endColumn = expr2.getEndColumn();
     }
     expr = new BinaryExpression(expr,expr2,andToken.kind,expr.getSourceStart(),sourceEnd,expr.getBeginLine(),endLine,expr.getBeginColumn(),endColumn);
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ ConcatExpression()
  final public Expression ConcatExpression() throws ParseException {
  Expression expr,expr2;
  Token dotToken;
  int sourceEnd,endLine,endColumn;
    expr = InclusiveOrExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_14;
      }
      dotToken = jj_consume_token(DOT);
      expr2 = InclusiveOrExpression();
      if (expr2 == null) {
        sourceEnd = dotToken.sourceEnd;
        endLine   = dotToken.endLine;
        endColumn = dotToken.endColumn;
      } else {
        sourceEnd = expr2.getSourceEnd();
        endLine   = expr2.getEndLine();
        endColumn = expr2.getEndColumn();
      }
      expr = new BinaryExpression(expr,expr2,PHPParserConstants.DOT,expr.getSourceStart(),sourceEnd,expr.getBeginLine(),endLine,expr.getBeginColumn(),endColumn);
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ InclusiveOrExpression()
  final public Expression InclusiveOrExpression() throws ParseException {
  Expression expr,expr2;
  Token bitOrToken;
  int sourceEnd,endLine,endColumn;
    expr = ExclusiveOrExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_15;
      }
      bitOrToken = jj_consume_token(BIT_OR);
      expr2 = ExclusiveOrExpression();
     if (expr2 == null) {
       sourceEnd = bitOrToken.sourceEnd;
       endLine   = bitOrToken.endLine;
       endColumn = bitOrToken.endColumn;
     } else {
       sourceEnd = expr2.getSourceEnd();
       endLine   = expr2.getEndLine();
       endColumn = expr2.getEndColumn();
     }
     expr = new BinaryExpression(expr,expr2,PHPParserConstants.BIT_OR,expr.getSourceStart(),sourceEnd,expr.getBeginLine(),endLine,expr.getBeginColumn(),endColumn);
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ ExclusiveOrExpression()
  final public Expression ExclusiveOrExpression() throws ParseException {
  Expression expr,expr2;
  Token bitXorToken;
  int sourceEnd,endLine,endColumn;
    expr = AndExpression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_XOR:
        ;
        break;
      default:
        jj_la1[62] = jj_gen;
        break label_16;
      }
      bitXorToken = jj_consume_token(BIT_XOR);
      expr2 = AndExpression();
      if (expr2 == null) {
        sourceEnd = bitXorToken.sourceEnd;
        endLine   = bitXorToken.endLine;
        endColumn = bitXorToken.endColumn;
      } else {
        sourceEnd = expr2.getSourceEnd();
        endLine   = expr2.getEndLine();
        endColumn = expr2.getEndColumn();
      }
      expr = new BinaryExpression(expr,expr2,PHPParserConstants.BIT_XOR,expr.getSourceStart(),sourceEnd,expr.getBeginLine(),endLine,expr.getBeginColumn(),endColumn);
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ AndExpression()
  final public Expression AndExpression() throws ParseException {
  Expression expr,expr2;
  Token bitAndToken;
  int sourceEnd,endLine,endColumn;
    expr = EqualityExpression();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[63] = jj_gen;
        break label_17;
      }
      bitAndToken = jj_consume_token(BIT_AND);
      expr2 = EqualityExpression();
      if (expr2 == null) {
        sourceEnd = bitAndToken.sourceEnd;
        endLine   = bitAndToken.endLine;
        endColumn = bitAndToken.endColumn;
      } else {
        sourceEnd = expr2.getSourceEnd();
        endLine   = expr2.getEndLine();
        endColumn = expr2.getEndColumn();
      }
      expr = new BinaryExpression(expr,expr2,PHPParserConstants.BIT_AND,expr.getSourceStart(),sourceEnd,expr.getBeginLine(),endLine,expr.getBeginColumn(),endColumn);
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ EqualityExpression()
  final public Expression EqualityExpression() throws ParseException {
  Expression expr,expr2;
  Token token;
  int sourceEnd,endLine,endColumn;
    expr = instanceofExpression();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL_EQUAL:
      case NOT_EQUAL:
      case DIF:
      case BANGDOUBLEEQUAL:
      case TRIPLEEQUAL:
        ;
        break;
      default:
        jj_la1[64] = jj_gen;
        break label_18;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL_EQUAL:
        token = jj_consume_token(EQUAL_EQUAL);
        break;
      case DIF:
        token = jj_consume_token(DIF);
        break;
      case NOT_EQUAL:
        token = jj_consume_token(NOT_EQUAL);
        break;
      case BANGDOUBLEEQUAL:
        token = jj_consume_token(BANGDOUBLEEQUAL);
        break;
      case TRIPLEEQUAL:
        token = jj_consume_token(TRIPLEEQUAL);
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      try {
        expr2 = instanceofExpression();
      } catch (ParseException e) {
    if (errorMessage != null) {
      {if (true) throw e;}
    }
    expr2 = new ConstantIdentifier(SYNTAX_ERROR_CHAR,
                                   token.sourceEnd +1,
                                   token.sourceEnd +1,
                                   token.beginLine,
                                   token.endLine,
                                   token.beginColumn,
                                   token.endColumn);
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "expression expected",
                                          "expression",
                                          e.currentToken.image,
                                          token.sourceEnd,
                                          token.sourceEnd+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
      }
    if (expr2 == null) {
      sourceEnd = token.sourceEnd;
      endLine   = token.endLine;
      endColumn = token.endColumn;
    } else {
      sourceEnd = expr2.getSourceEnd();
      endLine   = expr2.getEndLine();
      endColumn = expr2.getEndColumn();
    }
    expr = new BinaryExpression(expr,expr2,token.kind,expr.getSourceStart(),sourceEnd,expr.getBeginLine(),endLine,expr.getBeginColumn(),endColumn);
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  //}}}

//{{{ instanceofExpression()
  final public Expression instanceofExpression() throws ParseException {
  Expression expr;
  Expression expr2 = null;
  int sourceEnd,endLine,endColumn;
    expr = RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
      try {
        expr2 = ClassIdentifier();
      } catch (ParseException e) {
      fireParseError("string or object expected","string or object",e.currentToken.next);
      }
      if (expr2 == null) {
        sourceEnd = token.sourceEnd;
        endLine   = token.endLine;
        endColumn = token.endColumn;
      } else {
        sourceEnd = expr2.getSourceEnd();
        endLine   = expr2.getEndLine();
        endColumn = expr2.getEndColumn();
      }
      expr = new BinaryExpression(expr,expr2,PHPParserConstants.INSTANCEOF,expr.getSourceStart(),sourceEnd,expr.getBeginLine(),endLine,expr.getBeginColumn(),endColumn);
      break;
    default:
      jj_la1[66] = jj_gen;
      ;
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  //}}}
//{{{ RelationalExpression()
  final public Expression RelationalExpression() throws ParseException {
  Expression expr,expr2;
  int sourceEnd,endLine,endColumn;
  Token token;
    expr = ShiftExpression();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        token = jj_consume_token(LT);
        break;
      case GT:
        token = jj_consume_token(GT);
        break;
      case LE:
        token = jj_consume_token(LE);
        break;
      case GE:
        token = jj_consume_token(GE);
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr2 = ShiftExpression();
    if (expr2 == null) {
      sourceEnd = token.sourceEnd;
      endLine   = token.endLine;
      endColumn = token.endColumn;
    } else {
      sourceEnd = expr2.getSourceEnd();
      endLine   = expr2.getEndLine();
      endColumn = expr2.getEndColumn();
    }
    expr = new BinaryExpression(expr,expr2,token.kind,expr.getSourceStart(),sourceEnd,expr.getBeginLine(),endLine,expr.getBeginColumn(),endColumn);
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ ShiftExpression()
  final public Expression ShiftExpression() throws ParseException {
  Expression expr,expr2;
  int sourceEnd,endLine,endColumn;
  Token token;
    expr = AdditiveExpression();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
      case RSIGNEDSHIFT:
      case RUNSIGNEDSHIFT:
        ;
        break;
      default:
        jj_la1[69] = jj_gen;
        break label_20;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        token = jj_consume_token(LSHIFT);
        break;
      case RSIGNEDSHIFT:
        token = jj_consume_token(RSIGNEDSHIFT);
        break;
      case RUNSIGNEDSHIFT:
        token = jj_consume_token(RUNSIGNEDSHIFT);
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr2 = AdditiveExpression();
    if (expr2 == null) {
      sourceEnd = token.sourceEnd;
      endLine   = token.endLine;
      endColumn = token.endColumn;
    } else {
      sourceEnd = expr2.getSourceEnd();
      endLine   = expr2.getEndLine();
      endColumn = expr2.getEndColumn();
    }
    expr = new BinaryExpression(expr,expr2,token.kind,expr.getSourceStart(),sourceEnd,expr.getBeginLine(),endLine,expr.getBeginColumn(),endColumn);
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ AdditiveExpression()
  final public Expression AdditiveExpression() throws ParseException {
  Expression expr,expr2;
  int sourceEnd,endLine,endColumn;
  Token token;
    expr = MultiplicativeExpression();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[71] = jj_gen;
        break label_21;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        token = jj_consume_token(PLUS);
        break;
      case MINUS:
        token = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr2 = MultiplicativeExpression();
    if (expr2 == null) {
      sourceEnd = token.sourceEnd;
      endLine   = token.endLine;
      endColumn = token.endColumn;
    } else {
      sourceEnd = expr2.getSourceEnd();
      endLine   = expr2.getEndLine();
      endColumn = expr2.getEndColumn();
    }
    expr = new BinaryExpression(expr,expr2,token.kind,expr.getSourceStart(),sourceEnd,expr.getBeginLine(),endLine,expr.getBeginColumn(),endColumn);
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ MultiplicativeExpression()
  final public Expression MultiplicativeExpression() throws ParseException {
  Expression expr,expr2;
  int sourceEnd,endLine,endColumn;
  Token token;
    try {
      expr = UnaryExpression();
    } catch (ParseException e) {
    if (errorMessage != null) {if (true) throw e;}
    errorMessage = "unexpected token '"+e.currentToken.next.image+'\'';
    errorStart = this.token.sourceStart;
    errorEnd   = this.token.sourceEnd;
    {if (true) throw e;}
    }
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REMAINDER:
        ;
        break;
      default:
        jj_la1[73] = jj_gen;
        break label_22;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        token = jj_consume_token(STAR);
        break;
      case SLASH:
        token = jj_consume_token(SLASH);
        break;
      case REMAINDER:
        token = jj_consume_token(REMAINDER);
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr2 = UnaryExpression();
      if (expr2 == null) {
        sourceEnd = token.sourceEnd;
        endLine   = token.endLine;
        endColumn = token.endColumn;
      } else {
        sourceEnd = expr2.getSourceEnd();
        endLine   = expr2.getEndLine();
        endColumn = expr2.getEndColumn();
      }
      expr = new BinaryExpression(expr,expr2,token.kind,expr.getSourceStart(),sourceEnd,expr.getBeginLine(),endLine,expr.getBeginColumn(),endColumn);
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ UnaryExpression()

/**
 * An unary expression starting with @, & or nothing.
 *
 * @return the unary expression
 */
  final public Expression UnaryExpression() throws ParseException {
  final Expression expr;
    try {
      expr = AtNotTildeUnaryExpression();
                                        {if (true) return expr;}
    } catch (ParseException e) {
    fireParseError("unexpected token : '"+e.currentToken.image+'\'', "", e.currentToken);
      Token nextToken = getNextToken();
      while (nextToken.kind != EOF && nextToken.kind != SEMICOLON) {
        nextToken = getNextToken();
      }
      if (nextToken.kind == EOF) {
        fireParseError(new PHPParseErrorEvent(ERROR,
                                              path,
                                              "unexpected end of file",
                                              ")",
                                              e.currentToken.next.image,
                                              e.currentToken.sourceEnd,
                                              nextToken.sourceStart,
                                              e.currentToken.beginLine,
                                              nextToken.endLine,
                                              e.currentToken.endColumn,
                                              nextToken.endColumn));
      } else {
        fireParseError(new PHPParseErrorEvent(ERROR,
                                              path,
                                              "expression expected",
                                              ")",
                                              e.currentToken.next.image,
                                              e.currentToken.sourceEnd,
                                              nextToken.sourceStart,
                                              e.currentToken.beginLine,
                                              nextToken.endLine,
                                              e.currentToken.endColumn+1,
                                              nextToken.endColumn-1));
      }
      {if (true) return null;}
    /*



    getNextToken();
    return UnaryExpression();
    */

    }
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ AtNotTildeUnaryExpression()
  final public Expression AtNotTildeUnaryExpression() throws ParseException {
  if (shouldStop) throw new ParsingAbortedError();
  final Expression expr;
  final Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      token = jj_consume_token(AT);
      expr = AtNotTildeUnaryExpression();
   {if (true) return new PrefixedUnaryExpression(expr,PHPParserConstants.AT,token.sourceStart,token.beginLine,token.beginColumn);}
      break;
    case TILDE:
      token = jj_consume_token(TILDE);
      expr = AtNotTildeUnaryExpression();
   {if (true) return new PrefixedUnaryExpression(expr,PHPParserConstants.TILDE,token.sourceStart,token.beginLine,token.beginColumn);}
      break;
    case BANG:
      token = jj_consume_token(BANG);
      expr = AtNotUnaryExpression();
   {if (true) return new PrefixedUnaryExpression(expr,PHPParserConstants.BANG,token.sourceStart,token.beginLine,token.beginColumn);}
      break;
    case ARRAY:
    case LIST:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case NEW:
    case DEFINE:
    case GOTO:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case FALSE:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOUBLEQUOTE:
    case HEREDOCSTARTTOKEN:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
      expr = UnaryExpressionNoPrefix();
   {if (true) return expr;}
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ AtNotUnaryExpression()

/**
 * An expression prefixed (or not) by one or more @ and !.
 * @return the expression
 */
  final public Expression AtNotUnaryExpression() throws ParseException {
  final Expression expr;
  final Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      token = jj_consume_token(AT);
      expr = AtNotUnaryExpression();
   {if (true) return new PrefixedUnaryExpression(expr,PHPParserConstants.AT,token.sourceStart,token.beginLine,token.beginColumn);}
      break;
    case BANG:
      token = jj_consume_token(BANG);
      expr = AtNotUnaryExpression();
   {if (true) return new PrefixedUnaryExpression(expr,PHPParserConstants.BANG,token.sourceStart,token.beginLine,token.beginColumn);}
      break;
    case ARRAY:
    case LIST:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case NEW:
    case DEFINE:
    case GOTO:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case FALSE:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOUBLEQUOTE:
    case HEREDOCSTARTTOKEN:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
      expr = UnaryExpressionNoPrefix();
   {if (true) return expr;}
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ UnaryExpressionNoPrefix()
  final public Expression UnaryExpressionNoPrefix() throws ParseException {
  final Expression expr;
  final Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      token = jj_consume_token(PLUS);
      expr = AtNotTildeUnaryExpression();
    {if (true) return new PrefixedUnaryExpression(expr,
                                       PHPParserConstants.PLUS,
                                       token.sourceStart,
                                       token.beginLine,
                                       token.beginColumn);}
      break;
    case MINUS:
      token = jj_consume_token(MINUS);
      expr = AtNotTildeUnaryExpression();
    {if (true) return new PrefixedUnaryExpression(expr,
                                       PHPParserConstants.MINUS,
                                       token.sourceStart,
                                       token.beginLine,
                                       token.beginColumn);}
      break;
    case PLUS_PLUS:
    case MINUS_MINUS:
      expr = PreIncDecExpression();
   {if (true) return expr;}
      break;
    case ARRAY:
    case LIST:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case NEW:
    case DEFINE:
    case GOTO:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case FALSE:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOUBLEQUOTE:
    case HEREDOCSTARTTOKEN:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
      expr = UnaryExpressionNotPlusMinus();
   {if (true) return expr;}
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ PreIncDecExpression()
  final public Expression PreIncDecExpression() throws ParseException {
final Expression expr;
final Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_PLUS:
      token = jj_consume_token(PLUS_PLUS);
      break;
    case MINUS_MINUS:
      token = jj_consume_token(MINUS_MINUS);
      break;
    default:
      jj_la1[78] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    expr = PrimaryExpression();
    {if (true) return new PrefixedUnaryExpression(expr,
                                       token.kind,
                                       token.sourceStart,
                                       token.beginLine,
                                       token.beginColumn);}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ UnaryExpressionNotPlusMinus()
  final public Expression UnaryExpressionNotPlusMinus() throws ParseException {
  final Expression expr;
    if (jj_2_3(2147483647)) {
      expr = CastExpression();
                                   {if (true) return expr;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAY:
      case LIST:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case NEW:
      case DEFINE:
      case GOTO:
      case SUPER:
      case THIS:
      case STRING:
      case OBJECT:
      case BOOL:
      case BOOLEAN:
      case REAL:
      case DOUBLE:
      case FLOAT:
      case INT:
      case INTEGER:
      case BIT_AND:
      case DOLLAR:
      case IDENTIFIER:
        expr = PostfixExpression();
                                   {if (true) return expr;}
        break;
      case NULL:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOUBLEQUOTE:
      case HEREDOCSTARTTOKEN:
        expr = Literal();
                                   {if (true) return expr;}
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        expr = Expression();
        try {
          jj_consume_token(RPAREN);
        } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "')'n expected",
                                          ")",
                                          e.currentToken.image,
                                          expr.getSourceEnd(),
                                          expr.getSourceEnd()+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
        }
   {if (true) return expr;}
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ CastExpression()
  final public CastExpression CastExpression() throws ParseException {
final ConstantIdentifier type;
final Expression expr;
final Token token,token1;
    token1 = jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
      type = Type();
      break;
    case ARRAY:
      token = jj_consume_token(ARRAY);
                       type = new ConstantIdentifier(token);
      break;
    default:
      jj_la1[80] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
    expr = UnaryExpression();
   {if (true) return new CastExpression(type,
                             expr,
                             token1.sourceStart,
                             expr.getSourceEnd(),
                             token1.beginLine,
                             expr.getEndLine(),
                             token1.beginColumn,
                             expr.getEndColumn());}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ PostfixExpression()
  final public Expression PostfixExpression() throws ParseException {
  final Expression expr;
  Token token = null;
    expr = PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_PLUS:
    case MINUS_MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_PLUS:
        token = jj_consume_token(PLUS_PLUS);
        break;
      case MINUS_MINUS:
        token = jj_consume_token(MINUS_MINUS);
        break;
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[82] = jj_gen;
      ;
    }
    if (token == null) {
      {if (true) return expr;}
    }
    {if (true) return new PostfixedUnaryExpression(expr,
                                        token.kind,
                                        token.sourceEnd,
                                        token.endLine,
                                        token.endColumn);}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ PrimaryExpression()
  final public Expression PrimaryExpression() throws ParseException {
  final Expression expr;
  Token token = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case DEFINE:
    case GOTO:
    case SUPER:
    case THIS:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case BIT_AND:
    case DOLLAR:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        token = jj_consume_token(BIT_AND);
        break;
      default:
        jj_la1[83] = jj_gen;
        ;
      }
      expr = refPrimaryExpression(token);
   {if (true) return expr;}
      break;
    case ARRAY:
      expr = ArrayDeclarator();
                              {if (true) return expr;}
      break;
    case LIST:
      expr = ListExpression();
                              {if (true) return expr;}
      break;
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
      expr = IncludeExpression();
                              {if (true) return expr;}
      break;
    default:
      jj_la1[84] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ refPrimaryExpression(final Token reference)
  final public Expression refPrimaryExpression(Token reference) throws ParseException {
  Expression expr;
  Expression expr2 = null;
  final Token identifier, newToken;
  Token staticClassAccess;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFINE:
    case GOTO:
    case SUPER:
    case THIS:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case IDENTIFIER:
      identifier = constantIdentifier();
          expr = new ConstantIdentifier(identifier);
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATICCLASSACCESS:
          ;
          break;
        default:
          jj_la1[85] = jj_gen;
          break label_23;
        }
        staticClassAccess = jj_consume_token(STATICCLASSACCESS);
        try {
          expr2 = ClassIdentifier();
                  expr2.setType(new Type(Type.OBJECT_INT,expr2.toString()));
                  expr = new ClassAccess(expr,expr2,PHPParserConstants.STATICCLASSACCESS,expr2.getSourceEnd(),expr2.getEndLine(),expr2.getEndColumn());
        } catch (ParseException e) {
              expr = new ClassAccess(expr,null,PHPParserConstants.STATICCLASSACCESS,staticClassAccess.sourceEnd,staticClassAccess.endLine,staticClassAccess.endColumn);
              fireParseError(new PHPParseErrorEvent(ERROR,
                  path,
                  "identifier expected",
                  "identifier",
                  e.currentToken.image,
                  e.currentToken.sourceStart,
                  e.currentToken.sourceEnd,
                  e.currentToken.beginLine,
                  e.currentToken.endLine,
                  e.currentToken.endColumn,
                  e.currentToken.endColumn+1));
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        expr2 = Arguments(expr);
        break;
      default:
        jj_la1[86] = jj_gen;
        ;
      }
          if (expr2 == null) {
              if (reference != null) {
                  fireParseError(new PHPParseErrorEvent(ERROR,
                      path,
                      "you cannot use a constant by reference",
                      "",
                      "&",
                      reference.sourceStart,
                      reference.sourceEnd,
                      reference.beginLine,
                      reference.endLine,
                      reference.endColumn,
                      reference.endColumn+1));
              }
          }
          else
          {
              expr = expr2;
          }
      break;
    case DOLLAR:
      expr = VariableDeclaratorId();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        expr = methodCall(expr);
        break;
      default:
        jj_la1[87] = jj_gen;
        ;
      }
      break;
    case NEW:
      expr = instantiation(reference);
      break;
    default:
      jj_la1[88] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

//}}}
  final public Expression methodCall(Expression expr) throws ParseException {
    expr = Arguments(expr);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASSACCESS:
      expr = classAccess(expr);
            if (!php5Enabled) {
                Expression prefix = ((ClassAccess) expr).getPrefix();
                fireParseError(new PHPParseErrorEvent(ERROR,
                                              path,
                                              "unexpected token '->'",
                                              "",
                                              "->",
                                              prefix.getSourceEnd(),
                                              prefix.getSourceEnd()+2,
                                              prefix.getEndLine(),
                                              prefix.getEndLine(),
                                              prefix.getEndColumn(),
                                              prefix.getEndColumn()+2));
            }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASSACCESS:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASSACCESS:
        case LBRACE:
        case LBRACKET:
          expr = VariableSuffix(expr);
          break;
        case LPAREN:
          expr = methodCall(expr);
          break;
        default:
          jj_la1[89] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[90] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[91] = jj_gen;
      ;
    }
        {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

//{{{ instantiation(Token reference)
  final public Expression instantiation(Token reference) throws ParseException {
    Token newToken;
    Expression expr;
    newToken = jj_consume_token(NEW);
    try {
      expr = ClassIdentifier();
        expr.setType(new Type(Type.OBJECT_INT,expr.toString()));
    } catch (ParseException e) {
      Token token = error_skipto(SEMICOLON);
      expr = new DummyExpression(newToken.sourceEnd,
                                 token.sourceStart,
                                 newToken.endLine,
                                 token.beginLine,
                                 newToken.endColumn,
                                 token.beginColumn);
      expr.setType(Type.OBJECT);
      fireParseError(new PHPParseErrorEvent(ERROR,
                                            path,
                                            "class identifier expected",
                                            "class identifier",
                                            newToken.next.image,
                                            newToken.sourceEnd,
                                            newToken.next.sourceStart,
                                            newToken.endLine,
                                            newToken.next.beginLine,
                                            newToken.endColumn,
                                            newToken.next.beginColumn));
    }
    final int start, beginLine, beginColumn;
    if (reference == null) {
      start       = newToken.sourceStart;
      beginLine   = newToken.beginLine;
      beginColumn = newToken.beginColumn;
    } else {
      start       = reference.sourceStart;
      beginLine   = reference.beginLine;
      beginColumn = reference.beginColumn;
    }
    expr = new ClassInstantiation(expr,
                                  reference != null,
                                  start,
                                  beginLine,
                                  beginColumn);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      expr = Arguments(expr);
      break;
    default:
      jj_la1[92] = jj_gen;
      ;
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  //}}}
//{{{ ArrayDeclarator()

/**
 * An array declarator.
 * array(vars)
 * @return an array
 */
  final public ArrayInitializer ArrayDeclarator() throws ParseException {
  final ArrayVariableDeclaration[] vars;
  final Token token;
    token = jj_consume_token(ARRAY);
    vars = ArrayInitializer();
   {if (true) return new ArrayInitializer(vars,
                               token.sourceStart,
                               this.token.sourceEnd,
                               token.beginLine,
                               this.token.endLine,
                               token.beginColumn,
                               this.token.endColumn);}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ ClassIdentifier()
  final public Expression ClassIdentifier() throws ParseException {
  final Expression expr;
  final Token identifierToken;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case DEFINE:
    case GOTO:
    case SUPER:
    case THIS:
    case TRUE:
    case FALSE:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case IDENTIFIER:
      identifierToken = methodIdentifier();
                                        {if (true) return new ConstantIdentifier(identifierToken);}
      break;
    case DOLLAR:
      expr = VariableDeclaratorId();
                                        {if (true) return expr;}
      break;
    default:
      jj_la1[93] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//}}}

//{{{ SUFFIXES
//{{{ VariableSuffix(Expression prefix)

/**
 * Used by VariableDeclaratorId
 */
  final public AbstractVariable VariableSuffix(Expression prefix) throws ParseException {
  AbstractVariable abstractVariable;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASSACCESS:
      abstractVariable = classAccess(prefix);
      break;
    case LBRACE:
    case LBRACKET:
      abstractVariable = arrayDeclarator(prefix);
      break;
    default:
      jj_la1[94] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return abstractVariable;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ classAccess(Expression prefix)
  final public ClassAccess classAccess(Expression prefix) throws ParseException {
  Token lbrace, rbrace, methodIdentifier, listToken;
  Expression expression;
    jj_consume_token(CLASSACCESS);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        lbrace = jj_consume_token(LBRACE);
        expression = Expression();
        rbrace = jj_consume_token(RBRACE);
          expression = new Variable(expression,
                                    lbrace.sourceStart,
                                    rbrace.sourceEnd,
                                    lbrace.beginLine,
                                    rbrace.endLine,
                                    lbrace.beginColumn,
                                    rbrace.endColumn);
          setTypeFromScope((Variable) expression);
        break;
      case NEW:
      case DEFINE:
      case GOTO:
      case SUPER:
      case THIS:
      case TRUE:
      case FALSE:
      case STRING:
      case OBJECT:
      case BOOL:
      case BOOLEAN:
      case REAL:
      case DOUBLE:
      case FLOAT:
      case INT:
      case INTEGER:
      case IDENTIFIER:
        methodIdentifier = methodIdentifier();
          expression = new ConstantIdentifier(methodIdentifier);
        break;
      case LIST:
        listToken = jj_consume_token(LIST);
            expression = new ConstantIdentifier(listToken);
        break;
      case DOLLAR:
        expression = Variable();
        break;
      default:
        jj_la1[95] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
    fireParseError("expression expected", "expression", e.currentToken);
    expression = new DummyExpression(e.currentToken.sourceStart,
                                     e.currentToken.sourceEnd,
                                     e.currentToken.beginLine,
                                     e.currentToken.endLine,
                                     e.currentToken.endColumn,
                                     e.currentToken.beginColumn);
    }
    {if (true) return new ClassAccess(prefix,
                           expression,
                           PHPParserConstants.CLASSACCESS,
                           expression.getSourceEnd(),
                           expression.getEndLine(),
                           expression.getEndColumn());}
    throw new Error("Missing return statement in function");
  }

  //}}}
//{{{ arrayDeclarator(Expression prefix)
  final public ArrayDeclarator arrayDeclarator(Expression prefix) throws ParseException {
  Token open;
  Token close = null;
  Expression expression = null;
  int sourceEnd,endLine,endColumn;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      open = jj_consume_token(LBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAY:
      case LIST:
      case PRINT:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case NEW:
      case DEFINE:
      case GOTO:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case FALSE:
      case STRING:
      case OBJECT:
      case BOOL:
      case BOOLEAN:
      case REAL:
      case DOUBLE:
      case FLOAT:
      case INT:
      case INTEGER:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOUBLEQUOTE:
      case HEREDOCSTARTTOKEN:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
        expression = arrayKey();
        break;
      default:
        jj_la1[96] = jj_gen;
        ;
      }
      try {
        close = jj_consume_token(RBRACKET);
      } catch (ParseException e) {
      //{{{ fireParseError
      fireParseError(new PHPParseErrorEvent(ERROR,
                                            path,
                                            "']' expected",
                                            "]",
                                            e.currentToken.image,
                                            e.currentToken.sourceStart,
                                            e.currentToken.sourceEnd,
                                            e.currentToken.beginLine,
                                            e.currentToken.endLine,
                                            e.currentToken.endColumn,
                                            e.currentToken.endColumn+1)); //}}}

      }
      break;
    case LBRACE:
      open = jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAY:
      case LIST:
      case PRINT:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case NEW:
      case DEFINE:
      case GOTO:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case FALSE:
      case STRING:
      case OBJECT:
      case BOOL:
      case BOOLEAN:
      case REAL:
      case DOUBLE:
      case FLOAT:
      case INT:
      case INTEGER:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOUBLEQUOTE:
      case HEREDOCSTARTTOKEN:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
        expression = arrayKey();
        break;
      default:
        jj_la1[97] = jj_gen;
        ;
      }
      try {
        close = jj_consume_token(RBRACE);
      } catch (ParseException e) {
      //{{{ fireParseError
      fireParseError(new PHPParseErrorEvent(ERROR,
                                            path,
                                            "'}' expected",
                                            "}",
                                            e.currentToken.image,
                                            e.currentToken.sourceStart,
                                            e.currentToken.sourceEnd,
                                            e.currentToken.beginLine,
                                            e.currentToken.endLine,
                                            e.currentToken.endColumn,
                                            e.currentToken.endColumn+1)); //}}}

      }
      break;
    default:
      jj_la1[98] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (close == null) {
      if (expression == null) {
        sourceEnd = open.sourceEnd;
        endLine   = open.endLine;
        endColumn = open.endColumn;
      } else {
        sourceEnd = expression.getSourceEnd();
        endLine   = expression.getEndLine();
        endColumn = expression.getEndColumn();
      }
    } else {
      sourceEnd = open.sourceEnd;
      endLine   = open.endLine;
      endColumn = open.endColumn;
    }
    {if (true) return new ArrayDeclarator(prefix,
                               expression,
                               sourceEnd,
                               endLine,
                               endColumn);}
    throw new Error("Missing return statement in function");
  }

  //}}}
//{{{ arrayKey()
/**
 * defines the key of an array.
 * @return the key of the array
 */
  final public Expression arrayKey() throws ParseException {
  Expression expression;
    expression = Expression();
                                    {if (true) return expression;}
    throw new Error("Missing return statement in function");
  }

  //}}}


//}}}

//{{{ LITERAL

//{{{ Literal()
  final public Literal Literal() throws ParseException {
  final Token token;
  final StringLiteral stringLiteral;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      token = jj_consume_token(INTEGER_LITERAL);
                                     {if (true) return new NumberLiteral(Type.INTEGER,token);}
      break;
    case FLOATING_POINT_LITERAL:
      token = jj_consume_token(FLOATING_POINT_LITERAL);
                                     {if (true) return new NumberLiteral(Type.INTEGER,token);}
      break;
    case STRING_LITERAL:
      token = jj_consume_token(STRING_LITERAL);
                                     {if (true) return new StringLiteral(token);}
      break;
    case TRUE:
      token = jj_consume_token(TRUE);
                                     {if (true) return new TrueLiteral(token);}
      break;
    case FALSE:
      token = jj_consume_token(FALSE);
                                     {if (true) return new FalseLiteral(token);}
      break;
    case NULL:
      token = jj_consume_token(NULL);
                                     {if (true) return new NullLiteral(token);}
      break;
    case HEREDOCSTARTTOKEN:
      stringLiteral = heredoc();
                                     {if (true) return stringLiteral;}
      break;
    case DOUBLEQUOTE:
      stringLiteral = evaluableString();
                                     {if (true) return stringLiteral;}
      break;
    default:
      jj_la1[99] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ heredoc()
  final public StringLiteral heredoc() throws ParseException {
  final Token heredocStart;
  Token startToken = null;
  Token endToken;
  String endImage;
    heredocStart = jj_consume_token(HEREDOCSTARTTOKEN);
    try {
      startToken = jj_consume_token(IDENTIFIER);
      if(heredocStart.sourceEnd != startToken.sourceStart) {
        //{{{ Parse error
        fireParseError(new PHPParseErrorEvent(ERROR,
                                              path,
                                              "unexpected spaces",
                                              "",
                                              "",
                                              heredocStart.sourceEnd+1,
                                              startToken.sourceStart-1,
                                              startToken.beginLine,
                                              startToken.endLine,
                                              heredocStart.endColumn+1,
                                              startToken.beginColumn-1)); //}}}
      }
    } catch (ParseException e) {
    //{{{ Parse error
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "identifier expected",
                                          "identifier",
                                          e.currentToken.image,
                                          errorStart,
                                          errorEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1)); //}}}
    {if (true) return new StringLiteral("",
                             jj_input_stream.getBeginOffset(),
                             jj_input_stream.getBeginOffset()+1,
                             jj_input_stream.getBeginLine(),
                             jj_input_stream.getEndLine(),
                             jj_input_stream.getBeginColumn(),
                             jj_input_stream.getEndColumn());}
    }
  while (true) {
    endToken = getNextToken();
    // Ensure that the parser will stay in php mode even if there is a ?> in the string
    // todo : find another trick it's seems ugly
    token_source.SwitchTo(PHPParserTokenManager.PHPPARSING);
    if (endToken.kind == PHPParserConstants.EOF) {
      fireParseError("unexpected EOF","",endToken);
      break;
    }

    if (endToken.beginLine == startToken.beginLine) {
      fireParseError("unexpected token","identifier",endToken);
      continue;
    }
    if (endToken.beginColumn != 1) continue;
    endImage = (endToken.image.charAt(endToken.image.length()-1) == ';') ? endToken.image.substring(0,endToken.image.length()-2) : endToken.image;
    if (endImage.equals(startToken.image)) {
      break;
    }
  }

//  return new StringLiteral(jj_input_stream.getCurrentBuffer().substring(startToken.sourceEnd+1,endToken.sourceStart-1),
  {if (true) return new StringLiteral("",
                           startToken.sourceEnd+1,
                           endToken.sourceStart-1,
                           startToken.beginLine,
                           endToken.endLine,
                           startToken.beginColumn,
                           endToken.endColumn);}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ evaluableString()
  final public StringLiteral evaluableString() throws ParseException {
  ArrayList list = new ArrayList();
  Token start,end;
    start = jj_consume_token(DOUBLEQUOTE);
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLLARS:
        ;
        break;
      default:
        jj_la1[100] = jj_gen;
        break label_24;
      }
      jj_consume_token(DOLLARS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE1:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          token = jj_consume_token(IDENTIFIER);
          list.add(new Variable(token.image,
                                token.sourceStart,
                                token.sourceEnd,
                                token.beginLine,
                                token.endLine,
                                token.beginColumn,
                                token.endColumn));
          break;
        case LBRACE1:
          jj_consume_token(LBRACE1);
          token = jj_consume_token(ID);
           list.add(new Variable(token.image,
                                token.sourceStart,
                                token.sourceEnd,
                                token.beginLine,
                                token.endLine,
                                token.beginColumn,
                                token.endColumn));
          jj_consume_token(RBRACE1);
          break;
        default:
          jj_la1[101] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[102] = jj_gen;
        ;
      }
    }
    end = jj_consume_token(DOUBLEQUOTE2);
  AbstractVariable[] vars = new AbstractVariable[list.size()];
  list.toArray(vars);
  //return new StringLiteral(jj_input_stream.getCurrentBuffer().substring(start.sourceEnd,end.sourceStart),
  {if (true) return new StringLiteral("",
                           start.sourceStart,
                           end.sourceEnd,
                           start.beginLine,
                           end.endLine,
                           start.beginColumn,
                           end.endColumn,
                           vars);}
    throw new Error("Missing return statement in function");
  }

  //}}}
//}}}

//{{{ Arguments(final Expression func)
  final public FunctionCall Arguments(final Expression func) throws ParseException {
Expression[] args = null;
final Token rparen,lparen;
    lparen = jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
    case LIST:
    case PRINT:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case NEW:
    case DEFINE:
    case GOTO:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case FALSE:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOUBLEQUOTE:
    case HEREDOCSTARTTOKEN:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
      args = ArgumentList();
      break;
    default:
      jj_la1[103] = jj_gen;
      ;
    }
    try {
      rparen = jj_consume_token(RPAREN);
      {if (true) return new FunctionCall(func,
                             args,
                             rparen.sourceEnd,
                             rparen.endLine,
                             rparen.endColumn);}
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "')' expected",
                                          ")",
                                          e.currentToken.image,
                                          errorStart,
                                          errorEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    final int sourceEnd, line, column;
    if (args == null || args.length == 0) {
      sourceEnd = lparen.sourceEnd+1;
      line = lparen.beginLine;
      column = lparen.beginColumn;
    } else {
      sourceEnd = args[args.length-1].getSourceEnd();
      line = args[args.length-1].getBeginLine();
      column = args[args.length-1].getBeginColumn();
    }

    {if (true) return new FunctionCall(func,
                            args,
                            sourceEnd,
                            line,
                            column);}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ ArgumentList()

/**
 * An argument list is a list of arguments separated by comma :
 * argumentDeclaration() (, argumentDeclaration)*
 * @return an array of arguments
 */
  final public Expression[] ArgumentList() throws ParseException {
Expression arg;
final ArrayList list = new ArrayList();
int pos;
Token token;
    arg = Expression();
    list.add(arg);
    pos = arg.getSourceEnd();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[104] = jj_gen;
        break label_25;
      }
      token = jj_consume_token(COMMA);
                     pos = token.sourceEnd;
      try {
        arg = Expression();
          list.add(arg);
          pos = arg.getSourceEnd();
      } catch (ParseException e) {
        fireParseError(new PHPParseErrorEvent(ERROR,
                                              path,
                                              "expression expected",
                                              "expression",
                                              e.currentToken.image,
                                              pos,
                                              pos+1,
                                              e.currentToken.beginLine,
                                              e.currentToken.endLine,
                                              e.currentToken.endColumn,
                                              e.currentToken.endColumn+1));
      }
    }
   final Expression[] arguments = new Expression[list.size()];
   list.toArray(arguments);
   {if (true) return arguments;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ StatementNoBreak()

/**
 * A Statement without break.
 * @return a statement
 */
  final public Statement StatementNoBreak() throws ParseException {
  final Statement statement;
    if (jj_2_4(2)) {
      statement = expressionStatement();
    } else if (jj_2_5(2)) {
      statement = LabeledStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        statement = Block();
        break;
      case SEMICOLON:
        statement = EmptyStatement();
        break;
      case SWITCH:
        statement = SwitchStatement();
        break;
      case IF:
        statement = IfStatement();
        break;
      case WHILE:
        statement = WhileStatement();
        break;
      case DO:
        statement = DoStatement();
        break;
      case FOR:
        statement = ForStatement();
        break;
      case FOREACH:
        statement = ForeachStatement();
        break;
      case CONTINUE:
        statement = ContinueStatement();
        break;
      case RETURN:
        statement = ReturnStatement();
        break;
      case ECHO:
        statement = EchoStatement();
        break;
      case STATIC:
        statement = StaticStatement();
        break;
      case GLOBAL:
        statement = GlobalStatement();
        break;
      case TRY:
        statement = tryStatement();
        break;
      case THROW:
        statement = throwStatement();
        break;
      case DEFINE:
        statement = defineStatement();
                                     currentSegment.add((Outlineable)statement);
        break;
      default:
        jj_la1[105] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

//}}}

//{{{ TRY

//{{{ throwStatement()
  final public ThrowStatement throwStatement() throws ParseException {
  Token throwToken;
  Expression expr;
  Token semicolonToken = null;
  int sourceEnd,endLine,endColumn;
    throwToken = jj_consume_token(THROW);
    expr = Expression();
    try {
      semicolonToken = jj_consume_token(SEMICOLON);
      sourceEnd = semicolonToken.sourceEnd;
      endLine   = semicolonToken.endLine;
      endColumn = semicolonToken.endColumn;
    } catch (ParseException e) {
      sourceEnd = e.currentToken.sourceEnd;
      endLine   = e.currentToken.endLine;
      endColumn = e.currentToken.endColumn;
      fireParseError("catch expected", "catch", e.currentToken);
    }
    {if (true) return new ThrowStatement(expr,
                              throwToken.sourceStart,
                              sourceEnd,
                              throwToken.beginLine,
                              endLine,
                              throwToken.beginColumn,
                              endColumn);}
    throw new Error("Missing return statement in function");
  }

  //}}}

//{{{ tryStatement()
  final public TryStatement tryStatement() throws ParseException {
  Token tryToken;
  Block block;
  Catch catchClause;
  List catches = new ArrayList(5);
    tryToken = jj_consume_token(TRY);
    block = Block();
    catchClause = catchClause();
    catches.add(catchClause);
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        ;
        break;
      default:
        jj_la1[106] = jj_gen;
        break label_26;
      }
      catchClause = catchClause();
       catches.add(catchClause);
    }
    {if (true) return new TryStatement(block,
                            catches,
                            tryToken.sourceStart,
                            catchClause.getSourceEnd(),
                            tryToken.beginLine,
                            catchClause.getEndLine(),
                            tryToken.beginColumn,
                            catchClause.getEndColumn());}
    throw new Error("Missing return statement in function");
  }

 //}}}
//{{{ catchClause()
  final public Catch catchClause() throws ParseException {
  Token catchToken = null;
  Token catchedException;
  Token dollarToken;
  Token identifierToken;
  Block block;
  int start,beginLine,beginColumn;
  int startVar,beginLineVar,beginColumnVar;
  int endVar,endLineVar,endColumnVar;
  String identifierString = null;
  String catchedString = null;
    try {
      catchToken = jj_consume_token(CATCH);
      start       = catchToken.sourceStart;
      beginLine   = catchToken.beginLine;
      beginColumn = catchToken.beginColumn;
    } catch (ParseException e) {
      start       = e.currentToken.sourceStart;
      beginLine   = e.currentToken.beginLine;
      beginColumn = e.currentToken.beginColumn;
      fireParseError("catch expected", "catch", e.currentToken);
    }
    try {
      jj_consume_token(LPAREN);
    } catch (ParseException e) {
      fireParseError("'(' expected", "(", e.currentToken);
    }
    try {
      catchedException = jj_consume_token(IDENTIFIER);
      catchedString = catchedException.image;
    } catch (ParseException e) {
    fireParseError("identifier expected", "identifier", e.currentToken);
    }
    try {
      dollarToken = jj_consume_token(DOLLAR);
      startVar       = dollarToken.sourceStart;
      beginLineVar   = dollarToken.beginLine;
      beginColumnVar = dollarToken.beginColumn;
    } catch (ParseException e) {
    startVar       = e.currentToken.sourceStart;
    beginLineVar   = e.currentToken.beginLine;
    beginColumnVar = e.currentToken.beginColumn;
    fireParseError("$ expected", "$", e.currentToken);
    }
    try {
      identifierToken = jj_consume_token(IDENTIFIER);
      identifierString = identifierToken.image;
      endVar       = identifierToken.sourceStart;
      endLineVar   = identifierToken.beginLine;
      endColumnVar = identifierToken.beginColumn;
    } catch (ParseException e) {
    endVar       = e.currentToken.sourceEnd;
    endLineVar   = e.currentToken.endLine;
    endColumnVar = e.currentToken.endColumn;
    fireParseError("identifier expected", "identifier", e.currentToken);
    }
    try {
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
      fireParseError("')' expected", ")", e.currentToken);
    }
    block = Block();
    {if (true) return new Catch(catchedString,
                     new Variable(identifierString,
                                  startVar,
                                  endVar,
                                  beginLineVar,
                                  endLineVar,
                                  beginColumnVar,
                                  endColumnVar),
                     block,
                     start,
                     block.getSourceEnd(),
                     beginLine,
                     block.getEndLine(),
                     beginColumn,
                     block.getEndColumn());}
    throw new Error("Missing return statement in function");
  }

  //}}}

//}}}


//{{{ expressionStatement()

/**
 * A statement expression.
 * expression ;
 * @return an expression
 */
  final public Statement expressionStatement() throws ParseException {
  final Statement statement;
  Token token;
    try {
      statement = Expression();
    } catch (ParseException e) {
    token = error_skipto(SEMICOLON);
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "expression expected",
                                          "expression",
                                          e.currentToken.image,
                                          e.currentToken.sourceEnd,
                                          token.sourceEnd,
                                          e.currentToken.beginLine,
                                          token.endLine,
                                          e.currentToken.endColumn,
                                          token.beginColumn));
    {if (true) return new EmptyStatement(e.currentToken.sourceStart,
                              token.sourceEnd,
                              e.currentToken.beginLine,
                              token.endLine,
                              e.currentToken.beginColumn,
                              token.endColumn);}
    }
    try {
      token = jj_consume_token(SEMICOLON);
      statement.setSourceEnd(token.sourceEnd);
    } catch (ParseException e) {
    if (e.currentToken.next.kind != PHPParserConstants.PHPEND) {
      //{{{ Parse Error
      fireParseError(new PHPParseErrorEvent(ERROR,
                                            path,
                                            "';' expected",
                                            ";",
                                            e.currentToken.image,
                                            statement.getSourceEnd(),
                                            statement.getSourceEnd()+1,
                                            e.currentToken.beginLine,
                                            e.currentToken.endLine,
                                            e.currentToken.endColumn,
                                            e.currentToken.endColumn+1)); //}}}
    }
    }
   {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ defineStatement()
  final public Define defineStatement() throws ParseException {
  Expression defineName,defineValue;
  final Token defineToken;
  Token token;
  int pos;
    defineToken = jj_consume_token(DEFINE);
                          pos = defineToken.sourceEnd+1;
    try {
      token = jj_consume_token(LPAREN);
     pos = token.sourceEnd+1;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'(' expected",
                                          "(",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    try {
      defineName = Expression();
      pos = defineName.getSourceEnd()+1;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "expression expected",
                                          "expression",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    defineName = new StringLiteral(SYNTAX_ERROR_CHAR,pos,pos,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1);
    }
    try {
      token = jj_consume_token(COMMA);
      pos = defineName.getSourceEnd()+1;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "',' expected",
                                          ",",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    try {
      defineValue = Expression();
      pos = defineValue.getSourceEnd()+1;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "expression expected",
                                          "expression",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    defineValue = new StringLiteral(SYNTAX_ERROR_CHAR,pos,pos,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1);
    }
    try {
      token = jj_consume_token(RPAREN);
     pos = token.sourceEnd+1;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "')' expected",
                                          ")",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    {if (true) return new Define(currentSegment,
                      defineName,
                      defineValue,
                      defineToken.sourceStart,
                      pos,
                      defineToken.beginLine,
                      defineToken.endLine,
                      defineToken.beginColumn,
                      defineToken.endColumn);}
    throw new Error("Missing return statement in function");
  }

/**
 * A Normal statement.
 */
  final public Statement Statement() throws ParseException {
  final Statement statement;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRY:
    case THROW:
    case IF:
    case ARRAY:
    case LIST:
    case PRINT:
    case ECHO:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case GLOBAL:
    case STATIC:
    case CONTINUE:
    case DO:
    case FOR:
    case NEW:
    case RETURN:
    case SWITCH:
    case WHILE:
    case FOREACH:
    case DEFINE:
    case GOTO:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case FALSE:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOUBLEQUOTE:
    case HEREDOCSTARTTOKEN:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case SEMICOLON:
      statement = StatementNoBreak();
      break;
    case BREAK:
      statement = BreakStatement();
      break;
    default:
      jj_la1[107] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    statement.getModifiedVariable(tempList);
    scope.addVariablesList(tempList);
    tempList.clear();
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ htmlBlock()

/**
 * An html block inside a php syntax.
 */
  final public HTMLBlock htmlBlock() throws ParseException {
  int startIndex = nodePtr;
  AstNode[] blockNodes;
  int nbNodes;
  Token phpEnd;
    phpEnd = jj_consume_token(PHPEND);
    htmlStart       = phpEnd.sourceEnd;
    htmlLineStart   = phpEnd.endLine;
    htmlColumnStart = phpEnd.endColumn;
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHPECHOSTART:
        ;
        break;
      default:
        jj_la1[108] = jj_gen;
        break label_27;
      }
      phpEchoBlock();
    }
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHPSTARTLONG:
        jj_consume_token(PHPSTARTLONG);
        break;
      case PHPSTARTSHORT:
        jj_consume_token(PHPSTARTSHORT);
        break;
      default:
        jj_la1[109] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
     createNewHTMLCode();
    } catch (ParseException e) {
    fireParseError("'<?php' expected","<?php",e.currentToken);
    }
    nbNodes = nodePtr - startIndex;
    if (nbNodes == 0) {
      {if (true) return null;}
    }
    blockNodes = new AstNode[nbNodes];
    System.arraycopy(nodes,startIndex+1,blockNodes,0,nbNodes);
    nodePtr         = startIndex;
    HTMLBlock block = new HTMLBlock(blockNodes);
    {if (true) return block;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ IncludeExpression()

/**
 * An include statement. It's "include" an expression;
 */
  final public InclusionExpression IncludeExpression() throws ParseException {
  Expression expr;
  InclusionExpression inclusionExpression;
  Token token;
  int end,line,column;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REQUIRE:
      token = jj_consume_token(REQUIRE);
      break;
    case REQUIRE_ONCE:
      token = jj_consume_token(REQUIRE_ONCE);
      break;
    case INCLUDE:
      token = jj_consume_token(INCLUDE);
      break;
    case INCLUDE_ONCE:
      token = jj_consume_token(INCLUDE_ONCE);
      break;
    default:
      jj_la1[110] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    end=token.sourceEnd;
    line=token.beginLine;
    column=token.beginColumn;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAY:
      case LIST:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case NEW:
      case DEFINE:
      case GOTO:
      case SUPER:
      case THIS:
      case STRING:
      case OBJECT:
      case BOOL:
      case BOOLEAN:
      case REAL:
      case DOUBLE:
      case FLOAT:
      case INT:
      case INTEGER:
      case BIT_AND:
      case DOLLAR:
      case IDENTIFIER:
        expr = PrimaryExpression();
        break;
      case NULL:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOUBLEQUOTE:
      case HEREDOCSTARTTOKEN:
        expr = Literal();
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        expr = Expression();
        try {
          jj_consume_token(RPAREN);
        } catch (ParseException e) {
         //{{{ Parse Error
         fireParseError(new PHPParseErrorEvent(ERROR,
                                               path,
                                               "')'n expected",
                                               ")",
                                               e.currentToken.image,
                                               expr.getSourceEnd(),
                                               expr.getSourceEnd()+1,
                                               e.currentToken.beginLine,
                                               e.currentToken.endLine,
                                               e.currentToken.endColumn,
                                               e.currentToken.endColumn+1)); //}}}

        }
        break;
      default:
        jj_la1[111] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      end    = expr.getSourceEnd();
      line   = expr.getBeginLine();
      column = expr.getBeginColumn();
    } catch (ParseException e) {
    if (errorMessage != null) {
      {if (true) throw e;}
    }
    expr = new ConstantIdentifier(SYNTAX_ERROR_CHAR,
                                  token.sourceEnd,
                                  token.sourceEnd+1,
                                  token.endLine,
                                  token.endLine,
                                  token.endColumn,
                                  token.endColumn+1);
    //{{{ Parse Error
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "expression expected",
                                          "expression",
                                          e.currentToken.image,
                                          e.currentToken.next.sourceStart,
                                          e.currentToken.next.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1)); //}}}

    }
   inclusionExpression = new InclusionExpression(currentSegment,
                                                 token.kind,
                                                 expr,
                                                 token.sourceStart,
                                                 end,
                                                 token.beginLine,
                                                 line,
                                                 token.beginColumn,
                                                 column);
   currentSegment.add(inclusionExpression);
   {if (true) return inclusionExpression;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ PrintExpression()
  final public PrintExpression PrintExpression() throws ParseException {
  final Expression expr;
  final Token printToken;
    printToken = jj_consume_token(PRINT);
    expr = Expression();
    {if (true) return new PrintExpression(expr,printToken.sourceStart,expr.getSourceEnd(),printToken.beginLine,expr.getEndLine(),printToken.beginColumn,expr.getEndColumn());}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ ListExpression()
  final public ListExpression ListExpression() throws ParseException {
  Expression expr = null;
  final ArrayList list = new ArrayList();
  int pos,line,column;
  final Token listToken, rParen;
  Token token;
    listToken = jj_consume_token(LIST);
                      pos = listToken.sourceEnd;line=listToken.beginLine;column=listToken.beginColumn;
    try {
      token = jj_consume_token(LPAREN);
                      pos = token.sourceEnd;line=token.beginLine;column=token.beginColumn;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'(' expected",
                                          "(",
                                          e.currentToken.image,
                                          listToken.sourceEnd,
                                          listToken.sourceEnd+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR:
      expr = VariableDeclaratorId();
     list.add(expr);pos = expr.getSourceEnd();line=expr.getBeginLine();column=expr.getBeginColumn();
      break;
    default:
      jj_la1[112] = jj_gen;
      ;
    }
   if (expr == null) list.add(null);
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[113] = jj_gen;
        break label_28;
      }
      try {
        token = jj_consume_token(COMMA);
       pos = token.sourceEnd;line=token.beginLine;column=token.beginColumn;
      } catch (ParseException e) {
      fireParseError(new PHPParseErrorEvent(ERROR,
                                            path,
                                            "',' expected",
                                            ",",
                                            e.currentToken.image,
                                            pos,
                                            pos+1,
                                            e.currentToken.beginLine,
                                            e.currentToken.endLine,
                                            e.currentToken.endColumn,
                                            e.currentToken.endColumn+1));
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLLAR:
        expr = VariableDeclaratorId();
                                    list.add(expr);pos = expr.getSourceEnd();line=expr.getBeginLine();column=expr.getBeginColumn();
        break;
      default:
        jj_la1[114] = jj_gen;
        ;
      }
    }
    try {
      rParen = jj_consume_token(RPAREN);
     pos = rParen.sourceEnd;line=rParen.beginLine;column=rParen.beginColumn;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "')' expected",
                                          ")",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    final AbstractVariable[] vars = new AbstractVariable[list.size()];
    list.toArray(vars);
    {if (true) return new ListExpression(vars,
                              listToken.sourceStart,
                              pos,
                              listToken.beginLine,
                              line,
                              listToken.beginColumn,
                              column);}
    throw new Error("Missing return statement in function");
  }

//}}}

//}}}

//{{{ STATEMENTS

//{{{ EchoStatement()

/**
 * An echo statement.
 * echo anyexpression (, otherexpression)*
 */
  final public EchoStatement EchoStatement() throws ParseException {
  final ArrayList expressions = new ArrayList();
  Expression expr;
  final Token echoToken;
  Token semicolonToken = null;
    echoToken = jj_consume_token(ECHO);
    expr = Expression();
   expressions.add(expr);
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[115] = jj_gen;
        break label_29;
      }
      jj_consume_token(COMMA);
      expr = Expression();
     expressions.add(expr);
    }
    try {
      semicolonToken = jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
    if (e.currentToken.next.kind != 4) {
      fireParseError(new PHPParseErrorEvent(ERROR,
                                            path,
                                            "';' expected",
                                            ";",
                                            e.currentToken.image,
                                            e.currentToken.sourceEnd,
                                            e.currentToken.sourceEnd+1,
                                            e.currentToken.beginLine,
                                            e.currentToken.endLine,
                                            e.currentToken.endColumn,
                                            e.currentToken.endColumn+1));
    }
    }
   final Expression[] exprs = new Expression[expressions.size()];
   expressions.toArray(exprs);
   if (semicolonToken == null) {
     {if (true) return new EchoStatement(exprs,
                              echoToken.sourceStart,
                              exprs[exprs.length-1].getSourceEnd(),
                              echoToken.beginLine,
                              exprs[exprs.length-1].getEndLine(),
                              echoToken.beginColumn,
                              exprs[exprs.length-1].getEndColumn());}
   }
   {if (true) return new EchoStatement(exprs,
                            echoToken.sourceStart,
                            semicolonToken.sourceEnd,
                            echoToken.beginLine,
                            semicolonToken.endLine,
                            echoToken.beginColumn,
                            semicolonToken.endColumn);}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ GlobalStatement()
  final public GlobalStatement GlobalStatement() throws ParseException {
   Variable expr;
   final ArrayList vars = new ArrayList();
   final GlobalStatement global;
   final Token token, token2;
   int pos,line,column;
    token = jj_consume_token(GLOBAL);
    expr = Variable();
     vars.add(expr);pos = expr.getSourceEnd()+1;line=expr.getEndLine();column=expr.getEndColumn();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[116] = jj_gen;
        break label_30;
      }
      jj_consume_token(COMMA);
      expr = Variable();
     vars.add(expr);pos = expr.getSourceEnd()+1;line=expr.getEndLine();column=expr.getEndColumn();
    }
    try {
      token2 = jj_consume_token(SEMICOLON);
     pos = token2.sourceEnd+1;line=token2.endLine;column=token2.endColumn;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "';' expected",
                                          ";",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
      final Variable[] variables = new Variable[vars.size()];
      vars.toArray(variables);
      global = new GlobalStatement(currentSegment,
                                   variables,
                                   token.sourceStart,
                                   pos,
                                   token.beginLine,
                                   line,
                                   token.beginColumn,
                                   column);
      currentSegment.add(global);
      //global.analyzeCode(this);
      {if (true) return global;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ StaticStatement()
  final public StaticStatement StaticStatement() throws ParseException {
  final ArrayList vars = new ArrayList();
  VariableDeclaration expr;
  final Token token, token2;
  int pos,line,column;
    token = jj_consume_token(STATIC);
    expr = VariableDeclarator();
                                                vars.add(expr);pos = expr.getSourceEnd()+1;line=expr.getEndLine();column=expr.getEndColumn();
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[117] = jj_gen;
        break label_31;
      }
      jj_consume_token(COMMA);
      expr = VariableDeclarator();
                                         vars.add(expr);pos = expr.getSourceEnd()+1;line=expr.getEndLine();column=expr.getEndColumn();
    }
    try {
      token2 = jj_consume_token(SEMICOLON);
     pos = token2.sourceEnd+1;line=token2.endLine;column=token2.endColumn;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "';' expected",
                                          ";",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    final VariableDeclaration[] variables = new VariableDeclaration[vars.size()];
    vars.toArray(variables);
    {if (true) return new StaticStatement(variables,
                               token.sourceStart,
                               pos,
                               token.beginLine,
                               line,
                               token.beginColumn,
                               column);}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ LabeledStatement()
  final public LabeledStatement LabeledStatement() throws ParseException {
  final Token label;
  Statement statement = null;
    label = jj_consume_token(IDENTIFIER);
    try {
      jj_consume_token(COLON);
    } catch (ParseException e) {
    //{{{ fireParseError
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "':' expected",
                                          ":",
                                          e.currentToken.image,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.sourceEnd+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1)); //}}}

    }
    try {
      statement = Statement();
    } catch (ParseException e) {
    //{{{ fireParseError
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "statement expected",
                                          "statement",
                                          e.currentToken.image,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.sourceEnd+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1)); //}}}
    {if (true) return new LabeledStatement(label.image,
                                statement,
                                label.sourceStart,
                                e.currentToken.sourceEnd,
                                e.currentToken.beginLine,
                                statement.getEndLine(),
                                e.currentToken.beginColumn,
                                statement.getEndColumn());}
    }
    {if (true) return new LabeledStatement(label.image,
                                statement,
                                label.sourceStart,
                                statement.getSourceEnd(),
                                label.beginLine,
                                statement.getEndLine(),
                                label.beginColumn,
                                statement.getEndColumn());}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ Block()

/**
 * A Block is
 * {
 * statements
 * }.
 * @return a block
 */
  final public Block Block() throws ParseException {
  final ArrayList list = new ArrayList();
  Statement statement;
  final Token lbrace, rbrace;
  int pos,endLine,endColumn;
  int start, beginLine, beginColumn;
    try {
      lbrace = jj_consume_token(LBRACE);
      pos         = lbrace.sourceEnd+1;
      start       = lbrace.sourceStart;
      beginLine   = lbrace.beginLine;
      beginColumn = lbrace.beginColumn;
      endLine     = lbrace.endLine;
      endColumn   = lbrace.endColumn;
    } catch (ParseException e) {
    pos         = this.token.sourceEnd+1;
    start       = pos;
    beginLine   = this.token.endLine;
    beginColumn = this.token.endColumn;
    endLine     = this.token.endLine;
    endColumn   = this.token.endColumn;
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'{' expected",
                                          "{",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHPEND:
      case ABSTRACT:
      case INTERFACE:
      case TRY:
      case THROW:
      case CLASS:
      case FUNCTION:
      case IF:
      case ARRAY:
      case BREAK:
      case LIST:
      case PRINT:
      case ECHO:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case GLOBAL:
      case STATIC:
      case CONTINUE:
      case DO:
      case FOR:
      case NEW:
      case RETURN:
      case SWITCH:
      case WHILE:
      case FOREACH:
      case DEFINE:
      case GOTO:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case FALSE:
      case STRING:
      case OBJECT:
      case BOOL:
      case BOOLEAN:
      case REAL:
      case DOUBLE:
      case FLOAT:
      case INT:
      case INTEGER:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOUBLEQUOTE:
      case HEREDOCSTARTTOKEN:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[118] = jj_gen;
        break label_32;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case INTERFACE:
      case TRY:
      case THROW:
      case CLASS:
      case FUNCTION:
      case IF:
      case ARRAY:
      case BREAK:
      case LIST:
      case PRINT:
      case ECHO:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case GLOBAL:
      case STATIC:
      case CONTINUE:
      case DO:
      case FOR:
      case NEW:
      case RETURN:
      case SWITCH:
      case WHILE:
      case FOREACH:
      case DEFINE:
      case GOTO:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case FALSE:
      case STRING:
      case OBJECT:
      case BOOL:
      case BOOLEAN:
      case REAL:
      case DOUBLE:
      case FLOAT:
      case INT:
      case INTEGER:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOUBLEQUOTE:
      case HEREDOCSTARTTOKEN:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
        statement = BlockStatement();
      if (statement != null) {
        list.add(statement);
        pos         = statement.getSourceEnd()+1;
        endLine     = statement.getEndLine();
        endColumn   = statement.getEndColumn();
      }
        break;
      case PHPEND:
        statement = htmlBlock();
      if (statement != null) {
        list.add(statement);
        pos       = statement.getSourceEnd()+1;
        endLine   = statement.getEndLine();
        endColumn = statement.getEndColumn();
      } else {
        pos       = this.token.sourceEnd+1;
        endLine   = this.token.endLine;
        endColumn = this.token.endColumn;
      }
        break;
      default:
        jj_la1[119] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    try {
      rbrace = jj_consume_token(RBRACE);
      pos       = rbrace.sourceEnd+1;
      endLine   = rbrace.endLine;
      endColumn = rbrace.endColumn;
    } catch (ParseException e) {
    fireParseError("'}' expected", "}", e.currentToken);
    }
  final Statement[] statements = new Statement[list.size()];
  list.toArray(statements);
  {if (true) return new Block(statements,
                   start,
                   pos,
                   beginLine,
                   endLine,
                   beginColumn,
                   endColumn);}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ BlockStatement()
  final public Statement BlockStatement() throws ParseException {
  Statement statement = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRY:
    case THROW:
    case IF:
    case ARRAY:
    case BREAK:
    case LIST:
    case PRINT:
    case ECHO:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case GLOBAL:
    case STATIC:
    case CONTINUE:
    case DO:
    case FOR:
    case NEW:
    case RETURN:
    case SWITCH:
    case WHILE:
    case FOREACH:
    case DEFINE:
    case GOTO:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case FALSE:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOUBLEQUOTE:
    case HEREDOCSTARTTOKEN:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case SEMICOLON:
      try {
        statement = Statement();
      if (phpDocument == currentSegment) pushOnAstNodes(statement);
      } catch (ParseException e) {
    final Token semicolumn = error_skipto(SEMICOLON);
    final Token nextToken = e.currentToken.next;
    if (nextToken == semicolumn) {
      //{{{ Parse Error
      fireParseError(new PHPParseErrorEvent(ERROR,
                                            path,
                                            "statement expected",
                                            "statement",
                                            nextToken.image,
                                            nextToken.sourceEnd,
                                            semicolumn.sourceStart,
                                            nextToken.endLine,
                                            semicolumn.beginLine,
                                            nextToken.endColumn,
                                            semicolumn.beginColumn)); //}}}
    } else {
      fireParseError("statement expected","statement",nextToken);
    }
      }
      break;
    case ABSTRACT:
    case CLASS:
      statement = ClassDeclaration();
      break;
    case INTERFACE:
      statement = interfaceDeclaration();
      break;
    case FUNCTION:
      statement = MethodDeclaration(CONST_FUNCTION,null);
        if (phpDocument == currentSegment) pushOnAstNodes(statement);
        currentSegment.add((MethodDeclaration) statement);
        //((MethodDeclaration) statement).analyzeCode(this);

      break;
    default:
      jj_la1[120] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ BlockStatementNoBreak()

/**
 * A Block statement that will not contain any 'break'
 */
  final public Statement BlockStatementNoBreak() throws ParseException {
  Statement statement = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRY:
    case THROW:
    case IF:
    case ARRAY:
    case LIST:
    case PRINT:
    case ECHO:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case GLOBAL:
    case STATIC:
    case CONTINUE:
    case DO:
    case FOR:
    case NEW:
    case RETURN:
    case SWITCH:
    case WHILE:
    case FOREACH:
    case DEFINE:
    case GOTO:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case FALSE:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOUBLEQUOTE:
    case HEREDOCSTARTTOKEN:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case SEMICOLON:
      statement = StatementNoBreak();
      break;
    case ABSTRACT:
    case CLASS:
      statement = ClassDeclaration();
      break;
    case FUNCTION:
      statement = MethodDeclaration(CONST_FUNCTION,null);
          currentSegment.add((MethodDeclaration) statement);
          //((MethodDeclaration) statement).analyzeCode(this);

      break;
    default:
      jj_la1[121] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ LocalVariableDeclaration()

/**
 * used only by ForInit()
 */
  final public Expression[] LocalVariableDeclaration() throws ParseException {
  final ArrayList list = new ArrayList();
  Expression var;
    var = Expression();
   list.add(var);
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[122] = jj_gen;
        break label_33;
      }
      jj_consume_token(COMMA);
      var = Expression();
                                list.add(var);
    }
    final Expression[] vars = new Expression[list.size()];
    list.toArray(vars);
    {if (true) return vars;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ LocalVariableDeclarator()

/**
 * used only by LocalVariableDeclaration().
 */
  final public VariableDeclaration LocalVariableDeclarator() throws ParseException {
  final Variable varName;
  Expression initializer = null;
    varName = Variable();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      initializer = Expression();
      break;
    default:
      jj_la1[123] = jj_gen;
      ;
    }
   if (initializer == null) {
    {if (true) return new VariableDeclaration(currentSegment,
                                   varName,
                                   varName.getSourceStart(),
                                   varName.getSourceEnd(),
                                   varName.getBeginLine(),
                                   varName.getEndLine(),
                                   varName.getBeginColumn(),
                                   varName.getEndColumn());}
   }
    {if (true) return new VariableDeclaration(currentSegment,
                                   varName,
                                   initializer,
                                   "=",
                                   varName.getSourceStart(),
                                   initializer.getSourceEnd(),
                                   varName.getBeginLine(),
                                   initializer.getEndLine(),
                                   varName.getBeginColumn(),
                                   initializer.getEndColumn());}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ EmptyStatement()

/**
 * An empty statement.
 * It will generate an INFO marker
 *
 * @return an empty statement
 */
  final public EmptyStatement EmptyStatement() throws ParseException {
  final Token token;
    token = jj_consume_token(SEMICOLON);
/*    fireParseMessage(new PHPParseMessageEvent(INFO,
                                              path,
                                              "unneeded ';'",
                                              token.sourceStart,
                                              token.sourceEnd,
                                              token.beginLine,
                                              token.endLine,
                                              token.endColumn,
                                              token.endColumn+1));   */
    {if (true) return new EmptyStatement(token.sourceStart,
                              token.sourceEnd,
                              token.beginLine,
                              token.endLine,
                              token.beginColumn,
                              token.endColumn);}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ StatementExpression()

/**
 * used only by StatementExpressionList() which is used only by ForInit() and ForStatement()
 */
  final public Expression StatementExpression() throws ParseException {
  final Expression expr;
  final Token operator;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_PLUS:
    case MINUS_MINUS:
      expr = PreIncDecExpression();
                                {if (true) return expr;}
      break;
    case ARRAY:
    case LIST:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case NEW:
    case DEFINE:
    case GOTO:
    case SUPER:
    case THIS:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case BIT_AND:
    case DOLLAR:
    case IDENTIFIER:
      expr = PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_PLUS:
      case MINUS_MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_PLUS:
          operator = jj_consume_token(PLUS_PLUS);
                            {if (true) return new PostfixedUnaryExpression(expr,
                                                                PHPParserConstants.PLUS_PLUS,
                                                                operator.sourceEnd,
                                                                operator.endLine,
                                                                operator.endColumn);}
          break;
        case MINUS_MINUS:
          operator = jj_consume_token(MINUS_MINUS);
                              {if (true) return new PostfixedUnaryExpression(expr,
                                                                  PHPParserConstants.MINUS_MINUS,
                                                                  operator.sourceEnd,
                                                                  operator.endLine,
                                                                  operator.endColumn);}
          break;
        default:
          jj_la1[124] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[125] = jj_gen;
        ;
      }
   {if (true) return expr;}
      break;
    default:
      jj_la1[126] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//}}}

//{{{ SWITCH
//{{{ SwitchStatement()
  final public SwitchStatement SwitchStatement() throws ParseException {
  Expression variable;
  final AbstractCase[] cases;
  final Token switchToken,lparenToken,rparenToken;
  int pos;
    switchToken = jj_consume_token(SWITCH);
                          pos = switchToken.sourceEnd+1;
    try {
      lparenToken = jj_consume_token(LPAREN);
     pos = lparenToken.sourceEnd+1;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'(' expected",
                                          "(",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    try {
      variable = Expression();
      pos = variable.getSourceEnd()+1;
    } catch (ParseException e) {
    if (errorMessage != null) {
      {if (true) throw e;}
    }
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "expression expected",
                                          "expression",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    variable = new ConstantIdentifier(SYNTAX_ERROR_CHAR,
                                      pos,
                                      pos,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1);
    }
    try {
      rparenToken = jj_consume_token(RPAREN);
                            pos = rparenToken.sourceEnd+1;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "')' expected",
                                          ")",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      cases = switchStatementBrace();
      break;
    case COLON:
      cases = switchStatementColon(switchToken.sourceStart, switchToken.sourceEnd);
      break;
    default:
      jj_la1[127] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return new SwitchStatement(variable,
                              cases,
                              switchToken.sourceStart,
                              token.sourceEnd,
                              switchToken.beginLine,
                              token.endLine,
                              switchToken.beginColumn,
                              token.endColumn);}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ switchStatementBrace()
  final public AbstractCase[] switchStatementBrace() throws ParseException {
  AbstractCase cas;
  final ArrayList cases = new ArrayList();
  Token token;
  int pos;
    token = jj_consume_token(LBRACE);
    pos = token.sourceEnd;
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        jj_la1[128] = jj_gen;
        break label_34;
      }
      cas = switchLabel0();
     cases.add(cas);
     pos = cas.getSourceEnd();
    }
    try {
      token = jj_consume_token(RBRACE);
     pos = token.sourceEnd;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'}' expected",
                                          "}",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    final AbstractCase[] abcase = new AbstractCase[cases.size()];
    cases.toArray(abcase);
    {if (true) return abcase;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ switchStatementColon(final int start, final int end)

/**
 * A Switch statement with : ... endswitch;
 * @param start the begin offset of the switch
 * @param end the end offset of the switch
 */
  final public AbstractCase[] switchStatementColon(final int start, final int end) throws ParseException {
  AbstractCase cas;
  final ArrayList cases = new ArrayList();
  Token token;
  int pos;
    token = jj_consume_token(COLON);
                   pos = token.sourceEnd;
    fireParseMessage(new PHPParseMessageEvent(INFO,
                                              PHPParseMessageEvent.MESSAGE_SWITCH_ENDSWITCH_TAG,
                                              path,
                                              "Ugly syntax detected, you should switch () {...} instead of switch (): ... enswitch;",
                                              start,
                                              end,
                                              token.beginLine,
                                              token.endLine,
                                              token.beginColumn,
                                              token.endColumn));
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        jj_la1[129] = jj_gen;
        break label_35;
      }
      cas = switchLabel0();
      cases.add(cas);
      pos = cas.getSourceEnd();
    }
    try {
      token = jj_consume_token(ENDSWITCH);
                         pos = token.sourceEnd;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'endswitch' expected",
                                          "endswitch",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    try {
      token = jj_consume_token(SEMICOLON);
                         pos = token.sourceEnd;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "';' expected",
                                          ";",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    final AbstractCase[] abcase = new AbstractCase[cases.size()];
    cases.toArray(abcase);
    {if (true) return abcase;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ switchLabel0()
  final public AbstractCase switchLabel0() throws ParseException {
  final Expression expr;
  Statement statement;
  final ArrayList stmts = new ArrayList();
  final int start = this.token.next.sourceStart;
    expr = SwitchLabel();
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHPEND:
      case ABSTRACT:
      case TRY:
      case THROW:
      case CLASS:
      case FUNCTION:
      case IF:
      case ARRAY:
      case BREAK:
      case LIST:
      case PRINT:
      case ECHO:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case GLOBAL:
      case STATIC:
      case CONTINUE:
      case DO:
      case FOR:
      case NEW:
      case RETURN:
      case SWITCH:
      case WHILE:
      case FOREACH:
      case DEFINE:
      case GOTO:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case FALSE:
      case STRING:
      case OBJECT:
      case BOOL:
      case BOOLEAN:
      case REAL:
      case DOUBLE:
      case FLOAT:
      case INT:
      case INTEGER:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOUBLEQUOTE:
      case HEREDOCSTARTTOKEN:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[130] = jj_gen;
        break label_36;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case TRY:
      case THROW:
      case CLASS:
      case FUNCTION:
      case IF:
      case ARRAY:
      case LIST:
      case PRINT:
      case ECHO:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case GLOBAL:
      case STATIC:
      case CONTINUE:
      case DO:
      case FOR:
      case NEW:
      case RETURN:
      case SWITCH:
      case WHILE:
      case FOREACH:
      case DEFINE:
      case GOTO:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case FALSE:
      case STRING:
      case OBJECT:
      case BOOL:
      case BOOLEAN:
      case REAL:
      case DOUBLE:
      case FLOAT:
      case INT:
      case INTEGER:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOUBLEQUOTE:
      case HEREDOCSTARTTOKEN:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
        statement = BlockStatementNoBreak();
                                         stmts.add(statement);
        break;
      case PHPEND:
        statement = htmlBlock();
                                         if (statement != null) {stmts.add(statement);}
        break;
      case BREAK:
        statement = BreakStatement();
                                         stmts.add(statement);
        break;
      default:
        jj_la1[131] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    final int listSize = stmts.size();
    final Statement[] stmtsArray = new Statement[listSize];
    stmts.toArray(stmtsArray);
    if (expr == null) {//it's a default
      final int end = this.token.next.sourceStart;
      {if (true) return new DefaultCase(stmtsArray,
                             start,
                             end,
                             this.token.next.beginLine,
                             this.token.next.endLine,
                             this.token.next.beginColumn,
                             this.token.next.endColumn);}
    }
    if (listSize == 0) {
      {if (true) return new Case(expr,
                      stmtsArray,
                      expr.getSourceStart(),
                      expr.getSourceEnd(),
                      expr.getBeginLine(),
                      expr.getEndLine(),
                      expr.getBeginColumn(),
                      expr.getEndColumn());}
    } else {
      {if (true) return new Case(expr,
                      stmtsArray,
                      expr.getSourceStart(),
                      stmtsArray[listSize-1].getSourceEnd(),
                      expr.getBeginLine(),
                      stmtsArray[listSize-1].getEndLine(),
                      expr.getBeginColumn(),
                      stmtsArray[listSize-1].getEndColumn());}
    }
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ SwitchLabel()

/**
 * A SwitchLabel.
 * case Expression() :
 * default :
 * @return the if it was a case and null if not
 */
  final public Expression SwitchLabel() throws ParseException {
  final Expression expr;
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      token = jj_consume_token(CASE);
      try {
        expr = Expression();
      } catch (ParseException e) {
  //todo ameliorer ca
    if (errorMessage != null) {if (true) throw e;}
    errorMessage = "expression expected after 'case' keyword";
    errorStart = token.sourceEnd;
    errorEnd   = token.sourceEnd +1;
    {if (true) throw e;}
      }
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
          token = jj_consume_token(COLON);
          break;
        case SEMICOLON:
          token = jj_consume_token(SEMICOLON);
        fireParseMessage(new PHPParseMessageEvent(INFO,
                                                  PHPParseMessageEvent.MESSAGE_CASE_SEMICOLON,
                                                  path,
                                                  "a ; was found in a case statement. You should use :",
                                                  token));
          break;
        default:
          jj_la1[132] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    //{{{ fireParseError
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "':' expected",
                                          ":",
                                          e.currentToken.image,
                                          expr.getSourceEnd(),
                                          expr.getSourceEnd()+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1)); //}}}

      }
   {if (true) return expr;}
      break;
    case _DEFAULT:
      token = jj_consume_token(_DEFAULT);
      try {
        jj_consume_token(COLON);
      } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "':' expected",
                                          ":",
                                          e.currentToken.image,
                                          token.sourceEnd,
                                          token.sourceEnd+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
      }
   {if (true) return null;}
      break;
    default:
      jj_la1[133] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//}}}
//}}}

//{{{ BreakStatement()
  final public Break BreakStatement() throws ParseException {
  Expression expression = null;
  final Token token, token2;
  int pos;
    token = jj_consume_token(BREAK);
                   pos = token.sourceEnd+1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
    case LIST:
    case PRINT:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case NEW:
    case DEFINE:
    case GOTO:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case FALSE:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOUBLEQUOTE:
    case HEREDOCSTARTTOKEN:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
      expression = Expression();
      pos = expression.getSourceEnd()+1;
      break;
    default:
      jj_la1[134] = jj_gen;
      ;
    }
    try {
      token2 = jj_consume_token(SEMICOLON);
     pos = token2.sourceEnd;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "';' expected",
                                          ";",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
   {if (true) return new Break(expression, token.sourceStart, pos,token.beginLine,token.endLine,token.beginColumn,token.endColumn);}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ Condition(final String keyword)
  final public Expression Condition(final String keyword) throws ParseException {
  final Expression condition;
    try {
      jj_consume_token(LPAREN);
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'(' expected",
                                          "(",
                                          e.currentToken.image,
                                          token.sourceEnd,
                                          token.sourceEnd+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    condition = Expression();
    try {
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "')' expected",
                                          ")",
                                          e.currentToken.image,
                                          condition.getSourceEnd(),
                                          condition.getSourceEnd()+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
   {if (true) return condition;}
    throw new Error("Missing return statement in function");
  }

//}}}

//{{{ IF
//{{{ IfStatement()
  final public IfStatement IfStatement() throws ParseException {
  final Expression condition;
  final IfStatement ifStatement;
  final Token ifToken;
    ifToken = jj_consume_token(IF);
    condition = Condition("if");
    ifStatement = IfStatement0(condition,ifToken);
   {if (true) return ifStatement;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ IfStatement0(Expression condition, Token ifToken)
  final public IfStatement IfStatement0(Expression condition, Token ifToken) throws ParseException {
  Statement statement = null;
  final Statement stmt;
  final Statement[] statementsArray;
  ElseIf elseifStatement;
  Else elseStatement = null;
  final ArrayList stmts;
  final ArrayList elseIfList = new ArrayList();
  final ElseIf[] elseIfs;
  final Token colonToken, elseToken;
  int sourceEnd = 0;
  int endColumn = 0;
  int endLine   = 0;
  Token semiColonToken;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      colonToken = jj_consume_token(COLON);
    stmts = new ArrayList();
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PHPEND:
        case TRY:
        case THROW:
        case IF:
        case ARRAY:
        case BREAK:
        case LIST:
        case PRINT:
        case ECHO:
        case INCLUDE:
        case REQUIRE:
        case INCLUDE_ONCE:
        case REQUIRE_ONCE:
        case GLOBAL:
        case STATIC:
        case CONTINUE:
        case DO:
        case FOR:
        case NEW:
        case RETURN:
        case SWITCH:
        case WHILE:
        case FOREACH:
        case DEFINE:
        case GOTO:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case FALSE:
        case STRING:
        case OBJECT:
        case BOOL:
        case BOOLEAN:
        case REAL:
        case DOUBLE:
        case FLOAT:
        case INT:
        case INTEGER:
        case AT:
        case BANG:
        case TILDE:
        case PLUS_PLUS:
        case MINUS_MINUS:
        case PLUS:
        case MINUS:
        case BIT_AND:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case DOUBLEQUOTE:
        case HEREDOCSTARTTOKEN:
        case DOLLAR:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[135] = jj_gen;
          break label_37;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRY:
        case THROW:
        case IF:
        case ARRAY:
        case BREAK:
        case LIST:
        case PRINT:
        case ECHO:
        case INCLUDE:
        case REQUIRE:
        case INCLUDE_ONCE:
        case REQUIRE_ONCE:
        case GLOBAL:
        case STATIC:
        case CONTINUE:
        case DO:
        case FOR:
        case NEW:
        case RETURN:
        case SWITCH:
        case WHILE:
        case FOREACH:
        case DEFINE:
        case GOTO:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case FALSE:
        case STRING:
        case OBJECT:
        case BOOL:
        case BOOLEAN:
        case REAL:
        case DOUBLE:
        case FLOAT:
        case INT:
        case INTEGER:
        case AT:
        case BANG:
        case TILDE:
        case PLUS_PLUS:
        case MINUS_MINUS:
        case PLUS:
        case MINUS:
        case BIT_AND:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case DOUBLEQUOTE:
        case HEREDOCSTARTTOKEN:
        case DOLLAR:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
          statement = Statement();
       stmts.add(statement);
          break;
        case PHPEND:
          statement = htmlBlock();
       if (statement != null) stmts.add(statement);
          break;
        default:
          jj_la1[136] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_38:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSEIF:
          ;
          break;
        default:
          jj_la1[137] = jj_gen;
          break label_38;
        }
        elseifStatement = ElseIfStatementColon();
                                              elseIfList.add(elseifStatement);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        elseStatement = ElseStatementColon();
        break;
      default:
        jj_la1[138] = jj_gen;
        ;
      }
      fireParseMessage(new PHPParseMessageEvent(INFO,
                                                PHPParseMessageEvent.MESSAGE_IF_ENDIF_TAG,
                                                path,
                                                "Ugly syntax detected, you should if () {...} instead of if (): ... endif;",
                                                colonToken));
      try {
        jj_consume_token(ENDIF);
      } catch (ParseException e) {
    errorMessage = "'endif' expected";
    errorStart = e.currentToken.sourceStart;
    errorEnd   = e.currentToken.sourceEnd;
    {if (true) throw e;}
      }
      try {
        semiColonToken = jj_consume_token(SEMICOLON);
      sourceEnd = semiColonToken.sourceStart;
      endLine   = semiColonToken.beginLine;
      endColumn = semiColonToken.beginColumn;
      } catch (ParseException e) {
    sourceEnd = e.currentToken.sourceStart;
    endLine   = e.currentToken.beginLine;
    endColumn = e.currentToken.beginColumn;
    errorMessage = "';' expected after 'endif' keyword";
    errorStart = e.currentToken.sourceStart;
    errorEnd   = e.currentToken.sourceEnd;
    {if (true) throw e;}
      }
    elseIfs = new ElseIf[elseIfList.size()];
    elseIfList.toArray(elseIfs);
    if (stmts.size() == 1) {
      {if (true) return new IfStatement(condition,
                             (Statement) stmts.get(0),
                             elseIfs,
                             elseStatement,
                             ifToken.sourceStart,
                             sourceEnd,
                             ifToken.beginLine,
                             endLine,
                             ifToken.beginColumn,
                             endColumn);}
    } else {
      statementsArray = new Statement[stmts.size()];
      stmts.toArray(statementsArray);
      {if (true) return new IfStatement(condition,
                             new Block(statementsArray,
                                       colonToken.sourceEnd,
                                       sourceEnd,
                                       colonToken.endLine,
                                       endLine,
                                       colonToken.endColumn,
                                       endColumn),
                             elseIfs,
                             elseStatement,
                             ifToken.sourceStart,
                             sourceEnd,
                             ifToken.beginLine,
                             endLine,
                             ifToken.beginColumn,
                             endColumn);}
    }
      break;
    case PHPEND:
    case TRY:
    case THROW:
    case IF:
    case ARRAY:
    case BREAK:
    case LIST:
    case PRINT:
    case ECHO:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case GLOBAL:
    case STATIC:
    case CONTINUE:
    case DO:
    case FOR:
    case NEW:
    case RETURN:
    case SWITCH:
    case WHILE:
    case FOREACH:
    case DEFINE:
    case GOTO:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case FALSE:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOUBLEQUOTE:
    case HEREDOCSTARTTOKEN:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case SEMICOLON:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRY:
      case THROW:
      case IF:
      case ARRAY:
      case BREAK:
      case LIST:
      case PRINT:
      case ECHO:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case GLOBAL:
      case STATIC:
      case CONTINUE:
      case DO:
      case FOR:
      case NEW:
      case RETURN:
      case SWITCH:
      case WHILE:
      case FOREACH:
      case DEFINE:
      case GOTO:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case FALSE:
      case STRING:
      case OBJECT:
      case BOOL:
      case BOOLEAN:
      case REAL:
      case DOUBLE:
      case FLOAT:
      case INT:
      case INTEGER:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOUBLEQUOTE:
      case HEREDOCSTARTTOKEN:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
        stmt = Statement();
        break;
      case PHPEND:
        stmt = htmlBlock();
        break;
      default:
        jj_la1[139] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSEIF:
          ;
          break;
        default:
          jj_la1[140] = jj_gen;
          break label_39;
        }
        elseifStatement = ElseIfStatement();
                                                      elseIfList.add(elseifStatement);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        elseToken = jj_consume_token(ELSE);
        try {
          statement = Statement();
       elseStatement = new Else(statement,
                                elseToken.sourceStart,
                                statement.getSourceEnd(),
                                elseToken.beginLine,
                                statement.getEndLine(),
                                elseToken.beginColumn,
                                statement.getEndColumn());
        } catch (ParseException e) {
      if (errorMessage != null) {
        {if (true) throw e;}
      }
      errorMessage = "unexpected token '"+e.currentToken.next.image+"', a statement was expected";
      errorStart = e.currentToken.sourceStart;
      errorEnd   = e.currentToken.sourceEnd;
      {if (true) throw e;}
        }
        break;
      default:
        jj_la1[141] = jj_gen;
        ;
      }
    elseIfs = new ElseIf[elseIfList.size()];
    elseIfList.toArray(elseIfs);
    {if (true) return new IfStatement(condition,
                           stmt,
                           elseIfs,
                           elseStatement,
                             ifToken.sourceStart,
                             sourceEnd,
                             ifToken.beginLine,
                             endLine,
                             ifToken.beginColumn,
                             endColumn);}
      break;
    default:
      jj_la1[142] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ ElseIfStatementColon()
  final public ElseIf ElseIfStatementColon() throws ParseException {
  final Expression condition;
  Statement statement;
  final ArrayList list = new ArrayList();
  final Token elseifToken;
    elseifToken = jj_consume_token(ELSEIF);
    condition = Condition("elseif");
    jj_consume_token(COLON);
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHPEND:
      case TRY:
      case THROW:
      case IF:
      case ARRAY:
      case BREAK:
      case LIST:
      case PRINT:
      case ECHO:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case GLOBAL:
      case STATIC:
      case CONTINUE:
      case DO:
      case FOR:
      case NEW:
      case RETURN:
      case SWITCH:
      case WHILE:
      case FOREACH:
      case DEFINE:
      case GOTO:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case FALSE:
      case STRING:
      case OBJECT:
      case BOOL:
      case BOOLEAN:
      case REAL:
      case DOUBLE:
      case FLOAT:
      case INT:
      case INTEGER:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOUBLEQUOTE:
      case HEREDOCSTARTTOKEN:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[143] = jj_gen;
        break label_40;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRY:
      case THROW:
      case IF:
      case ARRAY:
      case BREAK:
      case LIST:
      case PRINT:
      case ECHO:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case GLOBAL:
      case STATIC:
      case CONTINUE:
      case DO:
      case FOR:
      case NEW:
      case RETURN:
      case SWITCH:
      case WHILE:
      case FOREACH:
      case DEFINE:
      case GOTO:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case FALSE:
      case STRING:
      case OBJECT:
      case BOOL:
      case BOOLEAN:
      case REAL:
      case DOUBLE:
      case FLOAT:
      case INT:
      case INTEGER:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOUBLEQUOTE:
      case HEREDOCSTARTTOKEN:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
        statement = Statement();
                                      list.add(statement);
        break;
      case PHPEND:
        statement = htmlBlock();
                                      if (statement != null) {list.add(statement);}
        break;
      default:
        jj_la1[144] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  final int sizeList = list.size();
  final Statement[] stmtsArray = new Statement[sizeList];
  list.toArray(stmtsArray);
  {if (true) return new ElseIf(condition,stmtsArray ,
                    elseifToken.sourceStart,
                    stmtsArray[sizeList-1].getSourceEnd(),
                    elseifToken.beginLine,
                    stmtsArray[sizeList-1].getEndLine(),
                    elseifToken.beginColumn,
                    stmtsArray[sizeList-1].getEndColumn());}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ ElseStatementColon()
  final public Else ElseStatementColon() throws ParseException {
  Statement statement;
  final ArrayList list = new ArrayList();
  final Token elseToken;
    elseToken = jj_consume_token(ELSE);
    jj_consume_token(COLON);
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHPEND:
      case TRY:
      case THROW:
      case IF:
      case ARRAY:
      case BREAK:
      case LIST:
      case PRINT:
      case ECHO:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case GLOBAL:
      case STATIC:
      case CONTINUE:
      case DO:
      case FOR:
      case NEW:
      case RETURN:
      case SWITCH:
      case WHILE:
      case FOREACH:
      case DEFINE:
      case GOTO:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case FALSE:
      case STRING:
      case OBJECT:
      case BOOL:
      case BOOLEAN:
      case REAL:
      case DOUBLE:
      case FLOAT:
      case INT:
      case INTEGER:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOUBLEQUOTE:
      case HEREDOCSTARTTOKEN:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[145] = jj_gen;
        break label_41;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRY:
      case THROW:
      case IF:
      case ARRAY:
      case BREAK:
      case LIST:
      case PRINT:
      case ECHO:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case GLOBAL:
      case STATIC:
      case CONTINUE:
      case DO:
      case FOR:
      case NEW:
      case RETURN:
      case SWITCH:
      case WHILE:
      case FOREACH:
      case DEFINE:
      case GOTO:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case FALSE:
      case STRING:
      case OBJECT:
      case BOOL:
      case BOOLEAN:
      case REAL:
      case DOUBLE:
      case FLOAT:
      case INT:
      case INTEGER:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOUBLEQUOTE:
      case HEREDOCSTARTTOKEN:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
        statement = Statement();
                                                         list.add(statement);
        break;
      case PHPEND:
        statement = htmlBlock();
                                             if (statement != null) {list.add(statement);}
        break;
      default:
        jj_la1[146] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  final int sizeList = list.size();
  final Statement[] stmtsArray = new Statement[sizeList];
  list.toArray(stmtsArray);
  {if (true) return new Else(stmtsArray,
                  elseToken.sourceStart,
                  stmtsArray[sizeList-1].getSourceEnd(),
                  elseToken.beginLine,
                  stmtsArray[sizeList-1].getEndLine(),
                  elseToken.beginColumn,
                  stmtsArray[sizeList-1].getEndColumn());}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ ElseIfStatement()
  final public ElseIf ElseIfStatement() throws ParseException {
  final Expression condition;
  //final Statement statement;
  final Token elseifToken;
  final Statement[] statement = new Statement[1];
    elseifToken = jj_consume_token(ELSEIF);
    condition = Condition("elseif");
    statement[0] = Statement();
  {if (true) return new ElseIf(condition,
                    statement,
                    elseifToken.sourceStart,
                    statement[0].getSourceEnd(),
                    elseifToken.beginLine,
                    statement[0].getEndLine(),
                    elseifToken.beginColumn,
                    statement[0].getEndColumn());}
    throw new Error("Missing return statement in function");
  }

//}}}
//}}}

//{{{ WHILE
//{{{ WhileStatement()
  final public WhileStatement WhileStatement() throws ParseException {
  final Expression condition;
  final Statement action;
  final Token whileToken;
    whileToken = jj_consume_token(WHILE);
    condition = Condition("while");
    action = WhileStatementAction(whileToken);
      {if (true) return new WhileStatement(condition,
                               action,
                               whileToken.sourceStart,
                               action.getSourceEnd(),
                               whileToken.beginLine,
                               action.getEndLine(),
                               whileToken.beginColumn,
                               action.getEndColumn());}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ WhileStatementAction(Token whileToken)
  final public Statement WhileStatementAction(Token whileToken) throws ParseException {
  Statement statement;
  final ArrayList stmts = new ArrayList();
  final Token colonToken;
  int end       = 0;
  int endLine   = 0;
  int endColumn = 0;
  Token semicolonToken;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      colonToken = jj_consume_token(COLON);
      label_42:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRY:
        case THROW:
        case IF:
        case ARRAY:
        case BREAK:
        case LIST:
        case PRINT:
        case ECHO:
        case INCLUDE:
        case REQUIRE:
        case INCLUDE_ONCE:
        case REQUIRE_ONCE:
        case GLOBAL:
        case STATIC:
        case CONTINUE:
        case DO:
        case FOR:
        case NEW:
        case RETURN:
        case SWITCH:
        case WHILE:
        case FOREACH:
        case DEFINE:
        case GOTO:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case FALSE:
        case STRING:
        case OBJECT:
        case BOOL:
        case BOOLEAN:
        case REAL:
        case DOUBLE:
        case FLOAT:
        case INT:
        case INTEGER:
        case AT:
        case BANG:
        case TILDE:
        case PLUS_PLUS:
        case MINUS_MINUS:
        case PLUS:
        case MINUS:
        case BIT_AND:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case DOUBLEQUOTE:
        case HEREDOCSTARTTOKEN:
        case DOLLAR:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[147] = jj_gen;
          break label_42;
        }
        statement = Statement();
      stmts.add(statement);
      }
    fireParseMessage(new PHPParseMessageEvent(INFO,
                                              PHPParseMessageEvent.MESSAGE_WHILE_ENDWHILE_TAG,
                                              path,
                                              "Ugly syntax detected, you should while () {...} instead of while (): ... endwhile;",
                                              colonToken));
      try {
        jj_consume_token(ENDWHILE);
      } catch (ParseException e) {
    errorMessage = "'endwhile' expected";
    errorStart = e.currentToken.sourceStart;
    errorEnd   = e.currentToken.sourceEnd;
    {if (true) throw e;}
      }
      try {
        semicolonToken = jj_consume_token(SEMICOLON);
      end       = semicolonToken.sourceEnd;
      endLine   = semicolonToken.beginLine;
      endColumn = semicolonToken.beginColumn;
      final Statement[] stmtsArray = new Statement[stmts.size()];
      stmts.toArray(stmtsArray);
      {if (true) return new Block(stmtsArray,
                       whileToken.sourceStart,
                       end,
                       whileToken.beginLine,
                       endLine,
                       whileToken.beginColumn,
                       endColumn);}
      } catch (ParseException e) {
    errorMessage = "';' expected after 'endwhile' keyword";
    errorStart = e.currentToken.sourceStart;
    errorEnd   = e.currentToken.sourceEnd;
    {if (true) throw e;}
      }
      break;
    case TRY:
    case THROW:
    case IF:
    case ARRAY:
    case BREAK:
    case LIST:
    case PRINT:
    case ECHO:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case GLOBAL:
    case STATIC:
    case CONTINUE:
    case DO:
    case FOR:
    case NEW:
    case RETURN:
    case SWITCH:
    case WHILE:
    case FOREACH:
    case DEFINE:
    case GOTO:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case FALSE:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOUBLEQUOTE:
    case HEREDOCSTARTTOKEN:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case SEMICOLON:
      statement = Statement();
    {if (true) return statement;}
      break;
    default:
      jj_la1[148] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//}}}
//}}}

//{{{ DoStatement()
  final public DoStatement DoStatement() throws ParseException {
  final Statement action;
  final Expression condition;
  final Token token;
  Token token2 = null;
    token = jj_consume_token(DO);
    action = Statement();
    jj_consume_token(WHILE);
    condition = Condition("while");
    try {
      token2 = jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "';' expected",
                                          ";",
                                          e.currentToken.image,
                                          condition.getSourceEnd(),
                                          condition.getSourceEnd()+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    if (token2 == null) {
      {if (true) return new DoStatement(condition,
                             action,
                             token.sourceStart,
                             condition.getSourceEnd(),
                             token.beginLine,
                             condition.getEndLine(),
                             token.beginColumn,
                             condition.getEndColumn());}
    }
    {if (true) return new DoStatement(condition,
                           action,
                           token.sourceStart,
                           token2.sourceEnd,
                             token.beginLine,
                             token2.endLine,
                             token.beginColumn,
                             token2.endColumn);}
    throw new Error("Missing return statement in function");
  }

//}}}

//{{{ ForeachStatement()
  final public ForeachStatement ForeachStatement() throws ParseException {
  Statement statement = null;
  Expression expression = null;
  ArrayVariableDeclaration variable = null;
  final Token foreachToken;
  Token lparenToken = null;
  Token asToken = null;
  Token rparenToken = null;
  int pos,endLine,endColumn;
  final Token tokenEndForeach, tokenColon, tokenSemicolon;
  Statement action;
  final ArrayList list = new ArrayList();
    foreachToken = jj_consume_token(FOREACH);
    try {
      lparenToken = jj_consume_token(LPAREN);
      pos       = lparenToken.sourceEnd+1;
      endLine   = lparenToken.endLine;
      endColumn = lparenToken.endColumn;
    } catch (ParseException e) {
    fireParseError("'(' expected", "(", e.currentToken);
    {
      pos       = foreachToken.sourceEnd+1;
      endLine   = foreachToken.endLine;
      endColumn = foreachToken.endColumn;
    }
    }
    try {
      expression = Expression();
      pos       = expression.getSourceEnd()+1;
      endLine   = expression.getEndLine();
      endColumn = expression.getEndColumn();
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "variable expected",
                                          "variable",
                                          e.currentToken.image,
                                          e.currentToken.sourceStart,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    try {
      asToken = jj_consume_token(AS);
      pos       = asToken.sourceEnd+1;
      endLine   = asToken.endLine;
      endColumn = asToken.endColumn;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'as' expected",
                                          "as",
                                          e.currentToken.image,
                                          e.currentToken.sourceStart,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    try {
      variable = ArrayVariable();
      pos       = variable.getSourceEnd()+1;
      endLine   = variable.getEndLine();
      endColumn = variable.getEndColumn();
    } catch (ParseException e) {
    if (errorMessage != null) {if (true) throw e;}
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "variable expected",
                                          "variable",
                                          e.currentToken.image,
                                          e.currentToken.sourceStart,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    try {
      rparenToken = jj_consume_token(RPAREN);
      pos       = rparenToken.sourceEnd+1;
      endLine   = rparenToken.endLine;
      endColumn = rparenToken.endColumn;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "')' expected",
                                          ")",
                                          e.currentToken.image,
                                          e.currentToken.sourceStart,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRY:
    case THROW:
    case IF:
    case ARRAY:
    case BREAK:
    case LIST:
    case PRINT:
    case ECHO:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case GLOBAL:
    case STATIC:
    case CONTINUE:
    case DO:
    case FOR:
    case NEW:
    case RETURN:
    case SWITCH:
    case WHILE:
    case FOREACH:
    case DEFINE:
    case GOTO:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case FALSE:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOUBLEQUOTE:
    case HEREDOCSTARTTOKEN:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case SEMICOLON:
      try {
        statement = Statement();
      pos       = statement.getSourceEnd()+1;
      endLine   = statement.getEndLine();
      endColumn = statement.getEndColumn();
      } catch (ParseException e) {
    if (errorMessage != null) {if (true) throw e;}
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "statement expected",
                                          "statement",
                                          e.currentToken.image,
                                          e.currentToken.sourceStart,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
      }
   {if (true) return new ForeachStatement(expression,
                               variable,
                               statement,
                               foreachToken.sourceStart,
                               pos,
                               foreachToken.beginLine,
                               endLine,
                               foreachToken.beginColumn,
                               endColumn);}
      break;
    case COLON:
      tokenColon = jj_consume_token(COLON);
   pos = tokenColon.sourceEnd+1;
      label_43:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PHPEND:
        case TRY:
        case THROW:
        case IF:
        case ARRAY:
        case BREAK:
        case LIST:
        case PRINT:
        case ECHO:
        case INCLUDE:
        case REQUIRE:
        case INCLUDE_ONCE:
        case REQUIRE_ONCE:
        case GLOBAL:
        case STATIC:
        case CONTINUE:
        case DO:
        case FOR:
        case NEW:
        case RETURN:
        case SWITCH:
        case WHILE:
        case FOREACH:
        case DEFINE:
        case GOTO:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case FALSE:
        case STRING:
        case OBJECT:
        case BOOL:
        case BOOLEAN:
        case REAL:
        case DOUBLE:
        case FLOAT:
        case INT:
        case INTEGER:
        case AT:
        case BANG:
        case TILDE:
        case PLUS_PLUS:
        case MINUS_MINUS:
        case PLUS:
        case MINUS:
        case BIT_AND:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case DOUBLEQUOTE:
        case HEREDOCSTARTTOKEN:
        case DOLLAR:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[149] = jj_gen;
          break label_43;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRY:
        case THROW:
        case IF:
        case ARRAY:
        case BREAK:
        case LIST:
        case PRINT:
        case ECHO:
        case INCLUDE:
        case REQUIRE:
        case INCLUDE_ONCE:
        case REQUIRE_ONCE:
        case GLOBAL:
        case STATIC:
        case CONTINUE:
        case DO:
        case FOR:
        case NEW:
        case RETURN:
        case SWITCH:
        case WHILE:
        case FOREACH:
        case DEFINE:
        case GOTO:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case FALSE:
        case STRING:
        case OBJECT:
        case BOOL:
        case BOOLEAN:
        case REAL:
        case DOUBLE:
        case FLOAT:
        case INT:
        case INTEGER:
        case AT:
        case BANG:
        case TILDE:
        case PLUS_PLUS:
        case MINUS_MINUS:
        case PLUS:
        case MINUS:
        case BIT_AND:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case DOUBLEQUOTE:
        case HEREDOCSTARTTOKEN:
        case DOLLAR:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
          action = Statement();
     list.add(action);
     pos = action.getSourceEnd()+1;
          break;
        case PHPEND:
          statement = htmlBlock();
     if (statement != null) list.add(statement);
          break;
        default:
          jj_la1[150] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
     fireParseMessage(new PHPParseMessageEvent(INFO,
                                               PHPParseMessageEvent.MESSAGE_FOREACH_ENDFOREACH_TAG,
                                               path,
                                               "Ugly syntax detected, you should foreach () {...} instead of foreach (): ... endforeach;",
                                               tokenColon));
      try {
        tokenEndForeach = jj_consume_token(ENDFOREACH);
      pos = tokenEndForeach.sourceEnd+1;
      } catch (ParseException e) {
     fireParseError(new PHPParseErrorEvent(ERROR,
                                           path,
                                           "'endforeach' expected",
                                           "endforeach",
                                           e.currentToken.image,
                                           pos,
                                           pos+1,
                                           e.currentToken.beginLine,
                                           e.currentToken.endLine,
                                           e.currentToken.endColumn,
                                           e.currentToken.endColumn+1));
      }
      try {
        tokenSemicolon = jj_consume_token(SEMICOLON);
      pos = tokenSemicolon.sourceEnd+1;
      } catch (ParseException e) {
     fireParseError(new PHPParseErrorEvent(ERROR,
                                           path,
                                           "';' expected",
                                           ";",
                                           e.currentToken.image,
                                           pos,
                                           pos+1,
                                           e.currentToken.beginLine,
                                           e.currentToken.endLine,
                                           e.currentToken.endColumn,
                                           e.currentToken.endColumn+1));
      }
     if (list.size() == 0) {
       {if (true) return new ForeachStatement(expression,
                                    variable,
                                    null,
                                    foreachToken.sourceStart,
                                    pos,
                                    foreachToken.beginLine,
                                    endLine,
                                    foreachToken.beginColumn,
                                    endColumn);}
     } else {
       final Statement[] stmtsArray = new Statement[list.size()];
       list.toArray(stmtsArray);
       {if (true) return new ForeachStatement(expression,
                                    variable,
                                    new Block(stmtsArray,
                                             stmtsArray[0].getSourceStart(),
                                             stmtsArray[stmtsArray.length-1].getSourceEnd(),
                                             stmtsArray[0].getBeginLine(),
                                             stmtsArray[stmtsArray.length-1].getEndLine(),
                                             stmtsArray[0].getBeginColumn(),
                                             stmtsArray[stmtsArray.length-1].getEndColumn()),
                                    foreachToken.sourceStart,
                                    pos,
                                    foreachToken.beginLine,
                                    endLine,
                                    foreachToken.beginColumn,
                                    endColumn);}
     }
      break;
    default:
      jj_la1[151] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//}}}

//{{{ FOR
//{{{ ForStatement()

/**
 * a for declaration.
 * @return a node representing the for statement
 */
  final public ForStatement ForStatement() throws ParseException {
  final Token forToken,tokenEndFor,token2,tokenColon;
  int pos;
  Expression[] initializations = null;
  Expression condition = null;
  Expression[] increments = null;
  Statement action;
  final ArrayList list = new ArrayList();
  int end       = 0;
  int endLine   = 0;
  int endColumn = 0;
    forToken = jj_consume_token(FOR);
    try {
      jj_consume_token(LPAREN);
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'(' expected",
                                          "(",
                                          e.currentToken.image,
                                          forToken.sourceEnd,
                                          forToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
    case LIST:
    case PRINT:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case NEW:
    case DEFINE:
    case GOTO:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case FALSE:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOUBLEQUOTE:
    case HEREDOCSTARTTOKEN:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
      initializations = ForInit();
      break;
    default:
      jj_la1[152] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
    case LIST:
    case PRINT:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case NEW:
    case DEFINE:
    case GOTO:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case FALSE:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOUBLEQUOTE:
    case HEREDOCSTARTTOKEN:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
      condition = Expression();
      break;
    default:
      jj_la1[153] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
    case LIST:
    case PRINT:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case NEW:
    case DEFINE:
    case GOTO:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case FALSE:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOUBLEQUOTE:
    case HEREDOCSTARTTOKEN:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
      increments = StatementExpressionList();
      break;
    default:
      jj_la1[154] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRY:
    case THROW:
    case IF:
    case ARRAY:
    case BREAK:
    case LIST:
    case PRINT:
    case ECHO:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case GLOBAL:
    case STATIC:
    case CONTINUE:
    case DO:
    case FOR:
    case NEW:
    case RETURN:
    case SWITCH:
    case WHILE:
    case FOREACH:
    case DEFINE:
    case GOTO:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case FALSE:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOUBLEQUOTE:
    case HEREDOCSTARTTOKEN:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case SEMICOLON:
      action = Statement();
        {if (true) return new ForStatement(initializations,
                                condition,
                                increments,
                                action,
                                forToken.sourceStart,
                                action.getSourceEnd(),
                                forToken.beginLine,
                                action.getEndLine(),
                                forToken.beginColumn,
                                action.getEndColumn());}
      break;
    case COLON:
      tokenColon = jj_consume_token(COLON);
        pos = tokenColon.sourceEnd+1;
      label_44:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRY:
        case THROW:
        case IF:
        case ARRAY:
        case BREAK:
        case LIST:
        case PRINT:
        case ECHO:
        case INCLUDE:
        case REQUIRE:
        case INCLUDE_ONCE:
        case REQUIRE_ONCE:
        case GLOBAL:
        case STATIC:
        case CONTINUE:
        case DO:
        case FOR:
        case NEW:
        case RETURN:
        case SWITCH:
        case WHILE:
        case FOREACH:
        case DEFINE:
        case GOTO:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case FALSE:
        case STRING:
        case OBJECT:
        case BOOL:
        case BOOLEAN:
        case REAL:
        case DOUBLE:
        case FLOAT:
        case INT:
        case INTEGER:
        case AT:
        case BANG:
        case TILDE:
        case PLUS_PLUS:
        case MINUS_MINUS:
        case PLUS:
        case MINUS:
        case BIT_AND:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case DOUBLEQUOTE:
        case HEREDOCSTARTTOKEN:
        case DOLLAR:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[155] = jj_gen;
          break label_44;
        }
        action = Statement();
          list.add(action);
          pos = action.getSourceEnd()+1;
      }
        fireParseMessage(new PHPParseMessageEvent(INFO,
                                                  PHPParseMessageEvent.MESSAGE_FOR_ENDFOR_TAG,
                                                  path,
                                                  "Ugly syntax detected, you should for () {...} instead of for (): ... endfor;",
                                                  tokenColon));
      try {
        tokenEndFor = jj_consume_token(ENDFOR);
          pos = tokenEndFor.sourceEnd+1;
      } catch (ParseException e) {
        fireParseError(new PHPParseErrorEvent(ERROR,
                                              path,
                                              "'endfor' expected",
                                              "endfor",
                                              e.currentToken.image,
                                              pos,
                                              pos,
                                              e.currentToken.beginLine,
                                              e.currentToken.endLine,
                                              e.currentToken.endColumn,
                                              e.currentToken.endColumn));
      }
      try {
        token2 = jj_consume_token(SEMICOLON);
          pos = token2.sourceEnd+1;
          end       = token2.sourceEnd;
          endLine   = token2.endLine;
          endColumn = token2.endColumn;
      } catch (ParseException e) {
        end       = e.currentToken.sourceEnd;
        endLine   = e.currentToken.endLine;
        endColumn = e.currentToken.endColumn;
        fireParseError(new PHPParseErrorEvent(ERROR,
                                              path,
                                              "';' expected",
                                              ";",
                                              e.currentToken.image,
                                              pos,
                                              pos+1,
                                              e.currentToken.beginLine,
                                              e.currentToken.endLine,
                                              e.currentToken.endColumn,
                                              e.currentToken.endColumn+1));
      }
        final Statement[] stmtsArray = new Statement[list.size()];
        list.toArray(stmtsArray);
        {if (true) return new ForStatement(initializations,
                                condition,
                                increments,
                                new Block(stmtsArray,
                                          stmtsArray[0].getSourceStart(),
                                          stmtsArray[stmtsArray.length-1].getSourceEnd(),
                                          stmtsArray[0].getBeginLine(),
                                          stmtsArray[stmtsArray.length-1].getEndLine(),
                                          stmtsArray[0].getBeginColumn(),
                                          stmtsArray[stmtsArray.length-1].getEndColumn()),
                                forToken.sourceStart,
                                end,
                                forToken.beginLine,
                                endLine,
                                forToken.beginColumn,
                                endColumn);}
      break;
    default:
      jj_la1[156] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ ForInit()
  final public Expression[] ForInit() throws ParseException {
  final Expression[] exprs;
    if (jj_2_6(2147483647)) {
      exprs = LocalVariableDeclaration();
   {if (true) return exprs;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAY:
      case LIST:
      case PRINT:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case NEW:
      case DEFINE:
      case GOTO:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case FALSE:
      case STRING:
      case OBJECT:
      case BOOL:
      case BOOLEAN:
      case REAL:
      case DOUBLE:
      case FLOAT:
      case INT:
      case INTEGER:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOUBLEQUOTE:
      case HEREDOCSTARTTOKEN:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
        exprs = StatementExpressionList();
   {if (true) return exprs;}
        break;
      default:
        jj_la1[157] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

//}}}
//}}}

//{{{ StatementExpressionList()
  final public Expression[] StatementExpressionList() throws ParseException {
  final ArrayList list = new ArrayList();
  final Expression expr;
    expr = Expression();
                         list.add(expr);
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[158] = jj_gen;
        break label_45;
      }
      jj_consume_token(COMMA);
      Expression();
                                                                 list.add(expr);
    }
    final Expression[] exprsArray = new Expression[list.size()];
    list.toArray(exprsArray);
    {if (true) return exprsArray;}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ ContinueStatement()
  final public Continue ContinueStatement() throws ParseException {
  Expression expr = null;
  final Token continueToken;
  Token semicolonToken = null;
    continueToken = jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
    case LIST:
    case PRINT:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case NEW:
    case DEFINE:
    case GOTO:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case FALSE:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOUBLEQUOTE:
    case HEREDOCSTARTTOKEN:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
      expr = Expression();
      break;
    default:
      jj_la1[159] = jj_gen;
      ;
    }
    try {
      semicolonToken = jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
    final int errorStart, errorEnd;
    if (expr == null) {
      errorStart = continueToken.sourceEnd;
      errorEnd   = errorStart+1;
    } else {
      errorStart = expr.getSourceEnd();
      errorEnd   = errorStart+1;
    }
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "';' expected",
                                          ";",
                                          e.currentToken.image,
                                          errorStart,
                                          errorEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    if (semicolonToken == null) {
      if (expr == null) {
        {if (true) return new Continue(expr,continueToken.sourceStart,continueToken.sourceEnd,continueToken.beginLine,continueToken.endLine,continueToken.beginColumn,continueToken.endColumn);}
      }
      {if (true) return new Continue(expr,continueToken.sourceStart,expr.getSourceEnd(),continueToken.beginLine,expr.getEndLine(),continueToken.beginColumn,expr.getEndColumn());}
    }
    {if (true) return new Continue(expr,continueToken.sourceStart,semicolonToken.sourceEnd,continueToken.beginLine,semicolonToken.endLine,continueToken.beginColumn,semicolonToken.endColumn);}
    throw new Error("Missing return statement in function");
  }

//}}}
//{{{ ReturnStatement()

/**
 * A return statement.
 * It's return [expression];
 * @return a ReturnStatement
 */
  final public ReturnStatement ReturnStatement() throws ParseException {
  Statement expr = null;
  final Token returnToken;
  Token semicolonToken = null;
  int end       = 0;
  int endLine   = 0;
  int endColumn = 0;
    returnToken = jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
    case LIST:
    case PRINT:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case NEW:
    case DEFINE:
    case GOTO:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case FALSE:
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOUBLEQUOTE:
    case HEREDOCSTARTTOKEN:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
      expr = Expression();
      end       = expr.getSourceEnd();
      endLine   = expr.getEndLine();
      endColumn = expr.getEndColumn();
      break;
    default:
      jj_la1[160] = jj_gen;
      ;
    }
    try {
      semicolonToken = jj_consume_token(SEMICOLON);
      end       = semicolonToken.sourceEnd;
      endLine   = semicolonToken.endLine;
      endColumn = semicolonToken.endColumn;
    } catch (ParseException e) {
    if (end == 0) {
      end       = e.currentToken.sourceEnd;
      endLine   = e.currentToken.endLine;
      endColumn = e.currentToken.endColumn;
    }
    //{{{ fireParseError
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "';' expected",
                                          ";",
                                          e.currentToken.image,
                                          end,
                                          e.currentToken.sourceEnd,
                                          endLine,
                                          e.currentToken.endLine,
                                          endColumn,
                                          e.currentToken.endColumn)); //}}}

    }
    {if (true) return new ReturnStatement(expr,
                               returnToken.sourceStart,
                               end,
                               returnToken.beginLine,
                               endLine,
                               returnToken.beginColumn,
                               endColumn);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_101()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_scan_token(LBRACE1)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(RBRACE1)) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) return true;
    }
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_3R_121()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    }
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(DOLLARS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) return true;
    }
    }
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(DOUBLEQUOTE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_137()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(DOUBLEQUOTE2)) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_77()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_87()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_168() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) return true;
    }
    }
    if (jj_3R_167()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_135()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_3R_167()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_168()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_3R_102()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_71()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_92()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    }
    if (jj_3R_165()) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_3R_165()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_166()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(159)) {
    jj_scanpos = xsp;
    if (jj_scan_token(162)) {
    jj_scanpos = xsp;
    if (jj_scan_token(163)) {
    jj_scanpos = xsp;
    if (jj_scan_token(168)) {
    jj_scanpos = xsp;
    if (jj_scan_token(160)) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) {
    jj_scanpos = xsp;
    if (jj_scan_token(170)) {
    jj_scanpos = xsp;
    if (jj_scan_token(171)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) {
    jj_scanpos = xsp;
    if (jj_scan_token(165)) {
    jj_scanpos = xsp;
    if (jj_scan_token(167)) {
    jj_scanpos = xsp;
    if (jj_scan_token(169)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(LIST)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_83()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(STATICCLASSACCESS)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) return true;
    }
    }
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_3R_163()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_164()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_89()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_90()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(HEREDOCSTARTTOKEN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_3R_125()) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_47()) return true;
    if (jj_3R_48()) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(151)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) {
    jj_scanpos = xsp;
    if (jj_scan_token(153)) {
    jj_scanpos = xsp;
    if (jj_scan_token(154)) return true;
    }
    }
    }
    if (jj_3R_160()) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_3R_160()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_162()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) return true;
    }
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_3R_63()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_193()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_47()) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_3R_156()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_scan_token(ARRAY)) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_167()) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_3R_161()) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_scan_token(ARRAYASSIGN)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_3R_161()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_3R_190()) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) return true;
    }
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_3R_189()) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(152)) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) {
    jj_scanpos = xsp;
    if (jj_scan_token(155)) {
    jj_scanpos = xsp;
    if (jj_scan_token(157)) {
    jj_scanpos = xsp;
    if (jj_scan_token(158)) return true;
    }
    }
    }
    }
    if (jj_3R_150()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_3R_150()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_155()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) return true;
    }
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_scan_token(LIST)) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_184()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_139()) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_3R_183()) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_3R_139()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_149()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_169()) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(CLASSACCESS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_169()) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(BIT_XOR)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_3R_174()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_127()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_138()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    }
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_175()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_140()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_175()) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_3R_120()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_3R_174()) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_175()) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_116()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_126()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_3R_169()) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_169()) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(ARRAY)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_129()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_100()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_115()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_3R_120()) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_3R_121()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_3R_103()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_104()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_59()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) return true;
    }
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_88()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_99()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_3R_169()) return true;
    return false;
  }

  public PHPParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[161];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
      jj_la1_5();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x3000001e,0x6,0x6,0x3000001e,0x0,0x30000000,0x0,0x0,0xe000000,0xe000000,0x10000000,0x0,0x0,0x40000000,0x8e000000,0x9e000000,0xe000000,0xe000000,0x80000000,0x80000000,0x8e000000,0xe000000,0xe000000,0x80000000,0x90000000,0x9e000000,0x0,0xe000000,0x0,0xe000000,0x0,0xe000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30000010,0x30000010,0x30000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000010,0x10000010,0x0,0x0,0x0,0x10,0x10,0x0,0x0,0x10,0x0,0x0,0x10,0x10,0x10,0x10,0x10,0x0,0x0,0x10,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x7d4ffe5d,0x0,0x0,0x7d4ffe5d,0x0,0x7d4ffe5d,0x0,0x2000000,0x10,0x0,0x8,0x2000000,0x0,0x0,0x280030,0x280030,0x0,0x0,0x0,0x280010,0x280030,0x0,0x0,0x0,0x280010,0x280030,0x0,0x0,0x280000,0x0,0x280000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x803da00,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x803ca00,0x803ca00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x803ca00,0x803ca00,0x803ca00,0x0,0x803ca00,0x200,0x0,0x0,0x0,0x803ca00,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x8000000,0x0,0x8000800,0x803da00,0x803da00,0x0,0x0,0x0,0x0,0x0,0x803da00,0x0,0x754c2045,0x2,0x7d4ffe45,0x0,0x0,0x3c000,0x803ca00,0x0,0x0,0x0,0x0,0x0,0x0,0x7d4ffe5d,0x7d4ffe5d,0x7d4ffe5d,0x7d4ffa5d,0x0,0x0,0x0,0x0,0x803ca00,0x0,0x900000,0x900000,0x7d4ffe5d,0x7d4ffe5d,0x0,0x900000,0x803da00,0x7d4ffe45,0x7d4ffe45,0x80,0x100,0x7d4ffe45,0x80,0x100,0x7d4ffe45,0x7d4ffe45,0x7d4ffe45,0x7d4ffe45,0x7d4ffe45,0x7d4ffe45,0x7d4ffe45,0x7d4ffe45,0x7d4ffe45,0x7d4ffe45,0x803da00,0x803da00,0x803da00,0x7d4ffe45,0x7d4ffe45,0x803da00,0x0,0x803da00,0x803da00,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x1ffefe10,0x0,0x0,0x1ffefe10,0x0,0x1ffefe10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0xc800,0x100,0x1ffefe00,0x0,0x0,0x3fef600,0x3fe3600,0x0,0x0,0x0,0x0,0x3fe0000,0x0,0x1ffefe00,0x1ffe3600,0x0,0x20000000,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1ffefe00,0xffefe00,0x3fefe00,0x0,0x3fefe00,0x3fe0000,0x0,0x0,0x0,0x3fe3600,0x80,0x0,0x0,0x3fe3600,0x40,0x40,0x40,0x0,0x3fef600,0x40,0x3fef600,0x1ffefe00,0x1ffefe00,0x0,0xc800,0x0,0x0,0x0,0x1ffefe00,0x0,0x210,0x0,0x1ffefe10,0x0,0x0,0x0,0x3fefe00,0x0,0x0,0x0,0x0,0x0,0x0,0x1ffefe10,0x1ffefe10,0x1ffefe10,0x1ffefe10,0x0,0x0,0x0,0x0,0x3fe3600,0x40000000,0x0,0x0,0x1ffefe10,0x1ffefe10,0x40000000,0x0,0x1ffefe00,0x1ffefe10,0x1ffefe10,0x0,0x0,0x1ffefe10,0x0,0x0,0x5ffefe10,0x1ffefe10,0x1ffefe10,0x1ffefe10,0x1ffefe10,0x1ffefe10,0x5ffefe10,0x1ffefe10,0x1ffefe10,0x5ffefe10,0x1ffefe00,0x1ffefe00,0x1ffefe00,0x1ffefe10,0x5ffefe10,0x1ffefe00,0x0,0x1ffefe00,0x1ffefe00,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x8a2009e,0x0,0x0,0x8a2009e,0x0,0x8a2009e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x220000,0x220000,0x8a20018,0x0,0x8a2009e,0x0,0x80,0x0,0x0,0x0,0x80,0x0,0x80,0x0,0x0,0x8a2009e,0x80,0x0,0x0,0xc000,0xc000,0x10001,0x10001,0x0,0x100,0x200,0x80,0x0,0x0,0x0,0x0,0x0,0x3800,0x3800,0x18,0x18,0x460,0x460,0x8a2009e,0x8a2009e,0x8a2009e,0x6,0x8a20080,0x0,0x6,0x6,0x80,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8a2009e,0x8a2009e,0x0,0x8a20000,0x10000000,0x40000000,0x40000000,0x8a2009e,0x0,0x0,0x0,0x8a2009e,0x0,0x0,0x0,0x8a20080,0x0,0x0,0x0,0x0,0x0,0x0,0x8a2009e,0x8a2009e,0x8a2009e,0x8a2009e,0x0,0x0,0x6,0x6,0x86,0x0,0x0,0x0,0x8a2009e,0x8a2009e,0x0,0x0,0x8a2009e,0x8a2009e,0x8a2009e,0x0,0x0,0x8a2009e,0x0,0x0,0x8a2009e,0x8a2009e,0x8a2009e,0x8a2009e,0x8a2009e,0x8a2009e,0x8a2009e,0x8a2009e,0x8a2009e,0x8a2009e,0x8a2009e,0x8a2009e,0x8a2009e,0x8a2009e,0x8a2009e,0x8a2009e,0x0,0x8a2009e,0x8a2009e,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x8a1c0,0x0,0x0,0x8a1c0,0x80000,0x8a1c0,0x100000,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x80,0x80,0x0,0x0,0x0,0x80,0x80,0x0,0x0,0x0,0x80,0x80,0x100000,0x0,0x0,0x0,0x0,0x0,0x8100,0x80000000,0x80000000,0x28000,0x8180,0x0,0x0,0x140,0x0,0x21c0,0x100000,0x0,0x100,0x100,0x100000,0x180,0x100,0x0,0x0,0x0,0x21c0,0x180,0x80000000,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x79000000,0x79000000,0x0,0x6c00000,0x6c00000,0x0,0x0,0x0,0x0,0x0,0x0,0x21c0,0x21c0,0x21c0,0x0,0x21c0,0x0,0x0,0x0,0x0,0x180,0x0,0x2000,0x2000,0x180,0x2a000,0x2a000,0x0,0x2000,0x180,0x28000,0x8180,0x21c0,0x21c0,0x28000,0x40,0x0,0x100,0x100,0x21c0,0x100000,0x88000,0x0,0x8a1c0,0x0,0x0,0x0,0x21c0,0x80,0x100000,0x80,0x100000,0x100000,0x100000,0x8a1c0,0x8a1c0,0x8a1c0,0x8a1c0,0x100000,0x80000000,0x0,0x0,0x180,0x8000,0x0,0x0,0x8a1c0,0x8a1c0,0x80000,0x0,0x21c0,0x8a1c0,0x8a1c0,0x0,0x0,0x8a1c0,0x0,0x0,0x8a1c0,0x8a1c0,0x8a1c0,0x8a1c0,0x8a1c0,0x8a1c0,0x8a1c0,0x8a1c0,0x8a1c0,0x8a1c0,0x21c0,0x21c0,0x21c0,0x8a1c0,0x8a1c0,0x21c0,0x100000,0x21c0,0x21c0,};
   }
   private static void jj_la1_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public PHPParser(java.io.InputStream stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new PHPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 161; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 161; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PHPParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new PHPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 161; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 161; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PHPParser(PHPParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 161; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(PHPParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 161; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[172];
    for (int i = 0; i < 172; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 161; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 172; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  //}}}
}
