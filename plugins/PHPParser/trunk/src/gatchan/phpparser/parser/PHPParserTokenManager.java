/* Generated By:JavaCC: Do not edit this line. PHPParserTokenManager.java */
package gatchan.phpparser.parser;
import java.util.ArrayList;
import java.io.StringReader;
import java.io.*;
import java.util.List;
import net.sourceforge.phpdt.internal.compiler.ast.*;
import net.sourceforge.phpdt.internal.compiler.parser.OutlineableWithChildren;
import net.sourceforge.phpdt.internal.compiler.parser.Outlineable;

public class PHPParserTokenManager implements PHPParserConstants
{
  // CommonTokenAction: use the begins/ends fields added to the Jack
  // CharStream class to set corresponding fields in each Token (which was
  // also extended with new fields). By default Jack doesn't supply absolute
  // offsets, just line/column offsets
  void CommonTokenAction(Token t) {
    t.sourceStart = input_stream.getBeginOffset();
    t.sourceEnd = input_stream.getEndOffset();

  }
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_5(0x800000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_5(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_8()
{
   switch(curChar)
   {
      case 125:
         return jjStopAtPos(0, 127);
      default :
         return 1;
   }
}
private final int jjStopStringLiteralDfa_9(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_9(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0, active1, active2), pos + 1);
}
private final int jjStartNfaWithStates_9(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_9(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_9()
{
   switch(curChar)
   {
      case 125:
         return jjStopAtPos(0, 129);
      default :
         return jjMoveNfa_9(0, 0);
   }
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_9(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 130;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xdfffffffffffffffL & l) == 0L)
                     break;
                  kind = 130;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 130)
                     kind = 130;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 60:
         return jjMoveStringLiteralDfa1_0(0xeL);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 63:
         if ((active0 & 0x2L) != 0L)
         {
            jjmatchedKind = 1;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xcL);
      default :
         return 2;
   }
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(2, 3);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L);
      default :
         return 3;
   }
   return 3;
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x4L);
      default :
         return 4;
   }
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(4, 2);
         break;
      default :
         return 5;
   }
   return 5;
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x400000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0xe00000000000L) != 0L)
         {
            jjmatchedKind = 135;
            return 1;
         }
         return -1;
      case 1:
         if ((active1 & 0xc00000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 135;
               jjmatchedPos = 1;
            }
            return 1;
         }
         if ((active1 & 0x200000000000L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1, active2), pos + 1);
}
private final int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 12);
      case 10:
         return jjStopAtPos(0, 13);
      case 12:
         return jjStopAtPos(0, 15);
      case 13:
         return jjStopAtPos(0, 14);
      case 32:
         return jjStopAtPos(0, 11);
      case 33:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x14000000L);
      case 36:
         return jjStopAtPos(0, 134);
      case 37:
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x8000000000L);
      case 38:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x80000000L, 0x800000000L);
      case 40:
         return jjStopAtPos(0, 140);
      case 41:
         return jjStopAtPos(0, 141);
      case 42:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x200000000L);
      case 43:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x100000000L, 0x80000000L);
      case 44:
         return jjStopAtPos(0, 147);
      case 45:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x200000040L, 0x100000000L);
      case 46:
         jjmatchedKind = 148;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x4000000000L);
      case 47:
         jjmatchedKind = 101;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x400000000L);
      case 58:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x80L, 0x0L);
      case 59:
         return jjStopAtPos(0, 146);
      case 60:
         jjmatchedKind = 150;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x40000000000L, 0x20009000000L);
      case 61:
         jjmatchedKind = 158;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x100L, 0x20800000L);
      case 62:
         jjmatchedKind = 149;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x180000000000L, 0x40002000000L);
      case 63:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_3(0x10L, 0x0L, 0x0L);
      case 64:
         return jjStopAtPos(0, 89);
      case 91:
         return jjStopAtPos(0, 144);
      case 93:
         return jjStopAtPos(0, 145);
      case 94:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x2000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x800000000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x200000000000L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x400000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 142);
      case 124:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x40000000L, 0x1000000000L);
      case 125:
         return jjStopAtPos(0, 143);
      case 126:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x10000000000L);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         break;
      case 43:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         break;
      case 45:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      case 58:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      case 60:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0L, active2, 0x20000000000L);
      case 61:
         if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 152);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         else if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 159);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 160);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 161);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 162);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 163);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 164);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 165);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 166);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 167);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 168);
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0L, active2, 0x30000000L);
      case 62:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 155);
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x100000000000L, active2, 0x40000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_3(1, 109, 1);
         break;
      case 124:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa2_3(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_3(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, 0L, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(2, 156);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 157);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStopAtPos(2, 169);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(2, 170);
         break;
      case 62:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(2, 108);
         break;
      case 68:
      case 100:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 111, 1);
         break;
      case 82:
      case 114:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 110, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_3(1, 0L, active1, active2);
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 135;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0, long active1)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_6(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_6(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 124);
      case 36:
         return jjStopAtPos(0, 123);
      case 123:
         return jjStopAtPos(0, 126);
      default :
         return jjMoveNfa_6(0, 0);
   }
}
private final int jjMoveNfa_6(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  kind = 121;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (kind > 121)
                     kind = 121;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 121)
                     kind = 121;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 63:
         return jjMoveStringLiteralDfa1_2(0x10L);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 20)
                     kind = 20;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x90000L) != 0L || (active1 & 0x2000000000L) != 0L || (active2 & 0x400000000L) != 0L)
            return 2;
         if ((active0 & 0xfffffffffe000000L) != 0L || (active1 & 0xe00001fffe3fL) != 0L)
         {
            jjmatchedKind = 135;
            return 11;
         }
         if ((active2 & 0x4000100000L) != 0L)
            return 5;
         return -1;
      case 1:
         if ((active0 & 0x80000L) != 0L)
            return 0;
         if ((active0 & 0xfeffffbffe000000L) != 0L || (active1 & 0xc00001dffe1fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 135;
               jjmatchedPos = 1;
            }
            return 11;
         }
         if ((active0 & 0x100004000000000L) != 0L || (active1 & 0x200000200020L) != 0L)
            return 11;
         return -1;
      case 2:
         if ((active0 & 0xc00002120000000L) != 0L || (active1 & 0xc00001800010L) != 0L)
            return 11;
         if ((active0 & 0xf2ffff9ede000000L) != 0L || (active1 & 0x7ffe0fL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 135;
               jjmatchedPos = 2;
            }
            return 11;
         }
         return -1;
      case 3:
         if ((active0 & 0xf2efd61efe000000L) != 0L || (active1 & 0x163921fL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 135;
               jjmatchedPos = 3;
            }
            return 11;
         }
         if ((active0 & 0x10298000000000L) != 0L || (active1 & 0x1c6c00L) != 0L)
            return 11;
         return -1;
      case 4:
         if ((active0 & 0xb2cfc0907e000000L) != 0L || (active1 & 0x12b021dL) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 4;
            return 11;
         }
         if ((active0 & 0x4020160e80000000L) != 0L || (active1 & 0x409002L) != 0L)
            return 11;
         return -1;
      case 5:
         if ((active0 & 0x300c008002000000L) != 0L || (active1 & 0x23020cL) != 0L)
            return 11;
         if ((active0 & 0x82c3c0107c000000L) != 0L || (active1 & 0x1080011L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 135;
               jjmatchedPos = 5;
            }
            return 11;
         }
         return -1;
      case 6:
         if ((active0 & 0x8040001074000000L) != 0L || (active1 & 0x9L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 135;
               jjmatchedPos = 6;
            }
            return 11;
         }
         if ((active0 & 0x283c00008000000L) != 0L || (active1 & 0x1080010L) != 0L)
            return 11;
         return -1;
      case 7:
         if ((active0 & 0x3000064000000L) != 0L || (active1 & 0x9L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 7;
            return 11;
         }
         if ((active0 & 0x8040001010000000L) != 0L)
            return 11;
         return -1;
      case 8:
         if ((active0 & 0x3000040000000L) != 0L || (active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 8;
            return 11;
         }
         if ((active0 & 0x24000000L) != 0L || (active1 & 0x1L) != 0L)
            return 11;
         return -1;
      case 9:
         if ((active0 & 0x40000000L) != 0L || (active1 & 0x8L) != 0L)
            return 11;
         if ((active0 & 0x3000000000000L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 9;
            return 11;
         }
         return -1;
      case 10:
         if ((active0 & 0x3000000000000L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 10;
            return 11;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x14000000L);
      case 34:
         return jjStopAtPos(0, 122);
      case 35:
         return jjStopAtPos(0, 17);
      case 36:
         return jjStopAtPos(0, 134);
      case 37:
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x8000000000L);
      case 38:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x80000000L, 0x800000000L);
      case 40:
         return jjStopAtPos(0, 140);
      case 41:
         return jjStopAtPos(0, 141);
      case 42:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x200000000L);
      case 43:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x100000000L, 0x80000000L);
      case 44:
         return jjStopAtPos(0, 147);
      case 45:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x200000040L, 0x100000000L);
      case 46:
         jjmatchedKind = 148;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x4000000000L);
      case 47:
         jjmatchedKind = 101;
         return jjMoveStringLiteralDfa1_1(0x90000L, 0x0L, 0x400000000L);
      case 58:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x80L, 0x0L);
      case 59:
         return jjStopAtPos(0, 146);
      case 60:
         jjmatchedKind = 150;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x40000000000L, 0x20009000020L);
      case 61:
         jjmatchedKind = 158;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x100L, 0x20800000L);
      case 62:
         jjmatchedKind = 149;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x180000000000L, 0x40002000000L);
      case 63:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_1(0x10L, 0x0L, 0x0L);
      case 64:
         return jjStopAtPos(0, 89);
      case 91:
         return jjStopAtPos(0, 144);
      case 93:
         return jjStopAtPos(0, 145);
      case 94:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x2000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_1(0x20010000000L, 0x800000000020L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_1(0x40000000000L, 0xc0000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_1(0x70000a00000000L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_1(0x180000000000000L, 0x200200L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_1(0x8200218000000000L, 0xfL, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_1(0x400001080000000L, 0x408010L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_1(0x4000000000000L, 0x400L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_1(0x1404060000000L, 0x1800000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_1(0x80000000000L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_1(0x800000000000000L, 0x800L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x200000020000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_1(0x10000e000000L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_1(0x1002800000000000L, 0x100000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_1(0x2008000000000000L, 0x11000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_1(0x500000000L, 0x6000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_1(0x2000000000L, 0x0L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_1(0x4000000000000000L, 0x0L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x400000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 142);
      case 124:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x40000000L, 0x1000000000L);
      case 125:
         return jjStopAtPos(0, 143);
      case 126:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x10000000000L);
      default :
         return jjMoveNfa_1(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         break;
      case 42:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(1, 19, 0);
         break;
      case 43:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         break;
      case 45:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      case 47:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         break;
      case 58:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      case 60:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0x20000000020L);
      case 61:
         if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 152);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         else if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 159);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 160);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 161);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 162);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 163);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 164);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 165);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 166);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 167);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 168);
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0x30000000L);
      case 62:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 155);
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x100000000000L, active2, 0x40000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x10002200000000L, active1, 0x8000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_1(active0, 0x10000000L, active1, 0x20000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_1(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x1882800000000000L, active1, 0x100200L, active2, 0L);
      case 70:
      case 102:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 38, 11);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000400000000L, active1, 0x2000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x80080000000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x4018800000000L, active1, 0x400000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x8001400020000000L, active1, 0x80000180000fL, active2, 0L);
      case 79:
      case 111:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x460000000000000L, active1, 0x4000002c0410L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 109, 11);
         return jjMoveStringLiteralDfa2_1(active0, 0x16010c000000L, active1, 0x4000L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(1, 69, 11);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0x8000000000000L, active1, 0x10000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x1002000000L, active1, 0x1800L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_1(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_1(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      case 124:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 60:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(2, 133);
         break;
      case 61:
         if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(2, 156);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 157);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStopAtPos(2, 169);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(2, 170);
         break;
      case 62:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(2, 108);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x8000800000000L, active1, 0x100000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_1(active0, 0x1400000000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 111, 11);
         return jjMoveStringLiteralDfa3_1(active0, 0x8000000000000000L, active1, 0xfL, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_1(active0, 0x80000000000000L, active1, 0x200L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_1(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x6000100008000000L, active1, 0x2000L, active2, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x20000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x8800L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x60001080000000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000004000000L, active1, 0x4c0000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0x40000000L, active1, 0x1000L, active2, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_1(active0, 0x2800000000000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 37, 11);
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 110, 11);
         return jjMoveStringLiteralDfa3_1(active0, 0x20400000000L, active1, 0x10010L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x10098010000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x1200000220000000L, active1, 0x1000400L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x204000L, active2, 0L);
      case 87:
      case 119:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 59, 11);
         break;
      case 89:
      case 121:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(2, 32, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x80060080000000L, active1, 0x400000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_1(active0, 0x4000000000000L, active1, 0x200000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0x1200000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 52, 11);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(3, 78, 11);
         return jjMoveStringLiteralDfa4_1(active0, 0x200008020000000L, active1, 0x1021010L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0xcL);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x10202L);
      case 76:
      case 108:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(3, 75, 11);
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(3, 84, 11);
         return jjMoveStringLiteralDfa4_1(active0, 0x4001400042000000L, active1, 0x80000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_1(active0, 0x100000000000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 45, 11);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(3, 74, 11);
         return jjMoveStringLiteralDfa4_1(active0, 0x400000000L, active1, 0L);
      case 83:
      case 115:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(3, 77, 11);
         return jjMoveStringLiteralDfa4_1(active0, 0x20000800000000L, active1, 0x8001L);
      case 84:
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 43, 11);
         return jjMoveStringLiteralDfa4_1(active0, 0x2048000014000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x1002800000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0x4000008000000L, active1, 0x10L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0x2000000000000000L, active1, 0x20000L);
      case 69:
      case 101:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 62, 11);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(4, 79, 11);
         return jjMoveStringLiteralDfa5_1(active0, 0x44000000L, active1, 0x80000L);
      case 70:
      case 102:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_1(4, 65, 11);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x1000000L);
      case 72:
      case 104:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(4, 33, 11);
         return jjMoveStringLiteralDfa5_1(active0, 0x8000000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x4a808002000000L, active1, 0L);
      case 75:
      case 107:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 42, 11);
         break;
      case 76:
      case 108:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(4, 31, 11);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x200000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_1(active0, 0x200000000000000L, active1, 0x10200L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0xcL);
      case 82:
      case 114:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(4, 76, 11);
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000030000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(4, 35, 11);
         break;
      case 84:
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 44, 11);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 53, 11);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(4, 86, 11);
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_1(active0, 0x81400000000000L, active1, 0L);
      case 87:
      case 119:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(4, 34, 11);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x1L);
      case 89:
      case 121:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 41, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_1(3, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa5_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0x10000000L, active1, 0x80000L);
      case 67:
      case 99:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(5, 25, 11);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 51, 11);
         return jjMoveStringLiteralDfa6_1(active0, 0x4000000L, active1, 0x10L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_1(active0, 0x201400000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(5, 73, 11);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(5, 85, 11);
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x1000000L);
      case 70:
      case 102:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 39, 11);
         return jjMoveStringLiteralDfa6_1(active0, 0x20000000L, active1, 0L);
      case 71:
      case 103:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(5, 80, 11);
         break;
      case 72:
      case 104:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 61, 11);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x8000001000000000L, active1, 0x1L);
      case 76:
      case 108:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 50, 11);
         return jjMoveStringLiteralDfa6_1(active0, 0x80000000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_1(active0, 0x40000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 60, 11);
         return jjMoveStringLiteralDfa6_1(active0, 0x40000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active0, 0x2800000000000L, active1, 0x8L);
      case 84:
      case 116:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(5, 81, 11);
         return jjMoveStringLiteralDfa6_1(active0, 0x8000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa6_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_1(active0, 0x20000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_1(active0, 0x10000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(6, 27, 11);
         else if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_1(active0, 0x3000040000000L, active1, 0x8L);
      case 72:
      case 104:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_1(6, 68, 11);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_1(active0, 0x8000000000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(6, 83, 11);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_1(active0, 0x1000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(6, 88, 11);
         break;
      case 83:
      case 115:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 57, 11);
         break;
      case 84:
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 55, 11);
         return jjMoveStringLiteralDfa7_1(active0, 0x4000000L, active1, 0x1L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_1(active0, 0x40000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa7_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_1(active0, 0x3000000000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x8L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_1(active0, 0x20000000L, active1, 0x1L);
      case 69:
      case 101:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 54, 11);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 63, 11);
         return jjMoveStringLiteralDfa8_1(active0, 0x4000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 36, 11);
         return jjMoveStringLiteralDfa8_1(active0, 0x40000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(7, 28, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_1(6, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa8_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x8L);
      case 68:
      case 100:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(8, 26, 11);
         break;
      case 69:
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(8, 29, 11);
         break;
      case 72:
      case 104:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_1(8, 64, 11);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_1(active0, 0x3000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_1(active0, 0x40000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa9_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 72:
      case 104:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_1(9, 67, 11);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_1(active0, 0x3000000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(9, 30, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_1(8, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa10_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_1(active0, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(9, active0, 0L, 0L);
}
private final int jjMoveStringLiteralDfa11_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_1(11, 48, 11);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_1(11, 49, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_1(10, active0, 0L, 0L);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 51;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 112)
                        kind = 112;
                     jjCheckNAddStates(0, 8);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(9, 14);
                  else if (curChar == 46)
                     jjCheckNAdd(5);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (curChar == 48)
                  {
                     if (kind > 112)
                        kind = 112;
                     jjCheckNAddStates(15, 17);
                  }
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 18)
                     kind = 18;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if (curChar == 46)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddStates(18, 20);
                  break;
               case 7:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 12:
                  if (curChar != 48)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAddStates(15, 17);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAddTwoStates(16, 15);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAddStates(0, 8);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAddTwoStates(18, 15);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if (curChar != 46)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddStates(21, 23);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddStates(21, 23);
                  break;
               case 23:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddTwoStates(24, 9);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 27:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddTwoStates(28, 9);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 31:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 9);
                  break;
               case 33:
                  if (curChar == 39)
                     jjCheckNAddStates(9, 14);
                  break;
               case 34:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 36:
                  jjCheckNAddStates(27, 29);
                  break;
               case 37:
                  if (curChar == 39 && kind > 118)
                     kind = 118;
                  break;
               case 38:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 40:
                  jjCheckNAddStates(30, 32);
                  break;
               case 41:
                  if (curChar == 39 && kind > 119)
                     kind = 119;
                  break;
               case 43:
               case 45:
                  jjCheckNAddStates(33, 35);
                  break;
               case 47:
               case 49:
                  jjCheckNAddStates(36, 38);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 135)
                        kind = 135;
                     jjCheckNAdd(11);
                  }
                  else if (curChar == 96)
                     jjCheckNAddStates(39, 44);
                  break;
               case 1:
                  if (kind > 18)
                     kind = 18;
                  break;
               case 6:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(45, 46);
                  break;
               case 9:
                  if ((0x5000000050L & l) != 0L && kind > 116)
                     kind = 116;
                  break;
               case 10:
               case 11:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAdd(11);
                  break;
               case 13:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if ((0x100000001000L & l) != 0L && kind > 112)
                     kind = 112;
                  break;
               case 22:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(47, 48);
                  break;
               case 26:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(49, 50);
                  break;
               case 30:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(51, 52);
                  break;
               case 34:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 35:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  jjCheckNAddStates(27, 29);
                  break;
               case 38:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 39:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  jjCheckNAddStates(30, 32);
                  break;
               case 42:
                  if (curChar == 96)
                     jjCheckNAddStates(39, 44);
                  break;
               case 43:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 44:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  jjCheckNAddStates(33, 35);
                  break;
               case 46:
                  if (curChar == 96 && kind > 118)
                     kind = 118;
                  break;
               case 47:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 48:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  jjCheckNAddStates(36, 38);
                  break;
               case 50:
                  if (curChar == 96 && kind > 120)
                     kind = 120;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAdd(11);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 18)
                     kind = 18;
                  break;
               case 34:
               case 36:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(27, 29);
                  break;
               case 38:
               case 40:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(30, 32);
                  break;
               case 43:
               case 45:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(33, 35);
                  break;
               case 47:
               case 49:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(36, 38);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 51 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_7(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_7(int pos, long active0, long active1)
{
   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_7(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_7(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 124);
      case 123:
         return jjStopAtPos(0, 125);
      default :
         return jjMoveNfa_7(0, 0);
   }
}
private final int jjMoveNfa_7(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (kind > 121)
                     kind = 121;
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 135)
                        kind = 135;
                     jjCheckNAdd(3);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (kind > 121)
                     kind = 121;
                  break;
               case 2:
               case 3:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAdd(3);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 121)
                     kind = 121;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   18, 15, 19, 20, 25, 26, 29, 30, 9, 34, 35, 37, 38, 39, 41, 13, 
   16, 15, 5, 6, 9, 21, 22, 9, 29, 30, 9, 34, 35, 37, 38, 39, 
   41, 43, 44, 46, 47, 48, 50, 43, 44, 46, 47, 48, 50, 7, 8, 23, 
   24, 27, 28, 31, 32, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", "\74\77", null, "\74\77\75", "\77\76", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\55\76", "\72\72", "\75\76", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\100", "\41", "\176", 
"\77", "\72", "\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", 
"\46", "\174", "\136", "\45", "\74\74", "\76\76", "\76\76\76", null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\42", "\44", "\42", "\173", 
null, null, null, "\175", null, null, null, "\74\74\74", "\44", null, null, null, 
null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", 
"\76", "\74", "\75\75", "\74\75", "\76\75", "\41\75", "\74\76", "\41\75\75", 
"\75\75\75", "\75", "\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", 
"\56\75", "\45\75", "\176\75", "\74\74\75", "\76\76\75", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "PHPPARSING", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_VARIABLE", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
   "IN_STRING", 
   "DOLLAR_IN_STRING", 
   "SKIPSTRING", 
   "DOLLAR_IN_STRING_EXPR", 
};
public static final int[] jjnewLexState = {
   -1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 2, 2, 4, 5, 1, -1, 1, 1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 6, 7, 1, 
   9, 8, 6, -1, 7, -1, -1, -1, -1, 3, -1, -1, -1, -1, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
};
static final long[] jjtoToken = {
   0xfffffffffe00001fL, 0x3dd1ffffffffffffL, 0x7fffffff0e6L, 
};
static final long[] jjtoSkip = {
   0xffffe0L, 0xc200000000000000L, 0x819L, 
};
static final long[] jjtoSpecial = {
   0xfff800L, 0xc000000000000000L, 0x800L, 
};
static final long[] jjtoMore = {
   0x1000000L, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[51];
private final int[] jjstateSet = new int[102];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public PHPParserTokenManager(JavaCharStream stream)
{
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public PHPParserTokenManager(JavaCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 51; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 10 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         t.image = "";
      else
         t.image = image.toString();
      t.beginLine = t.endLine = input_stream.getBeginLine();
      t.beginColumn = t.endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      t.image = (im == null) ? input_stream.GetImage() : im;
      t.beginLine = input_stream.getBeginLine();
      t.beginColumn = input_stream.getBeginColumn();
      t.endLine = input_stream.getEndLine();
      t.endColumn = input_stream.getEndColumn();
   }
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 5)
         {
            jjmatchedKind = 5;
         }
         break;
       case 1:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 21)
         {
            jjmatchedKind = 21;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 24)
         {
            jjmatchedKind = 24;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 24)
         {
            jjmatchedKind = 24;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 131)
         {
            jjmatchedKind = 131;
         }
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         if (jjmatchedPos == 0 && jjmatchedKind > 139)
         {
            jjmatchedKind = 139;
         }
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         if (jjmatchedPos == 0 && jjmatchedKind > 128)
         {
            jjmatchedKind = 128;
         }
         break;
       case 9:
         jjmatchedKind = 130;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_9();
         if (jjmatchedPos < 0 || (jjmatchedPos == 0 && jjmatchedKind > 132))
         {
            jjmatchedKind = 132;
            jjmatchedPos = 0;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           CommonTokenAction(matchedToken);
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 18 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                   input_stream.backup(1);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default : 
         break;
   }
}
}
