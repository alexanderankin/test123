/* Generated By:JavaCC: Do not edit this line. PHPParserTokenManager.java */
package gatchan.phpparser.parser;
import java.util.ArrayList;
import java.io.StringReader;
import java.io.*;
import java.util.Vector;
import net.sourceforge.phpdt.internal.compiler.ast.*;
import net.sourceforge.phpdt.internal.compiler.parser.OutlineableWithChildren;
import net.sourceforge.phpdt.internal.compiler.parser.Outlineable;
import net.sourceforge.phpdt.internal.compiler.parser.PHPOutlineInfo;

public class PHPParserTokenManager implements PHPParserConstants
{
  // CommonTokenAction: use the begins/ends fields added to the Jack
  // CharStream class to set corresponding fields in each Token (which was
  // also extended with new fields). By default Jack doesn't supply absolute
  // offsets, just line/column offsets
  void CommonTokenAction(Token t) {
    t.sourceStart = input_stream.getBeginOffset();
    t.sourceEnd = input_stream.getEndOffset();
  }
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 60:
         return jjMoveStringLiteralDfa1_0(0xeL);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 63:
         if ((active0 & 0x2L) != 0L)
         {
            jjmatchedKind = 1;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xcL);
      default :
         return 2;
   }
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(2, 3);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L);
      default :
         return 3;
   }
   return 3;
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x4L);
      default :
         return 4;
   }
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(4, 2);
         break;
      default :
         return 5;
   }
   return 5;
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_5(0x1000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_5(0x400000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_5(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_5(active0, 0x400000L);
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa2_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_5(active0, 0x400000L);
      default :
         return 3;
   }
}
private final int jjMoveStringLiteralDfa3_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(3, 22);
         break;
      default :
         return 4;
   }
   return 4;
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 63:
         return jjMoveStringLiteralDfa1_2(0x10L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_2(0x400000L);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_2(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
private final int jjMoveStringLiteralDfa2_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_2(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0);
}
private final int jjMoveStringLiteralDfa3_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(3, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_2(2, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 20)
                     kind = 20;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x90000L) != 0L || (active1 & 0x8000000L) != 0L || (active2 & 0x400L) != 0L)
            return 2;
         if ((active1 & 0x1000000000000000L) != 0L || (active2 & 0x4000L) != 0L)
            return 8;
         if ((active0 & 0xffff8ffffc000000L) != 0L || (active1 & 0x1800007fffL) != 0L)
         {
            jjmatchedKind = 112;
            return 14;
         }
         return -1;
      case 1:
         if ((active0 & 0x80000L) != 0L)
            return 0;
         if ((active0 & 0x8000020000000L) != 0L || (active1 & 0x800000820L) != 0L)
            return 14;
         if ((active0 & 0xfff78fffdc000000L) != 0L || (active1 & 0x10000077dfL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 1;
            }
            return 14;
         }
         return -1;
      case 2:
         if ((active0 & 0xff578fffcc000000L) != 0L || (active1 & 0x1fcfL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 2;
            }
            return 14;
         }
         if ((active0 & 0xa0000010000000L) != 0L || (active1 & 0x1000006010L) != 0L)
            return 14;
         return -1;
      case 3:
         if ((active0 & 0x31408014c0000000L) != 0L || (active1 & 0x700L) != 0L)
            return 14;
         if ((active0 & 0xce170feb0c000000L) != 0L || (active1 & 0x58dfL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 3;
            }
            return 14;
         }
         return -1;
      case 4:
         if ((active0 & 0xc401000b04000000L) != 0L || (active1 & 0x1004L) != 0L)
            return 14;
         if ((active0 & 0xa160fe048000000L) != 0L || (active1 & 0x4adbL) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 4;
            return 14;
         }
         return -1;
      case 5:
         if ((active0 & 0x1601e008000000L) != 0L || (active1 & 0x4213L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 5;
            return 14;
         }
         if ((active0 & 0xa000e0040000000L) != 0L || (active1 & 0x8c8L) != 0L)
            return 14;
         return -1;
      case 6:
         if ((active0 & 0x1401e000000000L) != 0L || (active1 & 0x4210L) != 0L)
            return 14;
         if ((active0 & 0x2000008000000L) != 0L || (active1 & 0x3L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 6;
            }
            return 14;
         }
         return -1;
      case 7:
         if ((active0 & 0x2000008000000L) != 0L || (active1 & 0x1L) != 0L)
            return 14;
         if ((active0 & 0x18000000000L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 7;
            return 14;
         }
         return -1;
      case 8:
         if ((active1 & 0x2L) != 0L)
            return 14;
         if ((active0 & 0x18000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 8;
            return 14;
         }
         return -1;
      case 9:
         if ((active0 & 0x18000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 9;
            return 14;
         }
         return -1;
      case 10:
         if ((active0 & 0x18000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 10;
            return 14;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x14L);
      case 35:
         return jjStopAtPos(0, 17);
      case 36:
         return jjStopAtPos(0, 111);
      case 37:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x8000L);
      case 38:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x200000L, 0x800L);
      case 40:
         return jjStopAtPos(0, 116);
      case 41:
         return jjStopAtPos(0, 117);
      case 42:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x200L);
      case 43:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x400000L, 0x80L);
      case 44:
         return jjStopAtPos(0, 123);
      case 45:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_1(0x100000000000L, 0x800000L, 0x100L);
      case 46:
         jjmatchedKind = 124;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x4000L);
      case 47:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_1(0x90000L, 0x0L, 0x400L);
      case 58:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_1(0x200000000000L, 0x0L, 0x0L);
      case 59:
         return jjStopAtPos(0, 122);
      case 60:
         jjmatchedKind = 126;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x100000000L, 0x20009L);
      case 61:
         jjmatchedKind = 134;
         return jjMoveStringLiteralDfa1_1(0x400000000000L, 0x8000000000000000L, 0x20L);
      case 62:
         jjmatchedKind = 125;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x600000000L, 0x40002L);
      case 63:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_1(0x10L, 0x0L, 0x0L);
      case 64:
         return jjStopAtPos(0, 79);
      case 91:
         return jjStopAtPos(0, 120);
      case 93:
         return jjStopAtPos(0, 121);
      case 94:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x2000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_1(0x100000000L, 0x1000000020L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_1(0x200000000L, 0x300L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_1(0x3800004000000L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_1(0xc040000000000L, 0x800L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_1(0x100010c0000000L, 0xfL, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_1(0x4020000008000000L, 0x1010L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_1(0x40020000000000L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_1(0xa020000000L, 0x6000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_1(0x400000000L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_1(0x180000000000000L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x800000080L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_1(0x800000000L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_1(0x200014000000000L, 0x400L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_1(0xc00080000000000L, 0x40L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_1(0x3000000000000000L, 0x0L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_1(0x10000000L, 0x0L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_1(0x8000000000000000L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 118);
      case 124:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x100000L, 0x1000L);
      case 125:
         return jjStopAtPos(0, 119);
      case 126:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x10000L);
      default :
         return jjMoveNfa_1(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         break;
      case 42:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(1, 19, 0);
         break;
      case 43:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      case 45:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         break;
      case 47:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         break;
      case 58:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         break;
      case 60:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0x20000L);
      case 61:
         if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(1, 128);
         else if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(1, 129);
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(1, 135);
         else if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(1, 136);
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(1, 137);
         else if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(1, 138);
         else if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(1, 139);
         else if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(1, 140);
         else if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(1, 141);
         else if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(1, 142);
         else if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(1, 143);
         else if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(1, 144);
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0x30L);
      case 62:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x400000000L, active2, 0x40000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000800010000000L, active1, 0L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x80L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x284054000000000L, active1, 0x400L, active2, 0L);
      case 70:
      case 102:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(1, 29, 14);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0x9000000000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x200c4000000L, active1, 0x1000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0xa000000000L, active1, 0x100000600fL, active2, 0L);
      case 79:
      case 111:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x63000000000000L, active1, 0xb10L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(1, 99, 14);
         return jjMoveStringLiteralDfa2_1(active0, 0x2000000b00000000L, active1, 0L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(1, 69, 14);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000000000L, active1, 0x40L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x500000008000000L, active1, 0L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_1(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_1(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 124:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(2, 132);
         else if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(2, 133);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(2, 145);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(2, 146);
         break;
      case 62:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(2, 98);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x80004000000L, active1, 0x400L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_1(active0, 0xa000000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 100, 14);
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0xfL, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x200000000L, active1, 0L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_1(active0, 0x4040000000000L, active1, 0L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_1(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x9800000800000000L, active1, 0L, active2, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x80L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x4100000000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x3000008000000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x20000000000L, active1, 0x1300L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_1(active0, 0x14000000000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(2, 28, 14);
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x100000000L, active1, 0x50L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x8004c0000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x250000000000000L, active1, 0x4000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000000000000000L, active1, 0x800L, active2, 0L);
      case 87:
      case 119:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 55, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x4000300000000L, active1, 0x1000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_1(active0, 0x20000000000L, active1, 0x800L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 47, 14);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 61, 14);
         return jjMoveStringLiteralDfa4_1(active0, 0x410000040000000L, active1, 0x4090L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x8L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x40000000000L, active1, 0x44L);
      case 76:
      case 108:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 56, 14);
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(3, 74, 14);
         return jjMoveStringLiteralDfa4_1(active0, 0x800000a000000000L, active1, 0x200L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_1(active0, 0x800000000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 36, 14);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 54, 14);
         break;
      case 83:
      case 115:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 60, 14);
         return jjMoveStringLiteralDfa4_1(active0, 0x4001000004000000L, active1, 0x2L);
      case 84:
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(3, 34, 14);
         return jjMoveStringLiteralDfa4_1(active0, 0x802080000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x200014000000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0x20000000000L, active1, 0x10L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0x800000000000000L, active1, 0x80L);
      case 69:
      case 101:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 62, 14);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 63, 14);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x200L);
      case 70:
      case 102:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_1(4, 66, 14);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x4000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x1L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x2094040000000L, active1, 0L);
      case 75:
      case 107:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(4, 33, 14);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x800L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_1(active0, 0x10040000000000L, active1, 0x40L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x8L);
      case 82:
      case 114:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 58, 14);
         return jjMoveStringLiteralDfa5_1(active0, 0x200000000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(4, 26, 14);
         break;
      case 84:
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(4, 35, 14);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 48, 14);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(4, 76, 14);
         return jjMoveStringLiteralDfa5_1(active0, 0x8000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_1(active0, 0x400a000000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x2L);
      case 89:
      case 121:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(4, 32, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_1(3, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa5_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x200L);
      case 67:
      case 99:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 43, 14);
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x10L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_1(active0, 0x1000a000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 42, 14);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(5, 75, 14);
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x4000L);
      case 70:
      case 102:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(5, 30, 14);
         break;
      case 71:
      case 103:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_1(5, 70, 14);
         break;
      case 72:
      case 104:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 59, 14);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x8000000L, active1, 0x3L);
      case 76:
      case 108:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 41, 14);
         return jjMoveStringLiteralDfa6_1(active0, 0x4000000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 57, 14);
         return jjMoveStringLiteralDfa6_1(active0, 0x2000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_1(5, 67, 14);
         return jjMoveStringLiteralDfa6_1(active0, 0x14000000000L, active1, 0L);
      case 84:
      case 116:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_1(5, 71, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_1(4, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa6_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_1(active0, 0x18000000000L, active1, 0L);
      case 72:
      case 104:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_1(6, 68, 14);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x1L);
      case 78:
      case 110:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(6, 73, 14);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_1(active0, 0x8000000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(6, 78, 14);
         break;
      case 83:
      case 115:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 52, 14);
         break;
      case 84:
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 50, 14);
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x2L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_1(active0, 0x2000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa7_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_1(active0, 0x18000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x2L);
      case 69:
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 49, 14);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_1(7, 64, 14);
         break;
      case 78:
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(7, 27, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_1(6, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa8_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 72:
      case 104:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_1(8, 65, 14);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_1(active0, 0x18000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa9_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_1(active0, 0x18000000000L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0, 0L, 0L);
}
private final int jjMoveStringLiteralDfa10_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_1(active0, 0x18000000000L);
      default :
         break;
   }
   return jjStartNfa_1(9, active0, 0L, 0L);
}
private final int jjMoveStringLiteralDfa11_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(11, 39, 14);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(11, 40, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_1(10, active0, 0L, 0L);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 61;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if (curChar == 39)
                     jjCheckNAddStates(7, 12);
                  else if (curChar == 34)
                     jjCheckNAddStates(13, 18);
                  else if (curChar == 46)
                     jjCheckNAdd(8);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     jjCheckNAddTwoStates(5, 6);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 101)
                        kind = 101;
                     jjCheckNAddStates(19, 21);
                  }
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 18)
                     kind = 18;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if (curChar == 46)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddStates(22, 24);
                  break;
               case 10:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar != 46)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddStates(25, 27);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddStates(25, 27);
                  break;
               case 20:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddTwoStates(21, 12);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddTwoStates(25, 12);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 28:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 12);
                  break;
               case 30:
                  if (curChar != 48)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAddStates(19, 21);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAddTwoStates(32, 6);
                  break;
               case 33:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAddTwoStates(33, 6);
                  break;
               case 34:
                  if (curChar == 34)
                     jjCheckNAddStates(13, 18);
                  break;
               case 35:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 37:
                  jjCheckNAddStates(31, 33);
                  break;
               case 38:
                  if (curChar == 34 && kind > 107)
                     kind = 107;
                  break;
               case 39:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 41:
                  jjCheckNAddStates(34, 36);
                  break;
               case 42:
                  if (curChar == 34 && kind > 108)
                     kind = 108;
                  break;
               case 43:
                  if (curChar == 39)
                     jjCheckNAddStates(7, 12);
                  break;
               case 44:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 46:
                  jjCheckNAddStates(37, 39);
                  break;
               case 47:
                  if (curChar == 39 && kind > 107)
                     kind = 107;
                  break;
               case 48:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 50:
                  jjCheckNAddStates(40, 42);
                  break;
               case 51:
                  if (curChar == 39 && kind > 109)
                     kind = 109;
                  break;
               case 53:
               case 55:
                  jjCheckNAddStates(43, 45);
                  break;
               case 57:
               case 59:
                  jjCheckNAddStates(46, 48);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 112)
                        kind = 112;
                     jjCheckNAdd(14);
                  }
                  else if (curChar == 96)
                     jjCheckNAddStates(49, 54);
                  break;
               case 1:
                  if (kind > 18)
                     kind = 18;
                  break;
               case 6:
                  if ((0x100000001000L & l) != 0L && kind > 101)
                     kind = 101;
                  break;
               case 9:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(55, 56);
                  break;
               case 12:
                  if ((0x5000000050L & l) != 0L && kind > 105)
                     kind = 105;
                  break;
               case 13:
               case 14:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAdd(14);
                  break;
               case 19:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(57, 58);
                  break;
               case 23:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(59, 60);
                  break;
               case 27:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(61, 62);
                  break;
               case 31:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAddTwoStates(32, 6);
                  break;
               case 35:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 36:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  jjCheckNAddStates(31, 33);
                  break;
               case 39:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 40:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  jjCheckNAddStates(34, 36);
                  break;
               case 44:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 45:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  jjCheckNAddStates(37, 39);
                  break;
               case 48:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 49:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  jjCheckNAddStates(40, 42);
                  break;
               case 52:
                  if (curChar == 96)
                     jjCheckNAddStates(49, 54);
                  break;
               case 53:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 54:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  jjCheckNAddStates(43, 45);
                  break;
               case 56:
                  if (curChar == 96 && kind > 107)
                     kind = 107;
                  break;
               case 57:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(46, 48);
                  break;
               case 58:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 59:
                  jjCheckNAddStates(46, 48);
                  break;
               case 60:
                  if (curChar == 96 && kind > 110)
                     kind = 110;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 14:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAdd(14);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 18)
                     kind = 18;
                  break;
               case 35:
               case 37:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 39:
               case 41:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 44:
               case 46:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 48:
               case 50:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 53:
               case 55:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 57:
               case 59:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(46, 48);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 61 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x800000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_4(0x400000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_4(active0, 0x400000L);
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa2_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_4(active0, 0x400000L);
      default :
         return 3;
   }
}
private final int jjMoveStringLiteralDfa3_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(3, 22);
         break;
      default :
         return 4;
   }
   return 4;
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x1800000000L) != 0L)
         {
            jjmatchedKind = 112;
            return 1;
         }
         return -1;
      case 1:
         if ((active1 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 1;
            }
            return 1;
         }
         if ((active1 & 0x800000000L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1, active2), pos + 1);
}
private final int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 12);
      case 10:
         return jjStopAtPos(0, 13);
      case 12:
         return jjStopAtPos(0, 15);
      case 13:
         return jjStopAtPos(0, 14);
      case 32:
         return jjStopAtPos(0, 11);
      case 33:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x14L);
      case 36:
         return jjStopAtPos(0, 111);
      case 37:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x8000L);
      case 38:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x200000L, 0x800L);
      case 40:
         return jjStopAtPos(0, 116);
      case 41:
         return jjStopAtPos(0, 117);
      case 42:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x200L);
      case 43:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x400000L, 0x80L);
      case 44:
         return jjStopAtPos(0, 123);
      case 45:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_3(0x100000000000L, 0x800000L, 0x100L);
      case 46:
         jjmatchedKind = 124;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x4000L);
      case 47:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x400L);
      case 58:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_3(0x200000000000L, 0x0L, 0x0L);
      case 59:
         return jjStopAtPos(0, 122);
      case 60:
         jjmatchedKind = 126;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x100000000L, 0x20009L);
      case 61:
         jjmatchedKind = 134;
         return jjMoveStringLiteralDfa1_3(0x400000000000L, 0x8000000000000000L, 0x20L);
      case 62:
         jjmatchedKind = 125;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x600000000L, 0x40002L);
      case 63:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_3(0x10L, 0x0L, 0x0L);
      case 64:
         return jjStopAtPos(0, 79);
      case 91:
         return jjStopAtPos(0, 120);
      case 93:
         return jjStopAtPos(0, 121);
      case 94:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x2000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x1000000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x800000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 118);
      case 124:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x100000L, 0x1000L);
      case 125:
         return jjStopAtPos(0, 119);
      case 126:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x10000L);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         break;
      case 43:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      case 45:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         break;
      case 58:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         break;
      case 60:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0L, active2, 0x20000L);
      case 61:
         if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(1, 128);
         else if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(1, 129);
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(1, 135);
         else if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(1, 136);
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(1, 137);
         else if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(1, 138);
         else if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(1, 139);
         else if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(1, 140);
         else if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(1, 141);
         else if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(1, 142);
         else if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(1, 143);
         else if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(1, 144);
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0L, active2, 0x30L);
      case 62:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x400000000L, active2, 0x40000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_3(1, 99, 1);
         break;
      case 124:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa2_3(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_3(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, 0L, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(2, 132);
         else if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(2, 133);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(2, 145);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(2, 146);
         break;
      case 62:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(2, 98);
         break;
      case 68:
      case 100:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 100, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_3(1, 0L, active1, active2);
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 112;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   16, 17, 22, 23, 26, 27, 12, 44, 45, 47, 48, 49, 51, 35, 36, 38, 
   39, 40, 42, 31, 33, 6, 8, 9, 12, 18, 19, 12, 26, 27, 12, 35, 
   36, 38, 39, 40, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 58, 
   60, 53, 54, 56, 57, 58, 60, 10, 11, 20, 21, 24, 25, 28, 29, 
};
public static final String[] jjstrLiteralImages = {
"", "\74\77", null, "\74\77\75", "\77\76", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\55\76", "\72\72", "\75\76", null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\100", "\41", "\176", "\77", "\72", "\174\174", "\46\46", "\53\53", "\55\55", "\53", 
"\55", "\52", "\57", "\46", "\174", "\136", "\45", "\74\74", "\76\76", "\76\76\76", 
null, null, null, null, null, null, null, null, null, null, null, null, "\44", null, 
null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", 
"\76", "\74", "\75\75", "\74\75", "\76\75", "\41\75", "\74\76", "\41\75\75", 
"\75\75\75", "\75", "\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", 
"\56\75", "\45\75", "\176\75", "\74\74\75", "\76\76\75", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "PHPPARSING", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_VARIABLE", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 2, 2, 4, 5, 1, -1, -1, 1, 1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
};
static final long[] jjtoToken = {
   0xfffffffffc00001fL, 0xfff1fa3fffffffffL, 0x7ffffL, 
};
static final long[] jjtoSkip = {
   0x1ffffe0L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x1fff800L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x2000000L, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[61];
private final int[] jjstateSet = new int[122];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public PHPParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public PHPParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 61; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 5)
         {
            jjmatchedKind = 5;
         }
         break;
       case 1:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 21)
         {
            jjmatchedKind = 21;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 25)
         {
            jjmatchedKind = 25;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 25)
         {
            jjmatchedKind = 25;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           CommonTokenAction(matchedToken);
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 18 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                   input_stream.backup(1);
         break;
      default :
         break;
   }
}
}
