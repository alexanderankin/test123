/* Generated By:JavaCC: Do not edit this line. PHPParser.java */
package gatchan.phpparser.parser;

import java.util.ArrayList;
import java.io.StringReader;
import java.io.*;
import java.util.Vector;

import net.sourceforge.phpdt.internal.compiler.ast.*;
import net.sourceforge.phpdt.internal.compiler.parser.OutlineableWithChildren;
import net.sourceforge.phpdt.internal.compiler.parser.Outlineable;
import net.sourceforge.phpdt.internal.compiler.parser.PHPOutlineInfo;

/**
 * A PHP Parser originaly written for phpeclipse (http://www.phpeclipse.de).
 *
 * @author Matthieu Casanova <hoyo@free.fr>
 */
public final class PHPParser implements PHPParserConstants {

//todo : fix the variables names bug
//todo : handle tilde operator

//todo: put this in an interface
  public static final int ERROR = 2;
  public static final int WARNING = 1;
  public static final int INFO = 0;
  public static final int TASK = 3;

  /** The current segment. */
  private static OutlineableWithChildren currentSegment;

  private static final String PARSE_ERROR_STRING = "Parse error"; //$NON-NLS-1$
  private static final String PARSE_WARNING_STRING = "Warning"; //$NON-NLS-1$
  static PHPOutlineInfo outlineInfo;

  /** The error level of the current ParseException. */
  private static int errorLevel = ERROR;
  /** The message of the current ParseException. If it's null it's because the parse exception wasn't handled */
  private static String errorMessage;

  private static int errorStart = -1;
  private static int errorEnd = -1;
  private static PHPDocument phpDocument;

  private static final String SYNTAX_ERROR_CHAR = "syntax error";
  /**
   * The point where html starts.
   * It will be used by the token manager to create HTMLCode objects
   */
  public static int htmlStart;

  //ast stack
  private final static int AstStackIncrement = 100;
  /** The stack of node. */
  private static AstNode[] nodes;
  /** The cursor in expression stack. */
  private static int nodePtr;

  public static final boolean PARSER_DEBUG = false;

  private final Vector parserListeners = new Vector();

  private String path;

  public PHPParser() {
  }

  /**
   * Set the path of the file that is currently parsed.
   * This path will be sent in parse errors and messages
   *
   * @param path the path of the parsed file
   */
  public void setPath(final String path) {
    this.path = path;
  }

  public void addParserListener(final PHPParserListener listener) {
    if (!parserListeners.contains(listener)) {
      parserListeners.add(listener);
    }
  }

  public void removeParserListener(final PHPParserListener listener) {
    parserListeners.remove(listener);
  }

  public void fireParseError(final PHPParseErrorEvent e) {
    for (int i = 0;i<parserListeners.size();i++) {
        PHPParserListener listener = (PHPParserListener) parserListeners.get(i);
        listener.parseError(e);
    }
  }

  public void fireParseMessage(final PHPParseMessageEvent e) {
    for (int i = 0;i<parserListeners.size();i++) {
        PHPParserListener listener = (PHPParserListener) parserListeners.get(i);
        listener.parseMessage(e);
    }
  }

  public final void phpParserTester(final String strEval) throws ParseException {
    final StringReader stream = new StringReader(strEval);
    if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
      token_source = new PHPParserTokenManager(jj_input_stream);
    }
    ReInit(new StringReader(strEval));
    init();
    phpDocument = new PHPDocument(null,"_root");
    currentSegment = phpDocument;
    outlineInfo = new PHPOutlineInfo(null, currentSegment);
    token_source.SwitchTo(PHPParserTokenManager.PHPPARSING);
    phpTest();
  }

  public final void htmlParserTester(final File fileName) throws FileNotFoundException, ParseException {
    final Reader stream = new FileReader(fileName);
    if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
      token_source = new PHPParserTokenManager(jj_input_stream);
    }
    ReInit(stream);
    init();
    phpDocument = new PHPDocument(null,"_root");
    currentSegment = phpDocument;
    outlineInfo = new PHPOutlineInfo(null, currentSegment);
    phpFile();
  }

  public final void htmlParserTester(final String strEval) throws ParseException {
    final StringReader stream = new StringReader(strEval);
    if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
      token_source = new PHPParserTokenManager(jj_input_stream);
    }
    ReInit(stream);
    init();
    phpDocument = new PHPDocument(null,"_root");
    currentSegment = phpDocument;
    outlineInfo = new PHPOutlineInfo(null, currentSegment);
    phpFile();
  }

  /**
   * Reinitialize the parser.
   */
  private static final void init() {
    nodes = new AstNode[AstStackIncrement];
    nodePtr = -1;
    htmlStart = 0;
  }

  /**
   * Add an php node on the stack.
   * @param node the node that will be added to the stack
   */
  private static final void pushOnAstNodes(final AstNode node) {
    try {
      nodes[++nodePtr] = node;
    } catch (IndexOutOfBoundsException e) {
      final int oldStackLength = nodes.length;
      final AstNode[] oldStack = nodes;
      nodes = new AstNode[oldStackLength + AstStackIncrement];
      System.arraycopy(oldStack, 0, nodes, 0, oldStackLength);
      nodePtr = oldStackLength;
      nodes[nodePtr] = node;
    }
  }

  public final PHPOutlineInfo parseInfo(final Object parent, final String s) throws ParseException {
    phpDocument = new PHPDocument(parent,"_root");
    currentSegment = phpDocument;
    outlineInfo = new PHPOutlineInfo(parent, currentSegment);
    final StringReader stream = new StringReader(s);
    if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
      token_source = new PHPParserTokenManager(jj_input_stream);
    }
    ReInit(stream);
    init();
    parse();
    phpDocument.nodes = new AstNode[nodes.length];
    System.arraycopy(nodes,0,phpDocument.nodes,0,nodes.length);
    return outlineInfo;
  }

  /**
   * Put a new html block in the stack.
   */
  public final void createNewHTMLCode() {
    final int currentPosition = token.sourceStart;
    if (currentPosition == htmlStart ||
          currentPosition < htmlStart ||
          currentPosition > jj_input_stream.getCurrentBuffer().length()) {
      return;
    }
    final String html = jj_input_stream.getCurrentBuffer().substring(htmlStart, currentPosition);
    pushOnAstNodes(new HTMLCode(html, htmlStart,currentPosition));
  }

  /** Create a new task. */
/*  public final void createNewTask(final int todoStart) {
    final StringBuffer currentBuffer = jj_input_stream.getCurrentBuffer();
    final String  todo = currentBuffer.substring(todoStart,currentBuffer.indexOf("\n",todoStart)-1);
    if (!PARSER_DEBUG) {
      try {
        setMarker(fileToParse,
                  todo,
                  jj_input_stream.getBeginLine(),
                  TASK,
                  "Line "+jj_input_stream.getBeginLine());
      } catch (CoreException e) {
        PHPeclipsePlugin.log(e);
      }
    }
  }      */

  Token error_skipto(int kind) {
  //  ParseException e = generateParseException();  // generate the exception object.
  //  System.out.println(e.toString());  // print the error message
    Token t;
    do {
      t = getNextToken();
    } while (t.kind != kind && t.kind != PHPParserConstants.EOF);
    return t;
  }

  public final void parse() throws ParseException {
          phpFile();
  }

  final public void phpTest() throws ParseException {
    Php();
    jj_consume_token(0);
  }

  final public void phpFile() throws ParseException {
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PHPSTARTSHORT:
        case PHPSTARTLONG:
        case PHPECHOSTART:
        case PHPEND:
        case CLASS:
        case FUNCTION:
        case IF:
        case ARRAY:
        case BREAK:
        case LIST:
        case PRINT:
        case ECHO:
        case INCLUDE:
        case REQUIRE:
        case INCLUDE_ONCE:
        case REQUIRE_ONCE:
        case GLOBAL:
        case DEFINE:
        case STATIC:
        case CONTINUE:
        case DO:
        case FOR:
        case NEW:
        case NULL:
        case RETURN:
        case SWITCH:
        case TRUE:
        case FALSE:
        case WHILE:
        case FOREACH:
        case AT:
        case BANG:
        case TILDE:
        case PLUS_PLUS:
        case MINUS_MINUS:
        case PLUS:
        case MINUS:
        case BIT_AND:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case DOLLAR:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        PhpBlock();
      }
     createNewHTMLCode();
    } catch (TokenMgrError e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          e.getMessage(),
                                          e.getMessage(),
                                          null,
                                          jj_input_stream.getBeginOffset(),
                                          jj_input_stream.getEndOffset(),
                                          0,
                                          0,
                                          0,
                                          0));
    }
  }

/**
 * A php block is a <?= expression [;]?>
 * or <?php somephpcode ?>
 * or <? somephpcode ?>
 */
  final public void PhpBlock() throws ParseException {
  final PHPEchoBlock phpEchoBlock;
  final Token token,phpEnd;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PHPECHOSTART:
      phpEchoBlock = phpEchoBlock();
   pushOnAstNodes(phpEchoBlock);
      break;
    case PHPSTARTSHORT:
    case PHPSTARTLONG:
    case PHPEND:
    case CLASS:
    case FUNCTION:
    case IF:
    case ARRAY:
    case BREAK:
    case LIST:
    case PRINT:
    case ECHO:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case GLOBAL:
    case DEFINE:
    case STATIC:
    case CONTINUE:
    case DO:
    case FOR:
    case NEW:
    case NULL:
    case RETURN:
    case SWITCH:
    case TRUE:
    case FALSE:
    case WHILE:
    case FOREACH:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case SEMICOLON:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHPSTARTSHORT:
      case PHPSTARTLONG:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PHPSTARTLONG:
          jj_consume_token(PHPSTARTLONG);
          break;
        case PHPSTARTSHORT:
          token = jj_consume_token(PHPSTARTSHORT);
      fireParseMessage(new PHPParseMessageEvent(INFO,
                                                path,
                                                "You should use '<?php' instead of '<?' it will avoid some problems with XML",
                                                token.sourceStart,
                                                token.sourceEnd,
                                                token.beginLine,
                                                token.endLine,
                                                token.beginColumn,
                                                token.endColumn));
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
   createNewHTMLCode();
      Php();
      try {
        phpEnd = jj_consume_token(PHPEND);
    htmlStart = phpEnd.sourceEnd;
      } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'?>' expected",
                                          "?>",
                                          e.currentToken.image,
                                          e.currentToken.sourceStart,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.beginColumn,
                                          e.currentToken.endColumn));
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public PHPEchoBlock phpEchoBlock() throws ParseException {
  final Expression expr;
  final PHPEchoBlock echoBlock;
  final Token token, token2;
    token = jj_consume_token(PHPECHOSTART);
                          createNewHTMLCode();
    expr = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    token2 = jj_consume_token(PHPEND);
  htmlStart = token2.sourceEnd;

  echoBlock = new PHPEchoBlock(expr,token.sourceStart,token2.sourceEnd);
  pushOnAstNodes(echoBlock);
  {if (true) return echoBlock;}
    throw new Error("Missing return statement in function");
  }

  final public void Php() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
      case FUNCTION:
      case IF:
      case ARRAY:
      case BREAK:
      case LIST:
      case PRINT:
      case ECHO:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case GLOBAL:
      case DEFINE:
      case STATIC:
      case CONTINUE:
      case DO:
      case FOR:
      case NEW:
      case NULL:
      case RETURN:
      case SWITCH:
      case TRUE:
      case FALSE:
      case WHILE:
      case FOREACH:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      BlockStatement();
    }
  }

/**
 * A Class declaration.
 * class <IDENTIFIER> [extends <IDENTIFIER>] Class body
 *
 * @return a ClassDeclaration
 */
  final public ClassDeclaration ClassDeclaration() throws ParseException {
  final ClassDeclaration classDeclaration;
  Token className = null;
  final Token superclassName, token, extendsToken;
  String classNameImage = SYNTAX_ERROR_CHAR;
  String superclassNameImage = null;
  final int classEnd;
    token = jj_consume_token(CLASS);
    try {
      className = jj_consume_token(IDENTIFIER);
     classNameImage = className.image;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "identifier expected",
                                          "identifier",
                                          e.currentToken.image,
                                          token.sourceStart,
                                          token.sourceEnd,
                                          token.beginLine,
                                          token.endLine,
                                          token.endColumn,
                                          token.endColumn+1));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      extendsToken = jj_consume_token(EXTENDS);
      try {
        superclassName = jj_consume_token(IDENTIFIER);
       superclassNameImage = superclassName.image;
      } catch (ParseException e) {
      fireParseError(new PHPParseErrorEvent(ERROR,
                                            path,
                                            "identifier expected",
                                            "identifier",
                                            e.currentToken.image,
                                            extendsToken.sourceStart,
                                            extendsToken.sourceEnd,
                                            extendsToken.beginLine,
                                            extendsToken.endLine,
                                            extendsToken.endColumn,
                                            extendsToken.endColumn+1));
      superclassNameImage = SYNTAX_ERROR_CHAR;
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    int start, end;
    if (className == null) {
      start = token.sourceStart;
      end = token.sourceEnd;
    } else {
      start = className.sourceStart;
      end = className.sourceEnd;
    }
    if (superclassNameImage == null) {

      classDeclaration = new ClassDeclaration(currentSegment,
                                              classNameImage,
                                              start,
                                              end);
    } else {
      classDeclaration = new ClassDeclaration(currentSegment,
                                              classNameImage,
                                              superclassNameImage,
                                              start,
                                              end);
    }
      currentSegment.add(classDeclaration);
      currentSegment = classDeclaration;
    classEnd = ClassBody(classDeclaration);
   currentSegment = (OutlineableWithChildren) currentSegment.getParent();
   classDeclaration.sourceEnd = classEnd;
   pushOnAstNodes(classDeclaration);
   {if (true) return classDeclaration;}
    throw new Error("Missing return statement in function");
  }

  final public int ClassBody(final ClassDeclaration classDeclaration) throws ParseException {
Token token;
    try {
      jj_consume_token(LBRACE);
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'{' expected",
                                          "{",
                                          e.currentToken.image,
                                          e.currentToken.sourceStart,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case VAR:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      ClassBodyDeclaration(classDeclaration);
    }
    try {
      token = jj_consume_token(RBRACE);
     {if (true) return token.sourceEnd;}
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'}' expected",
                                          "}",
                                          e.currentToken.image,
                                          e.currentToken.sourceStart,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    {if (true) return this.token.sourceEnd;}
    }
    throw new Error("Missing return statement in function");
  }

/**
 * A class can contain only methods and fields.
 */
  final public void ClassBodyDeclaration(final ClassDeclaration classDeclaration) throws ParseException {
  final MethodDeclaration method;
  final FieldDeclaration field;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
      method = MethodDeclaration();
                                method.analyzeCode(); classDeclaration.addMethod(method);
      break;
    case VAR:
      field = FieldDeclaration();
                                if (field != null) classDeclaration.addField(field);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * A class field declaration : it's var VariableDeclarator() (, VariableDeclarator())*;.
 * it is only used by ClassBodyDeclaration()
 */
  final public FieldDeclaration FieldDeclaration() throws ParseException {
  VariableDeclaration variableDeclaration;
  final VariableDeclaration[] list;
  final ArrayList arrayList = new ArrayList();
  final Token token;
  Token token2 = null;
  int pos;
    token = jj_consume_token(VAR);
    try {
      variableDeclaration = VariableDeclaratorNoSuffix();
        arrayList.add(variableDeclaration);
        pos = variableDeclaration.sourceEnd;
    } catch (ParseException e) {
      Token semicolon = error_skipto(SEMICOLON);
      fireParseError(new PHPParseErrorEvent(ERROR,
                                            path,
                                            "variable expected",
                                            "variable",
                                            e.currentToken.next.image,
                                            token.sourceEnd,
                                            semicolon.sourceEnd,
                                            token.beginLine,
                                            semicolon.endLine,
                                            token.endColumn,
                                            semicolon.endColumn));
      {if (true) return null;}
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      variableDeclaration = VariableDeclaratorNoSuffix();
        arrayList.add(variableDeclaration);
        outlineInfo.addVariable(variableDeclaration.name());
        pos = variableDeclaration.sourceEnd;
    }
    try {
      token2 = jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "';' expected",
                                          ";",
                                          e.currentToken.image,
                                          e.currentToken.sourceStart,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
   if (arrayList.size() != 0) {
   list = new VariableDeclaration[arrayList.size()];
     arrayList.toArray(list);

   } else {
    //todo : strange
     {if (true) return null;}
   }
   int end;
   if (token2 == null) {
     end = list[list.length-1].sourceEnd;
   } else {
     end = token2.sourceEnd;
   }
   {if (true) return new FieldDeclaration(list,
                               token.sourceStart,
                               end,
                               currentSegment);}
    throw new Error("Missing return statement in function");
  }

/**
 * a strict variable declarator : there cannot be a suffix here.
 * It will be used by fields and formal parameters
 */
  final public VariableDeclaration VariableDeclaratorNoSuffix() throws ParseException {
  final Token token, lbrace,rbrace;
  Expression expr, initializer = null;
  Token assignToken = null;
  Variable variable;
    jj_consume_token(DOLLAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      token = jj_consume_token(IDENTIFIER);
      variable = new Variable(token.image,token.sourceStart,token.sourceEnd);
      break;
    case LBRACE:
      lbrace = jj_consume_token(LBRACE);
      expr = Expression();
      rbrace = jj_consume_token(RBRACE);
      variable = new Variable(expr,lbrace.sourceStart,rbrace.sourceEnd);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      assignToken = jj_consume_token(ASSIGN);
      try {
        initializer = VariableInitializer();
      } catch (ParseException e) {
      fireParseError(new PHPParseErrorEvent(ERROR,
                                            path,
                                            "Literal expression expected in variable initializer",
                                            "literal",
                                            e.currentToken.image,
                                            assignToken.sourceEnd,
                                            assignToken.sourceEnd +1,
                                            e.currentToken.beginLine,
                                            e.currentToken.endLine,
                                            e.currentToken.endColumn,
                                            e.currentToken.endColumn+1));
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  if (assignToken == null) {
    {if (true) return new VariableDeclaration(currentSegment,
                                   variable,
                                   variable.sourceStart,
                                   variable.sourceEnd);}
  }
  if (initializer == null) {
    {if (true) return new VariableDeclaration(currentSegment,
                                   variable,
                                   null,
                                   "=",
                                   variable.sourceStart,
                                   assignToken.sourceEnd);}
  }
  {if (true) return new VariableDeclaration(currentSegment,
                                 variable,
                                 initializer,
                                 "=",
                                 variable.sourceStart,
                                 initializer.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

/**
 * this will be used by static statement
 */
  final public VariableDeclaration VariableDeclarator() throws ParseException {
  final AbstractVariable variable;
  Expression initializer = null;
  Token assignToken = null;
    variable = VariableDeclaratorId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      assignToken = jj_consume_token(ASSIGN);
      try {
        initializer = VariableInitializer();
      } catch (ParseException e) {
      fireParseError(new PHPParseErrorEvent(ERROR,
                                            path,
                                            "Literal expression expected in variable initializer",
                                            "literal",
                                            e.currentToken.image,
                                            token.sourceEnd,
                                            token.sourceEnd+1,
                                            e.currentToken.beginLine,
                                            e.currentToken.endLine,
                                            e.currentToken.endColumn,
                                            e.currentToken.endColumn+1));
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  if (assignToken == null) {
    {if (true) return new VariableDeclaration(currentSegment,
                                   variable,
                                   variable.sourceStart,
                                   variable.sourceEnd);}
  }
  if (initializer == null) {
    {if (true) return new VariableDeclaration(currentSegment,
                                   variable,
                                   null,
                                   "=",
                                   variable.sourceStart,
                                   assignToken.sourceEnd);}
  }
  {if (true) return new VariableDeclaration(currentSegment,
                                 variable,
                                 initializer,
                                 "=",
                                 variable.sourceStart,
                                 initializer.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

/**
 * A Variable name.
 * @return the variable name (with suffix)
 */
  final public AbstractVariable VariableDeclaratorId() throws ParseException {
  AbstractVariable var;
    try {
      var = Variable();
      label_5:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_5;
        }
        var = VariableSuffix(var);
      }
     {if (true) return var;}
    } catch (ParseException e) {
    errorMessage = "'$' expected for variable identifier";
    errorLevel   = ERROR;
    errorStart = e.currentToken.sourceStart;
    errorEnd   = e.currentToken.sourceEnd;
    {if (true) throw e;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Variable Variable() throws ParseException {
  Variable variable = null;
  final Token token;
    token = jj_consume_token(DOLLAR);
    variable = Var();
    {if (true) return variable;}
    throw new Error("Missing return statement in function");
  }

  final public Variable Var() throws ParseException {
  Variable variable = null;
  final Token token,token2;
  ConstantIdentifier constant;
  Expression expression;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR:
      token = jj_consume_token(DOLLAR);
      variable = Var();
   {if (true) return new Variable(variable,variable.sourceStart,variable.sourceEnd);}
      break;
    case LBRACE:
      token = jj_consume_token(LBRACE);
      expression = Expression();
      token2 = jj_consume_token(RBRACE);
   {if (true) return new Variable(expression,
                       token.sourceStart,
                       token2.sourceEnd);}
      break;
    case IDENTIFIER:
      token = jj_consume_token(IDENTIFIER);
   outlineInfo.addVariable('$' + token.image);
   {if (true) return new Variable(token.image,token.sourceStart,token.sourceEnd);}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression VariableInitializer() throws ParseException {
  final Expression expr;
  final Token token, token2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
      expr = Literal();
   {if (true) return expr;}
      break;
    case MINUS:
      token2 = jj_consume_token(MINUS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        token = jj_consume_token(INTEGER_LITERAL);
        break;
      case FLOATING_POINT_LITERAL:
        token = jj_consume_token(FLOATING_POINT_LITERAL);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
   {if (true) return new PrefixedUnaryExpression(new NumberLiteral(token),
                                      OperatorIds.MINUS,
                                      token2.sourceStart);}
      break;
    case PLUS:
      token2 = jj_consume_token(PLUS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        token = jj_consume_token(INTEGER_LITERAL);
        break;
      case FLOATING_POINT_LITERAL:
        token = jj_consume_token(FLOATING_POINT_LITERAL);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
   {if (true) return new PrefixedUnaryExpression(new NumberLiteral(token),
                                      OperatorIds.PLUS,
                                      token2.sourceStart);}
      break;
    case ARRAY:
      expr = ArrayDeclarator();
   {if (true) return expr;}
      break;
    case IDENTIFIER:
      token = jj_consume_token(IDENTIFIER);
   {if (true) return new ConstantIdentifier(token);}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ArrayVariableDeclaration ArrayVariable() throws ParseException {
final Expression expr,expr2;
    expr = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAYASSIGN:
      jj_consume_token(ARRAYASSIGN);
      expr2 = Expression();
     {if (true) return new ArrayVariableDeclaration(expr,expr2);}
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
   {if (true) return new ArrayVariableDeclaration(expr,jj_input_stream.getPosition());}
    throw new Error("Missing return statement in function");
  }

  final public ArrayVariableDeclaration[] ArrayInitializer() throws ParseException {
  ArrayVariableDeclaration expr;
  final ArrayList list = new ArrayList();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
    case LIST:
    case PRINT:
    case NEW:
    case NULL:
    case TRUE:
    case FALSE:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
      expr = ArrayVariable();
       list.add(expr);
      label_6:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_6;
        }
        jj_consume_token(COMMA);
        expr = ArrayVariable();
       list.add(expr);
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
               list.add(null);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  final ArrayVariableDeclaration[] vars = new ArrayVariableDeclaration[list.size()];
  list.toArray(vars);
  {if (true) return vars;}
    throw new Error("Missing return statement in function");
  }

/**
 * A Method Declaration.
 * <b>function</b> MetodDeclarator() Block()
 *
 * @return a MethodDeclaration
 */
  final public MethodDeclaration MethodDeclaration() throws ParseException {
  final MethodDeclaration functionDeclaration;
  final Block block;
  final OutlineableWithChildren seg = currentSegment;
  final Token token;
    token = jj_consume_token(FUNCTION);
    functionDeclaration = MethodDeclarator(token.sourceStart);
    outlineInfo.addVariable(functionDeclaration.name);
    currentSegment = functionDeclaration;
    block = Block();
   functionDeclaration.statements = block.statements;
   currentSegment = seg;
   {if (true) return functionDeclaration;}
    throw new Error("Missing return statement in function");
  }

/**
 * A MethodDeclarator.
 * [&] IDENTIFIER(parameters ...).
 *
 * @return a function description for the outline
 */
  final public MethodDeclaration MethodDeclarator(final int start) throws ParseException {
  Token identifier = null;
  Token reference = null;
  final ArrayList formalParameters = new ArrayList();
  String identifierChar = SYNTAX_ERROR_CHAR;
  int end = start;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BIT_AND:
      reference = jj_consume_token(BIT_AND);
                          end = reference.sourceEnd;
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    try {
      identifier = jj_consume_token(IDENTIFIER);
      identifierChar = identifier.image;
      end = identifier.sourceEnd;
    } catch (ParseException e) {
    if (e.currentToken.next.kind == PHPParserConstants.LPAREN) {
      fireParseError(new PHPParseErrorEvent(ERROR,
                                            path,
                                            "identifier expected",
                                            "identifier",
                                            e.currentToken.image,
                                            start,
                                            e.currentToken.sourceStart,
                                            e.currentToken.beginLine,
                                            e.currentToken.endLine,
                                            e.currentToken.beginColumn-1,
                                            e.currentToken.endColumn));
    } else {
      fireParseError(new PHPParseErrorEvent(ERROR,
                                            path,
                                            "unexpected token",
                                            "identifier",
                                            e.currentToken.next.image,
                                            e.currentToken.next.sourceStart,
                                            e.currentToken.next.sourceEnd,
                                            e.currentToken.next.beginLine,
                                            e.currentToken.next.endLine,
                                            e.currentToken.next.beginColumn,
                                            e.currentToken.next.endColumn));
      //error_skipto(PHPParserConstants.LPAREN);
    }
    }
    end = FormalParameters(formalParameters);
  int nameStart, nameEnd;
  if (identifier == null) {
    if (reference == null) {
      nameStart = start + 9;
      nameEnd = start + 10;
    } else {
      nameStart = reference.sourceEnd + 1;
      nameEnd = reference.sourceEnd + 2;
    }
  } else {
      nameStart = identifier.sourceStart;
      nameEnd = identifier.sourceEnd;
  }
  {if (true) return new MethodDeclaration(currentSegment,
                               identifierChar,
                               formalParameters,
                               reference != null,
                               nameStart,
                               nameEnd,
                               start,
                               end);}
    throw new Error("Missing return statement in function");
  }

/**
 * FormalParameters follows method identifier.
 * (FormalParameter())
 */
  final public int FormalParameters(final ArrayList parameters) throws ParseException {
  VariableDeclaration var;
  final Token token;
  Token tok = this.token;
  int end = tok.sourceEnd;
    try {
      tok = jj_consume_token(LPAREN);
   end = tok.sourceEnd;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'(' expected",
                                          "(",
                                          e.currentToken.image,
                                          e.currentToken.sourceStart,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BIT_AND:
    case DOLLAR:
      var = FormalParameter();
     parameters.add(var);end = var.sourceEnd;
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        var = FormalParameter();
         parameters.add(var);end = var.sourceEnd;
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    try {
      token = jj_consume_token(RPAREN);
     end = token.sourceEnd;
    } catch (ParseException e) {
                               //recup rparen si avant lbrace
      Token nextToken = getNextToken();
      while (nextToken.kind != EOF && nextToken.kind != RPAREN && nextToken.kind != LBRACE) {
        nextToken = getNextToken();
      }
      if (nextToken.kind == EOF) {
        fireParseError(new PHPParseErrorEvent(ERROR,
                                              path,
                                              "unexpected end of file",
                                              ")",
                                              e.currentToken.next.image,
                                              e.currentToken.sourceEnd,
                                              nextToken.sourceStart,
                                              e.currentToken.beginLine,
                                              nextToken.endLine,
                                              e.currentToken.endColumn,
                                              nextToken.endColumn));
      } else if (nextToken.kind == RPAREN) {
        fireParseError(new PHPParseErrorEvent(ERROR,
                                              path,
                                              "unexpected tokens",
                                              "",
                                              e.currentToken.next.image,
                                              e.currentToken.next.sourceEnd,
                                              nextToken.sourceStart,
                                              e.currentToken.next.beginLine,
                                              nextToken.beginLine,
                                              e.currentToken.next.endColumn+1,
                                              nextToken.beginColumn-1));
      } else {
        fireParseError(new PHPParseErrorEvent(ERROR,
                                        path,
                                        "')' expected",
                                        ")",
                                        e.currentToken.next.image,
                                        e.currentToken.sourceEnd,
                                        nextToken.sourceStart,
                                        e.currentToken.beginLine,
                                        nextToken.endLine,
                                        e.currentToken.endColumn+1,
                                        nextToken.endColumn-1));
      }
    }
  {if (true) return end;}
    throw new Error("Missing return statement in function");
  }

/**
 * A formal parameter.
 * $varname[=value] (,$varname[=value])
 */
  final public VariableDeclaration FormalParameter() throws ParseException {
  final VariableDeclaration variableDeclaration;
  Token token = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BIT_AND:
      token = jj_consume_token(BIT_AND);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    variableDeclaration = VariableDeclaratorNoSuffix();
    outlineInfo.addVariable('$'+variableDeclaration.name());
    if (token != null) {
      variableDeclaration.setReference(true);
    }
    {if (true) return variableDeclaration;}
    throw new Error("Missing return statement in function");
  }

  final public ConstantIdentifier Type() throws ParseException {
 final Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      token = jj_consume_token(STRING);
                       {if (true) return new ConstantIdentifier(token);}
      break;
    case BOOL:
      token = jj_consume_token(BOOL);
                       {if (true) return new ConstantIdentifier(token);}
      break;
    case BOOLEAN:
      token = jj_consume_token(BOOLEAN);
                       {if (true) return new ConstantIdentifier(token);}
      break;
    case REAL:
      token = jj_consume_token(REAL);
                       {if (true) return new ConstantIdentifier(token);}
      break;
    case DOUBLE:
      token = jj_consume_token(DOUBLE);
                       {if (true) return new ConstantIdentifier(token);}
      break;
    case FLOAT:
      token = jj_consume_token(FLOAT);
                       {if (true) return new ConstantIdentifier(token);}
      break;
    case INT:
      token = jj_consume_token(INT);
                       {if (true) return new ConstantIdentifier(token);}
      break;
    case INTEGER:
      token = jj_consume_token(INTEGER);
                       {if (true) return new ConstantIdentifier(token);}
      break;
    case OBJECT:
      token = jj_consume_token(OBJECT);
                       {if (true) return new ConstantIdentifier(token);}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression Expression() throws ParseException {
  final Expression expr;
  Expression initializer = null;
  Token assignOperator = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
    case NEW:
    case NULL:
    case TRUE:
    case FALSE:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
      expr = ConditionalExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case DOTASSIGN:
      case REMASSIGN:
      case TILDEEQUAL:
      case LSHIFTASSIGN:
      case RSIGNEDSHIFTASSIGN:
        assignOperator = AssignmentOperator();
        initializer = Expression();
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
    if (assignOperator != null) {// todo : change this, very very bad :(
        if (expr instanceof AbstractVariable) {
          if (initializer == null) {
            {if (true) return new VariableDeclaration(currentSegment,
                                           (AbstractVariable) expr,
                                           null,
                                           assignOperator.image,
                                           expr.sourceStart,
                                           assignOperator.sourceEnd);}
          }
          {if (true) return new VariableDeclaration(currentSegment,
                                         (AbstractVariable) expr,
                                         initializer,
                                         assignOperator.image,
                                         expr.sourceStart,
                                         initializer.sourceEnd);}
        }
        String varName = expr.toStringExpression().substring(1);
        {if (true) return new VariableDeclaration(currentSegment,
                                       new Variable(varName,
                                                    expr.sourceStart,
                                                    expr.sourceEnd),
                                       expr.sourceStart,
                                       assignOperator.sourceEnd);}
    }
    {if (true) return expr;}
      break;
    case LIST:
    case PRINT:
      expr = ExpressionWBang();
                                  {if (true) return expr;}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression ExpressionWBang() throws ParseException {
  final Expression expr;
  final Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
      token = jj_consume_token(BANG);
      expr = ExpressionWBang();
   {if (true) return new PrefixedUnaryExpression(expr,OperatorIds.NOT,token.sourceStart);}
      break;
    case LIST:
    case PRINT:
      expr = ExpressionNoBang();
                             {if (true) return expr;}
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression ExpressionNoBang() throws ParseException {
  Expression expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIST:
      expr = ListExpression();
                              {if (true) return expr;}
      break;
    case PRINT:
      expr = PrintExpression();
                              {if (true) return expr;}
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Any assignement operator.
 * @return the assignement operator id
 */
  final public Token AssignmentOperator() throws ParseException {
  final Token assignOperator;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      assignOperator = jj_consume_token(ASSIGN);
                                         {if (true) return assignOperator;}
      break;
    case STARASSIGN:
      assignOperator = jj_consume_token(STARASSIGN);
                                         {if (true) return assignOperator;}
      break;
    case SLASHASSIGN:
      assignOperator = jj_consume_token(SLASHASSIGN);
                                         {if (true) return assignOperator;}
      break;
    case REMASSIGN:
      assignOperator = jj_consume_token(REMASSIGN);
                                         {if (true) return assignOperator;}
      break;
    case PLUSASSIGN:
      assignOperator = jj_consume_token(PLUSASSIGN);
                                         {if (true) return assignOperator;}
      break;
    case MINUSASSIGN:
      assignOperator = jj_consume_token(MINUSASSIGN);
                                         {if (true) return assignOperator;}
      break;
    case LSHIFTASSIGN:
      assignOperator = jj_consume_token(LSHIFTASSIGN);
                                         {if (true) return assignOperator;}
      break;
    case RSIGNEDSHIFTASSIGN:
      assignOperator = jj_consume_token(RSIGNEDSHIFTASSIGN);
                                         {if (true) return assignOperator;}
      break;
    case ANDASSIGN:
      assignOperator = jj_consume_token(ANDASSIGN);
                                         {if (true) return assignOperator;}
      break;
    case XORASSIGN:
      assignOperator = jj_consume_token(XORASSIGN);
                                         {if (true) return assignOperator;}
      break;
    case ORASSIGN:
      assignOperator = jj_consume_token(ORASSIGN);
                                         {if (true) return assignOperator;}
      break;
    case DOTASSIGN:
      assignOperator = jj_consume_token(DOTASSIGN);
                                         {if (true) return assignOperator;}
      break;
    case TILDEEQUAL:
      assignOperator = jj_consume_token(TILDEEQUAL);
                                         {if (true) return assignOperator;}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalExpression() throws ParseException {
  final Expression expr;
  Expression expr2 = null;
  Expression expr3 = null;
    expr = ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
      expr2 = Expression();
      jj_consume_token(COLON);
      expr3 = ConditionalExpression();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
  if (expr3 == null) {
    {if (true) return expr;}
  }
  {if (true) return new ConditionalExpression(expr,expr2,expr3);}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalOrExpression() throws ParseException {
  Expression expr,expr2;
  int operator;
    expr = ConditionalAndExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR_OR:
      case _ORL:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR_OR:
        jj_consume_token(OR_OR);
                 operator = OperatorIds.OR_OR;
        break;
      case _ORL:
        jj_consume_token(_ORL);
                 operator = OperatorIds.ORL;
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr2 = ConditionalAndExpression();
      expr = new BinaryExpression(expr,expr2,operator);
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalAndExpression() throws ParseException {
  Expression expr,expr2;
  int operator;
    expr = ConcatExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND_AND:
      case _ANDL:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND_AND:
        jj_consume_token(AND_AND);
                operator = OperatorIds.AND_AND;
        break;
      case _ANDL:
        jj_consume_token(_ANDL);
                operator = OperatorIds.ANDL;
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr2 = ConcatExpression();
                               expr = new BinaryExpression(expr,expr2,operator);
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConcatExpression() throws ParseException {
  Expression expr,expr2;
    expr = InclusiveOrExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_10;
      }
      jj_consume_token(DOT);
      expr2 = InclusiveOrExpression();
     expr = new BinaryExpression(expr,expr2,OperatorIds.DOT);
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression InclusiveOrExpression() throws ParseException {
  Expression expr,expr2;
    expr = ExclusiveOrExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_11;
      }
      jj_consume_token(BIT_OR);
      expr2 = ExclusiveOrExpression();
    expr = new BinaryExpression(expr,expr2,OperatorIds.OR);
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ExclusiveOrExpression() throws ParseException {
  Expression expr,expr2;
    expr = AndExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_12;
      }
      jj_consume_token(XOR);
      expr2 = AndExpression();
     expr = new BinaryExpression(expr,expr2,OperatorIds.XOR);
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AndExpression() throws ParseException {
  Expression expr,expr2;
    expr = EqualityExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_13;
      }
      jj_consume_token(BIT_AND);
      expr2 = EqualityExpression();
     expr = new BinaryExpression(expr,expr2,OperatorIds.AND);
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression EqualityExpression() throws ParseException {
  Expression expr,expr2;
  int operator;
  Token token;
    expr = RelationalExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL_EQUAL:
      case NOT_EQUAL:
      case DIF:
      case BANGDOUBLEEQUAL:
      case TRIPLEEQUAL:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL_EQUAL:
        token = jj_consume_token(EQUAL_EQUAL);
                                  operator = OperatorIds.EQUAL_EQUAL;
        break;
      case DIF:
        token = jj_consume_token(DIF);
                                  operator = OperatorIds.DIF;
        break;
      case NOT_EQUAL:
        token = jj_consume_token(NOT_EQUAL);
                                  operator = OperatorIds.DIF;
        break;
      case BANGDOUBLEEQUAL:
        token = jj_consume_token(BANGDOUBLEEQUAL);
                                  operator = OperatorIds.BANG_EQUAL_EQUAL;
        break;
      case TRIPLEEQUAL:
        token = jj_consume_token(TRIPLEEQUAL);
                                  operator = OperatorIds.EQUAL_EQUAL_EQUAL;
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      try {
        expr2 = RelationalExpression();
      } catch (ParseException e) {
    if (errorMessage != null) {
      {if (true) throw e;}
    }
    expr2 = new ConstantIdentifier(SYNTAX_ERROR_CHAR,token.sourceEnd +1,token.sourceEnd +1);
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "expression expected",
                                          "expression",
                                          e.currentToken.image,
                                          token.sourceEnd,
                                          token.sourceEnd+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
      }
    expr = new BinaryExpression(expr,expr2,operator);
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression RelationalExpression() throws ParseException {
  Expression expr,expr2;
  int operator;
    expr = ShiftExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
          operator = OperatorIds.LESS;
        break;
      case GT:
        jj_consume_token(GT);
          operator = OperatorIds.GREATER;
        break;
      case LE:
        jj_consume_token(LE);
          operator = OperatorIds.LESS_EQUAL;
        break;
      case GE:
        jj_consume_token(GE);
          operator = OperatorIds.GREATER_EQUAL;
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr2 = ShiftExpression();
   expr = new BinaryExpression(expr,expr2,operator);
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ShiftExpression() throws ParseException {
  Expression expr,expr2;
  int operator;
    expr = AdditiveExpression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
      case RSIGNEDSHIFT:
      case RUNSIGNEDSHIFT:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        jj_consume_token(LSHIFT);
                      operator = OperatorIds.LEFT_SHIFT;
        break;
      case RSIGNEDSHIFT:
        jj_consume_token(RSIGNEDSHIFT);
                      operator = OperatorIds.RIGHT_SHIFT;
        break;
      case RUNSIGNEDSHIFT:
        jj_consume_token(RUNSIGNEDSHIFT);
                      operator = OperatorIds.UNSIGNED_RIGHT_SHIFT;
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr2 = AdditiveExpression();
   expr = new BinaryExpression(expr,expr2,operator);
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AdditiveExpression() throws ParseException {
  Expression expr,expr2;
  int operator;
    expr = MultiplicativeExpression();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                operator = OperatorIds.PLUS;
        break;
      case MINUS:
        jj_consume_token(MINUS);
                operator = OperatorIds.MINUS;
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr2 = MultiplicativeExpression();
   expr = new BinaryExpression(expr,expr2,operator);
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression MultiplicativeExpression() throws ParseException {
  Expression expr,expr2;
  int operator;
    try {
      expr = UnaryExpression();
    } catch (ParseException e) {
    if (errorMessage != null) {if (true) throw e;}
    errorMessage = "unexpected token '"+e.currentToken.next.image+'\'';
    errorLevel   = ERROR;
    errorStart = this.token.sourceStart;
    errorEnd   = this.token.sourceEnd;
    {if (true) throw e;}
    }
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REMAINDER:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_18;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
                   operator = OperatorIds.MULTIPLY;
        break;
      case SLASH:
        jj_consume_token(SLASH);
                   operator = OperatorIds.DIVIDE;
        break;
      case REMAINDER:
        jj_consume_token(REMAINDER);
                   operator = OperatorIds.REMAINDER;
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr2 = UnaryExpression();
     expr = new BinaryExpression(expr,expr2,operator);
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

/**
 * An unary expression starting with @, & or nothing
 */
  final public Expression UnaryExpression() throws ParseException {
  Expression expr;
    try {
      expr = AtNotTildeUnaryExpression();
                                        {if (true) return expr;}
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "unexpected token : '"+e.currentToken.image+"'",
                                          "",
                                          e.currentToken.image,
                                          e.currentToken.sourceStart,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.beginColumn,
                                          e.currentToken.endColumn));
    getNextToken();
    {if (true) return UnaryExpression();}
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression AtNotTildeUnaryExpression() throws ParseException {
  final Expression expr;
  final Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      token = jj_consume_token(AT);
      expr = AtNotTildeUnaryExpression();
   {if (true) return new PrefixedUnaryExpression(expr,OperatorIds.AT,token.sourceStart);}
      break;
    case TILDE:
      token = jj_consume_token(TILDE);
      expr = AtNotTildeUnaryExpression();
   {if (true) return new PrefixedUnaryExpression(expr,OperatorIds.TWIDDLE,token.sourceStart);}
      break;
    case BANG:
      token = jj_consume_token(BANG);
      expr = AtNotUnaryExpression();
   {if (true) return new PrefixedUnaryExpression(expr,OperatorIds.NOT,token.sourceStart);}
      break;
    case ARRAY:
    case NEW:
    case NULL:
    case TRUE:
    case FALSE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
      expr = UnaryExpressionNoPrefix();
   {if (true) return expr;}
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * An expression prefixed (or not) by one or more @ and !.
 * @return the expression
 */
  final public Expression AtNotUnaryExpression() throws ParseException {
  final Expression expr;
  final Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      token = jj_consume_token(AT);
      expr = AtNotUnaryExpression();
   {if (true) return new PrefixedUnaryExpression(expr,OperatorIds.AT,token.sourceStart);}
      break;
    case BANG:
      token = jj_consume_token(BANG);
      expr = AtNotUnaryExpression();
   {if (true) return new PrefixedUnaryExpression(expr,OperatorIds.NOT,token.sourceStart);}
      break;
    case ARRAY:
    case NEW:
    case NULL:
    case TRUE:
    case FALSE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
      expr = UnaryExpressionNoPrefix();
   {if (true) return expr;}
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression UnaryExpressionNoPrefix() throws ParseException {
  final Expression expr;
  final Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      token = jj_consume_token(PLUS);
      expr = AtNotTildeUnaryExpression();
                                                       {if (true) return new PrefixedUnaryExpression(expr,
                                                                                     OperatorIds.PLUS,
                                                                                     token.sourceStart);}
      break;
    case MINUS:
      token = jj_consume_token(MINUS);
      expr = AtNotTildeUnaryExpression();
                                                       {if (true) return new PrefixedUnaryExpression(expr,
                                                                                     OperatorIds.MINUS,
                                                                                     token.sourceStart);}
      break;
    case PLUS_PLUS:
    case MINUS_MINUS:
      expr = PreIncDecExpression();
   {if (true) return expr;}
      break;
    case ARRAY:
    case NEW:
    case NULL:
    case TRUE:
    case FALSE:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
      expr = UnaryExpressionNotPlusMinus();
   {if (true) return expr;}
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression PreIncDecExpression() throws ParseException {
final Expression expr;
final int operator;
final Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_PLUS:
      token = jj_consume_token(PLUS_PLUS);
                             operator = OperatorIds.PLUS_PLUS;
      break;
    case MINUS_MINUS:
      token = jj_consume_token(MINUS_MINUS);
                             operator = OperatorIds.MINUS_MINUS;
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    expr = PrimaryExpression();
   {if (true) return new PrefixedUnaryExpression(expr,operator,token.sourceStart);}
    throw new Error("Missing return statement in function");
  }

  final public Expression UnaryExpressionNotPlusMinus() throws ParseException {
  final Expression expr;
    if (jj_2_3(2147483647)) {
      expr = CastExpression();
                                   {if (true) return expr;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAY:
      case NEW:
      case BIT_AND:
      case DOLLAR:
      case IDENTIFIER:
        expr = PostfixExpression();
                                   {if (true) return expr;}
        break;
      case NULL:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
        expr = Literal();
                                   {if (true) return expr;}
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        expr = Expression();
        try {
          jj_consume_token(RPAREN);
        } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "')'n expected",
                                          ")",
                                          e.currentToken.image,
                                          expr.sourceEnd,
                                          expr.sourceEnd+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
        }
   {if (true) return expr;}
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public CastExpression CastExpression() throws ParseException {
final ConstantIdentifier type;
final Expression expr;
final Token token,token1;
    token1 = jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
      type = Type();
      break;
    case ARRAY:
      token = jj_consume_token(ARRAY);
                       type = new ConstantIdentifier(token);
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
    expr = UnaryExpression();
   {if (true) return new CastExpression(type,expr,token1.sourceStart,expr.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public Expression PostfixExpression() throws ParseException {
  final Expression expr;
  int operator = -1;
  Token token = null;
    expr = PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_PLUS:
    case MINUS_MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_PLUS:
        token = jj_consume_token(PLUS_PLUS);
                             operator = OperatorIds.PLUS_PLUS;
        break;
      case MINUS_MINUS:
        token = jj_consume_token(MINUS_MINUS);
                             operator = OperatorIds.MINUS_MINUS;
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    if (operator == -1) {
      {if (true) return expr;}
    }
    {if (true) return new PostfixedUnaryExpression(expr,operator,token.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryExpression() throws ParseException {
  Expression expr;
  Token token = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case BIT_AND:
    case DOLLAR:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        token = jj_consume_token(BIT_AND);
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      expr = refPrimaryExpression(token);
   {if (true) return expr;}
      break;
    case ARRAY:
      expr = ArrayDeclarator();
   {if (true) return expr;}
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression refPrimaryExpression(final Token reference) throws ParseException {
  Expression expr;
  Expression expr2 = null;
  final Token identifier;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      identifier = jj_consume_token(IDENTIFIER);
    expr = new ConstantIdentifier(identifier);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATICCLASSACCESS:
          ;
          break;
        default:
          jj_la1[59] = jj_gen;
          break label_19;
        }
        jj_consume_token(STATICCLASSACCESS);
        expr2 = ClassIdentifier();
     expr = new ClassAccess(expr,
                            expr2,
                            ClassAccess.STATIC);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        expr2 = Arguments(expr);
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
    if (expr2 == null) {
      if (reference != null) {
        fireParseError(new PHPParseErrorEvent(ERROR,
                                              path,
                                              "you cannot use a constant by reference",
                                              "",
                                              "&",
                                              reference.sourceStart,
                                              reference.sourceEnd,
                                              reference.beginLine,
                                              reference.endLine,
                                              reference.endColumn,
                                              reference.endColumn+1));
      }
      {if (true) return expr;}
    }
    {if (true) return expr2;}
      break;
    case DOLLAR:
      expr = VariableDeclaratorId();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        expr = Arguments(expr);
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
   {if (true) return expr;}
      break;
    case NEW:
      token = jj_consume_token(NEW);
      expr = ClassIdentifier();
    int start;
    if (reference == null) {
      start = token.sourceStart;
    } else {
      start = reference.sourceStart;
    }
    expr = new ClassInstantiation(expr,
                                  reference != null,
                                  start);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        expr = Arguments(expr);
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
   {if (true) return expr;}
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * An array declarator.
 * array(vars)
 * @return an array
 */
  final public ArrayInitializer ArrayDeclarator() throws ParseException {
  final ArrayVariableDeclaration[] vars;
  final Token token;
    token = jj_consume_token(ARRAY);
    vars = ArrayInitializer();
   {if (true) return new ArrayInitializer(vars,
                               token.sourceStart,
                               this.token.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public Expression ClassIdentifier() throws ParseException {
  final Expression expr;
  final Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      token = jj_consume_token(IDENTIFIER);
                                 {if (true) return new ConstantIdentifier(token);}
      break;
    case STRING:
    case OBJECT:
    case BOOL:
    case BOOLEAN:
    case REAL:
    case DOUBLE:
    case FLOAT:
    case INT:
    case INTEGER:
      expr = Type();
                                 {if (true) return expr;}
      break;
    case DOLLAR:
      expr = VariableDeclaratorId();
                                 {if (true) return expr;}
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Used by Variabledeclaratorid and primarysuffix
 */
  final public AbstractVariable VariableSuffix(final AbstractVariable prefix) throws ParseException {
  Expression expression = null;
  final Token classAccessToken,lbrace,rbrace;
  Token token;
  int pos;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASSACCESS:
      classAccessToken = jj_consume_token(CLASSACCESS);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          lbrace = jj_consume_token(LBRACE);
          expression = Expression();
          rbrace = jj_consume_token(RBRACE);
                 expression = new Variable(expression,
                                           lbrace.sourceStart,
                                           rbrace.sourceEnd);
          break;
        case IDENTIFIER:
          token = jj_consume_token(IDENTIFIER);
         expression = new ConstantIdentifier(token.image,token.sourceStart,token.sourceEnd);
          break;
        case DOLLAR:
          expression = Variable();
          break;
        default:
          jj_la1[65] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "function call or field access expected",
                                          "",
                                          e.currentToken.image,
                                          classAccessToken.sourceEnd,
                                          classAccessToken.sourceEnd+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
      }
   {if (true) return new ClassAccess(prefix,
                          expression,
                          ClassAccess.NORMAL);}
      break;
    case LBRACKET:
      token = jj_consume_token(LBRACKET);
                      pos = token.sourceEnd+1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAY:
      case LIST:
      case PRINT:
      case NEW:
      case NULL:
      case TRUE:
      case FALSE:
      case STRING:
      case OBJECT:
      case BOOL:
      case BOOLEAN:
      case REAL:
      case DOUBLE:
      case FLOAT:
      case INT:
      case INTEGER:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARRAY:
        case LIST:
        case PRINT:
        case NEW:
        case NULL:
        case TRUE:
        case FALSE:
        case AT:
        case BANG:
        case TILDE:
        case PLUS_PLUS:
        case MINUS_MINUS:
        case PLUS:
        case MINUS:
        case BIT_AND:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case DOLLAR:
        case IDENTIFIER:
        case LPAREN:
          expression = Expression();
                                pos = expression.sourceEnd+1;
          break;
        case STRING:
        case OBJECT:
        case BOOL:
        case BOOLEAN:
        case REAL:
        case DOUBLE:
        case FLOAT:
        case INT:
        case INTEGER:
          expression = Type();
                                pos = expression.sourceEnd+1;
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
      try {
        token = jj_consume_token(RBRACKET);
     pos = token.sourceEnd;
      } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "']' expected",
                                          "]",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
      }
   {if (true) return new ArrayDeclarator(prefix,expression,pos);}
      break;
    case LBRACE:
      token = jj_consume_token(LBRACE);
                    pos = token.sourceEnd+1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAY:
      case LIST:
      case PRINT:
      case NEW:
      case NULL:
      case TRUE:
      case FALSE:
      case STRING:
      case OBJECT:
      case BOOL:
      case BOOLEAN:
      case REAL:
      case DOUBLE:
      case FLOAT:
      case INT:
      case INTEGER:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARRAY:
        case LIST:
        case PRINT:
        case NEW:
        case NULL:
        case TRUE:
        case FALSE:
        case AT:
        case BANG:
        case TILDE:
        case PLUS_PLUS:
        case MINUS_MINUS:
        case PLUS:
        case MINUS:
        case BIT_AND:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case DOLLAR:
        case IDENTIFIER:
        case LPAREN:
          expression = Expression();
                                pos = expression.sourceEnd+1;
          break;
        case STRING:
        case OBJECT:
        case BOOL:
        case BOOLEAN:
        case REAL:
        case DOUBLE:
        case FLOAT:
        case INT:
        case INTEGER:
          expression = Type();
                                pos = expression.sourceEnd+1;
          break;
        default:
          jj_la1[68] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
      }
      try {
        token = jj_consume_token(RBRACE);
     pos = token.sourceEnd;
      } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'}' expected",
                                          "}",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
      }
   {if (true) return new ArrayDeclarator(prefix,expression,pos);}
      break;
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Literal Literal() throws ParseException {
  final Token token;
  StringLiteral literal;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      token = jj_consume_token(INTEGER_LITERAL);
                                    {if (true) return new NumberLiteral(token);}
      break;
    case FLOATING_POINT_LITERAL:
      token = jj_consume_token(FLOATING_POINT_LITERAL);
                                    {if (true) return new NumberLiteral(token);}
      break;
    case STRING_LITERAL:
      token = jj_consume_token(STRING_LITERAL);
                                    {if (true) return new StringLiteral(token);}
      break;
    case TRUE:
      token = jj_consume_token(TRUE);
                                    {if (true) return new TrueLiteral(token);}
      break;
    case FALSE:
      token = jj_consume_token(FALSE);
                                    {if (true) return new FalseLiteral(token);}
      break;
    case NULL:
      token = jj_consume_token(NULL);
                                    {if (true) return new NullLiteral(token);}
      break;
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

       /*
StringLiteral evaluableString() :
{
  ArrayList list = new ArrayList();
  Token start,end;
  Token token,lbrace,rbrace;
  AbstractVariable var;
  Expression expr;
}
{
  start = <DOUBLEQUOTE>
  (
   <DOLLARS>
       (
        token = <IDENTIFIER> {list.add(new Variable(token.image,
                                                    token.sourceStart,
                                                    token.sourceEnd));}
        |
         lbrace = <LBRACE1>
         token = <ID>
         {list.add(new Variable(token.image,
                                token.sourceStart,
                                token.sourceEnd));}
         rbrace = <RBRACE1>
       )
   )*
  end = <DOUBLEQUOTE2>
  {
  AbstractVariable[] vars = new AbstractVariable[list.size()];
  list.toArray(vars);
  return new StringLiteral(jj_input_stream.getCurrentBuffer().substring(start.sourceEnd,end.sourceStart),
                           start.sourceStart,
                           end.sourceEnd,
                           vars);
  }
}
  */
  final public FunctionCall Arguments(final Expression func) throws ParseException {
Expression[] args = null;
final Token token,lparen;
    lparen = jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
    case LIST:
    case PRINT:
    case NEW:
    case NULL:
    case TRUE:
    case FALSE:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
      args = ArgumentList();
      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
    try {
      token = jj_consume_token(RPAREN);
     {if (true) return new FunctionCall(func,args,token.sourceEnd);}
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "')' expected",
                                          ")",
                                          e.currentToken.image,
                                          errorStart,
                                          errorEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
  int sourceEnd = (args == null || args.length == 0) ? lparen.sourceEnd+1 : args[args.length-1].sourceEnd;
  {if (true) return new FunctionCall(func,args,sourceEnd);}
    throw new Error("Missing return statement in function");
  }

/**
 * An argument list is a list of arguments separated by comma :
 * argumentDeclaration() (, argumentDeclaration)*
 * @return an array of arguments
 */
  final public Expression[] ArgumentList() throws ParseException {
Expression arg;
final ArrayList list = new ArrayList();
int pos;
Token token;
    arg = Expression();
   list.add(arg);pos = arg.sourceEnd;
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[73] = jj_gen;
        break label_20;
      }
      token = jj_consume_token(COMMA);
                     pos = token.sourceEnd;
      try {
        arg = Expression();
         list.add(arg);
         pos = arg.sourceEnd;
      } catch (ParseException e) {
        fireParseError(new PHPParseErrorEvent(ERROR,
                                              path,
                                              "expression expected",
                                              "expression",
                                              e.currentToken.image,
                                              pos,
                                              pos+1,
                                              e.currentToken.beginLine,
                                              e.currentToken.endLine,
                                              e.currentToken.endColumn,
                                              e.currentToken.endColumn+1));
      }
    }
   final Expression[] arguments = new Expression[list.size()];
   list.toArray(arguments);
   {if (true) return arguments;}
    throw new Error("Missing return statement in function");
  }

/**
 * A Statement without break.
 * @return a statement
 */
  final public Statement StatementNoBreak() throws ParseException {
  final Statement statement;
  Token token = null;
    if (jj_2_4(2)) {
      statement = expressionStatement();
                                         {if (true) return statement;}
    } else if (jj_2_5(2)) {
      statement = LabeledStatement();
                                         {if (true) return statement;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        statement = Block();
                                         {if (true) return statement;}
        break;
      case SEMICOLON:
        statement = EmptyStatement();
                                         {if (true) return statement;}
        break;
      case SWITCH:
        statement = SwitchStatement();
                                         {if (true) return statement;}
        break;
      case IF:
        statement = IfStatement();
                                         {if (true) return statement;}
        break;
      case WHILE:
        statement = WhileStatement();
                                         {if (true) return statement;}
        break;
      case DO:
        statement = DoStatement();
                                         {if (true) return statement;}
        break;
      case FOR:
        statement = ForStatement();
                                         {if (true) return statement;}
        break;
      case FOREACH:
        statement = ForeachStatement();
                                         {if (true) return statement;}
        break;
      case CONTINUE:
        statement = ContinueStatement();
                                         {if (true) return statement;}
        break;
      case RETURN:
        statement = ReturnStatement();
                                         {if (true) return statement;}
        break;
      case ECHO:
        statement = EchoStatement();
                                         {if (true) return statement;}
        break;
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case AT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AT:
          token = jj_consume_token(AT);
          break;
        default:
          jj_la1[74] = jj_gen;
          ;
        }
        statement = IncludeStatement();
   if (token != null) {
    ((InclusionStatement)statement).silent = true;
    statement.sourceStart = token.sourceStart;
  }
  {if (true) return statement;}
        break;
      case STATIC:
        statement = StaticStatement();
                                         {if (true) return statement;}
        break;
      case GLOBAL:
        statement = GlobalStatement();
                                         {if (true) return statement;}
        break;
      case DEFINE:
        statement = defineStatement();
                                         currentSegment.add((Outlineable)statement);{if (true) return statement;}
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/**
 * A statement expression.
 * expression ;
 * @return an expression
 */
  final public Statement expressionStatement() throws ParseException {
  final Statement statement;
  Token token;
    try {
      statement = Expression();
    } catch (ParseException e) {
    token = error_skipto(SEMICOLON);
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "expression expected",
                                          "expression",
                                          e.currentToken.image,
                                          e.currentToken.sourceEnd,
                                          token.sourceEnd,
                                          e.currentToken.beginLine,
                                          token.endLine,
                                          e.currentToken.endColumn,
                                          token.beginColumn));
    {if (true) return new EmptyStatement(e.currentToken.sourceStart,token.sourceEnd);}
    }
    try {
      token = jj_consume_token(SEMICOLON);
     statement.sourceEnd = token.sourceEnd;
    } catch (ParseException e) {
    if (e.currentToken.next.kind != PHPParserConstants.PHPEND) {
      fireParseError(new PHPParseErrorEvent(ERROR,
                                            path,
                                            "';' expected",
                                            ";",
                                            e.currentToken.image,
                                            statement.sourceEnd,
                                            statement.sourceEnd+1,
                                            e.currentToken.beginLine,
                                            e.currentToken.endLine,
                                            e.currentToken.endColumn,
                                            e.currentToken.endColumn+1));
    }
    }
   {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  final public Define defineStatement() throws ParseException {
  Expression defineName,defineValue;
  final Token defineToken;
  Token token;
  int pos;
    defineToken = jj_consume_token(DEFINE);
                          pos = defineToken.sourceEnd+1;
    try {
      token = jj_consume_token(LPAREN);
     pos = token.sourceEnd+1;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'(' expected",
                                          "(",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    try {
      defineName = Expression();
     pos = defineName.sourceEnd+1;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "expression expected",
                                          "expression",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    defineName = new StringLiteral(SYNTAX_ERROR_CHAR,pos,pos);
    }
    try {
      token = jj_consume_token(COMMA);
     pos = defineName.sourceEnd+1;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "',' expected",
                                          ",",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    try {
      defineValue = Expression();
     pos = defineValue.sourceEnd+1;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "expression expected",
                                          "expression",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    defineValue = new StringLiteral(SYNTAX_ERROR_CHAR,pos,pos);
    }
    try {
      token = jj_consume_token(RPAREN);
     pos = token.sourceEnd+1;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "')' expected",
                                          ")",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
   {if (true) return new Define(currentSegment,
                     defineName,
                     defineValue,
                     defineToken.sourceStart,
                     pos);}
    throw new Error("Missing return statement in function");
  }

/**
 * A Normal statement.
 */
  final public Statement Statement() throws ParseException {
  final Statement statement;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case ARRAY:
    case LIST:
    case PRINT:
    case ECHO:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case GLOBAL:
    case DEFINE:
    case STATIC:
    case CONTINUE:
    case DO:
    case FOR:
    case NEW:
    case NULL:
    case RETURN:
    case SWITCH:
    case TRUE:
    case FALSE:
    case WHILE:
    case FOREACH:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case SEMICOLON:
      statement = StatementNoBreak();
                                  {if (true) return statement;}
      break;
    case BREAK:
      statement = BreakStatement();
                                  {if (true) return statement;}
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * An html block inside a php syntax.
 */
  final public HTMLBlock htmlBlock() throws ParseException {
  final int startIndex = nodePtr;
  final AstNode[] blockNodes;
  final int nbNodes;
  final Token phpEnd;
    phpEnd = jj_consume_token(PHPEND);
   htmlStart = phpEnd.sourceEnd;
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHPECHOSTART:
        ;
        break;
      default:
        jj_la1[77] = jj_gen;
        break label_21;
      }
      phpEchoBlock();
    }
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHPSTARTLONG:
        jj_consume_token(PHPSTARTLONG);
        break;
      case PHPSTARTSHORT:
        jj_consume_token(PHPSTARTSHORT);
        break;
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
     createNewHTMLCode();
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'<?php' expected",
                                          "<?php",
                                          e.currentToken.image,
                                          e.currentToken.next.sourceStart,
                                          e.currentToken.next.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
  nbNodes    = nodePtr - startIndex;
  if (nbNodes == 0) {
    {if (true) return null;}
  }
  blockNodes = new AstNode[nbNodes];
  System.arraycopy(nodes,startIndex+1,blockNodes,0,nbNodes);
  nodePtr = startIndex;
  {if (true) return new HTMLBlock(blockNodes);}
    throw new Error("Missing return statement in function");
  }

/**
 * An include statement. It's "include" an expression;
 */
  final public InclusionStatement IncludeStatement() throws ParseException {
  Expression expr;
  final int keyword;
  final InclusionStatement inclusionStatement;
  final Token token, token2;
  int pos;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REQUIRE:
      token = jj_consume_token(REQUIRE);
                                 keyword = InclusionStatement.REQUIRE;pos=token.sourceEnd;
      break;
    case REQUIRE_ONCE:
      token = jj_consume_token(REQUIRE_ONCE);
                                 keyword = InclusionStatement.REQUIRE_ONCE;pos=token.sourceEnd;
      break;
    case INCLUDE:
      token = jj_consume_token(INCLUDE);
                                 keyword = InclusionStatement.INCLUDE;pos=token.sourceEnd;
      break;
    case INCLUDE_ONCE:
      token = jj_consume_token(INCLUDE_ONCE);
                                 keyword = InclusionStatement.INCLUDE_ONCE;pos=token.sourceEnd;
      break;
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    try {
      expr = Expression();
     pos = expr.sourceEnd;
    } catch (ParseException e) {
    if (errorMessage != null) {
      {if (true) throw e;}
    }
    expr = new ConstantIdentifier(SYNTAX_ERROR_CHAR,pos,pos);
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "expression expected",
                                          "expression",
                                          e.currentToken.image,
                                          e.currentToken.next.sourceStart,
                                          e.currentToken.next.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    try {
      token2 = jj_consume_token(SEMICOLON);
     pos=token2.sourceEnd;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "';' expected",
                                          ";",
                                          e.currentToken.image,
                                          e.currentToken.next.sourceStart,
                                          e.currentToken.next.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
   inclusionStatement = new InclusionStatement(currentSegment,
                                               keyword,
                                               expr,
                                               token.sourceStart,
                                               pos);
   currentSegment.add(inclusionStatement);
   {if (true) return inclusionStatement;}
    throw new Error("Missing return statement in function");
  }

  final public PrintExpression PrintExpression() throws ParseException {
  final Expression expr;
  final Token printToken;
    token = jj_consume_token(PRINT);
    expr = Expression();
   {if (true) return new PrintExpression(expr,token.sourceStart,expr.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public ListExpression ListExpression() throws ParseException {
  Expression expr = null;
  final Expression expression;
  final ArrayList list = new ArrayList();
  int pos;
  final Token listToken, rParen;
  Token token;
    listToken = jj_consume_token(LIST);
                      pos = listToken.sourceEnd;
    try {
      token = jj_consume_token(LPAREN);
                      pos = token.sourceEnd;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'(' expected",
                                          "(",
                                          e.currentToken.image,
                                          listToken.sourceEnd,
                                          listToken.sourceEnd+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR:
      expr = VariableDeclaratorId();
     list.add(expr);pos = expr.sourceEnd;
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
   if (expr == null) list.add(null);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[81] = jj_gen;
        break label_22;
      }
      try {
        token = jj_consume_token(COMMA);
       pos = token.sourceEnd;
      } catch (ParseException e) {
      fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                            "',' expected",
                                            ",",
                                            e.currentToken.image,
                                            pos,
                                            pos+1,
                                            e.currentToken.beginLine,
                                            e.currentToken.endLine,
                                            e.currentToken.endColumn,
                                            e.currentToken.endColumn+1));
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLLAR:
        expr = VariableDeclaratorId();
                                    list.add(expr);pos = expr.sourceEnd;
        break;
      default:
        jj_la1[82] = jj_gen;
        ;
      }
    }
    try {
      rParen = jj_consume_token(RPAREN);
     pos = rParen.sourceEnd;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "')' expected",
                                          ")",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      expression = Expression();
    final AbstractVariable[] vars = new AbstractVariable[list.size()];
    list.toArray(vars);
    {if (true) return new ListExpression(vars,
                              expression,
                              listToken.sourceStart,
                              expression.sourceEnd);}
      break;
    default:
      jj_la1[83] = jj_gen;
      ;
    }
    final AbstractVariable[] vars = new AbstractVariable[list.size()];
    list.toArray(vars);
    {if (true) return new ListExpression(vars,listToken.sourceStart,pos);}
    throw new Error("Missing return statement in function");
  }

/**
 * An echo statement.
 * echo anyexpression (, otherexpression)*
 */
  final public EchoStatement EchoStatement() throws ParseException {
  final ArrayList expressions = new ArrayList();
  Expression expr;
  Token token;
  Token token2 = null;
    token = jj_consume_token(ECHO);
    expr = Expression();
   expressions.add(expr);
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[84] = jj_gen;
        break label_23;
      }
      jj_consume_token(COMMA);
      expr = Expression();
     expressions.add(expr);
    }
    try {
      token2 = jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
    if (e.currentToken.next.kind != 4) {
      fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                            "';' expected",
                                            ";",
                                            e.currentToken.image,
                                            e.currentToken.sourceEnd,
                                            e.currentToken.sourceEnd+1,
                                            e.currentToken.beginLine,
                                            e.currentToken.endLine,
                                            e.currentToken.endColumn,
                                            e.currentToken.endColumn+1));
    }
    }
   final Expression[] exprs = new Expression[expressions.size()];
   expressions.toArray(exprs);
   if (token2 == null) {
     {if (true) return new EchoStatement(exprs,token.sourceStart, exprs[exprs.length-1].sourceEnd);}
   }
   {if (true) return new EchoStatement(exprs,token.sourceStart, token2.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public GlobalStatement GlobalStatement() throws ParseException {
   Variable expr;
   final ArrayList vars = new ArrayList();
   final GlobalStatement global;
   final Token token, token2;
   int pos;
    token = jj_consume_token(GLOBAL);
    expr = Variable();
     vars.add(expr);pos = expr.sourceEnd+1;
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[85] = jj_gen;
        break label_24;
      }
      jj_consume_token(COMMA);
      expr = Variable();
     vars.add(expr);pos = expr.sourceEnd+1;
    }
    try {
      token2 = jj_consume_token(SEMICOLON);
     pos = token2.sourceEnd+1;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "';' expected",
                                          ";",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    final Variable[] variables = new Variable[vars.size()];
    vars.toArray(variables);
    global = new GlobalStatement(currentSegment,
                                 variables,
                                 token.sourceStart,
                                 pos);
    currentSegment.add(global);
    {if (true) return global;}
    throw new Error("Missing return statement in function");
  }

  final public StaticStatement StaticStatement() throws ParseException {
  final ArrayList vars = new ArrayList();
  VariableDeclaration expr;
  final Token token, token2;
  int pos;
    token = jj_consume_token(STATIC);
    expr = VariableDeclarator();
                                                vars.add(expr);pos = expr.sourceEnd+1;
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[86] = jj_gen;
        break label_25;
      }
      jj_consume_token(COMMA);
      expr = VariableDeclarator();
                                         vars.add(expr);pos = expr.sourceEnd+1;
    }
    try {
      token2 = jj_consume_token(SEMICOLON);
     pos = token2.sourceEnd+1;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "';' expected",
                                          ";",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    final VariableDeclaration[] variables = new VariableDeclaration[vars.size()];
    vars.toArray(variables);
    {if (true) return new StaticStatement(variables,
                               token.sourceStart,
                               pos);}
    throw new Error("Missing return statement in function");
  }

  final public LabeledStatement LabeledStatement() throws ParseException {
  final Token label;
  Statement statement = null;
    label = jj_consume_token(IDENTIFIER);
    try {
      jj_consume_token(COLON);
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "':' expected",
                                          ":",
                                          e.currentToken.image,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.sourceEnd+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    try {
      statement = Statement();
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "statement expected",
                                          "statement",
                                          e.currentToken.image,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.sourceEnd+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    {if (true) return new LabeledStatement(label.image,statement,label.sourceStart,e.currentToken.sourceEnd);}
    }
   {if (true) return new LabeledStatement(label.image,statement,label.sourceStart,statement.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

/**
 * A Block is
 * {
 * statements
 * }.
 * @return a block
 */
  final public Block Block() throws ParseException {
  final ArrayList list = new ArrayList();
  Statement statement;
  final Token token, token2;
  int pos,start;
    try {
      token = jj_consume_token(LBRACE);
     pos = token.sourceEnd+1;start=token.sourceStart;
    } catch (ParseException e) {
    pos = this.token.sourceEnd+1;
    start = pos;
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'{' expected",
                                          "{",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHPEND:
      case CLASS:
      case FUNCTION:
      case IF:
      case ARRAY:
      case BREAK:
      case LIST:
      case PRINT:
      case ECHO:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case GLOBAL:
      case DEFINE:
      case STATIC:
      case CONTINUE:
      case DO:
      case FOR:
      case NEW:
      case NULL:
      case RETURN:
      case SWITCH:
      case TRUE:
      case FALSE:
      case WHILE:
      case FOREACH:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[87] = jj_gen;
        break label_26;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
      case FUNCTION:
      case IF:
      case ARRAY:
      case BREAK:
      case LIST:
      case PRINT:
      case ECHO:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case GLOBAL:
      case DEFINE:
      case STATIC:
      case CONTINUE:
      case DO:
      case FOR:
      case NEW:
      case NULL:
      case RETURN:
      case SWITCH:
      case TRUE:
      case FALSE:
      case WHILE:
      case FOREACH:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
        statement = BlockStatement();
      if (statement != null) {
        list.add(statement);pos = statement.sourceEnd+1;
      }
        break;
      case PHPEND:
        statement = htmlBlock();
                                  if (statement != null) {
                                    list.add(statement);
                                    pos = statement.sourceEnd+1;
                                  }
                                  pos = this.token.sourceEnd+1;
        break;
      default:
        jj_la1[88] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    try {
      token2 = jj_consume_token(RBRACE);
     pos = token2.sourceEnd+1;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'}' expected",
                                          "}",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
  final Statement[] statements = new Statement[list.size()];
  list.toArray(statements);
  {if (true) return new Block(statements,start,pos);}
    throw new Error("Missing return statement in function");
  }

  final public Statement BlockStatement() throws ParseException {
  final Statement statement;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case ARRAY:
    case BREAK:
    case LIST:
    case PRINT:
    case ECHO:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case GLOBAL:
    case DEFINE:
    case STATIC:
    case CONTINUE:
    case DO:
    case FOR:
    case NEW:
    case NULL:
    case RETURN:
    case SWITCH:
    case TRUE:
    case FALSE:
    case WHILE:
    case FOREACH:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case SEMICOLON:
      try {
        statement = Statement();
                                     if (phpDocument == currentSegment) pushOnAstNodes(statement);
                                     {if (true) return statement;}
      } catch (ParseException e) {
    Token semicolumn = error_skipto(SEMICOLON);
    Token nextToken = e.currentToken.next;
    if (nextToken == semicolumn) {
      fireParseError(new PHPParseErrorEvent(ERROR,
                                            path,
                                            "statement expected",
                                            "statement",
                                            nextToken.image,
                                            nextToken.sourceEnd,
                                            semicolumn.sourceStart,
                                            nextToken.endLine,
                                            semicolumn.beginLine,
                                            nextToken.endColumn,
                                            semicolumn.beginColumn));
    } else {
      fireParseError(new PHPParseErrorEvent(ERROR,
                                            path,
                                            "statement expected",
                                            "statement",
                                            nextToken.image,
                                            nextToken.sourceEnd,
                                            nextToken.sourceStart,
                                            nextToken.endLine,
                                            nextToken.beginLine,
                                            nextToken.endColumn,
                                            nextToken.beginColumn));
    }
    {if (true) return null;}
      }
      break;
    case CLASS:
      statement = ClassDeclaration();
                                   {if (true) return statement;}
      break;
    case FUNCTION:
      statement = MethodDeclaration();
                                   if (phpDocument == currentSegment) pushOnAstNodes(statement);
                                   currentSegment.add((MethodDeclaration) statement);
                                   ((MethodDeclaration) statement).analyzeCode();
                                   {if (true) return statement;}
      break;
    default:
      jj_la1[89] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * A Block statement that will not contain any 'break'
 */
  final public Statement BlockStatementNoBreak() throws ParseException {
  final Statement statement;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case ARRAY:
    case LIST:
    case PRINT:
    case ECHO:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case GLOBAL:
    case DEFINE:
    case STATIC:
    case CONTINUE:
    case DO:
    case FOR:
    case NEW:
    case NULL:
    case RETURN:
    case SWITCH:
    case TRUE:
    case FALSE:
    case WHILE:
    case FOREACH:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case SEMICOLON:
      statement = StatementNoBreak();
                                   {if (true) return statement;}
      break;
    case CLASS:
      statement = ClassDeclaration();
                                   {if (true) return statement;}
      break;
    case FUNCTION:
      statement = MethodDeclaration();
                                   currentSegment.add((MethodDeclaration) statement);
                                   ((MethodDeclaration) statement).analyzeCode();
                                   {if (true) return statement;}
      break;
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * used only by ForInit()
 */
  final public Expression[] LocalVariableDeclaration() throws ParseException {
  final ArrayList list = new ArrayList();
  Expression var;
    var = Expression();
   list.add(var);
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[91] = jj_gen;
        break label_27;
      }
      jj_consume_token(COMMA);
      var = Expression();
                                list.add(var);
    }
    final Expression[] vars = new Expression[list.size()];
    list.toArray(vars);
    {if (true) return vars;}
    throw new Error("Missing return statement in function");
  }

/**
 * used only by LocalVariableDeclaration().
 */
  final public VariableDeclaration LocalVariableDeclarator() throws ParseException {
  final Variable varName;
  Expression initializer = null;
    varName = Variable();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      initializer = Expression();
      break;
    default:
      jj_la1[92] = jj_gen;
      ;
    }
   if (initializer == null) {
    {if (true) return new VariableDeclaration(currentSegment,
                                   varName,
                                   varName.sourceStart,
                                   varName.sourceEnd);}
   }
    {if (true) return new VariableDeclaration(currentSegment,
                                   varName,
                                   initializer,
                                   "=",
                                   varName.sourceStart,
                                   initializer.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

/**
 * An empty statement.
 * It will generate an INFO marker
 *
 * @return an empty statement
 */
  final public EmptyStatement EmptyStatement() throws ParseException {
  final Token token;
    token = jj_consume_token(SEMICOLON);
/*    fireParseMessage(new PHPParseMessageEvent(INFO,
                                              path,
                                              "unneeded ';'",
                                              token.sourceStart,
                                              token.sourceEnd,
                                              token.beginLine,
                                              token.endLine,
                                              token.endColumn,
                                              token.endColumn+1));   */
    {if (true) return new EmptyStatement(token.sourceStart,token.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

/**
 * used only by StatementExpressionList() which is used only by ForInit() and ForStatement()
 */
  final public Expression StatementExpression() throws ParseException {
  final Expression expr;
  final Token operator;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_PLUS:
    case MINUS_MINUS:
      expr = PreIncDecExpression();
                                {if (true) return expr;}
      break;
    case ARRAY:
    case NEW:
    case BIT_AND:
    case DOLLAR:
    case IDENTIFIER:
      expr = PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_PLUS:
      case MINUS_MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_PLUS:
          operator = jj_consume_token(PLUS_PLUS);
                            {if (true) return new PostfixedUnaryExpression(expr,
                                                                OperatorIds.PLUS_PLUS,
                                                                operator.sourceEnd);}
          break;
        case MINUS_MINUS:
          operator = jj_consume_token(MINUS_MINUS);
                              {if (true) return new PostfixedUnaryExpression(expr,
                                                                  OperatorIds.MINUS_MINUS,
                                                                  operator.sourceEnd);}
          break;
        default:
          jj_la1[93] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[94] = jj_gen;
        ;
      }
   {if (true) return expr;}
      break;
    default:
      jj_la1[95] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public SwitchStatement SwitchStatement() throws ParseException {
  Expression variable;
  final AbstractCase[] cases;
  final Token switchToken,lparenToken,rparenToken;
  int pos;
    switchToken = jj_consume_token(SWITCH);
                          pos = switchToken.sourceEnd+1;
    try {
      lparenToken = jj_consume_token(LPAREN);
     pos = lparenToken.sourceEnd+1;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'(' expected",
                                          "(",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    try {
      variable = Expression();
                             pos = variable.sourceEnd+1;
    } catch (ParseException e) {
    if (errorMessage != null) {
      {if (true) throw e;}
    }
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "expression expected",
                                          "expression",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    variable = new ConstantIdentifier(SYNTAX_ERROR_CHAR,pos,pos);
    }
    try {
      rparenToken = jj_consume_token(RPAREN);
                            pos = rparenToken.sourceEnd+1;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "')' expected",
                                          ")",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      cases = switchStatementBrace();
      break;
    case COLON:
      cases = switchStatementColon(switchToken.sourceStart, switchToken.sourceEnd);
      break;
    default:
      jj_la1[96] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return new SwitchStatement(variable,
                              cases,
                              switchToken.sourceStart,
                              this.token.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public AbstractCase[] switchStatementBrace() throws ParseException {
  AbstractCase cas;
  final ArrayList cases = new ArrayList();
  Token token;
  int pos;
    token = jj_consume_token(LBRACE);
                    pos = token.sourceEnd;
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        jj_la1[97] = jj_gen;
        break label_28;
      }
      cas = switchLabel0();
                         cases.add(cas);pos = cas.sourceEnd;
    }
    try {
      token = jj_consume_token(RBRACE);
     pos = token.sourceEnd;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'}' expected",
                                          "}",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    final AbstractCase[] abcase = new AbstractCase[cases.size()];
    cases.toArray(abcase);
    {if (true) return abcase;}
    throw new Error("Missing return statement in function");
  }

/**
 * A Switch statement with : ... endswitch;
 * @param start the begin offset of the switch
 * @param end the end offset of the switch
 */
  final public AbstractCase[] switchStatementColon(final int start, final int end) throws ParseException {
  AbstractCase cas;
  final ArrayList cases = new ArrayList();
  Token token;
  int pos;
    token = jj_consume_token(COLON);
                   pos = token.sourceEnd;
    fireParseMessage(new PHPParseMessageEvent(INFO,
                                              path,
                                              "Ugly syntax detected, you should switch () {...} instead of switch (): ... enswitch;",
                                              start,
                                              end,
                                              token.beginLine,
                                              token.endLine,
                                              token.beginColumn,
                                              token.endColumn));
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        jj_la1[98] = jj_gen;
        break label_29;
      }
      cas = switchLabel0();
                          cases.add(cas);pos = cas.sourceEnd;
    }
    try {
      token = jj_consume_token(ENDSWITCH);
                         pos = token.sourceEnd;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'endswitch' expected",
                                          "endswitch",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    try {
      token = jj_consume_token(SEMICOLON);
                         pos = token.sourceEnd;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "';' expected",
                                          ";",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    final AbstractCase[] abcase = new AbstractCase[cases.size()];
    cases.toArray(abcase);
    {if (true) return abcase;}
    throw new Error("Missing return statement in function");
  }

  final public AbstractCase switchLabel0() throws ParseException {
  final Expression expr;
  Statement statement;
  final ArrayList stmts = new ArrayList();
  final Token token = this.token;
  final int start = this.token.next.sourceStart;
    expr = SwitchLabel();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHPEND:
      case CLASS:
      case FUNCTION:
      case IF:
      case ARRAY:
      case BREAK:
      case LIST:
      case PRINT:
      case ECHO:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case GLOBAL:
      case DEFINE:
      case STATIC:
      case CONTINUE:
      case DO:
      case FOR:
      case NEW:
      case NULL:
      case RETURN:
      case SWITCH:
      case TRUE:
      case FALSE:
      case WHILE:
      case FOREACH:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[99] = jj_gen;
        break label_30;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
      case FUNCTION:
      case IF:
      case ARRAY:
      case LIST:
      case PRINT:
      case ECHO:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case GLOBAL:
      case DEFINE:
      case STATIC:
      case CONTINUE:
      case DO:
      case FOR:
      case NEW:
      case NULL:
      case RETURN:
      case SWITCH:
      case TRUE:
      case FALSE:
      case WHILE:
      case FOREACH:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
        statement = BlockStatementNoBreak();
                                         stmts.add(statement);
        break;
      case PHPEND:
        statement = htmlBlock();
                                         if (statement != null) {stmts.add(statement);}
        break;
      case BREAK:
        statement = BreakStatement();
                                         stmts.add(statement);
        break;
      default:
        jj_la1[100] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    final int listSize = stmts.size();
    final Statement[] stmtsArray = new Statement[listSize];
    stmts.toArray(stmtsArray);
    if (expr == null) {//it's a default
      final int end = this.token.next.sourceStart;
      {if (true) return new DefaultCase(stmtsArray,start,end);}
    }
    if (listSize != 0) {
      {if (true) return new Case(expr,stmtsArray,expr.sourceStart,stmtsArray[listSize-1].sourceEnd);}
    } else {
      {if (true) return new Case(expr,stmtsArray,expr.sourceStart,expr.sourceEnd);}
    }
    throw new Error("Missing return statement in function");
  }

/**
 * A SwitchLabel.
 * case Expression() :
 * default :
 * @return the if it was a case and null if not
 */
  final public Expression SwitchLabel() throws ParseException {
  final Expression expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      token = jj_consume_token(CASE);
      try {
        expr = Expression();
      } catch (ParseException e) {
    if (errorMessage != null) {if (true) throw e;}
    errorMessage = "expression expected after 'case' keyword";
    errorLevel   = ERROR;
    errorStart = token.sourceEnd;
    errorEnd   = token.sourceEnd +1;
    {if (true) throw e;}
      }
      try {
        token = jj_consume_token(COLON);
      } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "':' expected",
                                          ":",
                                          e.currentToken.image,
                                          expr.sourceEnd,
                                          expr.sourceEnd+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
      }
   {if (true) return expr;}
      break;
    case _DEFAULT:
      token = jj_consume_token(_DEFAULT);
      try {
        jj_consume_token(COLON);
      } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "':' expected",
                                          ":",
                                          e.currentToken.image,
                                          token.sourceEnd,
                                          token.sourceEnd+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
      }
   {if (true) return null;}
      break;
    default:
      jj_la1[101] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Break BreakStatement() throws ParseException {
  Expression expression = null;
  final Token token, token2;
  int pos;
    token = jj_consume_token(BREAK);
                   pos = token.sourceEnd+1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
    case LIST:
    case PRINT:
    case NEW:
    case NULL:
    case TRUE:
    case FALSE:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
      expression = Expression();
                               pos = expression.sourceEnd+1;
      break;
    default:
      jj_la1[102] = jj_gen;
      ;
    }
    try {
      token2 = jj_consume_token(SEMICOLON);
     pos = token2.sourceEnd;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "';' expected",
                                          ";",
                                          e.currentToken.image,
                                          pos,
                                          pos+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
   {if (true) return new Break(expression, token.sourceStart, pos);}
    throw new Error("Missing return statement in function");
  }

  final public IfStatement IfStatement() throws ParseException {
  final Expression condition;
  final IfStatement ifStatement;
  Token token;
    token = jj_consume_token(IF);
    condition = Condition("if");
    ifStatement = IfStatement0(condition,token.sourceStart,token.sourceEnd);
   {if (true) return ifStatement;}
    throw new Error("Missing return statement in function");
  }

  final public Expression Condition(final String keyword) throws ParseException {
  final Expression condition;
    try {
      jj_consume_token(LPAREN);
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'(' expected",
                                          "(",
                                          e.currentToken.image,
                                          this.token.sourceEnd,
                                          this.token.sourceEnd+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    condition = Expression();
    try {
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "')' expected",
                                          ")",
                                          e.currentToken.image,
                                          condition.sourceEnd,
                                          condition.sourceEnd+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
   {if (true) return condition;}
    throw new Error("Missing return statement in function");
  }

  final public IfStatement IfStatement0(final Expression condition, final int start,final int end) throws ParseException {
  Statement statement = null;
  final Statement stmt;
  final Statement[] statementsArray;
  ElseIf elseifStatement;
  Else elseStatement = null;
  final ArrayList stmts;
  final ArrayList elseIfList = new ArrayList();
  final ElseIf[] elseIfs;
  int pos = jj_input_stream.getPosition();
  final int endStatements;
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      token = jj_consume_token(COLON);
   stmts = new ArrayList();
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PHPEND:
        case IF:
        case ARRAY:
        case BREAK:
        case LIST:
        case PRINT:
        case ECHO:
        case INCLUDE:
        case REQUIRE:
        case INCLUDE_ONCE:
        case REQUIRE_ONCE:
        case GLOBAL:
        case DEFINE:
        case STATIC:
        case CONTINUE:
        case DO:
        case FOR:
        case NEW:
        case NULL:
        case RETURN:
        case SWITCH:
        case TRUE:
        case FALSE:
        case WHILE:
        case FOREACH:
        case AT:
        case BANG:
        case TILDE:
        case PLUS_PLUS:
        case MINUS_MINUS:
        case PLUS:
        case MINUS:
        case BIT_AND:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case DOLLAR:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[103] = jj_gen;
          break label_31;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case ARRAY:
        case BREAK:
        case LIST:
        case PRINT:
        case ECHO:
        case INCLUDE:
        case REQUIRE:
        case INCLUDE_ONCE:
        case REQUIRE_ONCE:
        case GLOBAL:
        case DEFINE:
        case STATIC:
        case CONTINUE:
        case DO:
        case FOR:
        case NEW:
        case NULL:
        case RETURN:
        case SWITCH:
        case TRUE:
        case FALSE:
        case WHILE:
        case FOREACH:
        case AT:
        case BANG:
        case TILDE:
        case PLUS_PLUS:
        case MINUS_MINUS:
        case PLUS:
        case MINUS:
        case BIT_AND:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case DOLLAR:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
          statement = Statement();
                              stmts.add(statement);
          break;
        case PHPEND:
          statement = htmlBlock();
                              if (statement != null) {stmts.add(statement);}
          break;
        default:
          jj_la1[104] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    endStatements = (statement == null) ? token.sourceEnd : statement.sourceEnd;
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSEIF:
          ;
          break;
        default:
          jj_la1[105] = jj_gen;
          break label_32;
        }
        elseifStatement = ElseIfStatementColon();
                                              elseIfList.add(elseifStatement);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        elseStatement = ElseStatementColon();
        break;
      default:
        jj_la1[106] = jj_gen;
        ;
      }
      fireParseMessage(new PHPParseMessageEvent(INFO,
                                                path,
                                                "Ugly syntax detected, you should if () {...} instead of if (): ... endif;",
                                                token.sourceStart,
                                                token.sourceEnd,
                                                token.beginLine,
                                                token.endLine,
                                                token.beginColumn,
                                                token.endColumn));
      try {
        jj_consume_token(ENDIF);
      } catch (ParseException e) {
    errorMessage = "'endif' expected";
    errorLevel   = ERROR;
    errorStart = e.currentToken.sourceStart;
    errorEnd   = e.currentToken.sourceEnd;
    {if (true) throw e;}
      }
      try {
        jj_consume_token(SEMICOLON);
      } catch (ParseException e) {
    errorMessage = "';' expected after 'endif' keyword";
    errorLevel   = ERROR;
    errorStart = e.currentToken.sourceStart;
    errorEnd   = e.currentToken.sourceEnd;
    {if (true) throw e;}
      }
    elseIfs = new ElseIf[elseIfList.size()];
    elseIfList.toArray(elseIfs);
    if (stmts.size() == 1) {
      {if (true) return new IfStatement(condition,
                             (Statement) stmts.get(0),
                              elseIfs,
                              elseStatement,
                              pos,
                              jj_input_stream.getPosition());}
    } else {
      statementsArray = new Statement[stmts.size()];
      stmts.toArray(statementsArray);
      {if (true) return new IfStatement(condition,
                             new Block(statementsArray,pos,endStatements),
                             elseIfs,
                             elseStatement,
                             pos,
                             jj_input_stream.getPosition());}
    }
      break;
    case PHPEND:
    case IF:
    case ARRAY:
    case BREAK:
    case LIST:
    case PRINT:
    case ECHO:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case GLOBAL:
    case DEFINE:
    case STATIC:
    case CONTINUE:
    case DO:
    case FOR:
    case NEW:
    case NULL:
    case RETURN:
    case SWITCH:
    case TRUE:
    case FALSE:
    case WHILE:
    case FOREACH:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case SEMICOLON:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case ARRAY:
      case BREAK:
      case LIST:
      case PRINT:
      case ECHO:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case GLOBAL:
      case DEFINE:
      case STATIC:
      case CONTINUE:
      case DO:
      case FOR:
      case NEW:
      case NULL:
      case RETURN:
      case SWITCH:
      case TRUE:
      case FALSE:
      case WHILE:
      case FOREACH:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
        stmt = Statement();
        break;
      case PHPEND:
        stmt = htmlBlock();
        break;
      default:
        jj_la1[107] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSEIF:
          ;
          break;
        default:
          jj_la1[108] = jj_gen;
          break label_33;
        }
        elseifStatement = ElseIfStatement();
                                                      elseIfList.add(elseifStatement);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        try {
       pos = jj_input_stream.getPosition();
          statement = Statement();
       elseStatement = new Else(statement,pos,jj_input_stream.getPosition());
        } catch (ParseException e) {
      if (errorMessage != null) {
        {if (true) throw e;}
      }
      errorMessage = "unexpected token '"+e.currentToken.next.image+"', a statement was expected";
      errorLevel   = ERROR;
      errorStart = e.currentToken.sourceStart;
      errorEnd   = e.currentToken.sourceEnd;
      {if (true) throw e;}
        }
        break;
      default:
        jj_la1[109] = jj_gen;
        ;
      }
    elseIfs = new ElseIf[elseIfList.size()];
    elseIfList.toArray(elseIfs);
    {if (true) return new IfStatement(condition,
                           stmt,
                           elseIfs,
                           elseStatement,
                           pos,
                           jj_input_stream.getPosition());}
      break;
    default:
      jj_la1[110] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ElseIf ElseIfStatementColon() throws ParseException {
  final Expression condition;
  Statement statement;
  final ArrayList list = new ArrayList();
  final Token elseifToken;
    elseifToken = jj_consume_token(ELSEIF);
    condition = Condition("elseif");
    jj_consume_token(COLON);
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHPEND:
      case IF:
      case ARRAY:
      case BREAK:
      case LIST:
      case PRINT:
      case ECHO:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case GLOBAL:
      case DEFINE:
      case STATIC:
      case CONTINUE:
      case DO:
      case FOR:
      case NEW:
      case NULL:
      case RETURN:
      case SWITCH:
      case TRUE:
      case FALSE:
      case WHILE:
      case FOREACH:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[111] = jj_gen;
        break label_34;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case ARRAY:
      case BREAK:
      case LIST:
      case PRINT:
      case ECHO:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case GLOBAL:
      case DEFINE:
      case STATIC:
      case CONTINUE:
      case DO:
      case FOR:
      case NEW:
      case NULL:
      case RETURN:
      case SWITCH:
      case TRUE:
      case FALSE:
      case WHILE:
      case FOREACH:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
        statement = Statement();
                                      list.add(statement);
        break;
      case PHPEND:
        statement = htmlBlock();
                                      if (statement != null) {list.add(statement);}
        break;
      default:
        jj_la1[112] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  final int sizeList = list.size();
  final Statement[] stmtsArray = new Statement[sizeList];
  list.toArray(stmtsArray);
  {if (true) return new ElseIf(condition,stmtsArray ,
                    elseifToken.sourceStart,
                    stmtsArray[sizeList-1].sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public Else ElseStatementColon() throws ParseException {
  Statement statement;
  final ArrayList list = new ArrayList();
  final Token elseToken;
    elseToken = jj_consume_token(ELSE);
    jj_consume_token(COLON);
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHPEND:
      case IF:
      case ARRAY:
      case BREAK:
      case LIST:
      case PRINT:
      case ECHO:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case GLOBAL:
      case DEFINE:
      case STATIC:
      case CONTINUE:
      case DO:
      case FOR:
      case NEW:
      case NULL:
      case RETURN:
      case SWITCH:
      case TRUE:
      case FALSE:
      case WHILE:
      case FOREACH:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[113] = jj_gen;
        break label_35;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case ARRAY:
      case BREAK:
      case LIST:
      case PRINT:
      case ECHO:
      case INCLUDE:
      case REQUIRE:
      case INCLUDE_ONCE:
      case REQUIRE_ONCE:
      case GLOBAL:
      case DEFINE:
      case STATIC:
      case CONTINUE:
      case DO:
      case FOR:
      case NEW:
      case NULL:
      case RETURN:
      case SWITCH:
      case TRUE:
      case FALSE:
      case WHILE:
      case FOREACH:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
        statement = Statement();
                                                         list.add(statement);
        break;
      case PHPEND:
        statement = htmlBlock();
                                             if (statement != null) {list.add(statement);}
        break;
      default:
        jj_la1[114] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  final int sizeList = list.size();
  final Statement[] stmtsArray = new Statement[sizeList];
  list.toArray(stmtsArray);
  {if (true) return new Else(stmtsArray,elseToken.sourceStart,stmtsArray[sizeList-1].sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public ElseIf ElseIfStatement() throws ParseException {
  final Expression condition;
  //final Statement statement;
  final Token elseifToken;
  final Statement[] statement = new Statement[1];
    elseifToken = jj_consume_token(ELSEIF);
    condition = Condition("elseif");
    statement[0] = Statement();
  {if (true) return new ElseIf(condition,statement,elseifToken.sourceStart,statement[0].sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public WhileStatement WhileStatement() throws ParseException {
  final Expression condition;
  final Statement action;
  final Token whileToken;
    whileToken = jj_consume_token(WHILE);
    condition = Condition("while");
    action = WhileStatementAction(whileToken.sourceStart,whileToken.sourceEnd);
     {if (true) return new WhileStatement(condition,action,whileToken.sourceStart,action.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public Statement WhileStatementAction(final int start, final int end) throws ParseException {
  Statement statement;
  final ArrayList stmts = new ArrayList();
  final int pos = jj_input_stream.getPosition();
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      token = jj_consume_token(COLON);
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case ARRAY:
        case BREAK:
        case LIST:
        case PRINT:
        case ECHO:
        case INCLUDE:
        case REQUIRE:
        case INCLUDE_ONCE:
        case REQUIRE_ONCE:
        case GLOBAL:
        case DEFINE:
        case STATIC:
        case CONTINUE:
        case DO:
        case FOR:
        case NEW:
        case NULL:
        case RETURN:
        case SWITCH:
        case TRUE:
        case FALSE:
        case WHILE:
        case FOREACH:
        case AT:
        case BANG:
        case TILDE:
        case PLUS_PLUS:
        case MINUS_MINUS:
        case PLUS:
        case MINUS:
        case BIT_AND:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case DOLLAR:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[115] = jj_gen;
          break label_36;
        }
        statement = Statement();
                                            stmts.add(statement);
      }
        fireParseMessage(new PHPParseMessageEvent(INFO,
                                                  path,
                                                  "Ugly syntax detected, you should while () {...} instead of while (): ... endwhile;",
                                                  start,
                                                  end,
                                                  token.beginLine,
                                                  token.endLine,
                                                  token.beginColumn,
                                                  token.endColumn));
      try {
        jj_consume_token(ENDWHILE);
      } catch (ParseException e) {
    errorMessage = "'endwhile' expected";
    errorLevel   = ERROR;
    errorStart = e.currentToken.sourceStart;
    errorEnd   = e.currentToken.sourceEnd;
    {if (true) throw e;}
      }
      try {
        jj_consume_token(SEMICOLON);
    final Statement[] stmtsArray = new Statement[stmts.size()];
    stmts.toArray(stmtsArray);
    {if (true) return new Block(stmtsArray,pos,jj_input_stream.getPosition());}
      } catch (ParseException e) {
    errorMessage = "';' expected after 'endwhile' keyword";
    errorLevel   = ERROR;
    errorStart = e.currentToken.sourceStart;
    errorEnd   = e.currentToken.sourceEnd;
    {if (true) throw e;}
      }
      break;
    case IF:
    case ARRAY:
    case BREAK:
    case LIST:
    case PRINT:
    case ECHO:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case GLOBAL:
    case DEFINE:
    case STATIC:
    case CONTINUE:
    case DO:
    case FOR:
    case NEW:
    case NULL:
    case RETURN:
    case SWITCH:
    case TRUE:
    case FALSE:
    case WHILE:
    case FOREACH:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case SEMICOLON:
      statement = Statement();
   {if (true) return statement;}
      break;
    default:
      jj_la1[116] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public DoStatement DoStatement() throws ParseException {
  final Statement action;
  final Expression condition;
  final Token token;
  Token token2 = null;
    token = jj_consume_token(DO);
    action = Statement();
    jj_consume_token(WHILE);
    condition = Condition("while");
    try {
      token2 = jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "';' expected",
                                          ";",
                                          e.currentToken.image,
                                          condition.sourceEnd,
                                          condition.sourceEnd+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    if (token2 == null) {
      {if (true) return new DoStatement(condition,action,token.sourceStart,condition.sourceEnd);}
    }
    {if (true) return new DoStatement(condition,action,token.sourceStart,token2.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

  final public ForeachStatement ForeachStatement() throws ParseException {
  Statement statement = null;
  Expression expression = null;
  ArrayVariableDeclaration variable = null;
  Token foreachToken;
  Token lparenToken = null;
  Token asToken = null;
  Token rparenToken = null;
  int pos;
    foreachToken = jj_consume_token(FOREACH);
    try {
      lparenToken = jj_consume_token(LPAREN);
     pos = lparenToken.sourceEnd+1;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'(' expected",
                                          "(",
                                          e.currentToken.image,
                                          e.currentToken.sourceStart,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    {pos = foreachToken.sourceEnd+1;}
    }
    try {
      expression = Expression();
     pos = expression.sourceEnd+1;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "variable expected",
                                          "variable",
                                          e.currentToken.image,
                                          e.currentToken.sourceStart,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    try {
      asToken = jj_consume_token(AS);
     pos = asToken.sourceEnd+1;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'as' expected",
                                          "as",
                                          e.currentToken.image,
                                          e.currentToken.sourceStart,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    try {
      variable = ArrayVariable();
     pos = variable.sourceEnd+1;
    } catch (ParseException e) {
    if (errorMessage != null) {if (true) throw e;}
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "variable expected",
                                          "variable",
                                          e.currentToken.image,
                                          e.currentToken.sourceStart,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    try {
      rparenToken = jj_consume_token(RPAREN);
     pos = rparenToken.sourceEnd+1;
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "')' expected",
                                          ")",
                                          e.currentToken.image,
                                          e.currentToken.sourceStart,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    try {
      statement = Statement();
     pos = statement.sourceEnd+1;
    } catch (ParseException e) {
    if (errorMessage != null) {if (true) throw e;}
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "statement expected",
                                          "statement",
                                          e.currentToken.image,
                                          e.currentToken.sourceStart,
                                          e.currentToken.sourceEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
   {if (true) return new ForeachStatement(expression,
                               variable,
                               statement,
                               foreachToken.sourceStart,
                               pos);}
    throw new Error("Missing return statement in function");
  }

/**
 * a for declaration.
 * @return a node representing the for statement
 */
  final public ForStatement ForStatement() throws ParseException {
final Token token,tokenEndFor,token2,tokenColon;
int pos;
Expression[] initializations = null;
Expression condition = null;
Expression[] increments = null;
Statement action;
final ArrayList list = new ArrayList();
    token = jj_consume_token(FOR);
    try {
      jj_consume_token(LPAREN);
    } catch (ParseException e) {
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "'(' expected",
                                          "(",
                                          e.currentToken.image,
                                          token.sourceEnd,
                                          token.sourceEnd+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
    case LIST:
    case PRINT:
    case NEW:
    case NULL:
    case TRUE:
    case FALSE:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
      initializations = ForInit();
      break;
    default:
      jj_la1[117] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
    case LIST:
    case PRINT:
    case NEW:
    case NULL:
    case TRUE:
    case FALSE:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
      condition = Expression();
      break;
    default:
      jj_la1[118] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
    case LIST:
    case PRINT:
    case NEW:
    case NULL:
    case TRUE:
    case FALSE:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
      increments = StatementExpressionList();
      break;
    default:
      jj_la1[119] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case ARRAY:
    case BREAK:
    case LIST:
    case PRINT:
    case ECHO:
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
    case GLOBAL:
    case DEFINE:
    case STATIC:
    case CONTINUE:
    case DO:
    case FOR:
    case NEW:
    case NULL:
    case RETURN:
    case SWITCH:
    case TRUE:
    case FALSE:
    case WHILE:
    case FOREACH:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case SEMICOLON:
      action = Statement();
       {if (true) return new ForStatement(initializations,
                               condition,
                               increments,
                               action,
                               token.sourceStart,
                               action.sourceEnd);}
      break;
    case COLON:
      tokenColon = jj_consume_token(COLON);
                            pos = tokenColon.sourceEnd+1;
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case ARRAY:
        case BREAK:
        case LIST:
        case PRINT:
        case ECHO:
        case INCLUDE:
        case REQUIRE:
        case INCLUDE_ONCE:
        case REQUIRE_ONCE:
        case GLOBAL:
        case DEFINE:
        case STATIC:
        case CONTINUE:
        case DO:
        case FOR:
        case NEW:
        case NULL:
        case RETURN:
        case SWITCH:
        case TRUE:
        case FALSE:
        case WHILE:
        case FOREACH:
        case AT:
        case BANG:
        case TILDE:
        case PLUS_PLUS:
        case MINUS_MINUS:
        case PLUS:
        case MINUS:
        case BIT_AND:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case DOLLAR:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[120] = jj_gen;
          break label_37;
        }
        action = Statement();
                             list.add(action);pos = action.sourceEnd+1;
      }
        fireParseMessage(new PHPParseMessageEvent(INFO,
                                                  path,
                                                  "Ugly syntax detected, you should for () {...} instead of for (): ... endfor;",
                                                  tokenColon.sourceStart,
                                                  tokenColon.sourceEnd,
                                                  tokenColon.beginLine,
                                                  tokenColon.endLine,
                                                  tokenColon.beginColumn,
                                                  tokenColon.endColumn));
      try {
        tokenEndFor = jj_consume_token(ENDFOR);
         pos = tokenEndFor.sourceEnd+1;
      } catch (ParseException e) {
        fireParseError(new PHPParseErrorEvent(ERROR,
                                              path,
                                              "'endfor' expected",
                                              "endfor",
                                              e.currentToken.image,
                                              pos,
                                              pos+1,
                                              e.currentToken.beginLine,
                                              e.currentToken.endLine,
                                              e.currentToken.endColumn,
                                              e.currentToken.endColumn+1));
      }
      try {
        token2 = jj_consume_token(SEMICOLON);
         pos = token2.sourceEnd+1;
      } catch (ParseException e) {
        fireParseError(new PHPParseErrorEvent(ERROR,
                                              path,
                                              "';' expected",
                                              ";",
                                              e.currentToken.image,
                                              pos,
                                              pos+1,
                                              e.currentToken.beginLine,
                                              e.currentToken.endLine,
                                              e.currentToken.endColumn,
                                              e.currentToken.endColumn+1));
      }
      final Statement[] stmtsArray = new Statement[list.size()];
      list.toArray(stmtsArray);
      {if (true) return new ForStatement(initializations,
                              condition,
                              increments,
                              new Block(stmtsArray,
                                        stmtsArray[0].sourceStart,
                                        stmtsArray[stmtsArray.length-1].sourceEnd),
                              token.sourceStart,
                              pos);}
      break;
    default:
      jj_la1[121] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression[] ForInit() throws ParseException {
  final Expression[] exprs;
    if (jj_2_6(2147483647)) {
      exprs = LocalVariableDeclaration();
   {if (true) return exprs;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAY:
      case LIST:
      case PRINT:
      case NEW:
      case NULL:
      case TRUE:
      case FALSE:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
        exprs = StatementExpressionList();
   {if (true) return exprs;}
        break;
      default:
        jj_la1[122] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression[] StatementExpressionList() throws ParseException {
  final ArrayList list = new ArrayList();
  final Expression expr;
    expr = Expression();
                         list.add(expr);
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[123] = jj_gen;
        break label_38;
      }
      jj_consume_token(COMMA);
      Expression();
                         list.add(expr);
    }
    final Expression[] exprsArray = new Expression[list.size()];
    list.toArray(exprsArray);
    {if (true) return exprsArray;}
    throw new Error("Missing return statement in function");
  }

  final public Continue ContinueStatement() throws ParseException {
  Expression expr = null;
  final Token token;
  Token token2 = null;
    token = jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
    case LIST:
    case PRINT:
    case NEW:
    case NULL:
    case TRUE:
    case FALSE:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
      expr = Expression();
      break;
    default:
      jj_la1[124] = jj_gen;
      ;
    }
    try {
      token2 = jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
    int errorStart, errorEnd;
    if (expr == null) {
      errorStart = token.sourceEnd;
      errorEnd   = token.sourceEnd+1;
    } else {
      errorStart = expr.sourceEnd;
      errorEnd   = expr.sourceEnd+1;
    }
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "';' expected",
                                          ";",
                                          e.currentToken.image,
                                          errorStart,
                                          errorEnd,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
    }
    if (token2 == null) {
      if (expr == null) {
        {if (true) return new Continue(expr,token.sourceStart,token.sourceEnd);}
      }
      {if (true) return new Continue(expr,token.sourceStart,expr.sourceEnd);}
    }
    {if (true) return new Continue(expr,token.sourceStart,token2.sourceEnd);}
    throw new Error("Missing return statement in function");
  }

/**
 * A return statement.
 * * It's return [expression];
 * @return a ReturnStatement
 */
  final public ReturnStatement ReturnStatement() throws ParseException {
  Statement expr = null;
  final Token token;
  Token token2 = null;
    token = jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCLUDE:
    case REQUIRE:
    case INCLUDE_ONCE:
    case REQUIRE_ONCE:
      expr = IncludeStatement();
    {if (true) return new ReturnStatement(expr,token.sourceStart,expr.sourceEnd);}
      break;
    case ARRAY:
    case LIST:
    case PRINT:
    case NEW:
    case NULL:
    case TRUE:
    case FALSE:
    case AT:
    case BANG:
    case TILDE:
    case PLUS_PLUS:
    case MINUS_MINUS:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DOLLAR:
    case IDENTIFIER:
    case LPAREN:
    case SEMICOLON:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAY:
      case LIST:
      case PRINT:
      case NEW:
      case NULL:
      case TRUE:
      case FALSE:
      case AT:
      case BANG:
      case TILDE:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case DOLLAR:
      case IDENTIFIER:
      case LPAREN:
        expr = Expression();
        break;
      default:
        jj_la1[125] = jj_gen;
        ;
      }
      try {
        token2 = jj_consume_token(SEMICOLON);
      } catch (ParseException e) {
    int errorStart, errorEnd;
    if (expr == null) {
      errorStart = token.sourceEnd;
      errorEnd   = token.sourceEnd+1;
    } else {
      errorStart = expr.sourceEnd;
      errorEnd   = expr.sourceEnd+1;
    }
    fireParseError(new PHPParseErrorEvent(ERROR,
                                          path,
                                          "';' expected",
                                          ";",
                                          e.currentToken.image,
                                          errorStart,
                                          errorEnd+1,
                                          e.currentToken.beginLine,
                                          e.currentToken.endLine,
                                          e.currentToken.endColumn,
                                          e.currentToken.endColumn+1));
      }
      if (token2 == null) {
        if (expr == null) {
          {if (true) return new ReturnStatement(expr,token.sourceStart,token.sourceEnd);}
        }
        {if (true) return new ReturnStatement(expr,token.sourceStart,expr.sourceEnd);}
      }
      {if (true) return new ReturnStatement(expr,token.sourceStart,token2.sourceEnd);}
      break;
    default:
      jj_la1[126] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_3R_177() {
    if (jj_3R_185()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) jj_scanpos = xsp;
    if (jj_3R_184()) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    }
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_80()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_scan_token(MINUS_MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_scan_token(PLUS_PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) return true;
    }
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_75()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_3R_172()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(TILDEEQUAL)) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_scan_token(ARRAY)) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(DOTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(ORASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(XORASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_3R_121()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(ANDASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(RSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(LSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(MINUSASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(PLUSASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(REMASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_143()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_48()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(SLASHASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(STARASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_3R_121()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_3R_175()) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_3R_174()) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_3R_173()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(MINUS_MINUS)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(PLUS_PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) return true;
    }
    if (jj_3R_172()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_3R_165()) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_3R_164()) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_147()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_79()) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_147()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_72()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_115()) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_3R_48()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_209()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_3R_155()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(OBJECT)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_156()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(REAL)) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_156()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_3R_208()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_3R_115()) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_3R_155()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_156()) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_3R_147()) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_147()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(LIST)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_111()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_112()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_48()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_3R_147()) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(REMAINDER)) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) return true;
    }
    }
    if (jj_3R_143()) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_3R_143()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_144()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    if (jj_3R_138()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_3R_138()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_139()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_scan_token(RUNSIGNEDSHIFT)) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_scan_token(RSIGNEDSHIFT)) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_scan_token(LSHIFT)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) return true;
    }
    }
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_132()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_133()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    }
    }
    if (jj_3R_122()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_122()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_123()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(CLASSACCESS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(TRIPLEEQUAL)) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(BANGDOUBLEEQUAL)) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(NOT_EQUAL)) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(DIF)) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_3R_115()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(EQUAL_EQUAL)) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    }
    }
    }
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_3R_119()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_120()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(ARRAY)) return true;
    if (jj_3R_194()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_3R_117()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_118()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_3R_202()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_113()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_3R_113()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_114()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_198()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_199()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_3R_202()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_3R_115()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_3R_108()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_109()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_102()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_105()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_200()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_3R_202()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(_ANDL)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(AND_AND)) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_scan_token(STATICCLASSACCESS)) return true;
    if (jj_3R_198()) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_scan_token(ARRAYASSIGN)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_96()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_99()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_195()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_196()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_184() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(_ORL)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(OR_OR)) return true;
    return false;
  }

  public PHPParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[127];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x2c00001e,0x6,0x6,0x2c00001e,0x0,0x2c000000,0x0,0x18000000,0x18000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x20000000,0x8,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c000010,0x2c000010,0x2c000000,0x2c000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c000010,0x2c000010,0x0,0x0,0x20000010,0x20000010,0x40000000,0x80000000,0x20000010,0x40000000,0x80000000,0x20000010,0x20000010,0x20000010,0x20000010,0x20000010,0x20000000,0x20000000,0x0,0x0,0x0,0x20000000,0x20000000,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0xebaa0fff,0x0,0x0,0xebaa0fff,0x0,0xebaa0fff,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x61000001,0x4000,0x6180000d,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6180000d,0xc,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x61800001,0x61800001,0x61800001,0x0,0x61800001,0x1,0x0,0x0,0x0,0x800001,0x2000,0x0,0x0,0x0,0x800000,0x0,0x0,0x6180000d,0x6180000d,0x6180000d,0x6180000d,0x1000,0x61000000,0x6180000d,0x0,0x0,0x8a2a0ff0,0xebaa0fff,0x0,0x0,0x1e0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xebaa0fff,0xebaa0fff,0xebaa0fff,0xebaa0ffd,0x0,0x0,0x0,0x0,0x800001,0x0,0x48000,0x48000,0xebaa0fff,0xebaa0fff,0x48000,0x6180000d,0xebaa0fff,0xebaa0fff,0x0,0x0,0xebaa0fff,0x0,0x0,0xebaa0fff,0xebaa0fff,0xebaa0fff,0xebaa0fff,0xebaa0fff,0xebaa0fff,0xebaa0fff,0x6180000d,0x6180000d,0x6180000d,0xebaa0fff,0xebaa0fff,0x6180000d,0x0,0x6180000d,0x6180000d,0x618001ed,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x13c38010,0x0,0x0,0x13c38010,0x0,0x13c38010,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3000000,0x0,0x13c38000,0x0,0x10000000,0x0,0x10000000,0x10000000,0x7fc0,0x0,0x13c38000,0x10000,0x0,0x0,0x40000,0x100000,0x100000,0x200000,0x200000,0x0,0x20000000,0x40000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x3000000,0x3000000,0x8c000000,0x8c000000,0x13c38000,0x13c18000,0x13c00000,0xc00000,0x10000000,0x7fc0,0xc00000,0xc00000,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x7fc0,0x0,0x13c3ffc0,0x13c3ffc0,0x13c3ffc0,0x13c3ffc0,0x0,0x0,0x13c38000,0x0,0x8000,0x8010,0x13c38010,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x13c38010,0x13c38010,0x13c38010,0x13c38010,0x0,0x0,0xc00000,0xc00000,0x10c00000,0x80000,0x0,0x0,0x13c38010,0x13c38010,0x0,0x13c38000,0x13c38010,0x13c38010,0x0,0x0,0x13c38010,0x0,0x0,0x13cb8010,0x13c38010,0x13c38010,0x13c38010,0x13c38010,0x13c38010,0x13cb8010,0x13c38000,0x13c38000,0x13c38000,0x13c38010,0x13cb8010,0x13c38000,0x0,0x13c38000,0x13c38000,0x13c38000,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x4518a20,0x0,0x0,0x4518a20,0x4000000,0x4518a20,0x0,0x0,0x0,0x8000000,0x410000,0x0,0x0,0x418000,0x220,0x220,0x10a20,0x0,0x118a20,0x8000000,0x0,0x8000000,0x8000,0x0,0x0,0x0,0x118a20,0x0,0x0,0x0,0x0,0x8,0x8,0x10,0x10,0x10000000,0x0,0x0,0x0,0x80000000,0x80000000,0x60000000,0x60000000,0x7,0x7,0x0,0x0,0x0,0x0,0x118a20,0x118a20,0x118a20,0x0,0x118a20,0x0,0x0,0x0,0x0,0x18000,0x0,0x100000,0x100000,0x100000,0x18000,0x18000,0x418000,0x118a20,0x118a20,0x118a20,0x118a20,0x1400000,0xa20,0x118a20,0x8000000,0x0,0x4400000,0x4518a20,0x0,0x0,0x0,0x8000,0x8000000,0x8000,0x0,0x8000000,0x8000000,0x8000000,0x4518a20,0x4518a20,0x4518a20,0x4518a20,0x8000000,0x0,0x0,0x0,0x18000,0x400000,0x0,0x0,0x4518a20,0x4518a20,0x0,0x118a20,0x4518a20,0x4518a20,0x0,0x0,0x4518a20,0x0,0x0,0x4518a20,0x4518a20,0x4518a20,0x4518a20,0x4518a20,0x4518a20,0x4518a20,0x118a20,0x118a20,0x118a20,0x4518a20,0x4518a20,0x118a20,0x8000000,0x118a20,0x118a20,0x4118a20,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7ffc0,0x0,0x0,0x0,0x7ffc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c,0x3c,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public PHPParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PHPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 127; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 127; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PHPParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PHPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 127; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 127; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PHPParser(PHPParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 127; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(PHPParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 127; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[147];
    for (int i = 0; i < 147; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 127; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 147; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
