TODO List :- saved breakpoints are lost if the entering buffer do not contain breakpoints- Remote arguments are not correctly cleaned when starting a local session after a remote one- Dynamic Call module like :  DataManager. __dict__[fx](self) are failing to display- adding Zope debugging facilities to the debugger to improve zope developpement- provide capability of sorting local and global variables by name when clicking on the 'variable name column'- socket closed message on mouse over variable when a previous debugging session has been stopped and restarted- autocompletion facility to be fully implemented- integrate profilerNETBEANS TODO improvements :- implement remote debugging featureJPyDbg V0.0.17:   + thread support   + program arguments improvement   + NETBEANS debugging pane integration JPyDbg V0.0.16:   File reorganization - moved renamed directories, and fixed up build.xml.   Updated property files to reflect modern dependences, etc. (ezust)JPyDbg V0.0.15 :- JEDIT : + Fix compatibility issue with Jedit 4.3 (based on pre release version) the pluginis still Jedit 4.2 compatible anyway.+ Fix NullPointerException regression when selecting a sidekick python node , instead of going to the source editor line a NullPointerException was arising in Jedit log.- NETBEANS :JPyDbg V0.0.14+ BIG IMPROVEMENT : JpyDbg plugin for NETBEANS IDE available with same functionalities as the jEdit version.+ BIG IMPROVEMENT : Installation has been drastically improved : you only need to install manually the python zip stuff for remote debugging on the remote machine;for standard local python debugging just put jedit jar pluggin in place or setup the Netbeans NBM from netbeans IDE ... That's all+ Fixing bugs around autocompletion for jEdit.JPyDbg V0.0.13+ BIG IMPROVEMENT :  Pylint now graphically integrated.+ Tiny fixes and around PYTHONPATH gui problems on misc UNIX platforms(tested on Linux , Sun Solaris , HPUX and AIX)JPyDbg V0.0.12+ BIG IMPROVEMENT :  The variable Window is now a clean and lean Python Object  memorybrowser based on a Swing tree table : You can navigate recursivelly Local and global Python instances and last but not least   dynamically change the final node data instances  + IMPROVEMENT: Jython environment configuration have been simplifed.+ IMPROVEMENT :  Clean isolation of Jython and Python configuration context+ IMPROVEMENT :  Check button for  Jython / Python configuration correctness+ IMPROVEMENT :  PYTHON PATH management has been revisited and improved* PLANIFIED for release 0.0.13:  pyLint integration* PLANIFIED for release 0.0.14:  profiler integrationJPyDbg V0.0.11+ IMPROVEMENT : when error list is clean jpydbg dockable is brought back to front+ FIX : thanks to Zachary MacGrew for fixing new AST 2.4 format support for inspector.pyPython 2.4 sidekick tree is now correctly populated previous AST versions are still supportedJPyDbg V0.0.10+ NEW FEATURE : Support JYTHON Debugging and provide dynamic capability to switch between Jython and Python+ NEW FEATURE : map function keys to the debug NEXT ,STEP , RUN buttons+ IMPROVEMENT : a status and busy state is now visible when the debugger is busy executinga long running python instruction.+ FIXED Exception type not reported when debug enters UNEXPECTED EXCEPTION JPyDbg V0.0.9 + NEW FEATURE : import navigator panel provides a complementary source navigation based on python imports contained in the current python source. This panel also manages the the python path list used at the debugging time.+ NEW FEATURE : Variable evaluation inside the editor panel at debug time = movingthe mouse over a given variable inside jedit editor will show up the variable evaluation inside a tooltip+ NEW FEATURE : a first version of autocompletion facility is provided , this feature MUST BE CONSIDERED AS ALPHA and is candidate to later enhancements+ NEW FEATURE : feature request 981637 : Copy through standard CRTL C or right popup mouse menu is provided inside the stdout panelthis is a practical way to cut and paste back commands inside the shell textfield at any time+ NEW FEATURE : module imports are now displayed inside the python sidekick tree+ FIXED Nasty bug about stdout content area disapearing when debuggee intensively use the python print statement+ FIXED overquoting inspector.py file parameters has been removed+ FIXED 998885 sourceforge tracking bug : Exception message formatting+ FIXED Sidekick / ErrorList FTP plugin incompatibilities to parse remote Python module syntax+ NEW FEATURE : FTP python sources may be debugged in the same way as local sources+ FIXED Improve reported program reported traceback exception (same as in commandlines)JPyDbg V0.0.8 Fixes and enhancements starting August 3rd 2004+ Erroneous chdir on remote debugging if file is found on current path+ ErrorList the Error XML file is displayed instead of the python source fileJPyDbg V0.0.7 Fixes and enhancements starting June 13rd 2004+ stack selection will now position the source line buffer when selected+ current debugging line erroneous cross buffer painting fixed+ complementary optimisations and cleanup around debugger gutter's display+ forcing jedit mode to python when .py files are initially set to a 'shell' mode by jedit(this was the case when debugging some zope publisher kernel modules)+ Bugs item #957701 : make a jpydebug entry inside the pluggin menus.JpyDbg V 0.0.6 Fixes and enhancements March 28th 2004 :+ Remote Tmp PYTHONPATH is not cleaned correctly when leaving the remote debugging session+ moving .py.xml to the .jedit user home directory in order not to polutepython source location place+ replacing python console textfield by JEdit HistoryTextField+ Intensive bug fixing around the multimodule debug featureusing the zope kernel as debugging benchmark sourceJpyDbg V 0.0.5 Fixes and enhancements February 13rd 2004 :+ V4.2 Dynamic Loading compliant+ provide a python syntax tree using JEdit sidekick+ Checking python source syntax on Save JEdit event+ configuration debugger's options sizing problem+ stdout pane strange flicking when used intensively+ check importing local python module(No Bug found on this topic)+ when debugging is active with a current debug line set ,setting a breakpoint on a line located on a different page than the onecontaining the current debugger line will reset the position to the currentdebugging line ... this is not natural we should prevent the borying Goto currentline positionning then+ stepping over captured exception does not stop inside the exception management code even if captured.Then the browser will be populated by an exception event ... confusing again :stepping into or over Exception raising managed code is BUGGY+ Cross module calling do not position the current line on foreign callee when debug into is requested(=> manual source positionning is requested)a step into , in order to stop user needs to set an explicit breakpoint+ REGRESSION : simple syntax error on command line stop the debug session(Exception capture)+ sourceforge REQID 888108 :Incorrect working directory when executing code When executing an application, the current working directory should be that of the application being run. Unfortunately it is not, and causes problems for code accessing files via relative file paths + Misc bug fixing inside jpydaemon.py debug class+ Breakpoint cleaning do not completely clean a previously set breakpointJpyDbg V 0.0.4 FIXES and ENHANCEMENTS December 13rd 2003 :+ Documentation enhancements+ REQID 842622 : WIN33 space characters not supported in pathname + NameError Exception badly handled by jpydbg Daemon fixed+ provide a window cleanup popup menu the python shell window cleanup+ provide a 'remote debugging' functionality start button which puts the frontend in waiting for remote debugging connection+ provide color chooser for the python shell window foreground,backgrounds and font choices+ remote debugging enhancements+ variable value changes need to be made available during the debugging session+ improve the robustness of the server side python jpydaemon moduleJpyDbg V 0.0.3 FIXES+ Pluggin is OK with 4.0 or 4.1 version of jEdit but the version 4.2 pre 6 generates following exception when the startdebugging button is pressed, this error prevents later debugging to take place. This problem is due to changes insidethe 4.2 JEditTextArea class , which is not compatible anymore with 4.0 or 4.1[error] Thread-7: java.lang.NoSuchMethodError: org.gjt.sp.jedit.textarea.JEditTextArea.getFoldVisibilityManager()Lorg/gjt/sp/jedit/textarea/FoldVisibilityManager;[error] Thread-7:  at org.jymc.jpydebug.jedit.BreakpointHighlight.ensureVisibleLineFold(BreakpointHighlight.java:217)[error] Thread-7:  at org.jymc.jpydebug.jedit.BreakpointHighlight.setCurrentLine(BreakpointHighlight.java:226)[error] Thread-7:  at org.jymc.jpydebug.jedit.PythonBuffer.manageBreakPoint(PythonBuffer.java:112)[error] Thread-7:  at org.jymc.jpydebug.jedit.PythonJeditPanel.aTPBufferBPModifiedAtLine(PythonJeditPanel.java:103)[error] Thread-7:  at org.jymc.jpydebug.jedit.PythonJeditPanel.bufferLineIsChanged(PythonJeditPanel.java:334)[error] Thread-7:  at org.jymc.jpydebug.jedit.PythonJeditPanel.currentLineIsChanged(PythonJeditPanel.java:351)[error] Thread-7:  at org.jymc.jpydebug.jedit.PythonJeditPanel.newDebuggingEvent(PythonJeditPanel.java:414)[error] Thread-7:  at org.jymc.jpydebug.swing.ui.PythonDebugContainer$_DEBUGEVENT_MANAGER_.populateToPlugin(PythonDebugContainer.java:294)[error] Thread-7:  at org.jymc.jpydebug.swing.ui.PythonDebugContainer$_DEBUGEVENT_MANAGER_.startDebugger(PythonDebugContainer.java:315)[error] Thread-7:  at org.jymc.jpydebug.swing.ui.PythonDebugContainer$_DEBUGEVENT_MANAGER_.newDebugEvent(PythonDebugContainer.java:451)[error] Thread-7:  at org.jymc.jpydebug.PythonDebugClient.populateEvent(PythonDebugClient.java:172)[error] Thread-7:  at org.jymc.jpydebug.PythonDebugClient.access$300(PythonDebugClient.java:36)[error] Thread-7:  at org.jymc.jpydebug.PythonDebugClient$_TCP_TASK_.run(PythonDebugClient.java:146)+ Code cleanup+ When 'no python debuggee provided' switching from stdout content to variables populates a JPyDaemon SYNTAX ERROR : STACK message , setting or unsetting a BP generates the same kind of pb JpyDbg V 0.0.2 fixes :+ SystemExit Python exception was not captured correctly inside jpydaemon.py+ Management of program command line arguments need to be done+ acceptance of command line arguments inside jpydaemon.py need to be managed+ do not populate current JEdit buffer non .py sources into debuggee file area+ improve debuggee's SystemExit exception caption in jpydaemon.py+ python result containing < character generate a xml parsing severe error prevent result to be populated on client side + usability : cleanup current current commant line after current command completion+ initialization of toolbar current source position is wrong when JPyDebug is not initially loaded upfront+ debug current source + compile current source to be removed+ NullPointerException[error] Thread-98: java.lang.NullPointerException[error] Thread-98:  at org.jymc.jpydebug.jedit.PythonJeditPanel.bufferLineIsChanged(PythonJeditPanel.java:266)[error] Thread-98:  at org.jymc.jpydebug.jedit.PythonJeditPanel.currentLineIsChanged(PythonJeditPanel.java:285)[error] Thread-98:  at org.jymc.jpydebug.jedit.PythonJeditPanel.newDebuggingEvent(PythonJeditPanel.java:348)[error] Thread-98:  at org.jymc.jpydebug.swing.ui.PythonDebugContainer$_DEBUGEVENT_MANAGER_.populateToPlugin(PythonDebugContainer.java:293)[error] Thread-98:  at org.jymc.jpydebug.swing.ui.PythonDebugContainer$_DEBUGEVENT_MANAGER_.startDebugger(PythonDebugContainer.java:312)[error] Thread-98:  at org.jymc.jpydebug.swing.ui.PythonDebugContainer$_DEBUGEVENT_MANAGER_.newDebugEvent(PythonDebugContainer.java:444)[error] Thread-98:  at org.jymc.jpydebug.PythonDebugClient.populateEvent(PythonDebugClient.java:172)[error] Thread-98:  at org.jymc.jpydebug.PythonDebugClient.access$300(PythonDebugClient.java:36)[error] Thread-98:  at org.jymc.jpydebug.PythonDebugClient$_TCP_TASK_.run(PythonDebugClient.java:146)+ documentation user's guide improvements+ storing sources set breakpoints