<?xml version="1.0" encoding="UTF-8"?>
<!-- SQL user's guide -->
<!-- (C) 2001 Sergey V. Udaltsov -->
<!-- jEdit buffer-local properties: -->
<!-- :indentSize=2:noTabs=true: -->
<book xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation='http://www.docbook.org/xsd/4.4/docbook.xsd' >
  <bookinfo>
    <title>Common Controls user's guide</title>

    <copyright>
      <year>2000</year>

      <year>2001</year>

      <year>2002</year>

      <year>2003</year>

      <holder>Sergey V. Udaltsov</holder>
    </copyright>

    <legalnotice>
      <title>Legal Notice</title>

      <para>Permission is granted to copy, distribute and/or
      modify this document under the terms of the GNU Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no
      <quote>Invariant Sections</quote>

      ,
      <quote>Front-Cover Texts</quote>

      or
      <quote>Back-Cover Texts</quote>

      , each as defined in the license. A copy of the license can
      be found in the file
      <filename>COPYING.DOC.txt</filename>

      included with jEdit.</para>
    </legalnotice>
  </bookinfo>

  <chapter id="purpose">
    <title>Purpose</title>

    <para>The plugin provides some set of common controls which
    can be useful for development of various jEdit plugins. These
    are the controls
    <emphasis>not</emphasis>

    included into the jEdit distribution</para>

    <para>At the moment, the following controls are
    included:</para>

    <itemizedlist>
      <listitem>
        <para>
          <ulink url="#HelpfulJTable">HelpfulJTable</ulink>
        </para>
      </listitem>

      <listitem>
        <para>
          <ulink url="#JMouseComboBox">JMouseComboBox</ulink>
        </para>
      </listitem>

      <listitem>
        <para>
          <ulink url="#Kappalayout">Kappa and Lambda layout managers</ulink>
        </para>
      </listitem>

      <listitem>
        <para>
          <ulink url="#PathBuilder">PathBuilder</ulink>
        </para>
      </listitem>

      <listitem>
        <para>
          <ulink url="#PopupList">PopupList</ulink>
        </para>
      </listitem>

      <listitem>
        <para>
          <ulink url="#OkCancelButtons">OkCancelButtons</ulink>
        </para>
      </listitem>

      <listitem>
        <para>
          <ulink url="#CloseableTabbedPane">CloseableTabbedPane</ulink>
        </para>
      </listitem>

      <listitem>
        <para>
          <ulink url="#EasyOptionPane">EasyOptionPane</ulink>
        </para>
      </listitem>

      <listitem>
        <para>
          <ulink url="#AtomicOutputStream">AtomicOutputStream</ulink>
        </para>
      </listitem>

      <listitem>
        <para>
          <ulink url="#WorkerThreadPool">WorkerThreadPool</ulink>
        </para>
      </listitem>

      <listitem>
        <para>
          <ulink url="#SwingWorker">SwingWorker (Java 5 version)</ulink>
        </para>
      </listitem>
    </itemizedlist>

    <para>
    You can also refer to the
    <ulink url="javadoc/index.html">javadoc documentation</ulink>.
    </para>
  </chapter>

  <chapter id="descriptions">
    <title>Description of controls</title>

    <sect1 id="HelpfulJTable">
      <title>HelpfulJTable</title>

      <formalpara>
        <title>Author:</title>

        <para>
          <author>
            <firstname>Dirk</firstname>

            <surname>Moebius</surname>
          </author>
        </para>
      </formalpara>

      <para>An extension of the default Swing JTable, that passes
      action key events, displays tooltips and autoresizes
      columns.</para>

      <para>In detail, the following features are
      provided:</para>

      <itemizedlist>
        <listitem>
          <para>Fires an
          <keycode>ActionEvent</keycode>

          ,if
          <emphasis>Enter</emphasis>

          ,
          <emphasis>Tab</emphasis>

          or
          <emphasis>Shift-Tab</emphasis>

          is pressed.</para>

          <para>Therefore,
          <keycode>addActionListener(ActionListener)</keycode>

          and
          <keycode>removeActionListener(ActionListener)</keycode>

          methods are provided.</para>
        </listitem>

        <listitem>
          <para>Displays tooltips for partially visible text
          entries.</para>

          <para>To use this feature, you must use a
          <keycode>TableCellRenderer</keycode>

          that implements the methods
          <keycode>getToolTipText()</keycode>

          and/or
          <keycode>getToolTipText(MouseEvent)</keycode>

          , otherwise you won't see any tooltips.</para>
        </listitem>

        <listitem>
          <para>utoresizes all columns to the length of its
          longest content string.</para>

          <para>As a drawback, this
          <keycode>HelpfulJTable</keycode>

          can only be used to with a String cell renderer,
          nothing complicated as a JList. (Complex components may
          be used a CellEditor, however).</para>
        </listitem>
      </itemizedlist>

      <para>Only the default constructor of
      <keycode>JTable</keycode>

      is provided. Please use
      <keycode>setModel(TableModel)</keycode>

      to set another model.</para>
    </sect1>

    <sect1 id="JMouseComboBox">
      <title>JMouseComboBox</title>

      <formalpara>
        <title>Author:</title>

        <para>
          <author>
            <firstname>Dirk</firstname>

            <surname>Moebius</surname>
          </author>
        </para>
      </formalpara>

      <para>This is a combo-box that allows listeners to be
      informed of mouse entered and mouse exited events.</para>

      <para>Note that other mouse events besides MOUSE_ENTERED
      and MOUSE_EXITED still do
      <emphasis>not</emphasis>

      get delivered. This is because sending a MOUSE_PRESSED,
      MOUSE_CLICKED or MOUSE_RELEASED event would cause the combo
      box popup to be hidden immediately after it has been shown,
      resulting in that it would not be shown at all.</para>

      <para>This class was created as a fix/workaround for Swing
      bug #4144505.</para>
    </sect1>

    <sect1 id="Kappalayout">
      <title>Kappa and Lambda layout managers</title>

      <formalpara>
        <title>Author:</title>

        <para>
          <author>
            <firstname>Dale</firstname>

            <surname>Anson</surname>
          </author>
        </para>
      </formalpara>

      <formalpara>
        <title>URL:</title>

        <para>
          <ulink url="http://kappalayout.sourceforge.net/">http://kappalayout.sourceforge.net/</ulink>
        </para>
      </formalpara>


      <para>Advanced layout managers.</para>
    </sect1>

    <sect1 id="PathBuilder">
      <title>PathBuilder</title>

      <formalpara>
        <title>Author:</title>

        <para>
          <author>
            <firstname>David</firstname>

            <surname>Taylor</surname>
          </author>
        </para>
      </formalpara>

      <para>Nice panel for composing some path ($PATH or $CLASSPATH).</para>
    </sect1>

    <sect1 id="PopupList">
      <title>PopupList</title>

      <formalpara>
        <title>Author:</title>

        <para>
          <author>
            <firstname>Calvin</firstname>

            <surname>Yu</surname>
          </author>
        </para>
      </formalpara>

      <para>The control is a generic popup component that displays a list of items.</para>

      <para>Here's a list of potential uses for it:</para>

      <itemizedlist>
        <listitem>
          <para>Pop up a list of Templates to apply;</para>
        </listitem>

        <listitem>
          <para>Pop up a list of dockables to switch between, much like the fast views concept in Eclipse;</para>
        </listitem>

        <listitem>
          <para>Pop up a list of open buffers (yet another buffer switching mechanism);</para>
        </listitem>

        <listitem>
          <para>Pop up list of auto-completions.</para>
        </listitem>
      </itemizedlist>
    </sect1>
    <sect1 id="OkCancelButtons">
      <title>OkCancelButtons</title>

      <formalpara>
        <title>Author:</title>

        <para>
          <author>
            <firstname>Marcelo</firstname>
            <surname>Vanzin</surname>
          </author>
        </para>
      </formalpara>

      <para>A panel with two buttons that tie to an instance of
      jEdit's EnhancedDialog and provide a GUI for the ok() and
      cancel() methods (aside from the regular enter/esc key
      bindings). The button label are configurable (defaults to
      OK and Cancel).</para>
    </sect1>

    <sect1 id="CloseableTabbedPane">
      <title>CloseableTabbedPane</title>

      <para>
      A JTabbedPane that can have a "close" icon.  This is a Java 5 version of 
      the feature added to JTabbedPane in Java 1.6. 
      </para>
      
      <para>
        Usage is simple, use it exactly like a JTabbedPane, but add icons to the
        tabs:
      </para>
      <para>
        <programlisting>
        <![CDATA[
                import common.gui.CloseableTabbedPane;
                
                ...
                
                tabs = new CloseableTabbedPane();
                Icon close_icon = GUIUtilities.loadIcon( "closebox.gif" );
                Icon hover_icon = GUIUtilities.loadIcon( "closebox.gif" );
                Icon pressed_icon = GUIUtilities.loadIcon( "closebox.gif" );
                tabs.setCloseIcons(close_icon, hover_icon, pressed_icon);
                JPanel panel = new JPanel();
                tabs.add(panel);
        ]]>
        </programlisting>
      </para>
      <para>
        The "setCloseIcons" method has the possibility of adding separate icons 
        for 'normal', 'hover', and 'pressed' mouse events.
      </para>
      <para>
        It is also possible to specify that a tab be not closeable:
      </para>
      <para>
        <programlisting>
        <![CDATA[
                tabs = new CloseableTabbedPane();
                Icon close_icon = GUIUtilities.loadIcon( "closebox.gif" );
                tabs.setCloseIcons(close_icon, close_icon, close_icon);
                JPanel panel = new JPanel();
                panel.putClientProperty("isCloseable", Boolean.FALSE);
                tabs.add(panel);
        ]]>
        </programlisting>
        The "isCloseable" client property must be set before the component is 
        added to the tabbed pane.
      </para>
    </sect1>

    <sect1 id="EasyOptionPane">
      <title>EasyOptionPane</title>

      <formalpara>
        <title>Author:</title>

        <para>
          <author>
            <firstname>Marcelo</firstname>
            <surname>Vanzin</surname>
          </author>
        </para>
      </formalpara>

      <para>An implementation of jEdit's AbstractOptionPane that is
      easily configurable by using strings to define the component.
      Loading and saving of configuration data is handled automatically
      for the user of the class.</para>
    </sect1>

    <sect1 id="FileTextField">
      <title>FileTextField</title>

      <formalpara>
        <title>Author:</title>

        <para>
          <author>
            <firstname>Marcelo</firstname>
            <surname>Vanzin</surname>
          </author>
        </para>
      </formalpara>

      <para>A text field with an "attached" button that opens up a  File Chooser
      so the user can pick up a file or directory.</para>
    </sect1>

    <sect1 id="ModalJFileChooser">
      <title>ModalJFileChooser</title>

      <formalpara>
        <title>Author:</title>

        <para>
          <author>
            <firstname>Marcelo</firstname>
            <surname>Vanzin</surname>
          </author>
        </para>
      </formalpara>

      <para>A JFileChooser implementation that fixes an annoying problem
      with the standard Java chooser when opening it from a dialog window
      (such as the options dialogs in jEdit). This wil ensure that the
      parent of the file chooser is the dialog, so the "modal" behavior
      will be correct. It also provides a "show all files even hidden ones"
      filter.</para>
    </sect1>

    <sect1 id="AtomicOutputStream">
      <title>AtomicOutputStream</title>

      <formalpara>
        <title>Author:</title>

        <para>
          <author>
            <firstname>Marcelo</firstname>
            <surname>Vanzin</surname>
          </author>
        </para>
      </formalpara>

      <para>An output stream that uses a temporary file to write the
      data, and only overwrites the target file at close time.</para>
    </sect1>

    <sect1 id="WorkerThreadPool">
      <title>WorkerThreadPool</title>

      <formalpara>
        <title>Author:</title>

        <para>
          <author>
            <firstname>Marcelo</firstname>
            <surname>Vanzin</surname>
          </author>
        </para>
      </formalpara>

      <para>A thread pool for executing non-GUI related tasks in a separate
      thread, avoiding blocking the GUI.</para>

      <para>The pool working by adding "requests", which are instances of
      java.lang.Runnable, which are then picked up by the running worker
      threads and executed asynchronously. By adding a collection of
      requests instead of a single request the user forces the pool to
      create enough threads to handle all the requests simultaneouslty,
      so that tasks that need this functionality (such as reading from
      forked processes) can be easily run using this mechanism.</para>

      <para>Normally plugins use the "single request" add method, which
      means that only one worker thread will be created. The caller
      can force new threads to be created by first calling the class's
      "ensureCapacity(int)" method, which will guarantee that at least
      the number of requested worker threads are running.</para>

      <para>This is a simplified version of Java 5's ThreadPoolExecutor,
      and also provides a simplified version of the "Future" class
      (called "WorkRequest"). Callers can use the WorkRequest instances
      returned by the pool to control when the requests are finished.</para>

    </sect1>

    <sect1 id="SwingWorker">
      <title>SwingWorker (Java 5 version)</title>
      <para>
        This is a Java 5 version of the SwingWorker included in Java 6.  This version is a backport of the 1.6 version.
        The home page for this project is at https://swingworker.dev.java.net/.
      </para>
      <para>
 When writing a multi-threaded application using Swing, there are two constraints to keep in mind: (refer to  How to Use Threads  for more details):
      </para>
      <para>
    <itemizedlist>
      <listitem>
        <para>
    Time-consuming tasks should not be run on the Event Dispatch Thread. Otherwise the application becomes unresponsive.
        </para>
      </listitem>
      <listitem>
        <para>
    Swing components should be accessed on the Event Dispatch Thread only.
        </para>
      </listitem>
    </itemizedlist>
      </para>
      <para>
These constraints mean that a GUI application with time intensive computing needs at least two threads: 1) a thread to perform the lengthy task and 2) the Event Dispatch Thread (EDT) for all GUI-related activities. This involves inter-thread communication which can be tricky to implement.
      </para>
      <para>
SwingWorker is designed for situations where you need to have a long running task run in a background thread and provide updates to the UI either when done, or while processing. Subclasses of SwingWorker must implement the doInBackground() method to perform the background computation.
      </para>
      <para>
      See the 
    <ulink url="javadoc/common/swingworker/SwingWorker.html">SwingWorker javadoc</ulink> for details and examples.
      </para>
    </sect1>
    
  </chapter>

  <appendix id="changelog">
    <title>Change log</title>

    <itemizedlist>

      <listitem>
        <formalpara>
            <title>Version 1.1</title>
            <para />
        </formalpara>

        <para>Added CloseableTabbedPane, a Java 5 version of a Java 6 feature
        added to JTabbedPane.</para>
      </listitem>
      
      <listitem>
        <formalpara>
            <title>Version 1.0</title>
            <para />
        </formalpara>

        <para>Added a Java 5 version of SwingWorker.</para>
      </listitem>
      
      <listitem>
        <formalpara>
            <title>Version 0.9.4</title>

            <para />
        </formalpara>

        <para>Add a few new classes: EasyOptionPane, FileTextField,
        ModalJFileChooser and AtomicOutputStream.</para>
      </listitem>

      <listitem>
        <formalpara>
            <title>Version 0.9.2</title>

            <para />
        </formalpara>

        <para>Small change to pathbuilder so it uses <literal>File.getPath()</literal> instead of <literal>getCanonicalPath()</literal> filenames returned from the file browser. </para>
      </listitem>


      <listitem>
        <formalpara>
            <title>Version 0.9.0</title>

            <para />
        </formalpara>

        <para>Adds a worker thread pool, fixes jEdit 4.3 compatibility
        for PopupList.</para>
      </listitem>

      <listitem>
        <formalpara>
            <title>Version 0.8.1</title>

            <para />
        </formalpara>

        <para>Uses deferred loading with jEdit 4.2.</para>
      </listitem>

      <listitem>
        <formalpara>
          <title>Version 0.8</title>

          <para />
        </formalpara>

        <para>Some fixes and improvements in<ulink url="#HelpfulJTable">HelpfulJTable</ulink>. Now it can use the width of the headers in autoresize mode. Also, autoresizing does not exclude manual resizing any more.</para>
      </listitem>

      <listitem>
        <formalpara>
          <title>Version 0.7</title>

          <para />
        </formalpara>

        <para>The version of <ulink url="#Kappalayout">Kappa and Lambda layout managers</ulink> is updated.</para>
      </listitem>

      <listitem>
        <formalpara>
          <title>Version 0.6</title>

          <para />
        </formalpara>

        <para>More stuff in <ulink url="#PopupList">PopupList</ulink>.</para>
      </listitem>

      <listitem>
        <formalpara>
          <title>Version 0.5</title>

          <para />
        </formalpara>

        <para>Some additions to <ulink url="#PopupList">PopupList</ulink>.</para>
      </listitem>

      <listitem>
        <formalpara>
          <title>Version 0.4</title>

          <para />
        </formalpara>

        <para><ulink url="#PopupList">PopupList</ulink> added</para>
      </listitem>

      <listitem>
        <formalpara>
          <title>Version 0.3</title>

          <para />
        </formalpara>

        <para><ulink url="#Kappalayout">Kappa and Lambda layout managers</ulink> added</para>
      </listitem>

      <listitem>
        <formalpara>
          <title>Version 0.2</title>

          <para />
        </formalpara>

        <para><ulink url="#PathBuilder">PathBuilder</ulink> package added</para>
      </listitem>

      <listitem>
        <formalpara>
          <title>Version 0.1</title>

          <para />
        </formalpara>

        <para>First release.</para>
      </listitem>
    </itemizedlist>
  </appendix>
</book>


