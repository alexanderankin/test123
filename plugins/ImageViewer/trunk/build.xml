<project name="ImageViewer" default="dist" basedir=".">
    <!-- $Id: build.xml 1216 2006-01-05 18:45:35Z daleanson $ -->

    <!-- read build.props to override properties set below -->
    <property file="build.properties"/>
    <property file="../../build.properties"/>
    <property name="compiler.target" value="1.5"/>
    <property name="compiler.source" value="1.5"/>

    <!-- default location of jedit.jar -->
    <property name="jedit.install.dir"  value="../.."/>

    <!-- jar name -->
    <property name="jar.name" value="ImageViewer.jar"/>

    <!-- version number -->
    <property name="build.num" value="1.1"/>

    <!-- where to put the finished plugin -->
    <property name="install.dir" value=".." />
    
    <property name="compiler.target" value="1.5" />
    <property name="compiler.source" value="1.5" />
    
    <!-- where plugin dependencies are -->
    <property name="jedit.plugins.dir" value="${install.dir}" />

    <!-- source code directory, this is where the .java files live -->
    <property name="src.dir" location="src" />

    <!-- configuration directory, this is where the configuration files for the
      plugin are stored. -->
    <property name="config.dir" location="." />

    <!-- documentation directory, this is where the plugin documentation
      files live. Files in this directory will be distributed with the plugin. -->
    <property name="doc.dir" location="${src.dir}/docs" />

    <!-- the directory for the compiled classes. Files in this directory will be
      included in the finished jar file. -->
    <property name="classes.dir" location="classes" />

    <condition property="can.reload.plugins">
        <and>
            <available classname="org.gjt.sp.jedit.jEdit"/>
            <available classname="ReloadPluginTask"/>
        </and>
    </condition>

   <!-- ========================================================================
      Target: set classpath
   ========================================================================= -->
   <target name="setClasspath">
      <path id="classpathref">
         <!-- required locations/jars -->
         <pathelement location="${classes.dir}" />
         <pathelement path="${java.class.path}"/>

         <!-- required for jEdit plugin -->
         <pathelement location="${jedit.install.dir}/jedit.jar" />

         <!-- dependencies -->
            <pathelement location="${jedit.plugins.dir}/ProjectViewer.jar"/>
      </path>
   </target>

   <!-- ========================================================================
      Target: compile
   ========================================================================= -->
    <target name="compile"
            description="Compile"
            depends="init,setClasspath">
        <javac deprecation="on"
               debug="on"
               nowarn="on"
               destdir="${classes.dir}"
               srcdir="${src.dir}"
               source="${compiler.source}"
               target="${compiler.target}"
               bootclasspath="${compiler.bootclasspath}"
               extdirs="$(compiler.extdirs}"
               >
            <classpath refid="classpathref" />
        </javac>
        <copy file="${src.dir}/docs/index.html" todir="${doc.dir}"/>
    </target>

   <!-- ========================================================================
      Target: dist
      creates jar file suitable for dropping into jEdit, and puts it up one
      directory level
   ========================================================================= -->
    <target name="dist"
            description="Compiles, jars, puts the jar in the jEdit jars directory."
            depends="clean, init, compile, jar"/>

    <target name="jar">
        <!-- make the plugin jar file -->
        <tstamp/>
        <jar jarfile="${install.dir}/${jar.name}">
            <manifest>
                <attribute name="AppName" value="ImageViewer" />
                <attribute name="AppVersion" value="${build.num}" />
                <attribute name="Author" value="Dale Anson" />
                <attribute name="Created-By" value="${user.name}" />
                <attribute name="Created-On" value="${TODAY}"/>
            </manifest>

            <!-- include everything in the build directory -->
            <fileset dir="${classes.dir}">
                <include name="**/*" />
            </fileset>

            <!-- include certain files from the config directory -->
            <fileset dir="${config.dir}">
                <include name="lang_*.properties" />
                <include name="actions.xml" />
                <include name="browser.actions.xml" />
                <include name="description.html" />
                <include name="dockables.xml" />
                <include name="ImageViewer.props" />
                <include name="services.xml" />
            </fileset>

            <!-- include everything in the doc directory -->
            <fileset dir="${doc.dir}">
                <include name="**/*" />
            </fileset>
        </jar>

        <antcall target="reload"/>

    </target>

    <target name="reload" if="can.reload.plugins">
        <echo>Reloading ${install.dir}/${ant.project.name}.jar</echo>
        <taskdef name="reloadPlugin" classname="ReloadPluginTask"/>
        <reloadPlugin jarfile="${install.dir}/${jar.name}"/>
    </target>


   <!-- ========================================================================
      Target: clean
      deletes all files from the build directory
   ========================================================================= -->
   <target name="clean" description="Delete all files from the classes directory.">
      <delete dir="${classes.dir}" />
   </target>

   <!-- ========================================================================
      Target: init
      this target creates the directories needed for this project and
      only needs to be done once.
   ========================================================================= -->
    <target name="init"
            description="Create directory structure.">
        <fail unless="jedit.install.dir" message="Please set jedit.install.dir property."/>
        <mkdir dir="${classes.dir}" />
    </target>

</project>
