<?xml version="1.0" encoding="UTF-8"?>
<!-- :xml.enable-schema-mapping=false: -->
<!-- automatically extracted from nxml-mode@20041004 using trang -->
<grammar xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns:this="http://thaiopensource.com/ns/locating-rules/1.0" ns="http://thaiopensource.com/ns/locating-rules/1.0" xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <start>
    <ref name="locatingRules"/>
  </start>
  <define name="locatingRules">
    <element name="locatingRules">
      <ref name="common"/>
      <zeroOrMore>
        <ref name="rule"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="rule">
    <choice>
      <ref name="include"/>
      <!-- | group -->
      <ref name="applyFollowingRules"/>
      <ref name="documentElement"/>
      <!-- | doctypePublicId -->
      <ref name="namespace"/>
      <ref name="uri"/>
      <ref name="transformURI"/>
      <!-- | typeIdProcessingInstruction -->
      <ref name="default"/>
      <ref name="typeId"/>
      <!-- | typeIdBase -->
      <ref name="extensionRule"/>
    </choice>
  </define>
  <define name="group">
    <a:documentation>Group of rules. Useful with xml:base.</a:documentation>
    <element name="group">
      <ref name="common"/>
      <zeroOrMore>
        <ref name="rule"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="include">
    <element name="include">
      <ref name="common"/>
      <attribute name="rules">
        <data type="anyURI"/>
      </attribute>
    </element>
  </define>
  <define name="applyFollowingRules">
    <element name="applyFollowingRules">
      <ref name="common"/>
      <attribute name="ruleType">
        <choice>
          <value>documentElement</value>
          <value>doctypePublicId</value>
          <value>namespace</value>
          <value>uri</value>
          <value>transformURI</value>
          <value>typeIdProcessingInstruction</value>
          <value>default</value>
        </choice>
      </attribute>
    </element>
  </define>
  <define name="documentElement">
    <element name="documentElement">
      <a:documentation>Matches if the prefix and/or local name of document element
match the values of the prefix and localName attributes.</a:documentation>
      <ref name="common"/>
      <ref name="nameAtts"/>
      <ref name="targetAtt"/>
    </element>
  </define>
  <define name="nameAtts">
    <a:documentation>If there's no prefix attribute, then only the local name must match.
If there's no local name attribute, then only the prefix must match.</a:documentation>
    <choice>
      <group>
        <ref name="prefixAtt"/>
        <optional>
          <ref name="localNameAtt"/>
        </optional>
      </group>
      <ref name="localNameAtt"/>
    </choice>
  </define>
  <define name="prefixAtt">
    <a:documentation>prefix="" matches if the document element has no prefix.</a:documentation>
    <attribute name="prefix">
      <choice>
        <data type="NCName">
          <except>
            <value>xmlns</value>
          </except>
        </data>
        <value/>
      </choice>
    </attribute>
  </define>
  <define name="localNameAtt">
    <attribute name="localName">
      <data type="NCName">
        <except>
          <value>xmlns</value>
        </except>
      </data>
    </attribute>
  </define>
  <define name="doctypePublicId">
    <element name="doctypePublicId">
      <a:documentation>Matches if the document has a DOCTYPE declaration with a public
identifier that, after normalization, matches the value of the
publicId attribute.</a:documentation>
      <ref name="common"/>
      <attribute name="publicId">
        <ref name="publicIdValue"/>
      </attribute>
      <ref name="targetAtt"/>
    </element>
  </define>
  <define name="publicIdValue">
    <data type="token">
      <param name="pattern">[\-'()+,./:=?;!*#@$_%a-zA-Z0-9 ]*</param>
      <a:documentation>Newline and tab are excluded, because pattern applies to
the post-normalization value.</a:documentation>
    </data>
  </define>
  <!--
    This is separate from documentElement so it can be distinguished
    by applyFollowingRules.
  -->
  <define name="namespace">
    <element name="namespace">
      <a:documentation>Matches if the document element has a namespace URI equal to the value
of the ns attribute.  A document element with no namespace matches if
the value of the ns attribute is the empty string.</a:documentation>
      <ref name="common"/>
      <attribute name="ns">
        <data type="string"/>
      </attribute>
      <ref name="targetAtt"/>
    </element>
  </define>
  <define name="uri">
    <element name="uri">
      <a:documentation>Matches based on the URI of the document.</a:documentation>
      <ref name="common"/>
      <choice>
        <ref name="resourceAtt"/>
        <ref name="patternAtt"/>
      </choice>
      <ref name="targetAtt"/>
    </element>
  </define>
  <define name="resourceAtt">
    <a:documentation>Matches if it can be determined that the document resource is
the same resource as that identified by the value of the resource
attribute.  In determining this, the implementation should apply
the semantics of the URI scheme used by the URI.</a:documentation>
    <attribute name="resource">
      <data type="anyURI"/>
    </attribute>
  </define>
  <define name="patternAtt">
    <a:documentation>Matches if the document's URI matches the pattern specified
by the pattern attribute.  A * in the path component matches
zero or more characters other than / (after resolving escapes).
If the pattern is a relative URI, it means that there must
be some URI such that when the pattern is resolved relative
to that URI, it matches the document's URI. Thus an empty
pattern will always match.</a:documentation>
    <attribute name="pattern">
      <ref name="uriPattern"/>
    </attribute>
  </define>
  <define name="uriPattern">
    <a:documentation>A pattern for a URI. Same syntax as a URI, except that a * in
the path component has a special meaning.</a:documentation>
    <data type="anyURI"/>
  </define>
  <define name="transformURI">
    <element name="transformURI">
      <a:documentation>Generates a URI for the related resource by transforming
the URI of the document. Matches if the transformation
yields a valid URI that identifies an existing resource.</a:documentation>
      <ref name="common"/>
      <attribute name="fromPattern">
        <a:documentation>Semantics are the same as the pattern attribute of the uri element.</a:documentation>
        <ref name="uriPattern"/>
      </attribute>
      <attribute name="toPattern">
        <a:documentation>The result of the transformation is produced from the toPattern
by replacing each * by the string that matched the corresponding
* in the toPattern.  The toPattern is appended to the initial
part of the document's URI that was not explicitly matched
by fromPattern.</a:documentation>
        <ref name="uriPattern"/>
      </attribute>
    </element>
  </define>
  <define name="default">
    <element name="default">
      <a:documentation>Always matches.</a:documentation>
      <ref name="common"/>
      <ref name="targetAtt"/>
    </element>
  </define>
  <define name="targetAtt">
    <a:documentation>A document can be mapped onto a URI either indirectly via a typeId
or directly.</a:documentation>
    <choice>
      <ref name="uriAtt"/>
      <ref name="typeIdAtt"/>
    </choice>
  </define>
  <define name="uriAtt">
    <a:documentation>Specifies the URI of the related resource.
xml:base is used if it's relative.</a:documentation>
    <attribute name="uri">
      <data type="anyURI"/>
    </attribute>
  </define>
  <define name="typeIdAtt">
    <a:documentation>Specifies an identifier of the type of document. typeId and
typeIdBase rules will be used to map this to a URI.</a:documentation>
    <attribute name="typeId">
      <ref name="typeIdValue"/>
    </attribute>
  </define>
  <define name="typeIdValue">
    <a:documentation>A type identifier can be anything convenient (e.g. a public identifier,
a URL or just a string with no formal structure).  Whitespace is
normalized like a public identifier before comparing type identifiers
for equality.</a:documentation>
    <data type="token"/>
  </define>
  <define name="typeIdProcessingInstruction">
    <element name="typeIdProcessingInstruction">
      <a:documentation>Matches if there's a processing instruction in the prolog
before any DOCTYPE declaration whose target is the value of
the target attribute.  The value of the processing instruction
is interpreted as a typeId, which will be mapped to a
URI as normal.</a:documentation>
      <ref name="common"/>
      <attribute name="target">
        <data type="NCName"/>
      </attribute>
    </element>
  </define>
  <define name="typeId">
    <element name="typeId">
      <a:documentation>Maps a typeId onto a URI.</a:documentation>
      <ref name="common"/>
      <attribute name="id">
        <ref name="typeIdValue"/>
      </attribute>
      <ref name="targetAtt"/>
    </element>
  </define>
  <define name="typeIdBase">
    <element name="typeIdBase">
      <a:documentation>Used to map a typeId onto a URI. First, any URI reserved characters
are URI encoded. If the append attribute is specified, it is appended.
This is then treated as a URI. If relative, it is resolved using
the applicable base URI as usual.  If the resulting URI identifies
an existing resource, then the typeId is mapped to this resource.
This is intended to be useful with file URIs.</a:documentation>
      <ref name="common"/>
      <optional>
        <attribute name="append">
          <data type="string"/>
        </attribute>
      </optional>
    </element>
  </define>
  <define name="extensionRule">
    <element>
      <anyName>
        <except>
          <nsName/>
        </except>
      </anyName>
      <zeroOrMore>
        <attribute>
          <anyName/>
        </attribute>
      </zeroOrMore>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="anyElement"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="anyElement">
    <element>
      <anyName/>
      <zeroOrMore>
        <attribute>
          <anyName/>
        </attribute>
      </zeroOrMore>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="anyElement"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="common">
    <zeroOrMore>
      <!-- attribute xml:base { xsd:anyURI }?, -->
      <attribute>
        <anyName>
          <except>
            <name>xml:base</name>
            <nsName/>
            <nsName ns=""/>
          </except>
        </anyName>
      </attribute>
    </zeroOrMore>
  </define>
</grammar>
