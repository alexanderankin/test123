/* Generated By:JJTree: Do not edit this line. ASTExpressionStatement.java */



package sidekick.ecmascript.parser;

import java.util.*;


public class ASTExpressionStatement extends SimpleNode {

    public ASTExpressionStatement( int id ) {
        super( id );
    }

    public ASTExpressionStatement( EcmaScript p, int id ) {
        super( p, id );
    }

    /** Accept the visitor. **/
    public Object jjtAccept( EcmaScriptVisitor visitor, Object data ) {
        return visitor.visit( this, data );
    }

    public List getChildren() {
        if ( children != null ) {
            List kids = Arrays.asList(children);
            return kids.subList(0, kids.size());
        }
        else {
            return null;
        }
    }

    public String toString() {
        boolean b = System.getProperty( "sidekick.ecmascript.general.allNodes", "false" ).startsWith("t");
        if (b) {
            return super.toString();
        }

        try {
            if ( jjtGetChild( 0 ).jjtGetChild( 0 ) instanceof ASTCompositeReference ) {
                String name = ( ( ASTCompositeReference ) jjtGetChild( 0 ).jjtGetChild( 0 ) ).getCompositeName();
                return name == null ? super.toString() : name;
            }
            return super.toString();
        }
        catch ( Exception e ) {
            return "";
        }
    }

}
