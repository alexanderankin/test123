/* Generated By:JJTree&JavaCC: Do not edit this line. EcmaScriptConstants.java */
package sidekick.ecmascript.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface EcmaScriptConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITE_SPACE = 1;
  /** RegularExpression Id. */
  int TAB = 2;
  /** RegularExpression Id. */
  int VT = 3;
  /** RegularExpression Id. */
  int FF = 4;
  /** RegularExpression Id. */
  int SP = 5;
  /** RegularExpression Id. */
  int NBSP = 6;
  /** RegularExpression Id. */
  int USP = 7;
  /** RegularExpression Id. */
  int LINE_TERMINATOR = 8;
  /** RegularExpression Id. */
  int LF = 9;
  /** RegularExpression Id. */
  int CR = 10;
  /** RegularExpression Id. */
  int LS = 11;
  /** RegularExpression Id. */
  int PS = 12;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 16;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 17;
  /** RegularExpression Id. */
  int JSP_TAG = 18;
  /** RegularExpression Id. */
  int BREAK = 20;
  /** RegularExpression Id. */
  int CONTINUE = 21;
  /** RegularExpression Id. */
  int DELETE = 22;
  /** RegularExpression Id. */
  int ELSE = 23;
  /** RegularExpression Id. */
  int FOR = 24;
  /** RegularExpression Id. */
  int FUNCTION = 25;
  /** RegularExpression Id. */
  int IF = 26;
  /** RegularExpression Id. */
  int IN = 27;
  /** RegularExpression Id. */
  int NEW = 28;
  /** RegularExpression Id. */
  int RETURN = 29;
  /** RegularExpression Id. */
  int THIS = 30;
  /** RegularExpression Id. */
  int TYPEOF = 31;
  /** RegularExpression Id. */
  int VAR = 32;
  /** RegularExpression Id. */
  int VOID = 33;
  /** RegularExpression Id. */
  int WHILE = 34;
  /** RegularExpression Id. */
  int WITH = 35;
  /** RegularExpression Id. */
  int CASE = 36;
  /** RegularExpression Id. */
  int CATCH = 37;
  /** RegularExpression Id. */
  int CLASS = 38;
  /** RegularExpression Id. */
  int CONST = 39;
  /** RegularExpression Id. */
  int DEBUGGER = 40;
  /** RegularExpression Id. */
  int _DEFAULT = 41;
  /** RegularExpression Id. */
  int DO = 42;
  /** RegularExpression Id. */
  int ENUM = 43;
  /** RegularExpression Id. */
  int EXPORT = 44;
  /** RegularExpression Id. */
  int EXTENDS = 45;
  /** RegularExpression Id. */
  int FINALLY = 46;
  /** RegularExpression Id. */
  int IMPORT = 47;
  /** RegularExpression Id. */
  int SUPER = 48;
  /** RegularExpression Id. */
  int SWITCH = 49;
  /** RegularExpression Id. */
  int THROW = 50;
  /** RegularExpression Id. */
  int TRY = 51;
  /** RegularExpression Id. */
  int LBRACE = 52;
  /** RegularExpression Id. */
  int RBRACE = 53;
  /** RegularExpression Id. */
  int LPAREN = 54;
  /** RegularExpression Id. */
  int RPAREN = 55;
  /** RegularExpression Id. */
  int LBRACKET = 56;
  /** RegularExpression Id. */
  int RBRACKET = 57;
  /** RegularExpression Id. */
  int DOT = 58;
  /** RegularExpression Id. */
  int SEMICOLON = 59;
  /** RegularExpression Id. */
  int COMMA = 60;
  /** RegularExpression Id. */
  int LT = 61;
  /** RegularExpression Id. */
  int GT = 62;
  /** RegularExpression Id. */
  int LE = 63;
  /** RegularExpression Id. */
  int GE = 64;
  /** RegularExpression Id. */
  int EQ = 65;
  /** RegularExpression Id. */
  int NE = 66;
  /** RegularExpression Id. */
  int SEQ = 67;
  /** RegularExpression Id. */
  int SNEQ = 68;
  /** RegularExpression Id. */
  int PLUS = 69;
  /** RegularExpression Id. */
  int MINUS = 70;
  /** RegularExpression Id. */
  int STAR = 71;
  /** RegularExpression Id. */
  int REM = 72;
  /** RegularExpression Id. */
  int INCR = 73;
  /** RegularExpression Id. */
  int DECR = 74;
  /** RegularExpression Id. */
  int LSHIFT = 75;
  /** RegularExpression Id. */
  int RSHIFT = 76;
  /** RegularExpression Id. */
  int RUNSHIFT = 77;
  /** RegularExpression Id. */
  int BIT_AND = 78;
  /** RegularExpression Id. */
  int BIT_OR = 79;
  /** RegularExpression Id. */
  int XOR = 80;
  /** RegularExpression Id. */
  int BANG = 81;
  /** RegularExpression Id. */
  int TILDE = 82;
  /** RegularExpression Id. */
  int SC_AND = 83;
  /** RegularExpression Id. */
  int SC_OR = 84;
  /** RegularExpression Id. */
  int HOOK = 85;
  /** RegularExpression Id. */
  int COLON = 86;
  /** RegularExpression Id. */
  int ASSIGN = 87;
  /** RegularExpression Id. */
  int PLUSASSIGN = 88;
  /** RegularExpression Id. */
  int MINUSASSIGN = 89;
  /** RegularExpression Id. */
  int STARASSIGN = 90;
  /** RegularExpression Id. */
  int REMASSIGN = 91;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 92;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 93;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 94;
  /** RegularExpression Id. */
  int ANDASSIGN = 95;
  /** RegularExpression Id. */
  int ORASSIGN = 96;
  /** RegularExpression Id. */
  int XORASSIGN = 97;
  /** RegularExpression Id. */
  int INTANCE_OF = 98;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 99;
  /** RegularExpression Id. */
  int NON_ZERO_DIGIT = 100;
  /** RegularExpression Id. */
  int EXPONENT_PART = 101;
  /** RegularExpression Id. */
  int DECIMAL_INTEGER_LITERAL = 102;
  /** RegularExpression Id. */
  int HEX_INTEGER_LITERAL = 103;
  /** RegularExpression Id. */
  int DECIMAL_DIGITS = 104;
  /** RegularExpression Id. */
  int DECIMAL_DIGIT = 105;
  /** RegularExpression Id. */
  int NULL_LITERAL = 106;
  /** RegularExpression Id. */
  int BOOLEAN_LITERAL = 107;
  /** RegularExpression Id. */
  int STRING_LITERAL = 108;
  /** RegularExpression Id. */
  int DOUBLE_STRING_CHARACTERS = 109;
  /** RegularExpression Id. */
  int SINGLE_STRING_CHARACTERS = 110;
  /** RegularExpression Id. */
  int DOUBLE_STRING_CHARACTER = 111;
  /** RegularExpression Id. */
  int SINGLE_STRING_CHARACTER = 112;
  /** RegularExpression Id. */
  int ESCAPE_SEQUENCE = 113;
  /** RegularExpression Id. */
  int CHARACTER_ESCAPE_SEQUENCE = 114;
  /** RegularExpression Id. */
  int SINGLE_ESCAPE_CHARACTER = 115;
  /** RegularExpression Id. */
  int NON_ESCAPE_CHARACTER = 116;
  /** RegularExpression Id. */
  int HEX_ESCAPE_SEQUENCE = 117;
  /** RegularExpression Id. */
  int IDENTIFIER_NAME = 118;
  /** RegularExpression Id. */
  int IDENTIFIER_START = 119;
  /** RegularExpression Id. */
  int IDENTIFIER_PART = 120;
  /** RegularExpression Id. */
  int DOLLAR_SIGN = 121;
  /** RegularExpression Id. */
  int UNDER_SCORE = 122;
  /** RegularExpression Id. */
  int UNICODE_LETTER = 123;
  /** RegularExpression Id. */
  int UNICODE_COMBINING_MARK = 124;
  /** RegularExpression Id. */
  int MC = 125;
  /** RegularExpression Id. */
  int MN = 126;
  /** RegularExpression Id. */
  int UNICODE_DIGIT = 127;
  /** RegularExpression Id. */
  int UNICODE_CONNECTOR_PUNCTUATION = 128;
  /** RegularExpression Id. */
  int UNICODE_ESCAPE_SEQUENCE = 129;
  /** RegularExpression Id. */
  int HEX_DIGIT = 130;
  /** RegularExpression Id. */
  int SLASHASSIGN = 131;
  /** RegularExpression Id. */
  int SLASH = 132;
  /** RegularExpression Id. */
  int REGULAR_EXPRESSION_LITERAL = 133;
  /** RegularExpression Id. */
  int BACKSLASH_SEQUENCE = 134;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_REGEX = 1;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 2;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 3;
  /** Lexical state. */
  int IN_JSP_TAG = 4;
  /** Lexical state. */
  int IN_PATTERN = 5;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITE_SPACE>",
    "<TAB>",
    "\"\\u000b\"",
    "<FF>",
    "<SP>",
    "\"\\u00a0\"",
    "<USP>",
    "<LINE_TERMINATOR>",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\u2028\"",
    "\"\\u2029\"",
    "\"//\"",
    "\"/*\"",
    "\"<%\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"%>\"",
    "<token of kind 19>",
    "\"break\"",
    "\"continue\"",
    "\"delete\"",
    "\"else\"",
    "\"for\"",
    "\"function\"",
    "\"if\"",
    "\"in\"",
    "\"new\"",
    "\"return\"",
    "\"this\"",
    "\"typeof\"",
    "\"var\"",
    "\"void\"",
    "\"while\"",
    "\"with\"",
    "\"case\"",
    "\"catch\"",
    "\"class\"",
    "\"const\"",
    "\"debugger\"",
    "\"default\"",
    "\"do\"",
    "\"enum\"",
    "\"export\"",
    "\"extends\"",
    "\"finally\"",
    "\"import\"",
    "\"super\"",
    "\"switch\"",
    "\"throw\"",
    "\"try\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\";\"",
    "\",\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"===\"",
    "\"!==\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"%\"",
    "\"++\"",
    "\"--\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"!\"",
    "\"~\"",
    "\"&&\"",
    "\"||\"",
    "\"?\"",
    "\":\"",
    "\"=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"instanceof\"",
    "<DECIMAL_LITERAL>",
    "<NON_ZERO_DIGIT>",
    "<EXPONENT_PART>",
    "<DECIMAL_INTEGER_LITERAL>",
    "<HEX_INTEGER_LITERAL>",
    "<DECIMAL_DIGITS>",
    "<DECIMAL_DIGIT>",
    "\"null\"",
    "<BOOLEAN_LITERAL>",
    "<STRING_LITERAL>",
    "<DOUBLE_STRING_CHARACTERS>",
    "<SINGLE_STRING_CHARACTERS>",
    "<DOUBLE_STRING_CHARACTER>",
    "<SINGLE_STRING_CHARACTER>",
    "<ESCAPE_SEQUENCE>",
    "<CHARACTER_ESCAPE_SEQUENCE>",
    "<SINGLE_ESCAPE_CHARACTER>",
    "<NON_ESCAPE_CHARACTER>",
    "<HEX_ESCAPE_SEQUENCE>",
    "<IDENTIFIER_NAME>",
    "<IDENTIFIER_START>",
    "<IDENTIFIER_PART>",
    "\"$\"",
    "\"_\"",
    "<UNICODE_LETTER>",
    "<UNICODE_COMBINING_MARK>",
    "<MC>",
    "<MN>",
    "<UNICODE_DIGIT>",
    "<UNICODE_CONNECTOR_PUNCTUATION>",
    "<UNICODE_ESCAPE_SEQUENCE>",
    "<HEX_DIGIT>",
    "\"/=\"",
    "\"/\"",
    "<REGULAR_EXPRESSION_LITERAL>",
    "<BACKSLASH_SEQUENCE>",
  };

}
