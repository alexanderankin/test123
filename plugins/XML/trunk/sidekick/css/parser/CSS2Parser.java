/* Generated By:JavaCC: Do not edit this line. CSS2Parser.java */
package sidekick.css.parser;

import java.io.*;
import java.net.*;
import java.text.MessageFormat;
import java.util.*;
import sidekick.util.*;

public class CSS2Parser implements CSS2ParserConstants {

    private boolean _quiet = true;
    private int lineOffset = 0;

    /*
    public CSS2Parser() {
        this((CharStream) null);
    }
    */

    public Location getStartLocation(Token t) {
       if (t == null)
           return new Location(0 + lineOffset, 0);
       return new Location(t.beginLine + lineOffset, t.beginColumn);
    }

    public Location getEndLocation(Token t) {
       if (t == null)
           return new Location(0 + lineOffset, 0);
       return new Location(t.endLine + lineOffset, t.endColumn);
    }

    public CSSNode createNode(Token t) {
        if (t == null) {
            return new CSSNode();
        }
        CSSNode node = new CSSNode(t.image);
        node.setStartLocation(getStartLocation(t));
        node.setEndLocation(getEndLocation(t));
        return node;
    }

    public void setLineOffset(int offset) {
        if (offset > 0) {
            lineOffset = offset;
        }
    }

// main entry point
//
// stylesheet
//  : [ CHARSET_SYM S* STRING S* ';' ]?
//      [S|CDO|CDC]* [ import [S|CDO|CDC]* ]*
//      [ [ ruleset | media | page | font_face ] [S|CDO|CDC]* ]*
//  ;
//
  final public CSSNode styleSheet() throws ParseException {
    CSSNode node = new CSSNode("style");
    List<CSSNode> list = null;
    list = styleSheetRuleList();
    jj_consume_token(0);
        if (list != null)
            node.addChildren(list);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public List<CSSNode> styleSheetRuleList() throws ParseException {
    List<CSSNode> list = new ArrayList<CSSNode>();
    CSSNode n = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHARSET_SYM:
      n = charsetRule();
                            if (n != null) list.add(n);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case CDO:
      case CDC:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        jj_consume_token(S);
        break;
      case CDO:
        jj_consume_token(CDO);
        break;
      case CDC:
        jj_consume_token(CDC);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_2;
      }
      n = importRule();
                                        if (n != null) list.add(n);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case CDO:
        case CDC:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          jj_consume_token(S);
          break;
        case CDO:
          jj_consume_token(CDO);
          break;
        case CDC:
          jj_consume_token(CDC);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    label_4:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case COLON:
      case ASTERISK:
      case LSQUARE:
      case HASH:
      case IDENT:
        n = styleRule();
        break;
      case MEDIA_SYM:
        n = mediaRule();
        break;
      case PAGE_SYM:
        n = pageRule();
        break;
      case FONT_FACE_SYM:
        n = fontFaceRule();
        break;
      case ATKEYWORD:
        n = unknownRule();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                 if (n != null) list.add(n);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case CDO:
        case CDC:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          jj_consume_token(S);
          break;
        case CDO:
          jj_consume_token(CDO);
          break;
        case CDC:
          jj_consume_token(CDC);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case COLON:
      case ASTERISK:
      case LSQUARE:
      case HASH:
      case IMPORT_SYM:
      case PAGE_SYM:
      case MEDIA_SYM:
      case FONT_FACE_SYM:
      case ATKEYWORD:
      case IDENT:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case COLON:
      case ASTERISK:
      case LSQUARE:
      case HASH:
      case IDENT:
        n = styleRule();
        break;
      case MEDIA_SYM:
        n = mediaRule();
        break;
      case PAGE_SYM:
        n = pageRule();
        break;
      case FONT_FACE_SYM:
        n = fontFaceRule();
        break;
      case IMPORT_SYM:
        n = importRuleIgnored();
        break;
      case ATKEYWORD:
        n = unknownRule();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                                         if (n != null) list.add(n);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case CDO:
        case CDC:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          jj_consume_token(S);
          break;
        case CDO:
          jj_consume_token(CDO);
          break;
        case CDC:
          jj_consume_token(CDC);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

//
// This is used by ASTStyleSheet.insertRule to parse a single rule
//
  final public CSSNode styleSheetRuleSingle() throws ParseException {
    CSSNode n = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHARSET_SYM:
      n = charsetRule();
      break;
    case IMPORT_SYM:
      n = importRule();
      break;
    case DOT:
    case COLON:
    case ASTERISK:
    case LSQUARE:
    case HASH:
    case IDENT:
      n = styleRule();
      break;
    case MEDIA_SYM:
      n = mediaRule();
      break;
    case PAGE_SYM:
      n = pageRule();
      break;
    case FONT_FACE_SYM:
      n = fontFaceRule();
      break;
    case ATKEYWORD:
      n = unknownRule();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode charsetRule() throws ParseException {
    Token start = null;
    Token middle = null;
    Token end = null;
    start = jj_consume_token(CHARSET_SYM);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_8;
      }
      jj_consume_token(S);
    }
    middle = jj_consume_token(STRING);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_9;
      }
      jj_consume_token(S);
    }
    end = jj_consume_token(SEMICOLON);
        String name = start.image + " " + middle.image;
        CSSNode node = new CSSNode(name);
        node.setStartLocation(getStartLocation(start));
        node.setEndLocation(getEndLocation(end));
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode unknownRule() throws ParseException {
    Token t = null;
    t = jj_consume_token(ATKEYWORD);
        CSSNode node = new CSSNode(t.image);
        node.setStartLocation(getStartLocation(t));
        node.setEndLocation(getEndLocation(t));
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

//
// import
//   : IMPORT_SYM S*
//     [STRING|URI] S* [ medium [ ',' S* medium]* ]? ';' S*
//   ;
//
  final public CSSNode importRule() throws ParseException {
    Token start = null;
    CSSNode middle = null;
    Token uri = null;
    Token end = null;
    start = jj_consume_token(IMPORT_SYM);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_10;
      }
      jj_consume_token(S);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      uri = jj_consume_token(STRING);
      break;
    case URI:
      uri = jj_consume_token(URI);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_11;
      }
      jj_consume_token(S);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      middle = mediaList();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    end = jj_consume_token(SEMICOLON);
        String name = start.image + (uri != null ? " " + uri.image : "") + (middle != null ? " " + middle.getName() : "");
        CSSNode node = new CSSNode(name);
        node.setStartLocation(getStartLocation(start));
        node.setEndLocation(getEndLocation(end));
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode importRuleIgnored() throws ParseException {
    Token start = null;
    CSSNode middle = null;
    Token uri = null;
    Token end = null;
    start = jj_consume_token(IMPORT_SYM);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_12;
      }
      jj_consume_token(S);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      uri = jj_consume_token(STRING);
      break;
    case URI:
      uri = jj_consume_token(URI);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_13;
      }
      jj_consume_token(S);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      middle = mediaList();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    end = jj_consume_token(SEMICOLON);
        String name = start.image + (uri != null ? " " + uri.image : "") + (middle != null ? " " + middle.getName() : "");
        CSSNode node = new CSSNode(name);
        node.setStartLocation(getStartLocation(start));
        node.setEndLocation(getEndLocation(end));
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

//
// media
//   : MEDIA_SYM S* medium [ ',' S* medium ]* '{' S* ruleset* '}' S*
//   ;
//
  final public CSSNode mediaRule() throws ParseException {
    Token start = null;
    CSSNode ml = null;
    List<CSSNode> mrl = null;
    Token end = null;
    start = jj_consume_token(MEDIA_SYM);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_14;
      }
      jj_consume_token(S);
    }
    ml = mediaList();
    jj_consume_token(LBRACE);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_15;
      }
      jj_consume_token(S);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case COLON:
    case ASTERISK:
    case LSQUARE:
    case HASH:
    case PAGE_SYM:
    case ATKEYWORD:
    case IDENT:
      mrl = mediaRuleList();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    end = jj_consume_token(RBRACE);
        String name = start.image + (ml != null ? " " + ml.getName() : "");
        CSSNode node = new CSSNode(name);
        if (mrl != null) {
            node.addChildren(mrl);
        }
        node.setStartLocation(getStartLocation(start));
        node.setEndLocation(getEndLocation(end));
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

// tv, projector, screen, etc
  final public CSSNode mediaList() throws ParseException {
    StringBuffer sb = new StringBuffer();
    CSSNode a = null;
    CSSNode b = null;
    a = medium();
                 sb.append(a.getName());
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_16;
      }
      jj_consume_token(COMMA);
                sb.append(",");
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_17;
        }
        jj_consume_token(S);
      }
      b = medium();
                                                        sb.append(b.getName());
    }
        CSSNode node = new CSSNode(sb.toString());
        node.setStartLocation(a.getStartLocation());
        node.setEndLocation(b == null ? a.getEndLocation() : b.getEndLocation());
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public List<CSSNode> mediaRuleList() throws ParseException {
    List<CSSNode> list = new ArrayList<CSSNode>();
    CSSNode n = null;
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case COLON:
      case ASTERISK:
      case LSQUARE:
      case HASH:
      case IDENT:
        n = styleRule();
        break;
      case PAGE_SYM:
        n = pageRule();
        break;
      case ATKEYWORD:
        n = unknownRule();
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                          if (n != null) list.add(n);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_19;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case COLON:
      case ASTERISK:
      case LSQUARE:
      case HASH:
      case PAGE_SYM:
      case ATKEYWORD:
      case IDENT:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_18;
      }
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode mediaRuleSingle() throws ParseException {
    CSSNode n = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case COLON:
    case ASTERISK:
    case LSQUARE:
    case HASH:
    case IDENT:
      n = styleRule();
      break;
    case PAGE_SYM:
      n = pageRule();
      break;
    case ATKEYWORD:
      n = unknownRule();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

//
// medium
//   : IDENT S*
//   ;
//
  final public CSSNode medium() throws ParseException {
    Token t = null;
    t = jj_consume_token(IDENT);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_20;
      }
      jj_consume_token(S);
    }
    CSSNode node = new CSSNode(t.image);
    node.setStartLocation(getStartLocation(t));
    node.setEndLocation(getEndLocation(t));
    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

//
// page
//   : PAGE_SYM S* IDENT? pseudo_page? S*
//     '{' S* declaration [ ';' S* declaration ]* '}' S*
//   ;
//
  final public CSSNode pageRule() throws ParseException {
    Token start = null;
    Token ident = null;
    CSSNode pp = null;
    CSSNode decl = null;
    List<CSSNode> list = new ArrayList<CSSNode>();
    Token end = null;
    start = jj_consume_token(PAGE_SYM);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_21;
      }
      jj_consume_token(S);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
    case IDENT:
      if (jj_2_3(2)) {
        ident = jj_consume_token(IDENT);
        pp = pseudoPage();
        label_22:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[34] = jj_gen;
            break label_22;
          }
          jj_consume_token(S);
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          jj_consume_token(IDENT);
          label_23:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case S:
              ;
              break;
            default:
              jj_la1[35] = jj_gen;
              break label_23;
            }
            jj_consume_token(S);
          }
          break;
        case COLON:
          pp = pseudoPage();
          label_24:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case S:
              ;
              break;
            default:
              jj_la1[36] = jj_gen;
              break label_24;
            }
            jj_consume_token(S);
          }
          break;
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_25;
      }
      jj_consume_token(S);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      decl = declaration();
                           if (decl != null) list.add(decl);
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_26;
      }
      jj_consume_token(SEMICOLON);
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_27;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        decl = declaration();
                                                  if (decl != null) list.add(decl);
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
    }
    end = jj_consume_token(RBRACE);
        StringBuffer name = new StringBuffer();
        name.append(start.image);
        if (ident != null)
            name.append(" ").append(ident.image);
        if (pp != null)
            name.append(" ").append(pp.getName());
        CSSNode node = new CSSNode(name.toString());
        node.setStartLocation(getStartLocation(start));
        node.setEndLocation(getEndLocation(end));
        node.addChildren(list);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

//
// pseudoPage
//   : ':' IDENT
//   ;
//
  final public CSSNode pseudoPage() throws ParseException {
    Token t = null;
    jj_consume_token(COLON);
    t = jj_consume_token(IDENT);
    CSSNode node = createNode(t);
    node.setName(":" + node.getName());
    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

//
// font_face
//   : FONT_FACE_SYM S*
//     '{' S* declaration [ ';' S* declaration ]* '}' S*
//   ;
//
  final public CSSNode fontFaceRule() throws ParseException {
    Token start = null;
    CSSNode decl = null;
    List<CSSNode> list = new ArrayList<CSSNode>();
    Token end = null;
    start = jj_consume_token(FONT_FACE_SYM);
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_28;
      }
      jj_consume_token(S);
    }
    jj_consume_token(LBRACE);
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_29;
      }
      jj_consume_token(S);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      decl = declaration();
                           if (decl != null) list.add(decl);
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_30;
      }
      jj_consume_token(SEMICOLON);
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_31;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        decl = declaration();
                                                  if (decl != null) list.add(decl);
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
    }
    end = jj_consume_token(RBRACE);
        CSSNode node = new CSSNode(start.image);
        node.setStartLocation(getStartLocation(start));
        node.setEndLocation(getEndLocation(end));
        node.addChildren(list);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

//
// operator
//   : '/' S* | ',' S* |
//   ;
//
  final public CSSNode operator() throws ParseException {
    Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLASH:
      t = jj_consume_token(SLASH);
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[50] = jj_gen;
          break label_32;
        }
        jj_consume_token(S);
      }
      break;
    case COMMA:
      t = jj_consume_token(COMMA);
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[51] = jj_gen;
          break label_33;
        }
        jj_consume_token(S);
      }
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return createNode(t);}
    throw new Error("Missing return statement in function");
  }

//
// combinator
//   : '+' S* | '>' S* |
//   ;
//
  final public CSSNode combinator() throws ParseException {
    Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t = jj_consume_token(PLUS);
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_34;
        }
        jj_consume_token(S);
      }
      break;
    case GT:
      t = jj_consume_token(GT);
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[54] = jj_gen;
          break label_35;
        }
        jj_consume_token(S);
      }
      break;
    case S:
      jj_consume_token(S);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case GT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          t = jj_consume_token(PLUS);
          break;
        case GT:
          t = jj_consume_token(GT);
          break;
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_36:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[56] = jj_gen;
            break label_36;
          }
          jj_consume_token(S);
        }
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return createNode(t);}
    throw new Error("Missing return statement in function");
  }

//
// unary_operator
//   : '-' | '+'
//   ;
//
  final public CSSNode unaryOperator() throws ParseException {
    Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      t = jj_consume_token(MINUS);
      break;
    case PLUS:
      t = jj_consume_token(PLUS);
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return createNode(t);}
    throw new Error("Missing return statement in function");
  }

//
// property
//   : IDENT S*
//   ;
//
  final public CSSNode property() throws ParseException {
    Token t = null;
    t = jj_consume_token(IDENT);
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_37;
      }
      jj_consume_token(S);
    }
        {if (true) return createNode(t);}
    throw new Error("Missing return statement in function");
  }

//
// ruleset
//   : selector [ ',' S* selector ]*
//     '{' S* declaration [ ';' S* declaration ]* '}' S*
//   ;
//
  final public CSSNode styleRule() throws ParseException {
    CSSNode n = null;
    List<CSSNode> list = null;
    n = selectorList();
    jj_consume_token(LBRACE);
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_38;
      }
      jj_consume_token(S);
    }
    list = styleDeclaration();
    jj_consume_token(RBRACE);
        if (n == null)
            {if (true) return null;}

        if (list != null) {
            n.addChildren(list);
        }
        {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode selectorList() throws ParseException {
    List<CSSNode> list = new ArrayList<CSSNode>();
    CSSNode n = null;
    n = selector();
                   if (n != null) list.add(n);
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[62] = jj_gen;
        break label_39;
      }
      jj_consume_token(COMMA);
      label_40:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[63] = jj_gen;
          break label_40;
        }
        jj_consume_token(S);
      }
      n = selector();
                                      if (n != null) list.add(n);
    }
        if (list.isEmpty())
            {if (true) return null;}
        CSSNode start = list.get(0);
        CSSNode end = list.get(list.size() - 1);
        StringBuffer sb = new StringBuffer();
        for (Iterator it = list.iterator(); it.hasNext(); ) {
            CSSNode node = (CSSNode)it.next();
            sb.append(node.getName().trim());
            if (it.hasNext()) {
                sb.append(",");
            }
        }
        CSSNode node = new CSSNode(sb.toString());
        node.setStartLocation(start.getStartLocation());
        node.setEndLocation(end.getEndLocation());
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

//
// selector
//   : simple_selector [ combinator simple_selector ]*
//   ;
//
  final public CSSNode selector() throws ParseException {
    List<CSSNode> list = new ArrayList<CSSNode>();
    CSSNode n = null;
    n = simpleSelector();
                         list.add(n);
    label_41:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_41;
      }
      n = combinator();
                                    list.add(n);
      n = simpleSelector();
                                                                        list.add(n);
    }
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[64] = jj_gen;
        break label_42;
      }
      jj_consume_token(S);
    }
        if (list.isEmpty())
            {if (true) return null;}
        CSSNode start = list.get(0);
        CSSNode end = list.get(list.size() - 1);
        StringBuffer sb = new StringBuffer();
        for (CSSNode node : list) {
            sb.append(node.getName()).append(" ");
        }
        CSSNode node = new CSSNode(sb.toString());
        node.setStartLocation(start.getStartLocation());
        node.setEndLocation(end.getEndLocation());
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

//
// simple_selector
//   : element_name? [ HASH | class | attrib | pseudo ]* S*
//   ;
//
  final public CSSNode simpleSelector() throws ParseException {
    List<CSSNode> list = new ArrayList<CSSNode>();
    CSSNode n = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASTERISK:
    case IDENT:
      n = elementName();
                            list.add(n);
      label_43:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
        case COLON:
        case LSQUARE:
        case HASH:
          ;
          break;
        default:
          jj_la1[65] = jj_gen;
          break label_43;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HASH:
          n = hash();
                         list.add(n);
          break;
        case DOT:
          n = _class();
                           list.add(n);
          break;
        case LSQUARE:
          n = attrib();
                           list.add(n);
          break;
        case COLON:
          n = pseudo();
                           list.add(n);
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case DOT:
    case COLON:
    case LSQUARE:
    case HASH:
      label_44:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HASH:
          n = hash();
                         list.add(n);
          break;
        case DOT:
          n = _class();
                           list.add(n);
          break;
        case LSQUARE:
          n = attrib();
                           list.add(n);
          break;
        case COLON:
          n = pseudo();
                           list.add(n);
          break;
        default:
          jj_la1[67] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
        case COLON:
        case LSQUARE:
        case HASH:
          ;
          break;
        default:
          jj_la1[68] = jj_gen;
          break label_44;
        }
      }
      break;
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        if (list.isEmpty())
            {if (true) return null;}
        CSSNode start = list.get(0);
        CSSNode end = list.get(list.size() - 1);
        StringBuffer sb = new StringBuffer();
        for (CSSNode node : list) {
            sb.append(node.getName()).append(" ");
        }
        CSSNode node = new CSSNode(sb.toString());
        node.setStartLocation(start.getStartLocation());
        node.setEndLocation(end.getEndLocation());
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

//
// class
//   : '.' IDENT
//   ;
//
  final public CSSNode _class() throws ParseException {
    Token t = null;
    jj_consume_token(DOT);
    t = jj_consume_token(IDENT);
        CSSNode node = createNode(t);
        node.setName("." + node.getName());
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

//
// element_name
//   : IDENT | '*'
//   ;
//
  final public CSSNode elementName() throws ParseException {
    Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      t = jj_consume_token(IDENT);
      break;
    case ASTERISK:
      t = jj_consume_token(ASTERISK);
      break;
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return createNode(t);}
    throw new Error("Missing return statement in function");
  }

//
// attrib
//   : '[' S* IDENT S* [ [ '=' | INCLUDES | DASHMATCH ] S*
//     [ IDENT | STRING ] S* ]? ']'
//   ;
//
  final public CSSNode attrib() throws ParseException {
    Token start = null;
    Token a = null;
    Token b = null;
    Token c = null;
    Token end = null;
    start = jj_consume_token(LSQUARE);
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[71] = jj_gen;
        break label_45;
      }
      jj_consume_token(S);
    }
    a = jj_consume_token(IDENT);
    label_46:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[72] = jj_gen;
        break label_46;
      }
      jj_consume_token(S);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
    case INCLUDES:
    case DASHMATCH:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        b = jj_consume_token(EQUALS);
        break;
      case INCLUDES:
        b = jj_consume_token(INCLUDES);
        break;
      case DASHMATCH:
        b = jj_consume_token(DASHMATCH);
        break;
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_47:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[74] = jj_gen;
          break label_47;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        c = jj_consume_token(IDENT);
        break;
      case STRING:
        c = jj_consume_token(STRING);
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_48:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[76] = jj_gen;
          break label_48;
        }
        jj_consume_token(S);
      }
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
    end = jj_consume_token(RSQUARE);
        if (a != null) {
            StringBuffer name = new StringBuffer();
            name.append(a.image);
            if (b != null)
                name.append(" ").append(b.image);
            if (c != null)
                name.append(" ").append(c.image);
            CSSNode node = new CSSNode(name.toString());
            node.setStartLocation(getStartLocation(start));
            node.setEndLocation(getEndLocation(end));
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

//
// pseudo
//   : ':' [ IDENT | FUNCTION S* IDENT S* ')' ]
//   ;
//
  final public CSSNode pseudo() throws ParseException {
    Token start = null;
    Token ident = null;
    Token func = null;
    Token end = null;
    start = jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      ident = jj_consume_token(IDENT);
      break;
    case FUNCTION:
      func = jj_consume_token(FUNCTION);
      label_49:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[78] = jj_gen;
          break label_49;
        }
        jj_consume_token(S);
      }
      ident = jj_consume_token(IDENT);
      label_50:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[79] = jj_gen;
          break label_50;
        }
        jj_consume_token(S);
      }
      end = jj_consume_token(RROUND);
      break;
    default:
      jj_la1[80] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        String name = ":" + (func != null ? func.image : "") + ident.image;
        CSSNode node = new CSSNode(name);
        node.setStartLocation(getStartLocation(start));
        node.setEndLocation(end != null ? getEndLocation(end) : getEndLocation(ident));
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode hash() throws ParseException {
    Token t = null;
    t = jj_consume_token(HASH);
        {if (true) return createNode(t);}
    throw new Error("Missing return statement in function");
  }

  final public List<CSSNode> styleDeclaration() throws ParseException {
    List<CSSNode> list = new ArrayList<CSSNode>();
    CSSNode n = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      n = declaration();
                        list.add(n);
      break;
    default:
      jj_la1[81] = jj_gen;
      ;
    }
    label_51:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[82] = jj_gen;
        break label_51;
      }
      jj_consume_token(SEMICOLON);
      label_52:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[83] = jj_gen;
          break label_52;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        n = declaration();
                                               list.add(n);
        break;
      default:
        jj_la1[84] = jj_gen;
        ;
      }
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

//
// declaration
//   : property ':' S* expr prio?
//   |
//   ;
//
  final public CSSNode declaration() throws ParseException {
    CSSNode prop = null;
    CSSNode expr = null;
    CSSNode prio = null;
    prop = property();
    jj_consume_token(COLON);
    label_53:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[85] = jj_gen;
        break label_53;
      }
      jj_consume_token(S);
    }
    expr = expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORTANT_SYM:
      prio = prio();
      break;
    default:
      jj_la1[86] = jj_gen;
      ;
    }
        String name = prop.getName() + ": " + (expr != null ? expr.getName() : "") + (prio != null ? prio.getName() : "");
        CSSNode node = new CSSNode(name);
        node.setStartLocation(prop.getStartLocation());
        node.setEndLocation(prio != null ? prio.getEndLocation() : expr != null ? expr.getEndLocation() : prop.getEndLocation());
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

//
// prio
//   : IMPORTANT_SYM S*
//   ;
//
  final public CSSNode prio() throws ParseException {
    Token t = null;
    t = jj_consume_token(IMPORTANT_SYM);
    label_54:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[87] = jj_gen;
        break label_54;
      }
      jj_consume_token(S);
    }
    {if (true) return createNode(t);}
    throw new Error("Missing return statement in function");
  }

//
// expr
//   : term [ operator term ]*
//   ;
//
// TODO: Deal with the operator
//
  final public CSSNode expr() throws ParseException {
    CSSNode na = null;
    CSSNode no = null;
    CSSNode nb = null;
    StringBuffer sb = new StringBuffer();
    na = term();
                sb.append(na.getName());
    label_55:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
      case SLASH:
      case PLUS:
      case MINUS:
      case HASH:
      case STRING:
      case URI:
      case INHERIT:
      case EMS:
      case EXS:
      case LENGTH_PX:
      case LENGTH_CM:
      case LENGTH_MM:
      case LENGTH_IN:
      case LENGTH_PT:
      case LENGTH_PC:
      case ANGLE_DEG:
      case ANGLE_RAD:
      case ANGLE_GRAD:
      case TIME_MS:
      case TIME_S:
      case FREQ_HZ:
      case FREQ_KHZ:
      case DIMEN:
      case PERCENTAGE:
      case NUMBER:
      case RGB:
      case FUNCTION:
      case IDENT:
      case UNICODERANGE:
        ;
        break;
      default:
        jj_la1[88] = jj_gen;
        break label_55;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
      case SLASH:
        no = operator();
                      sb.append(no.getName());
        break;
      default:
        jj_la1[89] = jj_gen;
        ;
      }
      nb = term();
                                                             sb.append(nb.getName());
    }
        CSSNode node = new CSSNode(sb.toString());
        node.setStartLocation(na.getStartLocation());
        node.setEndLocation(nb != null ? nb.getEndLocation() : na.getEndLocation());
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

//
// term
//   : unary_operator?
//     [ NUMBER S* | PERCENTAGE S* | LENGTH S* | EMS S* | EXS S* | ANGLE S* |
//       TIME S* | FREQ S* | function ]
//   | STRING S* | IDENT S* | URI S* | RGB S* | UNICODERANGE S* | hexcolor
//   ;
//
  final public CSSNode term() throws ParseException {
    CSSNode uo = null;
    Token a = null;
    Token b = null;
    CSSNode na = null;
    CSSNode nb = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      uo = unaryOperator();
      break;
    default:
      jj_la1[90] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EMS:
    case EXS:
    case LENGTH_PX:
    case LENGTH_CM:
    case LENGTH_MM:
    case LENGTH_IN:
    case LENGTH_PT:
    case LENGTH_PC:
    case ANGLE_DEG:
    case ANGLE_RAD:
    case ANGLE_GRAD:
    case TIME_MS:
    case TIME_S:
    case FREQ_HZ:
    case FREQ_KHZ:
    case PERCENTAGE:
    case NUMBER:
    case FUNCTION:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        a = jj_consume_token(NUMBER);
        break;
      case PERCENTAGE:
        a = jj_consume_token(PERCENTAGE);
        break;
      case LENGTH_PX:
        a = jj_consume_token(LENGTH_PX);
        break;
      case LENGTH_CM:
        a = jj_consume_token(LENGTH_CM);
        break;
      case LENGTH_MM:
        a = jj_consume_token(LENGTH_MM);
        break;
      case LENGTH_IN:
        a = jj_consume_token(LENGTH_IN);
        break;
      case LENGTH_PT:
        a = jj_consume_token(LENGTH_PT);
        break;
      case LENGTH_PC:
        a = jj_consume_token(LENGTH_PC);
        break;
      case EMS:
        a = jj_consume_token(EMS);
        break;
      case EXS:
        a = jj_consume_token(EXS);
        break;
      case ANGLE_DEG:
        a = jj_consume_token(ANGLE_DEG);
        break;
      case ANGLE_RAD:
        a = jj_consume_token(ANGLE_RAD);
        break;
      case ANGLE_GRAD:
        a = jj_consume_token(ANGLE_GRAD);
        break;
      case TIME_MS:
        a = jj_consume_token(TIME_MS);
        break;
      case TIME_S:
        a = jj_consume_token(TIME_S);
        break;
      case FREQ_HZ:
        a = jj_consume_token(FREQ_HZ);
        break;
      case FREQ_KHZ:
        a = jj_consume_token(FREQ_KHZ);
        break;
      case FUNCTION:
        na = function();
        break;
      default:
        jj_la1[91] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case STRING:
      b = jj_consume_token(STRING);
      break;
    case IDENT:
      b = jj_consume_token(IDENT);
      break;
    case URI:
      b = jj_consume_token(URI);
      break;
    case UNICODERANGE:
      b = jj_consume_token(UNICODERANGE);
      break;
    case RGB:
      nb = rgb();
      break;
    case HASH:
      nb = hexcolor();
      break;
    case DIMEN:
      b = jj_consume_token(DIMEN);
      break;
    case INHERIT:
      b = jj_consume_token(INHERIT);
      break;
    default:
      jj_la1[92] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_56:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[93] = jj_gen;
        break label_56;
      }
      jj_consume_token(S);
    }
        StringBuffer name = new StringBuffer();
        if (uo != null)
            name.append(uo.getName());
        if (a != null)
            name.append(a.image);
        if (na != null)
            name.append(na.getName());
        if (b != null)
            name.append(b.image);
        if (nb != null)
            name.append(nb.getName());
        CSSNode node = new CSSNode(name.toString());
        node.setStartLocation(uo != null ? uo.getStartLocation() : a != null ? getStartLocation(a) : b != null ? getStartLocation(b) : nb != null ? nb.getStartLocation() : new Location());
        node.setEndLocation(nb != null ? nb.getEndLocation() : b != null ? getEndLocation(b) : na != null ? na.getEndLocation() : a != null ? getEndLocation(a) : new Location());
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

//
// function
//   : FUNCTION S* expr ')' S*
//   ;
//
  final public CSSNode function() throws ParseException {
    Token start = null;
    Token end = null;
    start = jj_consume_token(FUNCTION);
    label_57:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[94] = jj_gen;
        break label_57;
      }
      jj_consume_token(S);
    }
    expr();
    end = jj_consume_token(RROUND);
        String name = start.image;
        if (name.endsWith("(")) {
            name = name.substring(0, name.length() - 2);
        }
        CSSNode node = new CSSNode(name);
        node.setStartLocation(getStartLocation(start));
        node.setEndLocation(getEndLocation(end));
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

//
// rgb
//   : RGB S* expr ')' S*
//   ;
//
  final public CSSNode rgb() throws ParseException {
    Token start = null;
    Token end = null;
    start = jj_consume_token(RGB);
    label_58:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[95] = jj_gen;
        break label_58;
      }
      jj_consume_token(S);
    }
    expr();
    end = jj_consume_token(RROUND);
        CSSNode node = new CSSNode("rgb");
        node.setStartLocation(getStartLocation(start));
        node.setEndLocation(getEndLocation(end));
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

//
// hexcolor
//   : HASH S*
//   ;
//
  final public CSSNode hexcolor() throws ParseException {
    Token t = null;
    t = jj_consume_token(HASH);
        {if (true) return createNode(t);}
    throw new Error("Missing return statement in function");
  }

  void skipSelector() throws ParseException {
    Token t = getToken(1);
    while (t.kind != COMMA && t.kind != SEMICOLON && t.kind != LBRACE && t.kind != EOF ) {
        getNextToken();
        t = getToken(1);
    }
  }

  String skip() throws ParseException {
  StringBuffer sb = new StringBuffer();
  int nesting = 0;
  Token t = getToken(0);
  if (t.image != null) {
    sb.append(t.image);
  }
  do {
    t = getNextToken();
    if (t.kind == EOF)
      break;
    sb.append(t.image);
    if (t.kind == LBRACE)
      nesting++;
    else if (t.kind == RBRACE)
      nesting--;
    else if (t.kind == SEMICOLON && nesting <= 0)
      break;
  }
  while ((t.kind != RBRACE) || (nesting > 0));

  return sb.toString();
  }

  void error_skipblock() throws ParseException {
    Token t;
    int nesting = 0;
    do
    {
        t = getNextToken();
        if (t.kind == LBRACE)
        {
            nesting++;
        }
        else if (t.kind == RBRACE)
        {
            nesting--;
        }
        else if (t.kind == EOF)
        {
            break;
        }
    }
    while ((t.kind != RBRACE) || (nesting > 0));
  }

  void error_skipdecl() throws ParseException {
    int nesting = 0;
    Token t = getToken(1);
    if (t.kind == LBRACE)
    {
        error_skipblock();
    }
    else
    {
        Token oldToken = t;
        while (t.kind != SEMICOLON && t.kind != RBRACE && t.kind != EOF )
        {
            oldToken = t;
            t = getNextToken();
        }
        if (t.kind == RBRACE)
        {
            token = oldToken;
        }
    }
  }

  void error_skipAtRule() throws ParseException {
    Token t = null;
    do
    {
        t = getNextToken();
    }
    while (t.kind != SEMICOLON);
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(1)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_65()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    Token xsp;
    if (jj_3R_84()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_84()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(FONT_FACE_SYM)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(1)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_79()) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(IMPORT_SYM)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(1)) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(LSQUARE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(1)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(ATKEYWORD)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_67()) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(1)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) return true;
    }
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(HASH)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(S)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(GT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(1)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(PLUS)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(1)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(MEDIA_SYM)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(1)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(PAGE_SYM)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(1)) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_86()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  public CSS2ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[96];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x3000002,0x3000002,0x3000002,0x3000002,0xe00a0d00,0x3000002,0x3000002,0xf00a0d00,0xf00a0d00,0x3000002,0x3000002,0xf00a0d00,0x2,0x2,0x2,0x900000,0x2,0x0,0x2,0x900000,0x2,0x0,0x2,0x2,0x200a0d00,0x80,0x2,0x200a0d00,0x2,0x200a0d00,0x200a0d00,0x2,0x2,0x2,0x2,0x2,0x400,0x400,0x2,0x0,0x200,0x2,0x0,0x2,0x2,0x0,0x200,0x2,0x0,0x2,0x2,0x1080,0x2,0x2,0x12000,0x2,0x12000,0x12002,0x6000,0x2,0x2,0x80,0x2,0x2,0xa0500,0xa0500,0xa0500,0xa0500,0xa0d00,0x800,0x2,0x2,0xc008000,0x2,0x100000,0x2,0xc008000,0x2,0x2,0x0,0x0,0x200,0x2,0x0,0x2,0x0,0x2,0x987080,0x1080,0x6000,0x0,0x980000,0x2,0x2,0x2,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x1,0x0,0x0,0x0,0x0,0x1000002,0x0,0x0,0x1000002,0x1000002,0x0,0x0,0x1000003,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x1000000,0x0,0x0,0x1000002,0x0,0x0,0x1000002,0x0,0x1000002,0x1000002,0x0,0x0,0x0,0x0,0x0,0x1000000,0x1000000,0x0,0x1000000,0x0,0x0,0x1000000,0x0,0x0,0x1000000,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x1000000,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x1800000,0x1000000,0x0,0x0,0x1000000,0x0,0x4,0x0,0x9fffff8,0x0,0x0,0xb7fff0,0x9fffff8,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public CSS2Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  public CSS2Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CSS2ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public CSS2Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CSS2ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public CSS2Parser(CSS2ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CSS2ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[78];
    for (int i = 0; i < 78; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 96; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 78; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
