/* Generated By:JavaCC: Do not edit this line. CSS3Parser.java */
package sidekick.css.parser;

import java.io.*;
import java.net.*;
import java.text.MessageFormat;
import java.util.*;
import java.util.regex.*;
import sidekick.util.*;
import org.gjt.sp.jedit.jEdit;


/**
 * A CSS3 parser
 *
 * @author Philippe Le Hegaret and Sijtsche Smeman
 * @author Dale Anson, major modifications for jEdit Sidekick
 * @version Revision: 1.71 (W3C version)
 */


public class CSS3Parser implements CSS3ParserConstants {

    private List<ParseError> parseErrors = new ArrayList<ParseError>();
    private List<ParseError> parseWarnings = new ArrayList<ParseError>();
    private boolean proprietaryAsError = true;

    private static char hexdigits[] = { '0' ,'1' ,'2' ,'3' ,'4' ,'5' ,'6' ,'7' ,'8' ,'9' ,'a' ,'b' ,'c' ,'d' ,'e' ,'f' } ;

    /**
     * The line offset is used when the css to be parsed is only part of a file,
     * for example when the css is the contents of a style block contained within
     * an html document.
     * @param lineOffset The line number of the first line of the css.
     * @param columnOffset The column number of the first character of the css.
     */
    public CSS3Parser(Reader in, int lineOffset, int columnOffset){
        this(in);
        jj_input_stream.ReInit(in,lineOffset,columnOffset);
    }

    /**
     * Set the tab size on the input stream.  This should be set to the same
     * tab size as used in the buffer being parsed, otherwise, locations will
     * be off.    
     */
    public void setTabSize(int size) {
        jj_input_stream.setTabSize(size);
    }

    /**
     * @return the current tab size used by the input stream.    
     */
    public int getTabSize() {
        return jj_input_stream.getTabSize(0);
    }

    /**
     * If set to true, then a warning will be generated when proprietary
     * CSS markup is used.
     * @param b If set to true, then a warning will be generated when proprietary
     * CSS markup is used.
     */
    public void setProprietaryAsError(boolean b) {
        proprietaryAsError = b;
    }

    /**
     * Adds a parse exception to the list of parse exceptions. It is intended
     * that a complete file will be parsed and accumulate the exceptions rather
     * than quitting on the first exception.
     * @param pe A parse exception to add to the list.
     */
    private void addException(ParseException pe) {
        Range range = getExceptionLocation( pe );
        parseErrors.add(new ParseError(pe.getMessage(), range));
        //pe.printStackTrace();
    }

    private void addWarning(ParseError pe) {
        parseWarnings.add(pe);
    }

    /**
     * @return The list of parse exceptions found during parsing of a file.    
     */
    public List<ParseError> getParseErrors() {
       //System.out.println("getParserErrors, there are " + parseErrors.size() + " errors");
       return parseErrors;
    }

    public List<ParseError> getParseWarnings() {
        return parseWarnings;
    }

    // regex to extract line and colun from a ParseException message
    // ParseException message look like: "Parse error at line 116, column 5.  Encountered: }"
    private Pattern pePattern = Pattern.compile( "(.*?)(\u005c\u005cd+)(.*?)(\u005c\u005cd+)(.*?)" );

    /**
     * @return attempts to return a Location indicating the location of a parser
     * exception.  If the ParseException contains a Token reference, all is well,
     * otherwise, this method attempts to parse the message string for the
     * exception.
     */
    private Range getExceptionLocation( ParseException pe ) {
        Token t = pe.currentToken;
        if ( t != null ) {
            return  new Range( new Location( t.next.beginLine, t.next.beginColumn-1 ), new Location( t.next.endLine, t.next.endColumn ) );
        }

        // ParseException message look like: "Parse error at line 116, column 5.  Encountered: }"
        try {
            Matcher m = pePattern.matcher( pe.getMessage() );
            if ( m.matches() ) {
                String ln = m.group( 2 );
                String cn = m.group( 4 );
                int line_number = -1;
                int column_number = 0;
                if ( ln != null )
                    line_number = Integer.parseInt( ln );
                if ( cn != null )
                    column_number = Integer.parseInt( cn );
                return line_number > -1 ? new Range( new Location( line_number - 1, column_number - 1 ), new Location( line_number - 1, column_number ) ) : null;
            }
            return new Range();
        } catch ( Exception e ) {
            //e.printStackTrace();
            return new Range();
        }
    }

    public void error_skipto(int kind) {
       Token t = null;
       int i = 0;
       do {
           i++;
           if (i > 100) {
                break;
           }
           t = getNextToken();
       } while (t != null && t.kind != kind);
    }

    /**
     * @param t A token to create a location from.
     * @return A location representing the start of the token.
     */
    public Location getStartLocation(Token t) {
       if (t == null)
           return new Location(0, 0);
       return new Location(t.beginLine + 1, t.beginColumn);
    }

    /**
     * @param t A token to create a location from.
     * @return A location representing the end of the token.
     */
    public Location getEndLocation(Token t) {
       if (t == null)
           return new Location(0, 0);
       return new Location(t.endLine + 1, t.endColumn + 1);
    }

    /**
     * Creates a CSSNode from a token using the token image as the node name
     * and the token start and end for node start and end locations.
     */
    public CSSNode createNode(Token t) {
        if (t == null) {
            return new CSSNode();
        }
        CSSNode node = new CSSNode(t.image);
        node.setStartLocation(getStartLocation(t));
        node.setEndLocation(getEndLocation(t));
        return node;
    }

    /**
     * Simple check to verify that all arguments are not null.
     */
    public boolean notNull(Object... args) {
        for (Object o : args) {
            if (o == null) {
                return false;
            }
        }
        return true;
    }

    // these property names are defined in CSS3, but are supported by at most
    // one browser.
    static final String[] invalidProperties = new String[]{
        "alignment-adjust",
        "alignment-baseline",
        "backface-visibility",
        "baseline-shift",
        "bookmark-label",
        "bookmark-level",
        "bookmark-target",
        "border-image-outset",
        "border-image-repeat",
        "border-image-slice",
        "border-image-source",
        "border-image-width",
        "box-decoration-break",
        "box-flex-group",
        "box-lines",
        "color-profile",
        "column-fill",
        "crop",
        "dominant-baseline",
        "drop-initial-after-adjust",
        "drop-initial-after-align",
        "drop-initial-before-adjust",
        "drop-initial-before-align",
        "drop-initial-size",
        "drop-initial-value",
        "fit",
        "fit-position",
        "float-offset",
        "font-stretch",
        "font-size-adjust",
        "grid-columns",
        "grid-rows",
        "hanging-punctuation",
        "hyphenate-after",
        "hyphenate-before",
        "hyphenate-characters",
        "hyphenate-lines",
        "hyphenate-resource",
        "hyphens",
        "icon",
        "image-orientation",
        "image-resolution",
        "inline-box-align",
        "line-stacking",
        "line-stacking-ruby",
        "line-stacking-shift",
        "line-stacking-strategy",
        "mark",
        "mark-after",
        "mark-before",
        "marks",
        "marquee-direction",
        "marquee-play-count",
        "marquee-speed",
        "marquee-style",
        "move-to",
        "nav-down",
        "nav-index",
        "nav-left",
        "nav-right",
        "nav-up",
        "overflow-style",
        "page",
        "page-policy",
        "phonemes",
        "punctuation-trim",
        "rest",
        "rest-after",
        "rest-before",
        "rotation",
        "rotation-point",
        "ruby-align",
        "ruby-overhang",
        "ruby-position",
        "ruby-span",
        "size",
        "string-set",
        "target",
        "target-name",
        "target-new",
        "target-position",
        "text-align-last",
        "text-emphasis",
        "text-height",
        "text-outline",
        "text-wrap",
        "voice-balance",
        "voice-duration",
        "voice-pitch",
        "voice-pitch-range",
        "voice-rate",
        "voice-stress",
        "voice-volume"};

    public boolean isUnsupported(String propertyName) {
        return unsupportedPropertyNames.contains(propertyName);
    }

    public final static HashSet<String> unsupportedPropertyNames;
    static {
        unsupportedPropertyNames = new HashSet<String>();
        for (String name : invalidProperties) {
            unsupportedPropertyNames.add(name);
        }
    }


    // For testing.  Usage: java CSS3Parser < inputfile
    public static void main(String[] args) {
        try {
            CSS3Parser parser = new CSS3Parser(System.in);
            parser.styleSheet();
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }

//<DEFAULT, IN_COMMENT>
//TOKEN :
//{ /* avoid token manager error */
//   < UNKNOWN : ~[] >
//}



/*
 * The grammar for CSS2 and CSS3 starts here.
 */


/**
 * The main entry for the parser. The W3C version called this method "parserUnit".
 * I changed the name so it matches up with the older CSS2 parser.
 *
 * @exception ParseException exception during the parse
 */
  final public CSSNode styleSheet() throws ParseException {
    CSSNode rootNode = new CSSNode("style");
    CSSNode firstNode = null;
    CSSNode childNode = null;
    List<CSSNode> children = null;
    System.out.println("+++++ in stylesheet");
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HTMLSTARTTAG:
        case HTMLENDTAG:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HTMLSTARTTAG:
          jj_consume_token(HTMLSTARTTAG);
          break;
        case HTMLENDTAG:
          jj_consume_token(HTMLENDTAG);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                addException ( new ParseException (jEdit.getProperty("sidekick.css.parser.CSS3Parser.dont-html")));
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CHARSET_SYM:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        childNode = charset();
                if (childNode != null) {
                    rootNode.addChild(childNode);
                    if (firstNode == null) {
                        firstNode = childNode;
                        rootNode.setStartLocation(firstNode.getStartLocation());
                    }
                }
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case CDO:
        case CDC:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          jj_consume_token(S);
          break;
        case CDO:
          jj_consume_token(CDO);
          break;
        case CDC:
          jj_consume_token(CDC);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT_SYM:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        childNode = importDeclaration();
                if (childNode != null) {
                    rootNode.addChild(childNode);
                    if (firstNode == null) {
                        firstNode = childNode;
                        rootNode.setStartLocation(firstNode.getStartLocation());
                    }
                }
        ignoreStatement();
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAMESPACE_SYM:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        childNode = namespaceDeclaration();
                if (childNode != null) {
                    rootNode.addChild(childNode);
                    if (firstNode == null) {
                        firstNode = childNode;
                        rootNode.setStartLocation(firstNode.getStartLocation());
                    }
                }
        ignoreStatement();
      }
      children = afterImportDeclaration();
            if (children != null && children.size() > 0) {
                rootNode.setEndLocation(children.get(children.size() - 1).getEndLocation());
                rootNode.addChildren(children);
            }
      jj_consume_token(0);
    } catch (TokenMgrError err) {
        addException ( new ParseException ("Unrecognized token, " + err.getMessage()));
    }
        System.out.println("+++++ CSS3Parser completed parsing");
        {if (true) return rootNode;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode charset() throws ParseException {
    Token start = null;
    Token middle = null;
    Token end = null;
    CSSNode node = null;
    try {
      start = jj_consume_token(CHARSET_SYM);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_6;
        }
        jj_consume_token(S);

      }
      middle = jj_consume_token(STRING);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_7;
        }
        jj_consume_token(S);
      }
      end = jj_consume_token(SEMICOLON);

    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (notNull(start, middle, end)) {
            String name = start.image + " " + middle.image;
            node = new CSSNode(name);
            node.setStartLocation(getStartLocation(start));
            node.setEndLocation(getEndLocation(end));
        }
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public List<CSSNode> afterImportDeclaration() throws ParseException {
    CSSNode node = null;
    List<CSSNode> list = new ArrayList<CSSNode>();
    String skip = null;
    try {
      label_8:
      while (true) {
        ;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
        case HASHIDENT:
        case HASH:
        case LBRACKET:
        case ANY:
        case COLON:
        case LENGTH:
        case EMS:
        case EXS:
        case ANGLE:
        case TIME:
        case FREQ:
        case RESOLUTION:
        case DIMEN:
        case PSEUDOELEMENT_SYM:
        case CLASS:
        case FUNCTIONNOT:
        case 101:
          node = ruleSet();
                                if (node != null) list.add(node);
          break;
        case MEDIA_SYM:
          node = media();
                              if (node != null) list.add(node);
          break;
        case ATKEYFRAMES:
          node = keyframes();
                                  if (node != null) list.add(node);
          break;
        case PAGE_SYM:
          node = page();
                             if (node != null) list.add(node);
          break;
        case FONT_FACE_SYM:
          node = fontFace();
                                 if (node != null) list.add(node);
          break;
        case PREF_SYM:
          node = preference();
                                   if (node != null) list.add(node);
          break;
        case COLOR_PROFILE:
          node = colorprofile();
                                     if (node != null) list.add(node);
          break;
        case PHONETIC_ALPHABET_SYM:
          node = phoneticAlphabet();
                                         if (node != null) list.add(node);
          break;
        default:
          jj_la1[9] = jj_gen;
          skip = skipStatement();
                  if (skip == null || skip.length() == 0) {
                    {if (true) return list;}
                  }
        }
        ignoreStatement();
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public void ignoreStatement() throws ParseException {
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CDO:
      case CDC:
      case ATKEYWORD:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CDO:
        jj_consume_token(CDO);
        break;
      case CDC:
        jj_consume_token(CDC);
        break;
      case ATKEYWORD:
        atRuleDeclaration();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_10;
        }
        jj_consume_token(S);
      }
    }

  }

  final public CSSNode namespaceDeclaration() throws ParseException {
    CSSNode node = null;
    Token start = null;
    Token ident = null;
    Token uri = null;
    Token end = null;
    try {
      start = jj_consume_token(NAMESPACE_SYM);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_11;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        ident = jj_consume_token(IDENT);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[14] = jj_gen;
            break label_12;
          }
          jj_consume_token(S);
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        uri = jj_consume_token(STRING);
        break;
      case URL:
        uri = jj_consume_token(URL);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_13;
        }
        jj_consume_token(S);
      }
      end = jj_consume_token(SEMICOLON);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_14;
        }
        jj_consume_token(S);
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(SEMICOLON);
        {if (true) return null;}
    }
        if (notNull(start, uri, end)) {
            String name = start.image + " " + (ident != null ? ident.image : "") + uri.image;
            node = new CSSNode(name);
            node.setStartLocation(getStartLocation(start));
            node.setEndLocation(getEndLocation(end));
        }
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

/**
 * The import statement
 *
 * @exception ParseException exception during the parse
 */
  final public CSSNode importDeclaration() throws ParseException {
    Token start = null;
    Token medium = null;
    List<CSSNode> mediumList = new ArrayList<CSSNode>();
    Token uri = null;
    Token end = null;
    CSSNode node = null;
    try {
      start = jj_consume_token(IMPORT_SYM);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_15;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        uri = jj_consume_token(STRING);
        break;
      case URL:
        uri = jj_consume_token(URL);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_16;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        medium = media_type();
                if (medium != null) {
                    mediumList.add(createNode(medium));
                }
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[22] = jj_gen;
            break label_17;
          }
          jj_consume_token(COMMA);
          label_18:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case S:
              ;
              break;
            default:
              jj_la1[23] = jj_gen;
              break label_18;
            }
            jj_consume_token(S);
          }
          medium = media_type();
                    if (medium != null) {
                        mediumList.add(createNode(medium));
                    }
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      end = jj_consume_token(SEMICOLON);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_19;
        }
        jj_consume_token(S);
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(SEMICOLON);
        {if (true) return null;}
    }
        if (notNull(start, end)) {
            StringBuilder sb = new StringBuilder();
            for (CSSNode m : mediumList) {
                sb.append(m).append(',');
            }
            String mediumNames = sb.substring(0, Math.max(0, sb.length() - 1));   // trims the trailing comma
            String name = start.image + (uri != null ? " " + uri.image : "") + (mediumNames.length() > 0 ? " " + mediumNames : "");
            node = new CSSNode(name);
            node.setStartLocation(getStartLocation(start));
            node.setEndLocation(getEndLocation(end));
        }
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

/*
From w3.org:  
http://www.w3.org/TR/css3-mediaqueries/
The media query syntax is described in terms of the CSS2 grammar. As such, rules 
not defined here are defined in CSS2. The media_query_list production defined 
below replaces the media_list production from CSS2.  

media_query_list
 : S* [media_query [ ',' S* media_query ]* ]?
 ;
media_query
 : [ONLY | NOT]? S* media_type S* [ AND S* expression ]*
 | expression [ AND S* expression ]*
 ;
media_type
 : IDENT
 ;
expression
 : '(' S* media_feature S* [ ':' S* expr ]? ')' S*
 ;
media_feature
 : IDENT
 ;
 
CSS 2:
media
  : MEDIA_SYM S* media_list '{' S* ruleset* '}' S*
  ;
media_list
  : medium [ COMMA S* medium]*
  ;
medium
  : IDENT S*
  ;
  
Putting the two above together gives:
media
  : MEDIA_SYM S* media_query_list '{' S* ruleset* '}' S*
  ;
media_query_list
 : S* [media_query [ ',' S* media_query ]* ]?
 ;
media_query
 : [ONLY | NOT]? S* media_type S* [ AND S* expression ]*
 | expression [ AND S* expression ]*
 ;
media_type
 : IDENT
 ;
expression
 : '(' S* media_feature S* [ ':' S* expr ]? ')' S*
 ;
media_feature
 : IDENT
 ;

*/
// new version, based on comment above
  final public CSSNode media() throws ParseException {
    Token start = null;
    Token end = null;
    List<CSSNode> mediaQueryList = new ArrayList<CSSNode>();
    CSSNode ruleset = null;
    List<CSSNode> ruleList = new ArrayList<CSSNode>();
    try {
      start = jj_consume_token(MEDIA_SYM);
      label_20:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_20;
        }
        jj_consume_token(S);
      }
      mediaQueryList = media_query_list();
      jj_consume_token(LBRACE);
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_21;
        }
        jj_consume_token(S);
      }
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
        case HASHIDENT:
        case HASH:
        case LBRACKET:
        case ANY:
        case COLON:
        case LENGTH:
        case EMS:
        case EXS:
        case ANGLE:
        case TIME:
        case FREQ:
        case RESOLUTION:
        case DIMEN:
        case PSEUDOELEMENT_SYM:
        case CLASS:
        case FUNCTIONNOT:
        case 101:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_22;
        }
        ruleset = ruleSet();
                    if (ruleset != null) {
                        ruleList.add(ruleset);
                    }
      }
      end = jj_consume_token(RBRACE);
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_23;
        }
        jj_consume_token(S);
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (notNull(start, end)) {
            StringBuilder label = new StringBuilder();
            label.append(start.image);
            for (CSSNode mediaQuery : mediaQueryList) {
                label.append(' ').append(mediaQuery.getName());
            }
            CSSNode node = new CSSNode(label.toString());
            //node.addChildren(mediaQueryList);
            node.addChildren(ruleList);
            node.setStartLocation(getStartLocation(start));
            node.setEndLocation(getEndLocation(end));
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public List<CSSNode> media_query_list() throws ParseException {
    CSSNode mediaQuery = null;
    List<CSSNode> mediaQueryList = new ArrayList<CSSNode>();
    try {
      label_24:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_24;
        }
        jj_consume_token(S);
      }
      if (jj_2_4(2)) {
        mediaQuery = media_query();
                if (mediaQuery != null) {
                    mediaQueryList.add(mediaQuery);
                }
        label_25:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[29] = jj_gen;
            break label_25;
          }
          jj_consume_token(COMMA);
          label_26:
          while (true) {
            if (jj_2_3(2)) {
              ;
            } else {
              break label_26;
            }
            jj_consume_token(S);
          }
          mediaQuery = media_query();
                    if (mediaQuery != null) {
                        mediaQueryList.add(mediaQuery);
                    }
        }
      } else {
        ;
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        {if (true) return mediaQueryList;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode media_query() throws ParseException {
    Token mediaType = null;
    Token mediaRestriction = null;
    CSSNode mediaExpression = null;
    List<CSSNode> mediaExpressionList = new ArrayList<CSSNode>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case ONLY:
      case NOT:
      case IDENT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ONLY:
        case NOT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ONLY:
            mediaRestriction = jj_consume_token(ONLY);
            break;
          case NOT:
            mediaRestriction = jj_consume_token(NOT);
            break;
          default:
            jj_la1[30] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
        label_27:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[32] = jj_gen;
            break label_27;
          }
          jj_consume_token(S);
        }
        mediaType = media_type();
        label_28:
        while (true) {
          if (jj_2_5(2)) {
            ;
          } else {
            break label_28;
          }
          jj_consume_token(S);
        }
        label_29:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AND:
            ;
            break;
          default:
            jj_la1[33] = jj_gen;
            break label_29;
          }
          jj_consume_token(AND);
          label_30:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case S:
              ;
              break;
            default:
              jj_la1[34] = jj_gen;
              break label_30;
            }
            jj_consume_token(S);
          }
          mediaExpression = media_expression();
                if (mediaExpression != null) {
                    mediaExpressionList.add(mediaExpression);
                }
        }
        break;
      case LPARAN:
        mediaExpression = media_expression();
            if (mediaExpression != null) {
                mediaExpressionList.add(mediaExpression);
            }
        label_31:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AND:
            ;
            break;
          default:
            jj_la1[35] = jj_gen;
            break label_31;
          }
          jj_consume_token(AND);
          label_32:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case S:
              ;
              break;
            default:
              jj_la1[36] = jj_gen;
              break label_32;
            }
            jj_consume_token(S);
          }
          mediaExpression = media_expression();
                if (mediaExpression != null) {
                    mediaExpressionList.add(mediaExpression);
                }
        }
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        StringBuilder sb = new StringBuilder();
        if (mediaRestriction != null) {
            sb.append(mediaRestriction);
        }
        if (mediaType != null) {
            sb.append(' ').append(mediaType.image);
        }
        if (!mediaExpressionList.isEmpty()) {
            if (mediaType != null) {
                sb.append(' ');
            }
            for (Iterator<CSSNode> it = mediaExpressionList.iterator(); it.hasNext(); ) {
                CSSNode child = it.next();
                sb.append(child.getName());
                if (it.hasNext()) {
                    sb.append(" and ");
                }
            }
        }
        if (sb.length() > 0) {
            CSSNode node = new CSSNode(sb.toString());
            if (mediaRestriction != null) {
                node.setStartLocation(getStartLocation(mediaRestriction));
            } else if (mediaType != null) {
                node.setStartLocation(getStartLocation(mediaType));
                if (mediaExpressionList.isEmpty()) {
                    node.setEndLocation(getEndLocation(mediaType));
                }
            } else if (!mediaExpressionList.isEmpty()) {
                node.addChildren(mediaExpressionList);
                node.setStartLocation(mediaExpressionList.get(0).getStartLocation());
                node.setEndLocation(mediaExpressionList.get(mediaExpressionList.size() - 1).getEndLocation());
            }
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Token media_type() throws ParseException {
    Token t = null;
    try {
      t = jj_consume_token(IDENT);
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode media_expression() throws ParseException {
    Token start = null;
    Token end = null;
    Token mediaFeature = null;
    CSSNode expression = null;
    try {
      start = jj_consume_token(LPARAN);
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_33;
        }
        jj_consume_token(S);
      }
      mediaFeature = media_feature();
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_34;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        label_35:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[40] = jj_gen;
            break label_35;
          }
          jj_consume_token(S);
        }
        expression = expr();
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      end = jj_consume_token(RPARAN);
      label_36:
      while (true) {
        if (jj_2_6(2)) {
          ;
        } else {
          break label_36;
        }
        jj_consume_token(S);
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (notNull(start, end)) {
            StringBuilder sb = new StringBuilder();
            sb.append('(');
            if (mediaFeature != null) {
                sb.append(mediaFeature.image);
            }
            if (expression != null) {
                sb.append(':');
                sb.append(expression.getName());
            }
            sb.append(')');
            CSSNode node = new CSSNode(sb.toString());
            node.setStartLocation(getStartLocation(start));
            node.setEndLocation(getEndLocation(end));
            node.addChild(expression);
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Token media_feature() throws ParseException {
    Token t = null;
    try {
      t = jj_consume_token(IDENT);
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode unused_production_generic_syntax() throws ParseException {
    Token start = null;
    CSSNode term = null;
    Token end = null;
    try {
      start = jj_consume_token(LPARAN);
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_37;
        }
        jj_consume_token(S);
      }
      term = term();
      end = jj_consume_token(RPARAN);
    } catch (ParseException e) {
        addException(e);
        error_skipto(RPARAN);
        {if (true) return null;}
    }
        if (notNull(start, term, end)) {
            CSSNode node = new CSSNode('[' + term.getName() + ']');
            node.addChildren(term.getChildren());
            node.setStartLocation(getStartLocation(start));
            node.setEndLocation(getEndLocation(end));
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode definition() throws ParseException {
    Token start = null;
    CSSNode term = null;
    Token end = null;
    try {
      start = jj_consume_token(LBRACKET);
      label_38:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_38;
        }
        jj_consume_token(S);
      }
      term = term();
      end = jj_consume_token(RBRACKET);
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACKET);
        {if (true) return null;}
    }
        if (notNull(start, term, end)) {
            CSSNode node = new CSSNode('[' + term.getName() + ']');
            node.addChildren(term.getChildren());
            node.setStartLocation(getStartLocation(start));
            node.setEndLocation(getEndLocation(end));
        }
    throw new Error("Missing return statement in function");
  }

  final public CSSNode page() throws ParseException {
    CSSNode node = new CSSNode();
    CSSNode child = null;
    List<CSSNode> contents = null;
    Token start = null;
    Token i = null;
    Token end = null;
    try {
      start = jj_consume_token(PAGE_SYM);
                          if (start != null) node.setName(start.image);
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_39;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        i = jj_consume_token(IDENT);
                       if (i != null) node.setName(node.getName() + ' ' + i.image);
        label_40:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[45] = jj_gen;
            break label_40;
          }
          jj_consume_token(S);
        }
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        child = pseudo_page();
                                 if (child != null) node.addChild(child);
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      label_41:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_41;
        }
        jj_consume_token(S);
      }
      contents = pageContent();
                                    if (contents != null) node.addChildren(contents);
      end = jj_consume_token(RBRACE);
      label_42:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_42;
        }
        jj_consume_token(S);
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (notNull(start, end)) {
            node.setStartLocation(getStartLocation(start));
            node.setEndLocation(getEndLocation(end));
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public List<CSSNode> pageContent() throws ParseException {
    CSSNode node = null;
    List<CSSNode> list = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTOP:
      case ATRIGHT:
      case ATBOTTOM:
      case ATLEFT:
        node = prefAtRule();
        break;
      default:
        jj_la1[50] = jj_gen;
        list = declarations();
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (node != null) {
            list = new ArrayList<CSSNode>();
            list.add(node);
            {if (true) return list;}
        }
        else if (list != null) {
            {if (true) return list;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode prefAtRule() throws ParseException {
    Token start = null;
    List<CSSNode> decls = null;
    Token end = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTOP:
        start = jj_consume_token(ATTOP);
        break;
      case ATBOTTOM:
        start = jj_consume_token(ATBOTTOM);
        break;
      case ATLEFT:
        start = jj_consume_token(ATLEFT);
        break;
      case ATRIGHT:
        start = jj_consume_token(ATRIGHT);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_43:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[52] = jj_gen;
          break label_43;
        }
        jj_consume_token(S);
      }
      jj_consume_token(LBRACE);
      label_44:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_44;
        }
        jj_consume_token(S);
      }
      decls = declarations();
      end = jj_consume_token(RBRACE);
      label_45:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[54] = jj_gen;
          break label_45;
        }
        jj_consume_token(S);
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (notNull(start, decls, end)) {
            CSSNode node = new CSSNode(start.image);
            node.addChildren(decls);
            node.setStartLocation(getStartLocation(start));
            node.setEndLocation(getEndLocation(end));
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode pseudo_page() throws ParseException {
    Token start = null;
    Token t = null;
    try {
      start = jj_consume_token(COLON);
      t = jj_consume_token(IDENT);
      label_46:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[55] = jj_gen;
          break label_46;
        }
        jj_consume_token(S);
      }
    } catch (ParseException e) {
        addException(e);
        {if (true) return null;}
    }
        if (notNull(t)) {
            CSSNode node = new CSSNode(':' + t.image);
            node.setStartLocation(getStartLocation(start));
            node.setEndLocation(getEndLocation(start));
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode fontFace() throws ParseException {
    Token start = null;
    List<CSSNode> decls = null;
    Token end = null;
    try {
      start = jj_consume_token(FONT_FACE_SYM);
      label_47:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[56] = jj_gen;
          break label_47;
        }
        jj_consume_token(S);
      }
      jj_consume_token(LBRACE);
      label_48:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[57] = jj_gen;
          break label_48;
        }
        jj_consume_token(S);
      }
      decls = declarations();
      end = jj_consume_token(RBRACE);
      label_49:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[58] = jj_gen;
          break label_49;
        }
        jj_consume_token(S);
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (notNull(start, decls, end)) {
            CSSNode node = new CSSNode(start.image);
            node.addChildren(decls);
            node.setStartLocation(getStartLocation(start));
            node.setEndLocation(getEndLocation(end));
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode colorprofile() throws ParseException {
    Token start = null;
    List<CSSNode> decls = null;
    Token end = null;
    try {
      start = jj_consume_token(COLOR_PROFILE);
      label_50:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[59] = jj_gen;
          break label_50;
        }
        jj_consume_token(S);
      }
      jj_consume_token(LBRACE);
      label_51:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[60] = jj_gen;
          break label_51;
        }
        jj_consume_token(S);
      }
      decls = declarations();
      end = jj_consume_token(RBRACE);
      label_52:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[61] = jj_gen;
          break label_52;
        }
        jj_consume_token(S);
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (notNull(start, decls, end)) {
            CSSNode node = new CSSNode(start.image);
            node.addChildren(decls);
            node.setStartLocation(getStartLocation(start));
            node.setEndLocation(getEndLocation(end));
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode preference() throws ParseException {
    Token start = null;
    List<CSSNode> decls = null;
    Token end = null;
    try {
      start = jj_consume_token(PREF_SYM);
      label_53:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[62] = jj_gen;
          break label_53;
        }
        jj_consume_token(S);
      }
      jj_consume_token(LBRACE);
      label_54:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[63] = jj_gen;
          break label_54;
        }
        jj_consume_token(S);
      }
      decls = declarations();
      end = jj_consume_token(RBRACE);
      label_55:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[64] = jj_gen;
          break label_55;
        }
        jj_consume_token(S);
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (notNull(start, decls, end)) {
            CSSNode node = new CSSNode(start.image);
            node.addChildren(decls);
            node.setStartLocation(getStartLocation(start));
            node.setEndLocation(getEndLocation(end));
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode phoneticAlphabet() throws ParseException {
    Token start = null;
    Token middle = null;
    Token end = null;
    try {
      start = jj_consume_token(PHONETIC_ALPHABET_SYM);
      label_56:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[65] = jj_gen;
          break label_56;
        }
        jj_consume_token(S);
      }
      middle = jj_consume_token(STRING);
      label_57:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[66] = jj_gen;
          break label_57;
        }
        jj_consume_token(S);
      }
      end = jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
        addException(e);
        error_skipto(SEMICOLON);
        {if (true) return null;}
    }
        if (notNull(start, middle, end)) {
            StringBuilder name = new StringBuilder();
            name.append(start.image).append(' ').append(middle.image);
            CSSNode node = new CSSNode(name.toString());
            node.setStartLocation(getStartLocation(start));
            node.setEndLocation(getEndLocation(end));
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode keyframeRuleSet() throws ParseException {
    Token t = null;
    List<CSSNode> selectors = new ArrayList<CSSNode>();
    List<CSSNode> decls = null;
    Token end = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        t = jj_consume_token(IDENT);
        break;
      case PERCENTAGE:
        t = jj_consume_token(PERCENTAGE);
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 if (t != null) selectors.add(new CSSNode(t.image));
      label_58:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[68] = jj_gen;
          break label_58;
        }
        jj_consume_token(S);
      }
      label_59:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[69] = jj_gen;
          break label_59;
        }
        jj_consume_token(COMMA);
        label_60:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[70] = jj_gen;
            break label_60;
          }
          jj_consume_token(S);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          t = jj_consume_token(IDENT);
          break;
        case PERCENTAGE:
          t = jj_consume_token(PERCENTAGE);
          break;
        default:
          jj_la1[71] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                         if (t != null) selectors.add(new CSSNode(t.image));
        label_61:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[72] = jj_gen;
            break label_61;
          }
          jj_consume_token(S);
        }
      }
      jj_consume_token(LBRACE);
      label_62:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[73] = jj_gen;
          break label_62;
        }
        jj_consume_token(S);
      }
      decls = declarations();
      end = jj_consume_token(RBRACE);
      label_63:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[74] = jj_gen;
          break label_63;
        }
        jj_consume_token(S);
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (selectors.size() > 0 && notNull(decls, end)) {
            StringBuilder sb = new StringBuilder();
            for (CSSNode s : selectors) {
                sb.append(s.getName()).append(',');
            }
            String name = sb.substring(0, Math.max(0, sb.length() - 1));
            CSSNode node = new CSSNode(name);
            node.addChildren(decls);
            node.setStartLocation(selectors.get(0).getStartLocation());
            node.setEndLocation(getEndLocation(end));
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode keyframes() throws ParseException {
    Token start = null;
    Token animationname = null;
    Token kfsel = null;
    CSSNode ruleset = null;
    List<CSSNode> ruleList = new ArrayList<CSSNode>();
    Token end = null;
    try {
      start = jj_consume_token(ATKEYFRAMES);
      label_64:
      while (true) {
        jj_consume_token(S);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[75] = jj_gen;
          break label_64;
        }
      }
      animationname = jj_consume_token(IDENT);
      label_65:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[76] = jj_gen;
          break label_65;
        }
        jj_consume_token(S);
      }
      jj_consume_token(LBRACE);
      label_66:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[77] = jj_gen;
          break label_66;
        }
        jj_consume_token(S);
      }
      label_67:
      while (true) {
        ruleset = keyframeRuleSet();
                                       if(ruleset != null) ruleList.add(ruleset);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
        case PERCENTAGE:
          ;
          break;
        default:
          jj_la1[78] = jj_gen;
          break label_67;
        }
      }
      end = jj_consume_token(RBRACE);
      label_68:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[79] = jj_gen;
          break label_68;
        }
        jj_consume_token(S);
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (notNull(start, end)) {
                StringBuilder label = new StringBuilder(start.image);
            if (animationname != null) {
                label.append(" ").append(animationname.image);
            }
            CSSNode node = new CSSNode(label.toString());
                        node.addChildren(ruleList);
            node.setStartLocation(getStartLocation(start));
            node.setEndLocation(getEndLocation(end));
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode atRuleDeclaration() throws ParseException {
    Token t = null;
    try {
      t = jj_consume_token(ATKEYWORD);
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (notNull(t)) {
            {if (true) return createNode(t);}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public char operator() throws ParseException {
    char op = ' ';
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
      case DIV:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIV:
          jj_consume_token(DIV);
                    op = '/';
          break;
        case COMMA:
          jj_consume_token(COMMA);
                    op = ',';
          break;
        default:
          jj_la1[80] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_69:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[81] = jj_gen;
            break label_69;
          }
          jj_consume_token(S);
        }
        break;
      default:
        jj_la1[82] = jj_gen;
        ;
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return op;}
    }
        {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

  final public char combinator() throws ParseException {
    char connector = ' ';
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case GREATER:
      case TILDE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
                    connector = '+' ;
          break;
        case GREATER:
          jj_consume_token(GREATER);
                    connector = '>' ;
          break;
        case TILDE:
          jj_consume_token(TILDE);
                    connector = '~' ;
          break;
        default:
          jj_la1[83] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_70:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[84] = jj_gen;
            break label_70;
          }
          jj_consume_token(S);
        }
        break;
      case S:
        label_71:
        while (true) {
          jj_consume_token(S);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[85] = jj_gen;
            break label_71;
          }
        }
                connector = ' ' ;
        break;
      default:
        jj_la1[86] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return connector;}
    }
        {if (true) return connector;}
    throw new Error("Missing return statement in function");
  }

  final public char unaryOperator() throws ParseException {
    char unary;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
            unary = '-';
        break;
      case PLUS:
        jj_consume_token(PLUS);
            unary = '+';
        break;
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return ' ';}
    }
        {if (true) return unary;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode property() throws ParseException {
    Token t = null;
    try {
      t = jj_consume_token(IDENT);
      label_72:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[88] = jj_gen;
          break label_72;
        }
        jj_consume_token(S);
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (notNull(t)) {
            if (isUnsupported(t.image)) {
                Range range = new Range( new Location( t.next.beginLine, t.next.beginColumn-1 ), new Location( t.next.endLine, t.next.endColumn ) );
                addWarning(new ParseError(t.image + " is not supported by most browsers.", range));
            }
            {if (true) return createNode(t);}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode ruleSet() throws ParseException {
    CSSNode sel = null;
    List<CSSNode> selectors = new ArrayList<CSSNode>();
    List<CSSNode> decls = null;
    Token end = null;
    try {
      sel = selector();
                        if (sel != null) selectors.add(sel);
      label_73:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[89] = jj_gen;
          break label_73;
        }
        jj_consume_token(COMMA);
        label_74:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[90] = jj_gen;
            break label_74;
          }
          jj_consume_token(S);
        }
        sel = selector();
                            if (sel != null) selectors.add(sel);
      }
      jj_consume_token(LBRACE);
      label_75:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[91] = jj_gen;
          break label_75;
        }
        jj_consume_token(S);
      }
      decls = declarations();
      end = jj_consume_token(RBRACE);
      label_76:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[92] = jj_gen;
          break label_76;
        }
        jj_consume_token(S);
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (selectors.size() > 0 && notNull(decls, end)) {
            StringBuilder sb = new StringBuilder();
            for (CSSNode s : selectors) {
                sb.append(s.getName()).append(',');
            }
            String name = sb.substring(0, Math.max(0, sb.length() - 1));
            CSSNode node = new CSSNode(name);
            node.addChildren(decls);
            node.setStartLocation(selectors.get(0).getStartLocation());
            node.setEndLocation(getEndLocation(end));
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public List<CSSNode> declarations() throws ParseException {
    CSSNode node = null;
    List<CSSNode> nodes = new ArrayList<CSSNode>();
    Token semi;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        node = declaration();
                                if (node != null) nodes.add(node);
        break;
      default:
        jj_la1[93] = jj_gen;
        ;
      }
      label_77:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[94] = jj_gen;
          break label_77;
        }
        semi = jj_consume_token(SEMICOLON);
                      if (node != null) node.setEndLocation(getEndLocation(semi));
        label_78:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[95] = jj_gen;
            break label_78;
          }
          jj_consume_token(S);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          node = declaration();
                                    if (node != null) nodes.add(node);
          break;
        default:
          jj_la1[96] = jj_gen;
          ;
        }
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        {if (true) return nodes;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode selector() throws ParseException {
    CSSNode node = null;
    List<CSSNode> nodes = new ArrayList<CSSNode>();
    char c;
    List<Character> combs = new ArrayList<Character>();
    try {
      node = simple_selector();
                                  if(node != null) nodes.add(node);
      label_79:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case PLUS:
        case GREATER:
        case TILDE:
          ;
          break;
        default:
          jj_la1[97] = jj_gen;
          break label_79;
        }
        c = combinator();
                            combs.add(c);
        node = simple_selector();
                                    if(node != null) nodes.add(node);
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (nodes.size() > 0) {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < nodes.size(); i++) {
                sb.append(nodes.get(i).getName());
                if (combs.size() < i) {
                    sb.append(combs.get(i));
                }
            }
            node = new CSSNode(sb.toString());
            node.setStartLocation(nodes.get(0).getStartLocation());
            node.setEndLocation(nodes.get(nodes.size() - 1).getEndLocation());
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

/**
 * I made this rule to parse a selector from a document. Combinator are avoid.
 * @exception ParseException exception during the parse
 */
  final public CSSNode externalSelector() throws ParseException {
    CSSNode node = null;
    List<CSSNode> nodes = new ArrayList<CSSNode>();
    try {
      node = simple_selector();
                                if (node != null) nodes.add(node);
      label_80:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[98] = jj_gen;
          break label_80;
        }
        label_81:
        while (true) {
          jj_consume_token(S);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[99] = jj_gen;
            break label_81;
          }
        }
        node = simple_selector();
                                    if (node != null) nodes.add(node);
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (nodes.size() > 0) {
            StringBuilder sb = new StringBuilder();
            for (CSSNode n : nodes) {
                sb.append(n.getName()).append(' ');
            }
            node = new CSSNode();
            node.setName(sb.toString());
            node.setStartLocation(nodes.get(0).getStartLocation());
            node.setEndLocation(nodes.get(nodes.size() - 1).getEndLocation());
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode simple_selector() throws ParseException {
    CSSNode child = null;
    List<CSSNode> children = new ArrayList<CSSNode>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
      case ANY:
      case 101:
        child = element_name();
                                if (child != null) children.add(child);
        label_82:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HASHIDENT:
          case HASH:
          case LBRACKET:
          case COLON:
          case LENGTH:
          case EMS:
          case EXS:
          case ANGLE:
          case TIME:
          case FREQ:
          case RESOLUTION:
          case DIMEN:
          case PSEUDOELEMENT_SYM:
          case CLASS:
          case FUNCTIONNOT:
            ;
            break;
          default:
            jj_la1[100] = jj_gen;
            break label_82;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HASHIDENT:
          case HASH:
            child = hash();
                          if (child != null) children.add(child);
            break;
          case LENGTH:
          case EMS:
          case EXS:
          case ANGLE:
          case TIME:
          case FREQ:
          case RESOLUTION:
          case DIMEN:
          case CLASS:
            child = _class();
                            if (child != null) children.add(child);
            break;
          case LBRACKET:
            child = attrib();
                            if (child != null) children.add(child);
            break;
          case COLON:
          case PSEUDOELEMENT_SYM:
            child = pseudo();
                            if (child != null) children.add(child);
            break;
          case FUNCTIONNOT:
            child = negation();
                              if (child != null) children.add(child);
            break;
          default:
            jj_la1[101] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      case HASHIDENT:
      case HASH:
      case LBRACKET:
      case COLON:
      case LENGTH:
      case EMS:
      case EXS:
      case ANGLE:
      case TIME:
      case FREQ:
      case RESOLUTION:
      case DIMEN:
      case PSEUDOELEMENT_SYM:
      case CLASS:
      case FUNCTIONNOT:
        label_83:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HASHIDENT:
          case HASH:
            child = hash();
                          if (child != null) children.add(child);
            break;
          case LENGTH:
          case EMS:
          case EXS:
          case ANGLE:
          case TIME:
          case FREQ:
          case RESOLUTION:
          case DIMEN:
          case CLASS:
            child = _class();
                            if (child != null) children.add(child);
            break;
          case LBRACKET:
            child = attrib();
                            if (child != null) children.add(child);
            break;
          case COLON:
          case PSEUDOELEMENT_SYM:
            child = pseudo();
                            if (child != null) children.add(child);
            break;
          case FUNCTIONNOT:
            child = negation();
                              if (child != null) children.add(child);
            break;
          default:
            jj_la1[102] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HASHIDENT:
          case HASH:
          case LBRACKET:
          case COLON:
          case LENGTH:
          case EMS:
          case EXS:
          case ANGLE:
          case TIME:
          case FREQ:
          case RESOLUTION:
          case DIMEN:
          case PSEUDOELEMENT_SYM:
          case CLASS:
          case FUNCTIONNOT:
            ;
            break;
          default:
            jj_la1[103] = jj_gen;
            break label_83;
          }
        }
        break;
      default:
        jj_la1[104] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (children.size() > 0) {
            StringBuilder sb = new StringBuilder();
            for (CSSNode c : children) {
                sb.append(c.getName()).append(' ');
            }
            CSSNode node = new CSSNode(sb.toString());
            node.setStartLocation(children.get(0).getStartLocation());
            node.setEndLocation(children.get(children.size() - 1).getEndLocation());
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode _class() throws ParseException {
    Token t = null;
    CSSNode node = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        t = jj_consume_token(CLASS);
        break;
      case LENGTH:
      case EMS:
      case EXS:
      case ANGLE:
      case TIME:
      case FREQ:
      case RESOLUTION:
      case DIMEN:
        node = deprecated_class();
        break;
      default:
        jj_la1[105] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (notNull(t)) {
            {if (true) return createNode(t);}
        }
        else if (notNull(node)) {
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode deprecated_class() throws ParseException {
    Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LENGTH:
        t = jj_consume_token(LENGTH);
        break;
      case EMS:
        t = jj_consume_token(EMS);
        break;
      case EXS:
        t = jj_consume_token(EXS);
        break;
      case ANGLE:
        t = jj_consume_token(ANGLE);
        break;
      case TIME:
        t = jj_consume_token(TIME);
        break;
      case FREQ:
        t = jj_consume_token(FREQ);
        break;
      case RESOLUTION:
        t = jj_consume_token(RESOLUTION);
        break;
      case DIMEN:
        t = jj_consume_token(DIMEN);
        break;
      default:
        jj_la1[106] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (notNull(t)) {
            {if (true) return createNode(t);}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode element_name() throws ParseException {
    Token t1 = null;
    Token t2 = null;
    try {
      if (jj_2_7(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
        case ANY:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENT:
            t1 = jj_consume_token(IDENT);
            break;
          case ANY:
            t1 = jj_consume_token(ANY);
            break;
          default:
            jj_la1[107] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[108] = jj_gen;
          ;
        }
        jj_consume_token(101);
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        t2 = jj_consume_token(IDENT);
        break;
      case ANY:
        t2 = jj_consume_token(ANY);
        break;
      default:
        jj_la1[109] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (notNull(t2)) {
            StringBuilder sb = new StringBuilder();
            if (notNull(t1)) {
                sb.append(t1.image).append('|');
            }
            sb.append(t2.image);
            CSSNode node = new CSSNode(sb.toString());
            node.setStartLocation(t1 == null ? getStartLocation(t2) : getStartLocation(t1));
            node.setEndLocation(getEndLocation(t2));
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode attrib() throws ParseException {
    Token start = null;
    Token t1 = null;
    Token t2 = null;
    Token t3 = null;
    Token end = null;
    try {
      start = jj_consume_token(LBRACKET);
      label_84:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[110] = jj_gen;
          break label_84;
        }
        jj_consume_token(S);
      }
      t1 = jj_consume_token(IDENT);
      label_85:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[111] = jj_gen;
          break label_85;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCLUDES:
      case DASHMATCH:
      case PREFIXMATCH:
      case SUFFIXMATCH:
      case SUBSTRINGMATCH:
      case EQ:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          t2 = jj_consume_token(EQ);
          break;
        case INCLUDES:
          t2 = jj_consume_token(INCLUDES);
          break;
        case DASHMATCH:
          t2 = jj_consume_token(DASHMATCH);
          break;
        case PREFIXMATCH:
          t2 = jj_consume_token(PREFIXMATCH);
          break;
        case SUFFIXMATCH:
          t2 = jj_consume_token(SUFFIXMATCH);
          break;
        case SUBSTRINGMATCH:
          t2 = jj_consume_token(SUBSTRINGMATCH);
          break;
        default:
          jj_la1[112] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_86:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[113] = jj_gen;
            break label_86;
          }
          jj_consume_token(S);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          t3 = jj_consume_token(IDENT);
          break;
        case STRING:
          t3 = jj_consume_token(STRING);
          break;
        default:
          jj_la1[114] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_87:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[115] = jj_gen;
            break label_87;
          }
          jj_consume_token(S);
        }
        break;
      default:
        jj_la1[116] = jj_gen;
        ;
      }
      end = jj_consume_token(RBRACKET);
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACKET);
        {if (true) return null;}
    }
        if (notNull(start, t1, t2, t3, end)) {
            CSSNode node = new CSSNode(t1.image + t2.image + t3.image);
            node.setStartLocation(getStartLocation(start));
            node.setEndLocation(getEndLocation(end));
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode negation() throws ParseException {
    Token start = null;
    CSSNode node = null;
    Token end = null;
    try {
      start = jj_consume_token(FUNCTIONNOT);
      label_88:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[117] = jj_gen;
          break label_88;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
      case ANY:
      case 101:
        node = element_name();
        break;
      case HASHIDENT:
      case HASH:
        node = hash();
        break;
      case LENGTH:
      case EMS:
      case EXS:
      case ANGLE:
      case TIME:
      case FREQ:
      case RESOLUTION:
      case DIMEN:
      case CLASS:
        node = _class();
        break;
      case LBRACKET:
        node = attrib();
        break;
      case COLON:
      case PSEUDOELEMENT_SYM:
        node = pseudo();
        break;
      case FUNCTIONNOT:
        node = negation();
        break;
      default:
        jj_la1[118] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_89:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[119] = jj_gen;
          break label_89;
        }
        jj_consume_token(S);
      }
      end = jj_consume_token(RPARAN);
    } catch (ParseException e) {
        e.printStackTrace();
        error_skipto(RPARAN);
        addException(e);
        {if (true) return null;}
    }
        if (notNull(start, node, end)) {
            node = new CSSNode(start.image + node.getName());
            node.setStartLocation(getStartLocation(start));
            node.setEndLocation(getEndLocation(end));
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode pseudo() throws ParseException {
    Token p = null;
    Token c = null;
    Token i = null;
    Token f = null;
    Token n = null;
    CSSNode expr = null;
    Token end = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PSEUDOELEMENT_SYM:
        p = jj_consume_token(PSEUDOELEMENT_SYM);
        i = jj_consume_token(IDENT);
        break;
      case COLON:
        c = jj_consume_token(COLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          i = jj_consume_token(IDENT);
          break;
        case FUNCTIONLANG:
        case FUNCTION:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FUNCTIONLANG:
            f = jj_consume_token(FUNCTIONLANG);
            label_90:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
                ;
                break;
              default:
                jj_la1[120] = jj_gen;
                break label_90;
              }
              jj_consume_token(S);
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NUMBER:
              n = jj_consume_token(NUMBER);
              break;
            case IDENT:
              n = jj_consume_token(IDENT);
              break;
            case STRING:
              n = jj_consume_token(STRING);
              break;
            default:
              jj_la1[121] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            label_91:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
                ;
                break;
              default:
                jj_la1[122] = jj_gen;
                break label_91;
              }
              jj_consume_token(S);
            }
            break;
          case FUNCTION:
            f = jj_consume_token(FUNCTION);
            label_92:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
                ;
                break;
              default:
                jj_la1[123] = jj_gen;
                break label_92;
              }
              jj_consume_token(S);
            }
            expr = expression();
            break;
          default:
            jj_la1[124] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          end = jj_consume_token(RPARAN);
          break;
        default:
          jj_la1[125] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[126] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RPARAN);
        {if (true) return null;}
    }
        if (notNull(p, i)) {
            CSSNode node = new CSSNode(p.image + ' ' + i.image);
            node.setStartLocation(getStartLocation(p));
            node.setEndLocation(getEndLocation(i));
            {if (true) return node;}
        }
        else if (notNull(c)) {
            if (notNull(i)) {
                CSSNode node = new CSSNode(':' + i.image);
                node.setStartLocation(getStartLocation(c));
                node.setEndLocation(getEndLocation(i));
                {if (true) return node;}
            }
            else if (notNull(f)) {
                if (notNull(n)) {
                    CSSNode node = new CSSNode(f.image + ' ' + n.image);
                    node.setStartLocation(getStartLocation(f));
                    node.setEndLocation(getEndLocation(n));
                    {if (true) return node;}
                }
                else if (notNull(expr)) {
                    CSSNode node = new CSSNode(f.image + ' ' + expr.getName());
                    node.setStartLocation(getStartLocation(f));
                    node.setEndLocation(expr.getEndLocation());
                    {if (true) return node;}
                }
            }
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode hash() throws ParseException {
    Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HASHIDENT:
        t = jj_consume_token(HASHIDENT);
        break;
      case HASH:
        t = jj_consume_token(HASH);
        break;
      default:
        jj_la1[127] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (notNull(t)) {
            {if (true) return createNode(t);}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode mediadeclaration() throws ParseException {
    CSSNode prop = null;
    CSSNode expr = null;
    CSSNode prio = null;
    try {
      prop = property();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        label_93:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[128] = jj_gen;
            break label_93;
          }
          jj_consume_token(S);
        }
        expr = expr();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORTANT_SYM:
          prio = prio();
          break;
        default:
          jj_la1[129] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[130] = jj_gen;
        ;
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (notNull(prop)) {
            StringBuilder name = new StringBuilder();
            name.append(prop.getName());
            if (expr != null) {
                name.append(':').append(expr.getName());
            }
            if (prio != null) {
                name.append(' ').append(prio.getName());
            }
            CSSNode node = new CSSNode(name.toString());
            node.setStartLocation(prop.getStartLocation());
            if (prio != null) {
                node.setEndLocation(prio.getEndLocation());
            }
            else if (expr != null) {
                node.setEndLocation(expr.getEndLocation());
            }
            else {
                node.setEndLocation(prop.getEndLocation());
            }
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode declaration() throws ParseException {
    CSSNode node = null;
    CSSNode prop = null;
    CSSNode expr = null;
    CSSNode imp = null;
    try {
      prop = property();
      jj_consume_token(COLON);
      label_94:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[131] = jj_gen;
          break label_94;
        }
        jj_consume_token(S);
      }
      expr = expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORTANT_SYM:
        imp = prio();
        break;
      default:
        jj_la1[132] = jj_gen;
        ;
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (notNull(prop, expr)) {
            String name = prop.getName() + ": " + expr.getName();
            node = new CSSNode(name);
            node.setStartLocation(prop.getStartLocation());
            node.setEndLocation(imp == null ? expr.getEndLocation() : imp.getEndLocation());
        }
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode prio() throws ParseException {
    Token t = null;
    try {
      t = jj_consume_token(IMPORTANT_SYM);
      label_95:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[133] = jj_gen;
          break label_95;
        }
        jj_consume_token(S);
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (notNull(t)) {
            {if (true) return createNode(t);}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode expression() throws ParseException {
    Token t = null;
    try {
      label_96:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          t = jj_consume_token(PLUS);
          break;
        case MINUS:
          t = jj_consume_token(MINUS);
          break;
        case NUMBER:
          t = jj_consume_token(NUMBER);
          break;
        case DIMEN:
          t = jj_consume_token(DIMEN);
          break;
        case STRING:
          t = jj_consume_token(STRING);
          break;
        case IDENT:
          t = jj_consume_token(IDENT);
          break;
        default:
          jj_la1[134] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_97:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[135] = jj_gen;
            break label_97;
          }
          jj_consume_token(S);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case STRING:
        case IDENT:
        case MINUS:
        case DIMEN:
        case NUMBER:
          ;
          break;
        default:
          jj_la1[136] = jj_gen;
          break label_96;
        }
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (notNull(t)) {
            t.image = t.image.trim();
            {if (true) return createNode(t);}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode expr() throws ParseException {
    List<CSSNode> terms = new ArrayList<CSSNode>();
    List<Character> ops = new ArrayList<Character>();
    CSSNode term = null;
    char op;
    try {
      term = term();
                        if(term != null) terms.add(term);
      label_98:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case COMMA:
        case STRING:
        case IDENT:
        case HASHIDENT:
        case HASH:
        case MINUS:
        case DIV:
        case URL:
        case LENGTH:
        case EMS:
        case EXS:
        case ANGLE:
        case TIME:
        case FREQ:
        case RESOLUTION:
        case DATE:
        case DIMEN:
        case PERCENTAGE:
        case NUMBER:
        case UNICODERANGE:
        case FUNCTION:
          ;
          break;
        default:
          jj_la1[137] = jj_gen;
          break label_98;
        }
        op = operator();
                           ops.add(op);
        term = term();
                          if(term != null) terms.add(term);
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (terms.size() > 0) {
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < terms.size(); i++) {
                sb.append(terms.get(i).getName());
                if (i < ops.size()) {
                    sb.append(ops.get(i));
                }
            }
            CSSNode node = new CSSNode(sb.toString());
            node.setStartLocation(terms.get(0).getStartLocation());
            node.setEndLocation(terms.get(terms.size() - 1).getEndLocation());
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode term() throws ParseException {
    CSSNode term = null;
    char unary;
    CSSNode func = null;
    CSSNode hex = null;
    Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case LENGTH:
      case EMS:
      case EXS:
      case ANGLE:
      case TIME:
      case FREQ:
      case RESOLUTION:
      case DATE:
      case DIMEN:
      case PERCENTAGE:
      case NUMBER:
      case FUNCTION:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          unary = unaryOperator();
          break;
        default:
          jj_la1[138] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          t = jj_consume_token(NUMBER);
          break;
        case PERCENTAGE:
          t = jj_consume_token(PERCENTAGE);
          break;
        case LENGTH:
          t = jj_consume_token(LENGTH);
          break;
        case EMS:
          t = jj_consume_token(EMS);
          break;
        case EXS:
          t = jj_consume_token(EXS);
          break;
        case ANGLE:
          t = jj_consume_token(ANGLE);
          break;
        case TIME:
          t = jj_consume_token(TIME);
          break;
        case FREQ:
          t = jj_consume_token(FREQ);
          break;
        case RESOLUTION:
          t = jj_consume_token(RESOLUTION);
          break;
        case DATE:
          t = jj_consume_token(DATE);
          break;
        case DIMEN:
          t = jj_consume_token(DIMEN);
          break;
        case FUNCTION:
          func = function();
          break;
        default:
          jj_la1[139] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_99:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[140] = jj_gen;
            break label_99;
          }
          jj_consume_token(S);
        }
        break;
      case STRING:
      case IDENT:
      case HASHIDENT:
      case HASH:
      case URL:
      case UNICODERANGE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          t = jj_consume_token(STRING);
          break;
        case IDENT:
          t = jj_consume_token(IDENT);
          break;
        case HASHIDENT:
        case HASH:
          hex = hexcolor();
          break;
        case URL:
          t = jj_consume_token(URL);
          break;
        case UNICODERANGE:
          t = jj_consume_token(UNICODERANGE);
          break;
        default:
          jj_la1[141] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_100:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[142] = jj_gen;
            break label_100;
          }
          jj_consume_token(S);
        }
        break;
      default:
        jj_la1[143] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (notNull(t)) {
            term = createNode(t);
        }
        else if (notNull(func)) {
            term = func;
        }
        else if (notNull(hex)) {
            term = hex;
        }
        {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode function() throws ParseException {
    CSSNode node = null;
    Token start = null;
    CSSNode expr = null;
    Token end = null;
    try {
      start = jj_consume_token(FUNCTION);
      label_101:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[144] = jj_gen;
          break label_101;
        }
        jj_consume_token(S);
      }
      expr = expr();
      end = jj_consume_token(RPARAN);
    } catch (ParseException e) {
        addException(e);
        error_skipto(RPARAN);
        {if (true) return null;}
    }
        if (notNull(start, expr, end)) {
            node = new CSSNode(start.image);
            node.addChild(expr);
            node.setStartLocation(getStartLocation(start));
            node.setEndLocation(getEndLocation(end));
        }
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public CSSNode hexcolor() throws ParseException {
    Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HASHIDENT:
        t = jj_consume_token(HASHIDENT);
        break;
      case HASH:
        t = jj_consume_token(HASH);
        break;
      default:
        jj_la1[145] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        addException(e);
        error_skipto(RBRACE);
        {if (true) return null;}
    }
        if (notNull(t)) {
            {if (true) return createNode(t);}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  String skipStatement() throws ParseException {
    StringBuilder s = new StringBuilder ();
    Token tok = getToken(0);
    boolean first = true;

    if ( tok.image != null) {
        s.append(tok.image);
    }

    /* FIXME here, two option, we skip during an error, or outside
    an error, currently both can fail with a TokenMgrError, should
    we catch all, or only when filling message for errors?
    
    -> taking the "always skip" approach.
     */
    while (true) {
        try {
            tok = getToken(1);
            if ( tok.kind == EOF) {
                if (first) {
                    return null;
                } else {
                    break;
                }
            }
            s.append(tok.image);
            if ( tok.kind == LBRACE) {
                getNextToken();
                s.append(skip_to_matching_brace());
                getNextToken();
                tok = getToken(1);
                break;
            } else if ( (tok.kind == RBRACE) || (tok.kind == SEMICOLON)) {
                getNextToken();
                tok = getToken(1);
                break;
            }
            getNextToken();
        } catch ( TokenMgrError tokenerror ) {
            // read one char at a time, and loop
            try {
                s.append(jj_input_stream.readChar());
                continue;
            } catch ( java.io.IOException ioex ) {
                return s.toString().trim();
            }
        }
        first = false;
    }

    // skip white space
    while ( tok.kind == S) {
        getNextToken();
        tok = getToken(1);
    }
    String statement = s.toString().trim();
    return statement;
  }

  String skip_to_matching_brace() throws ParseException {
    StringBuilder s = new StringBuilder ();
    Token tok;
    int nesting = 1;
    /* FIXME
    same as above */


    while (true) {


        tok = getToken(1);
        if ( tok.kind == EOF) {


            break;
        }
        s.append(tok.image);
        if ( tok.kind == LBRACE) {


            nesting++;
        } else if ( tok.kind == RBRACE) {


            nesting--;
            if ( nesting == 0) {


                break;
            }
        }
        getNextToken();
    }
    return s.toString();
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_3_6() {
    if (jj_scan_token(S)) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_102()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_103()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(S)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(S)) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(LPARAN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(21)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(S)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(S)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) return true;
    }
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(21)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_108()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_109()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) jj_scanpos = xsp;
    if (jj_scan_token(101)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public CSS3ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[146];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0xe00000,0xe00000,0x0,0x0,0x200000,0x200000,0x0,0xc00000,0xc00000,0x200000,0x200000,0x200000,0x0,0x0,0x200000,0x200000,0x200000,0x0,0x200000,0x20000000,0x200000,0x0,0x200000,0x200000,0x0,0x200000,0x20000000,0x0,0x0,0x200000,0x80000000,0x200000,0x80000000,0x200000,0x200000,0x200000,0x200000,0x200000,0x0,0x200000,0x200000,0x200000,0x200000,0x0,0x0,0x200000,0x200000,0x0,0x0,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x0,0x200000,0x20000000,0x200000,0x0,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x0,0x200000,0x20000000,0x200000,0x20000000,0x58000000,0x200000,0x200000,0x58200000,0x8000000,0x200000,0x20000000,0x200000,0x200000,0x200000,0x0,0x0,0x200000,0x0,0x58200000,0x200000,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x200000,0x3000000,0x200000,0x0,0x200000,0x3000000,0x200000,0x0,0x200000,0x200000,0x0,0x200000,0x200000,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x200000,0x0,0x200000,0x8000000,0x200000,0x8000000,0x28000000,0x8000000,0x0,0x200000,0x0,0x200000,0x8000000,0x200000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7f228070,0x0,0x0,0x0,0x0,0x0,0x10,0x800004,0x0,0x0,0x0,0x800004,0x0,0x0,0x0,0x10,0x0,0x0,0x7f228070,0x0,0x0,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x100013,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x10,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x4000,0x0,0x4000,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x10,0x2000,0x0,0x10,0x0,0x0,0x0,0x7f208060,0x7f208060,0x7f208060,0x7f208060,0x7f228070,0x7f000000,0x7f000000,0x20010,0x20010,0x20010,0x0,0x0,0xf00,0x0,0x14,0x0,0xf00,0x0,0x7f228070,0x0,0x0,0x14,0x0,0x0,0x0,0x10,0x200000,0x60,0x0,0x0,0x200000,0x0,0x0,0x0,0x1014,0x0,0x1014,0xff805074,0x1000,0xff000000,0x0,0x800074,0x0,0xff801074,0x0,0x60,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x20,0x0,0x0,0x40,0x80,0x0,0x0,0x800c1f11,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000011,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e000,0x1e000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000011,0x80000011,0x80000011,0x80000011,0x80000011,0x80000001,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000011,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x8,0x0,0x0,0x8,0x0,0x5,0x0,0x5,0x40000007,0x0,0x7,0x0,0x40000000,0x0,0x40000007,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x18,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x22,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x22,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x22,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x22,0x0,0x0,0x0,0x0,0x0,0x5,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x4,0x0,0x0,0x0,0x4,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[7];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CSS3Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CSS3Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CSS3ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 146; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 146; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CSS3Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CSS3ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 146; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 146; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CSS3Parser(CSS3ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 146; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CSS3ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 146; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[102];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 146; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 102; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
