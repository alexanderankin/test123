/* Generated By:JavaCC: Do not edit this line. XmlParserConstants.java */
package xml.parser.javacc;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface XmlParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ALPHA_CHAR = 1;
  /** RegularExpression Id. */
  int NUM_CHAR = 2;
  /** RegularExpression Id. */
  int ALPHANUM_CHAR = 3;
  /** RegularExpression Id. */
  int IDENTIFIER_CHAR = 4;
  /** RegularExpression Id. */
  int IDENTIFIER = 5;
  /** RegularExpression Id. */
  int QUOTED_STRING_NB = 6;
  /** RegularExpression Id. */
  int QUOTED_STRING = 7;
  /** RegularExpression Id. */
  int WHITESPACE = 8;
  /** RegularExpression Id. */
  int NEWLINE = 9;
  /** RegularExpression Id. */
  int QUOTE = 10;
  /** RegularExpression Id. */
  int EOL = 11;
  /** RegularExpression Id. */
  int COMMENT_START = 12;
  /** RegularExpression Id. */
  int ENDTAG_START = 13;
  /** RegularExpression Id. */
  int TAG_START = 14;
  /** RegularExpression Id. */
  int DECL_START = 15;
  /** RegularExpression Id. */
  int PCDATA = 16;
  /** RegularExpression Id. */
  int TAG_NAME = 18;
  /** RegularExpression Id. */
  int LST_ERROR = 19;
  /** RegularExpression Id. */
  int ATTR_NAME = 21;
  /** RegularExpression Id. */
  int TAG_END = 22;
  /** RegularExpression Id. */
  int TAG_SLASHEND = 23;
  /** RegularExpression Id. */
  int ATTR_EQ = 24;
  /** RegularExpression Id. */
  int IMPLICIT_TAG_END = 25;
  /** RegularExpression Id. */
  int LIT_ERROR = 26;
  /** RegularExpression Id. */
  int ATTR_VAL = 28;
  /** RegularExpression Id. */
  int LAV_ERROR = 29;
  /** RegularExpression Id. */
  int COMMENT_END = 30;
  /** RegularExpression Id. */
  int DASH = 31;
  /** RegularExpression Id. */
  int COMMENT_EOL = 32;
  /** RegularExpression Id. */
  int COMMENT_WORD = 33;
  /** RegularExpression Id. */
  int DECL_ANY = 34;
  /** RegularExpression Id. */
  int DECL_END = 35;

  /** Lexical state. */
  int LexDecl = 0;
  /** Lexical state. */
  int LexComment = 1;
  /** Lexical state. */
  int LexAttrVal = 2;
  /** Lexical state. */
  int LexInTag = 3;
  /** Lexical state. */
  int LexStartTag = 4;
  /** Lexical state. */
  int DEFAULT = 5;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<ALPHA_CHAR>",
    "<NUM_CHAR>",
    "<ALPHANUM_CHAR>",
    "<IDENTIFIER_CHAR>",
    "<IDENTIFIER>",
    "<QUOTED_STRING_NB>",
    "<QUOTED_STRING>",
    "<WHITESPACE>",
    "<NEWLINE>",
    "<QUOTE>",
    "<EOL>",
    "<COMMENT_START>",
    "<ENDTAG_START>",
    "<TAG_START>",
    "\"<!\"",
    "<PCDATA>",
    "<token of kind 17>",
    "<TAG_NAME>",
    "<LST_ERROR>",
    "<token of kind 20>",
    "<ATTR_NAME>",
    "\">\"",
    "\"/>\"",
    "\"=\"",
    "\"<\"",
    "<LIT_ERROR>",
    "<token of kind 27>",
    "<ATTR_VAL>",
    "<LAV_ERROR>",
    "<COMMENT_END>",
    "\"-\"",
    "<COMMENT_EOL>",
    "<COMMENT_WORD>",
    "<DECL_ANY>",
    "\">\"",
  };

}
