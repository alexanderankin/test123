<!DOCTYPE ACTIONS SYSTEM "actions.dtd">

<ACTIONS>
	<ACTION NAME="android.createAVD">
		<CODE>
		    <![CDATA[
            // Create Android project
            // Assumes "android" is in your path.
            // Must have CommonControls plugin installed for KappaLayout.
            
            
            import ise.java.awt.KappaLayout;
            
            // targets start with a number, sort on the number
            TreeMap targetSkins = new TreeMap(new Comparator(){
                    int compare(a, b) {
                        String inta = a.substring(0, a.indexOf(" "));
                        String intb = b.substring(0, b.indexOf(" "));
                        return (new Integer(inta).compareTo(new Integer(intb)));
                    }
            });
            
            createAndroidAVD(name, targetId, cardSize, skin) {
                if (name == null || name.trim().length() == 0) {
                    Macros.error(view, "Name cannot be empty.");
                    return ;
                }
                if (targetId == null || targetId.trim().length() == 0) {
                    Macros.error(view, "Target ID cannot be empty.");
                    return ;
                }
                if (cardSize == null || cardSize.trim().length() == 0) {
                    cardSize = "0M";
                }
                if (skin == null || skin.trim().length() == 0) {
                    skin = getDefaultSkin(target);
                    skin = skin.substring(0, skin.indexOf("(default)")).trim();
                }
                cmd = "android create avd -n " + name + " -t " + targetId + " -c " + cardSize + " -s " + skin;
                runInSystemShell(view, cmd); 
            }
            
            String getDefaultSkin(target) {
                skinNames = targetSkins.get(target);
                skins = skinNames.split(", ");
                for (skin : skins) {
                    if (skin.indexOf("(default)") > -1) {
                        return skin;
                    }
                }
                return null;
            }
            
            loadTargetsAndSkins() {
                // load the available target names
                Process p = Runtime.getRuntime().exec("android list targets");
                BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
                try {
                    String name = null;
                    while (true) {
                        String line = in.readLine();
                        if (line == null) {
                            break;
                        }
                        if (line.startsWith("id:")) {
                            String id = line.substring(4, line.indexOf(" ", 4));
                            name = line.substring(line.indexOf(" ", 4) + " or ".length());
                            name = name.replaceAll("\"", "");
                            name = id + " " + name;
                        }
                        if (line.trim().startsWith("Skins: ")) {
                            skins = line.trim().substring("Skins: ".length());
                            targetSkins.put(name, skins);
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            
            Vector getSkins(target) {
                skinNames = targetSkins.get(target);
                skins = skinNames.split(", ");
                Vector v = new Vector();
                for (skin : skins) {
                    v.add(skin);
                }
                return v;
            }
                
            createAVD() {
                // load the available targets and associated skins
                loadTargetsAndSkins();
                Vector targets = new Vector();
                for (target : targetSkins.keySet()) {
                    targets.add(target);   
                }
                
                // create the dialog
                title = "Create Android Virtual Device (AVD)";
                dialog = new JDialog(view, title, false);
                content = new JPanel(new KappaLayout());
                content.setBorder(BorderFactory.createEmptyBorder(12, 12, 12, 12));
                dialog.setContentPane(content);
            
                // create the components
                nameField = new JTextField();
                targetField = new JComboBox(targets);
                cardSizeField = new JTextField();
                kButton = new JRadioButton("K");
                mButton = new JRadioButton("M");
                skinField = new JComboBox();
            
                // km stuff
                JPanel kmPanel = new JPanel();
                kmPanel.add(kButton);
                kmPanel.add(mButton);
                ButtonGroup bg = new ButtonGroup();
                bg.add(kButton);
                bg.add(mButton);
                mButton.setSelected(true);
                
                // ok/cancel panel
                KappaLayout kl = new KappaLayout();
                JPanel buttonPanel = new JPanel();
                buttonPanel.setLayout(kl);
                ok = new JButton("OK");
                cancel = new JButton("Cancel");
                buttonPanel.add("0,1,,,,w, 3", ok);
                buttonPanel.add("1,1,,,,w, 3", cancel);
                kl.makeColumnsSameWidth(0, 1); 
            
                // add the components to the dialog
                content.add("0, 0, 1, 1, W, w, 3", new JLabel("AVD Name"));
                content.add("1, 0, 4, 1, W, w, 3", nameField);
                
                content.add("0, 1, 1, 1, W, w, 3", new JLabel("Target:"));
                content.add("1, 1, 4, 1, W, w, 3", targetField);
            
                content.add("0, 2, 1, 1, W, w, 3", new JLabel("SD Card Size:"));
                content.add("1, 2, 3, 1, W, w, 3", cardSizeField);
                content.add("4, 2, 1, 1, W, w, 3", kmPanel);
            
                content.add("0, 3, 1, 1, W, w, 3", new JLabel("Skin:"));
                content.add("1, 3, 4, 1, W, w, 3", skinField);
            
                content.add("0, 5", KappaLayout.createVerticalStrut(11));
                
                content.add("0, 6, 5, 1, E, , 3", buttonPanel);
            
                // add listeners
                ok.addActionListener(this);
                cancel.addActionListener(this);
                targetField.addActionListener(this);
            
                // show the dialog
                dialog.pack();
                target = targetField.getSelectedItem();
                loadSkinCombo(skinField, target);
                dialog.setLocationRelativeTo(view);
                dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
                dialog.setVisible(true);
            
                // button action listener
                void actionPerformed(e) {
                    if (e.getSource().equals(ok)) {
                        selectedItem = (String)targetField.getSelectedItem();
                        target = selectedItem.substring(0, selectedItem.indexOf(" "));
                        name = nameField.getText();
                        if (name != null && name.trim().length() > 0) {
                            if (name.indexOf(" ") > -1) {
                                Macros.error(dialog, "Name may not have spaces.");
                                name = name.replaceAll(" ", "");
                                return;
                            }
                        }
                        cardSize = cardSizeField.getText();
                        if (cardSize == null || cardSize.trim().length() == 0) {
                            cardSize = "0";
                        }
                        cardSize += mButton.isSelected() ? "M" : "K";
                        
                        skin = (String)skinField.getSelectedItem();
                        if (skin.indexOf("(default)") > -1) {
                            skin = skin.substring(0, skin.indexOf("(default)")).trim();   
                        }
                        dialog.dispose();
                        createAndroidAVD(name, target, cardSize, skin);
                    }
                    else if (e.getSource().equals(cancel)) {
                        dialog.dispose();   
                    }
                    else if (e.getSource().equals(targetField)) {
                        target = targetField.getSelectedItem();
                        loadSkinCombo(skinField, target);
                    }
                }
            }
            
            loadSkinCombo(skinField, target) {
                Vector skins = getSkins(target);
                skinField.setModel(new DefaultComboBoxModel(skins));
                skinField.setSelectedItem(getDefaultSkin(target));
            }
            
            createAVD();
            ]]>
        </CODE>
	</ACTION>
	<ACTION NAME="android.createProject">
		<CODE>
		    <![CDATA[
            // Create Android project
            // Assumes "android" is in your path.
            // Must have CommonControls plugin installed for KappaLayout.
            // Must have ProjectViewer plugin installed.
            
            
            import ise.java.awt.KappaLayout;
            import projectviewer.ProjectManager;
            import projectviewer.ProjectViewer;
            import projectviewer.config.ProjectOptions;
            import projectviewer.config.VersionControlService;
            import projectviewer.importer.RootImporter;
            import projectviewer.vpt.*;
            
            createAndroidProject(targetId, projectName, path, activityName, packageName) {
                if (targetId == null) {
                    Macros.error(view, "Target ID cannot be null.");
                    return ;
                }
                if (projectName == null) {
                    projectName = activityName;
                }
                if (path == null) {
                    Macros.error(view, "Path cannot be null.");
                    return ;
                }
                if (activityName == null) {
                    Macros.error(view, "Activity name cannot be null.");
                    return ;
                }
                if (packageName == null) {
                    Macros.error(view, "Package name cannot be null.");
                    return ;
                }
                runInSystemShell(view, "android create project --target " + targetId + " --name " + projectName + " --path " + path + " --activity " + activityName + " --package " + packageName);
            }
            
            createPVProject( projectName, projectPath ) {
                if (!isProjectViewerAvailable()) {
                    return;   
                }
                int make_project = JOptionPane.showConfirmDialog( view,
                    "Would you like to create a ProjectViewer project for " + projectName + "?",
                    "Create ProjectViewer Project?",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE );
                if ( make_project != JOptionPane.YES_OPTION ) {
                    return ;
                }
            
                final VPTProject project = new VPTProject( projectName );
                project.setRootPath( projectPath );
            
                // show the 'create project' dialog
                ProjectOptions.run( project, true, null );
            
                // get the group as set in the 'create project' dialog
                VPTGroup group = ( VPTGroup ) project.getParent();
                if ( group == null ) {
                    group = VPTRoot.getInstance();
                }
            
                // actually add the project to ProjectManager and set it as the active project
                ProjectManager.getInstance().addProject( project, group );
                ProjectViewer.setActiveNode( jEdit.getActiveView(), project );
            
                // import the checked out files into the project. This next line is a suggestion
                // from Marcelo that will automatically choose the 'Use CVS or SVN Entries' for
                // importing the files.
                projectviewer.importer.ImportUtils.saveFilter( project.getProperties(), new projectviewer.importer.CVSEntriesFilter(), "projectviewer.import" );
                RootImporter ipi = new RootImporter( project, null, ProjectViewer.getViewer( jEdit.getActiveView() ), jEdit.getActiveView() );
                // DONE: this doesn't work any more, change in PV API? It appears the locking code
                // has been removed from PV and this next line isn't needed any more.
                //ipi.setLockProject( false );
                ipi.doImport();
            
                // now show ProjectViewer
                view.getDockableWindowManager().showDockableWindow( "projectviewer" );
            }
            
            boolean isProjectViewerAvailable() {
                EditPlugin pv = jEdit.getPlugin( "projectviewer.ProjectPlugin", false );
                return pv != null;
            }
                
                
            createProject() {
                // load the available target names
                Process p = Runtime.getRuntime().exec("android list targets");
                BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
                targetList = new Vector();
                try {
                    while (true) {
                        String line = in.readLine();
                        if (line == null) {
                            break;
                        }
                        if (line.startsWith("id:")) {
                            String id = line.substring(4, line.indexOf(" ", 4));
                            String name = line.substring(line.indexOf(" ", 4) + " or ".length());
                            name = name.replaceAll("\"", "");
                            targetList.add(id + " " + name);
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            
                // create the dialog
                title = "Create Android Project";
                dialog = new JDialog(view, title, false);
                content = new JPanel(new KappaLayout());
                content.setBorder(BorderFactory.createEmptyBorder(12, 12, 12, 12));
                dialog.setContentPane(content);
            
                // create the components
                projectNameField = new JTextField();
                targetField = new JComboBox(targetList);
                pathField = new JTextField();
                chooseButton = new JButton("Browse");
                activityNameField = new JTextField();
                packageNameField = new JTextField();
            
                // ok/cancel panel
                KappaLayout kl = new KappaLayout();
                JPanel buttonPanel = new JPanel();
                buttonPanel.setLayout(kl);
                ok = new JButton("OK");
                cancel = new JButton("Cancel");
                buttonPanel.add("0,1,,,,w, 3", ok);
                buttonPanel.add("1,1,,,,w, 3", cancel);
                kl.makeColumnsSameWidth(0, 1); 
                dialog.getRootPane().setDefaultButton(ok);
            
                // add the components to the dialog
                content.add("0, 0, 1, 1, W, w, 3", new JLabel("Project name"));
                content.add("1, 0, 4, 1, W, w, 3", projectNameField);
                
                content.add("0, 1, 1, 1, W, w, 3", new JLabel("Build target:"));
                content.add("1, 1, 4, 1, W, w, 3", targetField);
            
                content.add("0, 2, 1, 1, W, w, 3", new JLabel("Project path"));
                content.add("1, 2, 3, 1, W, w, 3", pathField);
                content.add("4, 2, 1, 1, W, w, 3", chooseButton);
            
                content.add("0, 3, 1, 1, W, w, 3", new JLabel("Activity name"));
                content.add("1, 3, 4, 1, W, w, 3", activityNameField);
            
                content.add("0, 4, 1, 1, W, w, 3", new JLabel("Package name"));
                content.add("1, 4, 4, 1, W, w, 3", packageNameField);
                
                content.add("0, 5", KappaLayout.createVerticalStrut(11));
                
                content.add("0, 6, 5, 1, E, , 3", buttonPanel);
            
                // add listeners
                ok.addActionListener(this);
                cancel.addActionListener(this);
                chooseButton.addActionListener(this);
            
                // show the dialog
                dialog.pack();
                dialog.setLocationRelativeTo(view);
                dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
                dialog.setVisible(true);
            
                // button action listener
                void actionPerformed(e) {
                    if (e.getSource().equals(ok)) {
                        selectedItem = (String)targetField.getSelectedItem();
                        target = selectedItem.substring(0, selectedItem.indexOf(" "));
                        projectName = projectNameField.getText();
                        if (projectName != null && projectName.trim().length() > 0) {
                            if (projectName.indexOf(" ") > -1) {
                                Macros.error(dialog, "Project name may not have spaces.");
                                projectName = projectName.replaceAll(" ", "");
                                return;
                            }
                        }
                        path = pathField.getText();
                        if (path == null || path.trim().length() == 0) {
                            Macros.error(dialog, "Please enter a path for the project files.");
                            return;
                        }
                        activityName = activityNameField.getText();
                        if (activityName == null || activityName.trim().length() == 0) {
                            Macros.error(dialog, "Please enter a name for the default activity class.");
                            return;
                        }
                        if (activityName != null && activityName.trim().length() > 0) {
                            if (activityName.indexOf(" ") > -1) {
                                Macros.error(dialog, "Activity name may not have spaces.");
                                activityName = activityName.replaceAll(" ", "");
                                return;
                            }
                        }
                        packageName = packageNameField.getText();
                        if (packageName == null || packageName.trim().length() == 0) {
                            Macros.error(dialog, "Please enter a package name.");
                            return;
                        }
                        dialog.dispose();
                        createAndroidProject(target, projectName, path, activityName, packageName);
                        createPVProject(projectName, path);
                    }
                    else if (e.getSource().equals(cancel)) {
                        dialog.dispose();   
                    }
                    else if (e.getSource().equals(chooseButton)) {
                        String[] paths = GUIUtilities.showVFSFileDialog(view, System.getProperty("user.home"), VFSBrowser.CHOOSE_DIRECTORY_DIALOG, false);
                        if (paths != null && paths.length == 1) {
                            pathField.setText(paths[0]);
                        }
                    }
                }
            }
            
            createProject();
            ]]>
		</CODE>
	</ACTION>
	<ACTION NAME="android.launchAVD">
		<CODE>
		    <![CDATA[
            // start Android AVD
            // requires CommonControls plugin
            // assumes "android" and "emulator" are both in your path
            // can start multiple AVDs at once
            
            import ise.java.awt.KappaLayout;
            
            startEmulator(avd) {
                if (avd == null || avd.length() == 0) {
                    return ;
                }
                Runtime.getRuntime().exec("emulator -avd " + avd);
            }
            
            startAVD() {
                Process p = Runtime.getRuntime().exec("android list avd");
                BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
                avds = new Vector();
                try {
                    while (true) {
                        String line = in.readLine();
                        if (line == null) {
                            break;
            
                        }
                        line = line.trim();
                        if (line.startsWith("Name: ")) {
                            String name = line.substring("Name: ".length());
                            if (name != null && name.trim().length() > 0) {
                                avds.add(name);
                            }
                        }
                    }
                } catch (Exception ex) {
                    Macros.error(view, "Can not get list of AVDs:\n" + ex.getMessage());
                    return ;
                }
            
                if (avds.size() == 0) {
                    Macros.error(view, "No AVDs found to launch.");
                    return ;
                }
            
                // create the dialog to choose the AVD to start
                title = "Launch AVD";
                dialog = new JDialog(view, title, false);
                content = new JPanel(new KappaLayout());
                content.setBorder(BorderFactory.createEmptyBorder(12, 12, 12, 12));
                dialog.setContentPane(content);
            
                // create the components
                avdList = new JList(avds);
                avdList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            
                // ok/cancel panel
                KappaLayout kl = new KappaLayout();
                JPanel buttonPanel = new JPanel();
                buttonPanel.setLayout(kl);
                ok = new JButton("OK");
                cancel = new JButton("Cancel");
                buttonPanel.add("0,1,,,,w, 3", ok);
                buttonPanel.add("1,1,,,,w, 3", cancel);
                kl.makeColumnsSameWidth(0, 1);
                dialog.getRootPane().setDefaultButton(ok);
            
                // add the components to the dialog
                content.add("0, 0, 1, 1, W, w, 3", new JScrollPane(avdList));
                content.add("0, 1", KappaLayout.createVerticalStrut(11));
                content.add("0, 2, 1, 1, E,, 3", buttonPanel);
            
                // add listeners
                ok.addActionListener(
                    new ActionListener() { 
                        void actionPerformed(event) { 
                            Object[] selected = avdList.getSelectedValues(); 
                            if (selected == null || selected.length == 0) {
                                Macros.error(view, "No AVDs selected to launch.");
                                return;
                            }
                            dialog.dispose();
                            for (int i = 0; i < selected.length; i++) {
                                avd = (String)selected[i];
                                startEmulator(avd);
                            }
                        } 
                    } 
                );
                cancel.addActionListener(
                    new ActionListener() { 
                        void actionPerformed(event) { 
                            dialog.dispose(); 
                        } 
                    } 
                );
            
                // show the dialog
                dialog.pack();
                dialog.setLocationRelativeTo(view);
                dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
                dialog.setVisible(true);
            }
            
            startAVD();
		    ]]>
		</CODE>
	</ACTION>
	<ACTION NAME="android.listTargets">
		<CODE>
		    <![CDATA[
                // list Android targets
                // assumes "android" is in your path
                
                listTargets() {
                    Process p = Runtime.getRuntime().exec("android list targets");
                    BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
                    targetList = new StringBuilder("<html><h3>Android Target List</h3>");
                    try {
                        while (true) {
                            String line = in.readLine();
                            if (line == null) {
                                break;
                            }
                            if (line.startsWith("id:")) {
                                String id = line.substring(4, line.indexOf(" ", 4));
                                String name = line.substring(line.indexOf(" ", 4) + " or ".length());
                                name = name.replaceAll("\"", "");
                                targetList.append(id).append(" ").append(name).append("<br>");
                            }
                        }
                        Macros.message(view, targetList.toString());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                
                listTargets();
            ]]>
		</CODE>
	</ACTION>
	<ACTION NAME="android.listAVDs">
		<CODE>
		    <![CDATA[
            // list Android AVDs
            // assumes "android" is in your path
            
            listAVDs() {
                Process p = Runtime.getRuntime().exec("android list avd");
                BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
                avdList = new StringBuilder("<html><h3>Android AVD List</h3>");
                try {
                    while (true) {
                        String line = in.readLine();
                        if (line == null) {
                            break;
                        }
                        line = line.trim();
                        if (line.startsWith("Name: ")) {
                            String name = line.substring("Name: ".length());
                            avdList.append(name).append("<br>");
                        }
                    }
                    Macros.message(view, avdList.toString());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            
            listAVDs();
            ]]>
		</CODE>
	</ACTION>
	<ACTION NAME="android.buildDebug">
		<CODE>
		    <![CDATA[
                // build debug version of android app using build.xml in current project
                // assumes "android" is in your path, assumes "ant" is in your path
                // output goes to Console
                
                import projectviewer.vpt.VPTProject;
                import projectviewer.ProjectViewer;
                import java.io.*;
                
                buildDebug() {
                    if (!isProjectViewerAvailable()) {
                        Macros.error("ProjectViewer and build.xml not available.");
                        return;
                    }
                    
                    String projectDir = getProjectRoot(view);
                    if ("".equals(projectDir)) {
                        Macros.error("Can not find project base directory for current project.");
                        return;
                    }
                    File buildFile = new File(projectDir, "build.xml");
                    if (!buildFile.exists()) {
                        Macros.error("build.xml not found in " + projectDir);
                        return;
                    }
                    
                    runInSystemShell(view, "ant -f " + buildFile.getAbsolutePath() + " debug");
                }
                
                boolean isProjectViewerAvailable() {
                    EditPlugin pv = jEdit.getPlugin( "projectviewer.ProjectPlugin", false );
                    return pv != null;
                }
                
                String getProjectRoot( view ) {
                    VPTProject project = ProjectViewer.getActiveProject( view );
                    return project == null ? "" : project.getRootPath();
                }
                
                buildDebug();		    
            ]]>
		</CODE>
	</ACTION>
	<ACTION NAME="android.deployDebug">
		<CODE>
		    <![CDATA[
                // deploy debug version of android app using build.xml in current project to
                // currently running emulator.
                // assumes ProjectViewer is installed, assumes "ant" is in your path
                // output goes to Console
                
                import projectviewer.vpt.VPTProject;
                import projectviewer.ProjectViewer;
                import java.io.*;
                
                deployDebug() {
                    if (!isProjectViewerAvailable()) {
                        Macros.error("ProjectViewer and build.xml not available.");
                        return;
                    }
                    
                    String projectDir = getProjectRoot(view);
                    if ("".equals(projectDir)) {
                        Macros.error("Can not find project base directory for current project.");
                        return;
                    }
                    File buildFile = new File(projectDir, "build.xml");
                    if (!buildFile.exists()) {
                        Macros.error("build.xml not found in " + projectDir);
                        return;
                    }
                    
                    runInSystemShell(view, "ant -f " + buildFile.getAbsolutePath() + " installd");
                }
                
                boolean isProjectViewerAvailable() {
                    EditPlugin pv = jEdit.getPlugin( "projectviewer.ProjectPlugin", false );
                    return pv != null;
                }
                
                String getProjectRoot( view ) {
                    VPTProject project = ProjectViewer.getActiveProject( view );
                    return project == null ? "" : project.getRootPath();
                }
                
                deployDebug();		    
            ]]>
		</CODE>
	</ACTION>
</ACTIONS>

