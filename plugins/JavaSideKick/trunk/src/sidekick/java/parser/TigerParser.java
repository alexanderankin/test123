/* Generated By:JavaCC: Do not edit this line. TigerParser.java */
package sidekick.java.parser;

import sidekick.java.node.*;

import java.io.*;
import java.util.*;

/**
 * Based on grammar to parse Java version 1.5 written by Sreenivasa Viswanadha,
 * parses a java file for the JavaSideKick plugin to provide a java code
 * browser that works with java 1.5.  I've also updated this file so it will
 * parse javacc files for JavaSideKick too, that makes it a lot easier to edit
 * files such as this.
 * <p>
 * Example usage to parse a java file:<p>
 * <code>
 * TigerParser parser = new TigerParser(filename);<br>
 * CUNode root = parser.getJavaRootNode();<br>
 * </code>
 * or to parse a javacc file:<br>
 * <code>
 * TigerParser parser = new TigerParser(filename);<br>
 * CUNode root = parser.getJavaCCRootNode();<br>
 * </code>
 * Calling either of the above causes the file to be parsed into
 * TigerNodes, of which, CUNode is the top-level.  The TigerNodes have a parent/
 * child relastionship, which naturally forms a tree structure.
 * <p>
 * To turn this .jj file into a .java file, run <code>javacc Tiger.jj</code>
 * from the directory that contains this file.  Javacc will produce a number of
 * .java files, Be careful -- not all files in the directory are produced by
 * javacc, in particular ModifierSet.java and Token.java are required files and
 * are NOT produced by javacc. So the sequence is:<br>
 * .jj -> javacc -> .java -> javac -> .class
 * <p>
 */
public class TigerParser implements TigerParserConstants {
   // accumulates counts of classes, interfaces, methods and fields. 
   private Results results = new Results();


   private InputStream inputStream = null;

    /**
     * Constructor for TigerParser.  Note that JavaSideKick does not use this 
     * constructor -- since the options for building the parser have both
     * USER_TOKEN_MANAGER and USER_CHAR_STREAM set to false (these are the
     * default values so are not explicitly set), javacc will create a
     * constructor "public TigerParser(InputStream)".  It is that constructor
     * that JavaSideKick uses.
     * @param fileName name of the file to parse
     */
   public TigerParser(String filename)
   {
      this(System.in);
      try {
          inputStream = new FileInputStream(new File(filename));
          ReInit(inputStream);
      }
      catch(Exception e) {
        e.printStackTrace();
      }
   }

   TigerParser(JavaCharStream stream) {
        jj_input_stream = stream;
        token_source = new TigerParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
   }


        /**
	 * @return the accumulated counts of classes, interfaces, methods, and fields.   
	 */
   public Results getResults() {
        return results;
   }

   public Location getLocation(Token t) {
       if (t == null)
           return new Location(0, 0);
       return new Location(t.beginLine, t.beginColumn);
   }

   public Location getEndLocation(Token t) {
       if (t == null)
           return new Location(0, 0);
       return new Location(t.endLine, t.endColumn);
   }

   public Location getLocation(Modifier m) {
        if (m == null)
            return new Location(0, 0);
        if (m.beginLine == -1)
            m.beginLine = 0;
        return new Location(m.beginLine, m.beginColumn);
   }

   public void error_skipto(int kind) {
       ParseException e = generateParseException();  // generate the exception object.
       addException(e);
       Token t = null;
       int i = 0;
       do {
           i++;
           if (i > 100) {
                break;
           }
           t = getNextToken();
       } while (t != null && t.kind != kind);
   }

   private List exceptions = new ArrayList();

   private void addException(ParseException pe) {
       ErrorNode en = new ErrorNode(pe);
       exceptions.add(en);
   }

   public List getErrors() {
       return exceptions;
   }

   public void adjustModifier(Modifier m, Token t) {
       if (m.beginLine < t.beginLine) {
            m.beginLine = t.beginLine;
       }
       if (m.beginLine == t.beginLine && (t.beginColumn < m.beginColumn || m.beginColumn == -1)) {
            m.beginColumn = t.beginColumn;
       }
       if (m.endLine < t.endLine) {
            m.endLine = t.endLine;
       }
       if (m.endLine == t.endLine && m.endColumn < t.endColumn) {
            m.endColumn = t.endColumn;
       }
   }

   public void setTabSize(int size) {
        jj_input_stream.setTabSize(size);
   }

   public int getTabSize() {
        return jj_input_stream.getTabSize(0);
   }

  /*
   * Returns true if the next token is not in the FOLLOW list of "expansion".
   * It is used to decide when the end of an "expansion" has been reached.
   */
  private boolean notTailOfExpansionUnit() {
    Token t;
    t = getToken(1);
    if (t.kind == BIT_OR || t.kind == COMMA || t.kind == RPAREN || t.kind == RBRACE || t.kind == RBRACKET) return false;
    return true;
  }

/************************************************
 * THE JAVACC GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/
  final public CUNode getJavaCCRootNode(int tab_size) throws ParseException {
    setTabSize(tab_size);
    CUNode n = new CUNode();
    List children = null;
    children = javacc_input();
    if (children != null ) {
        for (Iterator it = children.iterator(); it.hasNext(); ) {
            n.addChild((TigerNode)it.next());
        }
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public List javacc_input() throws ParseException {
    List children = new ArrayList();
    TigerNode options_node = null;
    Token parser_node_start_t = null;
    Token parser_node_end_t = null;
    Token cunode_start_t = null;
    Token cunode_end_t = null;
    TigerNode production_node = null;
    TigerNode cunode = null;
    TigerNode parser_node = new TigerNode(){public int getOrdinal(){return TigerNode.PARSER;}};
    options_node = javacc_options();
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("PARSER_BEGIN")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    parser_node_start_t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    identifier();
    cunode_start_t = jj_consume_token(RPAREN);
    cunode = CompilationUnit(getTabSize());
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("PARSER_END")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    cunode_end_t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    identifier();
    parser_node_end_t = jj_consume_token(RPAREN);
    label_1:
    while (true) {
      production_node = production();
                                   children.add(production_node);
      if (jj_2_1(1)) {
        ;
      } else {
        break label_1;
      }
    }
    jj_consume_token(0);
    if (options_node != null) {
        children.add(options_node);
    }
    if (parser_node_start_t != null && parser_node_end_t != null ) {
        parser_node.setName("PARSER");
        parser_node.setStartLocation(getLocation(parser_node_start_t));
        parser_node.setEndLocation(getEndLocation(parser_node_end_t));
        children.add(parser_node);
        if (cunode != null) {
            cunode.setStartLocation(getLocation(cunode_start_t));
            cunode.setEndLocation(getEndLocation(cunode_end_t));
            if (cunode.getChildren() != null ) {
                for (Iterator it = cunode.getChildren().iterator(); it.hasNext(); ) {
                    parser_node.addChild((TigerNode)it.next());
                }
            }
            else {
                parser_node.addChild(cunode);
            }
        }
    }
    {if (true) return children;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode javacc_options() throws ParseException {
    TigerNode tn = new TigerNode() {public int getOrdinal() { return TigerNode.OPTIONS;}};
    Token start_t = null;
    Token end_t = null;
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("options")) {
      start_t = jj_consume_token(IDENTIFIER);
      jj_consume_token(LBRACE);
      label_2:
      while (true) {
        option_binding();
        if (jj_2_2(1)) {
          ;
        } else {
          break label_2;
        }
      }
      end_t = jj_consume_token(RBRACE);
    } else {
      ;
    }
    tn.setName("options");
    tn.setStartLocation(getLocation(start_t));
    tn.setEndLocation(getEndLocation(end_t));
    {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public void option_binding() throws ParseException {
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("LOOKAHEAD")) {
      identifier();
    } else if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("IGNORE_CASE")) {
      identifier();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(ASSIGN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      IntegerLiteral();
      break;
    case FALSE:
    case TRUE:
      BooleanLiteral();
      break;
    case STRING_LITERAL:
      StringLiteral();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
  }

  final public TigerNode production() throws ParseException {
    TigerNode tn = null;
    if (jj_2_3(1)) {
      /*
         * Since JAVACODE is both a JavaCC reserved word and a Java identifier,
         * we need to give preference to "javacode_production" over
         * "bnf_production".
         */
        tn = javacode_production();
    } else if (jj_2_4(1)) {
      /*
         * Since SKIP, TOKEN, etc. are both JavaCC reserved words and Java
         * identifiers, we need to give preference to "regular_expression_production"
         * over "bnf_production".
         */
        tn = regular_expr_production();
    } else if (jj_2_5(1)) {
      /*
         * Since TOKEN_MGR_DECLS is both a JavaCC reserved word and a Java identifier,
         * we need to give preference to "token_manager_decls" over
         * "bnf_production".
         */
        tn = token_manager_decls();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case VOID:
      case IDENTIFIER:
        tn = bnf_production();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode javacode_production() throws ParseException {
    JavaCodeProductionNode mn = new JavaCodeProductionNode();
    List params = null;
    Token start_t = null;
    Type resultType = null;
    String identifier = "";
    BlockNode bn = null;
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("JAVACODE")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    start_t = jj_consume_token(IDENTIFIER);
    resultType = ResultType();
    identifier = identifier();
    params = FormalParameters();
    if (jj_2_6(2)) {
      jj_consume_token(THROWS);
      Name();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_3;
        }
        jj_consume_token(COMMA);
        Name();
      }
    } else {
      ;
    }
    if (jj_2_7(2)) {
      node_descriptor();
    } else {
      ;
    }
    bn = Block();
    if (start_t != null){
        mn.setStartLocation(getLocation(start_t));
    }
    if (resultType != null) {
        mn.setReturnType(resultType.toString());
    }
    mn.setName(identifier);
    if (params != null) {
        mn.setFormalParams(params);
    }
    if (bn != null) {
        mn.setEndLocation(bn.getEndLocation());
        mn.addChild(bn);
    }
    {if (true) return mn;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode bnf_production() throws ParseException {
    BNFProductionNode mn = new BNFProductionNode();
    List params = null;
    Type resultType = null;
    String identifier = "";
    Token end_t = null;
    BlockNode java_block = null;
    resultType = ResultType();
    identifier = identifier();
    params = FormalParameters();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      Name();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_4;
        }
        jj_consume_token(COMMA);
        Name();
      }
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 125:
      node_descriptor();
      break;
    default:
      ;
    }
    jj_consume_token(COLON);
    java_block = Block();
    jj_consume_token(LBRACE);
    expansion_choices();
    end_t = jj_consume_token(RBRACE);
    if (resultType != null) {
        mn.setStartLocation(resultType.getStartLocation());
        mn.setReturnType(resultType.toString());
    }
    mn.setName(identifier);
    if (params != null) {
        mn.setFormalParams(params);
    }
    if (end_t != null ) {
        mn.setEndLocation(getEndLocation(end_t));
    }
    if (java_block != null) {
        mn.addChild(java_block);
    }
    {if (true) return mn;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode regular_expr_production() throws ParseException {
    Token start_t = null;
    Token end_t = null;
    Token t = null;
    TigerNode tn = new RegexProductionNode();
    Token kind = null;
    StringBuffer lexical_state_list = new StringBuffer();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      if (jj_2_8(2)) {
        start_t = jj_consume_token(LT);
        jj_consume_token(STAR);
        jj_consume_token(GT);
                                      lexical_state_list.append("<*>");
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          start_t = jj_consume_token(LT);
          t = jj_consume_token(IDENTIFIER);
                                lexical_state_list.append("<").append(t.image);
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              break label_5;
            }
            jj_consume_token(COMMA);
            t = jj_consume_token(IDENTIFIER);
                                                                                                       lexical_state_list.append(",").append(t.image);
          }
          jj_consume_token(GT);
                                                                                                                                                                lexical_state_list.append(">");
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      ;
    }
    kind = regexpr_kind();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("IGNORE_CASE")) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(IDENTIFIER);
      jj_consume_token(RBRACKET);
      break;
    default:
      ;
    }
    jj_consume_token(COLON);
    jj_consume_token(LBRACE);
    regexpr_spec();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(BIT_OR);
      regexpr_spec();
    }
    end_t = jj_consume_token(RBRACE);
      if (lexical_state_list.length() > 0) {
          tn.setName(lexical_state_list.toString());
      }
      else if (kind != null) {
          tn.setName(kind.image);
      }
    tn.setStartLocation(getLocation(start_t == null ? kind : start_t));
    tn.setEndLocation(getEndLocation(end_t));
    {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode token_manager_decls() throws ParseException {
    Token start_t = null;
    BlockNode bn = null;
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("TOKEN_MGR_DECLS")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    start_t = jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    bn = TokenMgrDeclBlock();
    TigerNode tn = new TokenMgrDeclProductionNode();
    tn.setName(start_t.image);
    tn.setStartLocation(getLocation(start_t));
    if (bn != null) {
        tn.setEndLocation(bn.getEndLocation());
        tn.addChildren(bn.getChildren());
    }
    {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public Token regexpr_kind() throws ParseException {
    Token t = null;
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("TOKEN")) {
      t = jj_consume_token(IDENTIFIER);
    } else if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("SPECIAL_TOKEN")) {
      t = jj_consume_token(IDENTIFIER);
    } else if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("SKIP")) {
      t = jj_consume_token(IDENTIFIER);
    } else if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("MORE")) {
      t = jj_consume_token(IDENTIFIER);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public void regexpr_spec() throws ParseException {
    regular_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      Block();
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      jj_consume_token(IDENTIFIER);
      break;
    default:
      ;
    }
  }

  final public void expansion_choices() throws ParseException {
    expansion();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        break label_7;
      }
      jj_consume_token(BIT_OR);
      expansion();
    }
  }

  final public void expansion() throws ParseException {
    if (jj_2_9(1)) {
      if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("LOOKAHEAD")) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      local_lookahead();
      jj_consume_token(RPAREN);
    } else {
      ;
    }
    label_8:
    while (true) {
      expansion_unit();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 125:
        node_descriptor();
        break;
      default:
        ;
      }
      if (notTailOfExpansionUnit()) {
        ;
      } else {
        break label_8;
      }
    }
  }

  final public void local_lookahead() throws ParseException {
          boolean commaAtEnd = false, emptyLA = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      IntegerLiteral();
          emptyLA = false;
      break;
    default:
      ;
    }
    if (!emptyLA && (getToken(1).kind != RPAREN)) {
      jj_consume_token(COMMA);
          commaAtEnd = true;
    } else {
      ;
    }
    if (getToken(1).kind != RPAREN && getToken(1).kind != LBRACE) {
      expansion_choices();
          emptyLA = false; commaAtEnd = false;
    } else {
      ;
    }
    if (!emptyLA && !commaAtEnd && (getToken(1).kind != RPAREN)) {
      jj_consume_token(COMMA);
          commaAtEnd = true;
    } else {
      ;
    }
    if (emptyLA || commaAtEnd) {
      jj_consume_token(LBRACE);
      Expression();
      jj_consume_token(RBRACE);
    } else {
      ;
    }
  }

  final public void expansion_unit() throws ParseException {
    if (jj_2_11(1)) {
      if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("LOOKAHEAD")) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      local_lookahead();
      jj_consume_token(RPAREN);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        Block();
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        expansion_choices();
        jj_consume_token(RBRACKET);
        break;
      case TRY:
        jj_consume_token(TRY);
        jj_consume_token(LBRACE);
        expansion_choices();
        jj_consume_token(RBRACE);
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CATCH:
            ;
            break;
          default:
            break label_9;
          }
          jj_consume_token(CATCH);
          jj_consume_token(LPAREN);
          Name();
          jj_consume_token(IDENTIFIER);
          jj_consume_token(RPAREN);
          Block();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINALLY:
          jj_consume_token(FINALLY);
          Block();
          break;
        default:
          ;
        }
        break;
      default:
        if (jj_2_12(2147483647)) {
          if (jj_2_10(2147483647)) {
            PrimaryExpression();
            jj_consume_token(ASSIGN);
          } else {
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING_LITERAL:
          case LT:
            regular_expression();
            break;
          case IDENTIFIER:
            identifier();
            Arguments();
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
            jj_consume_token(LPAREN);
            expansion_choices();
            jj_consume_token(RPAREN);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case HOOK:
            case PLUS:
            case STAR:
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case PLUS:
                jj_consume_token(PLUS);
                break;
              case STAR:
                jj_consume_token(STAR);
                break;
              case HOOK:
                jj_consume_token(HOOK);
                break;
              default:
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
            default:
              ;
            }
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

  final public void regular_expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      StringLiteral();
      break;
    default:
      if (jj_2_13(3)) {
        jj_consume_token(LT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case 125:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 125:
            jj_consume_token(125);
            break;
          default:
            ;
          }
          identifier();
          jj_consume_token(COLON);
          break;
        default:
          ;
        }
        complex_regular_expression_choices();
        jj_consume_token(GT);
      } else if (jj_2_14(2)) {
        jj_consume_token(LT);
        identifier();
        jj_consume_token(GT);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          jj_consume_token(LT);
          if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("EOF")) {

          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(IDENTIFIER);
          jj_consume_token(GT);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void complex_regular_expression_choices() throws ParseException {
    complex_regular_expression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        break label_10;
      }
      jj_consume_token(BIT_OR);
      complex_regular_expression();
    }
  }

  final public void complex_regular_expression() throws ParseException {
    label_11:
    while (true) {
      complex_regular_expression_unit();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case LPAREN:
      case LBRACKET:
      case LT:
      case TILDE:
        ;
        break;
      default:
        break label_11;
      }
    }
  }

  final public void complex_regular_expression_unit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      StringLiteral();
      break;
    case LT:
      jj_consume_token(LT);
      identifier();
      jj_consume_token(GT);
      break;
    case LBRACKET:
    case TILDE:
      character_list();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      complex_regular_expression_choices();
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HOOK:
      case PLUS:
      case STAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case STAR:
          jj_consume_token(STAR);
          break;
        case HOOK:
          jj_consume_token(HOOK);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        ;
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void character_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TILDE:
      jj_consume_token(TILDE);
      break;
    default:
      ;
    }
    jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      character_descriptor();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_12;
        }
        jj_consume_token(COMMA);
        character_descriptor();
      }
      break;
    default:
      ;
    }
    jj_consume_token(RBRACKET);
  }

  final public void character_descriptor() throws ParseException {
    StringLiteral();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      StringLiteral();
      break;
    default:
      ;
    }
  }

  final public String identifier() throws ParseException {
    Token t = null;
    t = jj_consume_token(IDENTIFIER);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/**********************************************
 * THE JJTREE PRODUCTIONS START HERE          *
 **********************************************/
  final public void node_descriptor() throws ParseException {
    jj_consume_token(125);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
        jj_consume_token(GT);
        break;
      default:
        ;
      }
      node_descriptor_expression();
      jj_consume_token(RPAREN);
      break;
    default:
      ;
    }
  }

  void node_descriptor_expression() throws ParseException {
  Token tok;
  int nesting = 1;
  while (true) {
    tok = getToken(1);
    if (tok.kind == 0) {
      throw new ParseException();
    }
    if (tok.kind == LPAREN) nesting++;
    if (tok.kind == RPAREN) {
      nesting--;
      if (nesting == 0) break;
    }
    tok = getNextToken();
  }
  }

/* javacc productions */
  final public void IntegerLiteral() throws ParseException {
    jj_consume_token(INTEGER_LITERAL);
  }

  final public void StringLiteral() throws ParseException {
    jj_consume_token(STRING_LITERAL);
  }

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  final public CUNode getJavaRootNode(int tab_size) throws ParseException {
    CUNode n = null;
    n = JavaCompilationUnit(tab_size);
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

/**
 * Main entry point for parsing the PARSER section in javacc files. Use 
 * JavaCompilationUnit as main entry point for parsing java files.
 * @return a CUNode, which is parent or root node of all other nodes.
 */
  final public CUNode CompilationUnit(int tab_size) throws ParseException {
    setTabSize(tab_size);
    CUNode n = new CUNode();
    TigerNode a;
    String packageName = "";
    ImportNode in = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PACKAGE:
        packageName = PackageDeclaration();
        break;
      default:
        ;
      }
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
          ;
          break;
        default:
          break label_13;
        }
        in = ImportDeclaration();
                                      n.addImport(in);
      }
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case CLASS:
        case ENUM:
        case FINAL:
        case INTERFACE:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOLATILE:
        case SEMICOLON:
        case AT:
          ;
          break;
        default:
          break label_14;
        }
        a = TypeDeclaration();
               n.addChild(a);
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        n.setPackageName(packageName);
        {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

/**
 * Main entry point for parsing java files. 
 * @return a CUNode, which is parent or root node of all other nodes.
 */
  final public CUNode JavaCompilationUnit(int tab_size) throws ParseException {
    CUNode n = null;
    Token end_t = null;
    try {
      n = CompilationUnit(tab_size);
      // read the whole file
                 end_t = jj_consume_token(0);
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        if (end_t != null) {
            n.setEndLocation(getLocation(end_t));
        }
        {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public String PackageDeclaration() throws ParseException {
    TigerNode name = null;
    try {
      jj_consume_token(PACKAGE);
      name = Name();
      jj_consume_token(SEMICOLON);
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        {if (true) return name == null ? "" : name.getName();}
    throw new Error("Missing return statement in function");
  }

/**
 * @return just the package name, without the 'import' or 'static' or '.*', e.g.
 * "import java.util.*;" will return "java.util".  A fully qualified import will
 * return the full classname, e.g. "import java.util.List;" will return
 * "java.util.List", this is also the case with static imports, e.g.
 * "import static java.lang.Math.PI;" will return "java.lang.Math.PI".
 */
  final public ImportNode ImportDeclaration() throws ParseException {
    TigerNode name = null;
    try {
      jj_consume_token(IMPORT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        jj_consume_token(STATIC);
        break;
      default:
        ;
      }
      name = Name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(STAR);
        break;
      default:
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        if (name != null) {
            ImportNode in = new ImportNode(name.getName());
            in.setStartLocation(name.getStartLocation());
            in.setEndLocation(name.getEndLocation());
            {if (true) return in;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */
  final public Modifier Modifiers() throws ParseException {
   int modifiers = 0;
   Token t = null;
   Modifier m = new Modifier();
    label_15:
    while (true) {
      if (jj_2_15(2)) {
        ;
      } else {
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        t = jj_consume_token(PUBLIC);
                modifiers |= ModifierSet.PUBLIC; adjustModifier(m, t);
        break;
      case STATIC:
        t = jj_consume_token(STATIC);
                modifiers |= ModifierSet.STATIC;  adjustModifier(m, t);
        break;
      case PROTECTED:
        t = jj_consume_token(PROTECTED);
                   modifiers |= ModifierSet.PROTECTED;  adjustModifier(m, t);
        break;
      case PRIVATE:
        t = jj_consume_token(PRIVATE);
                 modifiers |= ModifierSet.PRIVATE;  adjustModifier(m, t);
        break;
      case FINAL:
        t = jj_consume_token(FINAL);
               modifiers |= ModifierSet.FINAL;  adjustModifier(m, t);
        break;
      case ABSTRACT:
        t = jj_consume_token(ABSTRACT);
                  modifiers |= ModifierSet.ABSTRACT;  adjustModifier(m, t);
        break;
      case SYNCHRONIZED:
        t = jj_consume_token(SYNCHRONIZED);
                      modifiers |= ModifierSet.SYNCHRONIZED;  adjustModifier(m, t);
        break;
      case NATIVE:
        t = jj_consume_token(NATIVE);
                modifiers |= ModifierSet.NATIVE;  adjustModifier(m, t);
        break;
      case TRANSIENT:
        t = jj_consume_token(TRANSIENT);
                   modifiers |= ModifierSet.TRANSIENT;  adjustModifier(m, t);
        break;
      case VOLATILE:
        t = jj_consume_token(VOLATILE);
                  modifiers |= ModifierSet.VOLATILE;  adjustModifier(m, t);
        break;
      case STRICTFP:
        t = jj_consume_token(STRICTFP);
                  modifiers |= ModifierSet.STRICTFP;  adjustModifier(m, t);
        break;
      case AT:
        Annotation();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    m.modifiers = modifiers;
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

/*
 * Declaration syntax follows.
 */

// Handle classes, interfaces, enums, and annotations. 
  final public TigerNode TypeDeclaration() throws ParseException {
   Modifier modifier;
   TigerNode tn = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      case ABSTRACT:
      case CLASS:
      case ENUM:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case AT:
        modifier = Modifiers();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case INTERFACE:
          tn = ClassOrInterfaceDeclaration(modifier);
          break;
        case ENUM:
          tn = EnumDeclaration(modifier);
          break;
        case AT:
          AnnotationTypeDeclaration(modifier);
                                                   tn = null;
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

/**
 * @return a ClassNode or an InterfaceNode
 */
  final public TigerNode ClassOrInterfaceDeclaration(Modifier m) throws ParseException {
   boolean isInterface = false;
   Token t = null;
   TigerNode kids = null;   // only need the children of this node
   String type_params = "";
   List extends_list = null;
   List implements_list = null;
   Token type = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        type = jj_consume_token(CLASS);
        break;
      case INTERFACE:
        type = jj_consume_token(INTERFACE);
                                          isInterface = true;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        type_params = TypeParameters();
        break;
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        extends_list = ExtendsList(isInterface);
        break;
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        implements_list = ImplementsList(isInterface);
        break;
      default:
        ;
      }
      kids = ClassOrInterfaceBody(isInterface);
      if (jj_2_16(2)) {
        jj_consume_token(SEMICOLON);
      } else {
        ;
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        ClassNode node = isInterface ? new InterfaceNode(t.image, m.modifiers) : new ClassNode(t.image, m.modifiers);
        if (isInterface)
            results.incInterfaceCount();
        else
            results.incClassCount();

        if (m.beginColumn > -1) {
            node.setStartLocation(getLocation(m) );
        }
        else {
            node.setStartLocation(getLocation(type));
        }
        if (kids != null)
            node.setEndLocation(kids.getEndLocation());

        // add the child nodes, don't need the 'kids' node itself, it's just a holder
        // for the nodes I want (although I do want the end location).
        if (kids != null && kids.getChildren() != null)
            node.addChildren(kids.getChildren());
        node.setTypeParams(type_params);
        node.setExtendsList(extends_list);
        node.setImplementsList(implements_list);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

/**
 * @return a list of sidekick.java.node.Types representing items in an 'extends'
 * list, e.g. the "Bar" in "public class Foo extends Bar"
 */
  final public List ExtendsList(boolean isInterface) throws ParseException {
   boolean extendsMoreThanOne = false;
   List list = new ArrayList();     // a list of Types
   Type type_s = null;
   Type type_a = null;
    try {
      jj_consume_token(EXTENDS);
      type_s = ClassOrInterfaceType();
                                                 list.add(type_s);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_16;
        }
        jj_consume_token(COMMA);
        type_a = ClassOrInterfaceType();
                                             extendsMoreThanOne = true; list.add(type_a);
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        if (extendsMoreThanOne && !isInterface)
            {if (true) throw new ParseException("A class cannot extend more than one other class");}
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

/**
 * @return a list of sidekick.java.node.Types representing items in an 'implements'
 * list, e.g. the "Bar" and "Serializable" in "public class Foo implements Bar, Serializable"
 */
  final public List ImplementsList(boolean isInterface) throws ParseException {
    List list = new ArrayList();
    Type type_s = null;
    Type type_a = null;
    try {
      jj_consume_token(IMPLEMENTS);
      type_s = ClassOrInterfaceType();
                                                     list.add(type_s);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_17;
        }
        jj_consume_token(COMMA);
        type_a = ClassOrInterfaceType();
                                             list.add(type_a);
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        if (isInterface)
            {if (true) throw new ParseException("An interface cannot implement other interfaces");}
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

/**
 * @return an EnumNode
 */
  final public TigerNode EnumDeclaration(Modifier m) throws ParseException {
    Token t = null;
    Token start_t = null;
    Location end_loc = null;
    try {
      start_t = jj_consume_token(ENUM);
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        ImplementsList(false);
        break;
      default:
        ;
      }
      end_loc = EnumBody();
    } catch (ParseException pe) {
        if (t == null) {
           // handle the case where old code used 'enum' as a variable name
           ParseException e = new ParseException("Parse error at line " + start_t.beginLine + ", column " + start_t.beginColumn + ".  Encountered: 'enum' as an identifier, 'enum' is a keyword.");
           addException(e);
           {if (true) return null;}
        }
        else
            error_skipto(SEMICOLON);
    }
        if (t == null) {
           // handle the case where old code used 'enum' as a variable name
           ParseException e = new ParseException("Parse error at line " + start_t.beginLine + ", column " + start_t.beginColumn + ".  Encountered: 'enum' as an identifier, 'enum' is a keyword.");
           addException(e);
           {if (true) return null;}
        }

        EnumNode node = new EnumNode(t.image, m.modifiers);
        if (start_t != null) {
            if (m.beginColumn == -1)
                node.setStartLocation(getLocation(start_t));
            else
                node.setStartLocation(getLocation(m));
        }
        if (end_loc != null)
            node.setEndLocation(end_loc);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

// returns the end location of the enum body
  final public Location EnumBody() throws ParseException {
    Token t = null;
    try {
      jj_consume_token(LBRACE);
      EnumConstant();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_18;
        }
        jj_consume_token(COMMA);
        EnumConstant();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        label_19:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ABSTRACT:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case CLASS:
          case DOUBLE:
          case ENUM:
          case FINAL:
          case FLOAT:
          case INT:
          case INTERFACE:
          case LONG:
          case NATIVE:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case SHORT:
          case STATIC:
          case STRICTFP:
          case SYNCHRONIZED:
          case TRANSIENT:
          case VOID:
          case VOLATILE:
          case IDENTIFIER:
          case LBRACE:
          case SEMICOLON:
          case AT:
          case LT:
            ;
            break;
          default:
            break label_19;
          }
          ClassOrInterfaceBodyDeclaration(false);
        }
        break;
      default:
        ;
      }
      t = jj_consume_token(RBRACE);
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        {if (true) return t == null ? null : getLocation(t);}
    throw new Error("Missing return statement in function");
  }

/// what is this?  Should I be handling it?
  final public void EnumConstant() throws ParseException {
    try {
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        Arguments();
        break;
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        ClassOrInterfaceBody(false);
        break;
      default:
        ;
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

/**
 * @return a string representing a generics type, e.g. the "<String>" in
 * "List<String> list = new List();", the string will contain the angle brackets.
 */
  final public String TypeParameters() throws ParseException {
    String s = "<";
    String a = "";
    try {
      jj_consume_token(LT);
      a = TypeParameter();
              s += a;
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_20;
        }
        jj_consume_token(COMMA);
                  s += ",";
        a = TypeParameter();
                  s += a;
      }
      jj_consume_token(GT);
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        {if (true) return s + ">";}
    throw new Error("Missing return statement in function");
  }

  final public String TypeParameter() throws ParseException {
    String s = "";
    Token t = null;
    try {
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        s = TypeBound();
        break;
      default:
        ;
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        StringBuffer sb = new StringBuffer();
        if (t.image != null)
            sb.append(t.image);
        if (s.length() > 0)
            sb.append(" ").append(s);
        {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String TypeBound() throws ParseException {
    String s = "extends";
    Type type_s = null;
    Type type_a = null;
    try {
      jj_consume_token(EXTENDS);
      type_a = ClassOrInterfaceType();
              s += " " + type_a.toString();
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BIT_AND:
          ;
          break;
        default:
          break label_21;
        }
        jj_consume_token(BIT_AND);
                  s += " & ";
        type_a = ClassOrInterfaceType();
                  s += type_a.toString();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/**
 * @return a node representing the contents of a Class or Interface body.  The
 * returned node is simply a holder for the contents, it is the children of this
 * node that is useful as they are the methods and fields of the class or
 * interface.
 */
  final public TigerNode ClassOrInterfaceBody(boolean isInterface) throws ParseException {
    TigerNode parent = new TigerNode("", -1);
    TigerNode child;
    Token start_t = null;
    Token end_t = null;
    try {
      start_t = jj_consume_token(LBRACE);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case IDENTIFIER:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case LT:
          ;
          break;
        default:
          break label_22;
        }
        child = ClassOrInterfaceBodyDeclaration(isInterface);
                  if (child != null) parent.addChild(child);
      }
      end_t = jj_consume_token(RBRACE);
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        if (start_t != null)
          parent.setStartLocation(getLocation(start_t));
        if (end_t != null)
          parent.setEndLocation(getLocation(end_t));
        {if (true) return parent.getChildren() != null ? parent : null;}
    throw new Error("Missing return statement in function");
  }

/**
 * @return one of several different nodes, could be a ClassNode, EnumNode,
 * ConstructorNode, FieldNode, MethodNode, or an InterfaceNode.
 */
  final public TigerNode ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException {
   // see note above (~ line 510), I think my changes here have broken the test for a
   // trailing ; after a class body.
   boolean isNestedInterface = false;
   Modifier m;
   TigerNode a = null;
   TigerNode initializer = null;
   String type_params = null;
    try {
      if (jj_2_19(2)) {
        initializer = Initializer();
             if (isInterface)
                {if (true) throw new ParseException("An interface cannot have initializers");}
             if (initializer != null)
                 {if (true) return initializer;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case IDENTIFIER:
        case AT:
        case LT:
          m = Modifiers();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CLASS:
          case INTERFACE:
            a = ClassOrInterfaceDeclaration(m);
            break;
          case ENUM:
            a = EnumDeclaration(m);
            break;
          default:
            if (jj_2_17(2147483647)) {
              a = ConstructorDeclaration(m);
            } else if (jj_2_18(2147483647)) {
              a = FieldDeclaration(m);
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case BOOLEAN:
              case BYTE:
              case CHAR:
              case DOUBLE:
              case FLOAT:
              case INT:
              case LONG:
              case SHORT:
              case VOID:
              case IDENTIFIER:
              case LT:
                a = MethodDeclaration(m);
                break;
              default:
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
          break;
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
       {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

/**
 * @return a FieldNode
 */
  final public TigerNode FieldDeclaration(Modifier m) throws ParseException {
    Type type = null;
    TigerNode name  = null;
    TigerNode a;
    Token t = null;
    try {
      // Modifiers are already matched in the caller
              /// might need to change this, I'm collecting multiple declarations into a single
              /// field, which seems to be okay, e.g. I'm putting "int x = 0, y = 6" into a 
              /// field with Type "int" and name "x, y".  It might be better to create individual
              /// nodes for each, so for this example, this method could return 2 fields, one
              /// for "int x" and one for "int y".
              type = Type();
      name = VariableDeclarator();
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_23;
        }
        jj_consume_token(COMMA);
        a = VariableDeclarator();
                                                                             name.setName(name.getName() + ", " + a.getName());
      }
      t = jj_consume_token(SEMICOLON);
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        FieldNode fn = new FieldNode(name.getName(), m.modifiers, type);
        if (fn.isPrimitive())
          results.incPrimitiveFieldCount();
        else
          results.incReferenceFieldCount();
        if (m.beginColumn == -1)
            fn.setStartLocation(type.getStartLocation());
        else
            fn.setStartLocation(getLocation(m)); //type.getStartLocation());
        fn.setEndLocation(getLocation(t));
        {if (true) return fn;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode VariableDeclarator() throws ParseException {
    TigerNode s = null;
    try {
      s = VariableDeclaratorId();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        VariableInitializer();
        break;
      default:
        ;
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode VariableDeclaratorId() throws ParseException {
    Token t = null;
    try {
      t = jj_consume_token(IDENTIFIER);
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          break label_24;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        TigerNode tn = new TigerNode(t.image, 0);
        tn.setStartLocation(new Location(t.beginLine, t.beginColumn));
        tn.setEndLocation(new Location(t.beginLine, t.beginColumn + t.image.length()));
        {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public void VariableInitializer() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        ArrayInitializer();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        Expression();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void ArrayInitializer() throws ParseException {
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        VariableInitializer();
        label_25:
        while (true) {
          if (jj_2_20(2)) {
            ;
          } else {
            break label_25;
          }
          jj_consume_token(COMMA);
          VariableInitializer();
        }
        break;
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        ;
      }
      jj_consume_token(RBRACE);
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

/**
 * @return a MethodNode
 */
  final public TigerNode MethodDeclaration(Modifier m) throws ParseException {
    String type_params = "";
    Type return_type = null;
    MethodNode m_node = null;
    List name_list = null;
    int line_number = -1;
    BlockNode block = null;
    Location endLoc = null;
    Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        type_params = TypeParameters();
        break;
      default:
        ;
      }
      return_type = ResultType();
      m_node = MethodDeclarator();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THROWS:
        jj_consume_token(THROWS);
        name_list = NameList();
        break;
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        block = Block();
        break;
      case SEMICOLON:
        t = jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        if (m_node == null)
            {if (true) return null;}
        MethodNode node = new MethodNode();
        node.setName(m_node.getName());
        if (m.beginColumn == -1)
            node.setStartLocation(new Location(m_node.getStartLocation().line, 0));
        else
            node.setStartLocation(getLocation(m));
        node.setModifiers(m.modifiers);
        node.setFormalParams(m_node.getFormalParams());
        node.setReturnType(return_type.toString());
        node.setTypeParams(type_params);
        node.setThrows(name_list);
        if (block == null && t != null) {
            node.setEndLocation(getLocation(t));
        }
        else {
            node.addChildren(block.getChildren());
            node.setEndLocation(block.getEndLocation());
        }
        results.incMethodCount();
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public MethodNode MethodDeclarator() throws ParseException {
    Token t = null;
    String s = "";
    List f = null;
    try {
      t = jj_consume_token(IDENTIFIER);
      f = FormalParameters();
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          break label_26;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        if (t == null)
            {if (true) return null;}
        MethodNode node = new MethodNode();
        node.setName(t.image);
        node.setStartLocation(getLocation(t));
        node.setFormalParams(f);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public List FormalParameters() throws ParseException {
    ArrayList params = new ArrayList();
    Parameter a = null;
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:
        a = FormalParameter();
                params.add(a);
        label_27:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            break label_27;
          }
          jj_consume_token(COMMA);
          a = FormalParameter();
                    params.add(a);
        }
        break;
      default:
        ;
      }
      jj_consume_token(RPAREN);
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        {if (true) return params;}
    throw new Error("Missing return statement in function");
  }

  final public Parameter FormalParameter() throws ParseException {
    Parameter param = new Parameter();
    TigerNode n;
    Type type_a = null;
    Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
        t = jj_consume_token(FINAL);
            param.setFinal(true);
            param.setStartLocation(getLocation(t));
        break;
      default:
        ;
      }
      type_a = Type();
         param.setType(type_a);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELLIPSIS:
        jj_consume_token(ELLIPSIS);
          param.setVarArg(true);
        break;
      default:
        ;
      }
      n = VariableDeclaratorId();
           param.setName(n.getName());
           if (t == null)
               param.setStartLocation(n.getStartLocation());
           param.setEndLocation(n.getEndLocation());
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        {if (true) return param;}
    throw new Error("Missing return statement in function");
  }

  final public ConstructorNode ConstructorDeclaration(Modifier m) throws ParseException {
    Token t = null;
    List params = null;
    List name_list = null;
    String type_params = null;
    Token end_t = null;
    TigerNode child = null;
    ConstructorNode cn = new ConstructorNode();
    cn.setModifiers(m.modifiers);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        type_params = TypeParameters();
        break;
      default:
        ;
      }
      t = jj_consume_token(IDENTIFIER);
      params = FormalParameters();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THROWS:
        jj_consume_token(THROWS);
        name_list = NameList();
        break;
      default:
        ;
      }
      jj_consume_token(LBRACE);
      if (jj_2_21(2147483647)) {
        ExplicitConstructorInvocation();
      } else {
        ;
      }
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
          ;
          break;
        default:
          break label_28;
        }
        child = BlockStatement();
                                       if (child != null) cn.addChildren(child.getChildren());
      }
      end_t = jj_consume_token(RBRACE);
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        cn.setName(t.image);
        if (ModifierSet.toString(m.modifiers).equals("")) {
            // no modifiers, so use constructor name for start location            
            cn.setStartLocation(new Location(t.beginLine, 0));
        }
        else {
            cn.setStartLocation(getLocation(m));
        }
        cn.setEndLocation(getLocation(end_t));
        cn.setFormalParams(params);
        cn.setTypeParams(type_params);
        cn.setThrows(name_list);
        {if (true) return cn;}
    throw new Error("Missing return statement in function");
  }

  final public void ExplicitConstructorInvocation() throws ParseException {
    try {
      if (jj_2_23(2147483647)) {
        jj_consume_token(THIS);
        Arguments();
        jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          if (jj_2_22(2)) {
            PrimaryExpression();
            jj_consume_token(DOT);
          } else {
            ;
          }
          jj_consume_token(SUPER);
          Arguments();
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

/**
 * @return an InitializerNode, this handles static initializer blocks
 */
  final public TigerNode Initializer() throws ParseException {
    Token t = null;
    BlockNode block = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        t = jj_consume_token(STATIC);
        break;
      default:
        ;
      }
      block = Block();
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        if (t != null && block != null) {
            TigerNode node = new InitializerNode(t.beginLine);
            node.setStartLocation(block.getStartLocation());
            node.setEndLocation(block.getEndLocation());
            node.addChild(block);
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

/*
 * Type, name and expression syntax follows.
 */
  final public Type Type() throws ParseException {
    Type s = null;
    try {
      if (jj_2_24(2)) {
        s = ReferenceType();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
          s = PrimitiveType();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Type ReferenceType() throws ParseException {
    Type s = null;
    boolean isArray = false;
    int dimensions = 0;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
        s = PrimitiveType();
        label_29:
        while (true) {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                                                       isArray = true; ++dimensions;
          if (jj_2_25(2)) {
            ;
          } else {
            break label_29;
          }
        }
        break;
      case IDENTIFIER:
        s = ClassOrInterfaceType();
        label_30:
        while (true) {
          if (jj_2_26(2)) {
            ;
          } else {
            break label_30;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                                                              isArray = true; ++dimensions;
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        s.setIsArray(isArray);
        s.setDimensions(dimensions);
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Type ClassOrInterfaceType() throws ParseException {
    Type s = new Type();
    String type_arg = "";
    Token t = null;
    try {
      t = jj_consume_token(IDENTIFIER);
      if (jj_2_27(2)) {
        type_arg = TypeArguments();
      } else {
        ;
      }
            s.type = t.image;
            s.typeArgs=type_arg;
            s.setStartLocation(new Location(t.beginLine, t.beginColumn));
            s.setEndLocation(new Location(t.endLine, t.endColumn));
      label_31:
      while (true) {
        if (jj_2_28(2)) {
          ;
        } else {
          break label_31;
        }
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
        if (jj_2_29(2)) {
          type_arg = TypeArguments();
        } else {
          ;
        }
                s.type += "." + t.image;
                s.typeArgs += type_arg;
                s.setEndLocation(new Location(t.endLine, t.endColumn));
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String TypeArguments() throws ParseException {
    String s = "<";
    String a = "";
    try {
      jj_consume_token(LT);
      a = TypeArgument();
                               s += a;
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_32;
        }
        jj_consume_token(COMMA);
        a = TypeArgument();
                                 s += "," + a;
      }
      jj_consume_token(GT);
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        {if (true) return s + ">";}
    throw new Error("Missing return statement in function");
  }

  final public String TypeArgument() throws ParseException {
    Type type = null;
    String s = "";
    String a = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:
        type = ReferenceType();
                                  s=type.toString();
        break;
      case HOOK:
        jj_consume_token(HOOK);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTENDS:
        case SUPER:
          a = WildcardBounds();
                                    s = "?" + a;
          break;
        default:
          ;
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String WildcardBounds() throws ParseException {
    Type type = null;
    String s = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        type = ReferenceType();
                                         s="extends " + type.toString();
        break;
      case SUPER:
        jj_consume_token(SUPER);
        type = ReferenceType();
                                       s="super " + type.toString();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Type PrimitiveType() throws ParseException {
    Token t = null;
    Type s = new Type();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        t = jj_consume_token(BOOLEAN);
                        s.type = "boolean";
        break;
      case CHAR:
        t = jj_consume_token(CHAR);
                     s.type = "char";
        break;
      case BYTE:
        t = jj_consume_token(BYTE);
                     s.type = "byte";
        break;
      case SHORT:
        t = jj_consume_token(SHORT);
                      s.type = "short";
        break;
      case INT:
        t = jj_consume_token(INT);
                    s.type = "int";
        break;
      case LONG:
        t = jj_consume_token(LONG);
                     s.type = "long";
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
                      s.type = "float";
        break;
      case DOUBLE:
        t = jj_consume_token(DOUBLE);
                       s.type = "double";
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
      if (t != null) {
        s.setStartLocation(new Location(t.beginLine, t.beginColumn));
        s.setEndLocation(new Location(t.endLine, t.endColumn));
      }
      s.isPrimitive = true;
      {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Type ResultType() throws ParseException {
    Token t;
    Type s = new Type();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
        t = jj_consume_token(VOID);
            s.type = "void";
            s.setStartLocation(new Location(t.beginLine, t.beginColumn));
            s.setEndLocation(new Location(t.endLine, t.endColumn));
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:
        s = Type();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode Name() throws ParseException {
    Token t = null;
    String s = "";
    TigerNode tn = new TigerNode();
    Location startLocation = null;
    Location endLocation = null;
    try {
      t = jj_consume_token(IDENTIFIER);
                         s = t.image; startLocation = getLocation(t); endLocation = getEndLocation(t);
      label_33:
      while (true) {
        if (jj_2_30(2)) {
          ;
        } else {
          break label_33;
        }
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
                                            s += "." + t.image; endLocation = getEndLocation(t);
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        tn.setName(s);
        tn.setStartLocation(startLocation);
        tn.setEndLocation(endLocation);
        {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public List NameList() throws ParseException {
    List nameList = new ArrayList();
    String s = "";
    String a = "";
    TigerNode tn;
    try {
      tn = Name();
                    nameList.add(tn);
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_34;
        }
        jj_consume_token(COMMA);
        tn = Name();
                          nameList.add(tn);
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        {if (true) return nameList;}
    throw new Error("Missing return statement in function");
  }

/*
 * Expression syntax follows.
 */
  final public void Expression() throws ParseException {
    try {
      ConditionalExpression();
      if (jj_2_31(2)) {
        AssignmentOperator();
        Expression();
      } else {
        ;
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void AssignmentOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
      break;
    case REMASSIGN:
      jj_consume_token(REMASSIGN);
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
      break;
    case LSHIFTASSIGN:
      jj_consume_token(LSHIFTASSIGN);
      break;
    case RSIGNEDSHIFTASSIGN:
      jj_consume_token(RSIGNEDSHIFTASSIGN);
      break;
    case RUNSIGNEDSHIFTASSIGN:
      jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      break;
    case ANDASSIGN:
      jj_consume_token(ANDASSIGN);
      break;
    case XORASSIGN:
      jj_consume_token(XORASSIGN);
      break;
    case ORASSIGN:
      jj_consume_token(ORASSIGN);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ConditionalExpression() throws ParseException {
    try {
      ConditionalOrExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HOOK:
        jj_consume_token(HOOK);
        Expression();
        jj_consume_token(COLON);
        Expression();
        break;
      default:
        ;
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void ConditionalOrExpression() throws ParseException {
    try {
      ConditionalAndExpression();
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SC_OR:
          ;
          break;
        default:
          break label_35;
        }
        jj_consume_token(SC_OR);
        ConditionalAndExpression();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
    try {
      InclusiveOrExpression();
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SC_AND:
          ;
          break;
        default:
          break label_36;
        }
        jj_consume_token(SC_AND);
        InclusiveOrExpression();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void InclusiveOrExpression() throws ParseException {
    try {
      ExclusiveOrExpression();
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BIT_OR:
          ;
          break;
        default:
          break label_37;
        }
        jj_consume_token(BIT_OR);
        ExclusiveOrExpression();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void ExclusiveOrExpression() throws ParseException {
    try {
      AndExpression();
      label_38:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case XOR:
          ;
          break;
        default:
          break label_38;
        }
        jj_consume_token(XOR);
        AndExpression();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void AndExpression() throws ParseException {
    try {
      EqualityExpression();
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BIT_AND:
          ;
          break;
        default:
          break label_39;
        }
        jj_consume_token(BIT_AND);
        EqualityExpression();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void EqualityExpression() throws ParseException {
    try {
      InstanceOfExpression();
      label_40:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case NE:
          ;
          break;
        default:
          break label_40;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          jj_consume_token(EQ);
          break;
        case NE:
          jj_consume_token(NE);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        InstanceOfExpression();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void InstanceOfExpression() throws ParseException {
    try {
      RelationalExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INSTANCEOF:
        jj_consume_token(INSTANCEOF);
        Type();
        break;
      default:
        ;
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void RelationalExpression() throws ParseException {
    try {
      ShiftExpression();
      label_41:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
        case LE:
        case GE:
        case GT:
          ;
          break;
        default:
          break label_41;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          jj_consume_token(LT);
          break;
        case GT:
          jj_consume_token(GT);
          break;
        case LE:
          jj_consume_token(LE);
          break;
        case GE:
          jj_consume_token(GE);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        ShiftExpression();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void ShiftExpression() throws ParseException {
    try {
      AdditiveExpression();
      label_42:
      while (true) {
        if (jj_2_32(1)) {
          ;
        } else {
          break label_42;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LSHIFT:
          jj_consume_token(LSHIFT);
          break;
        default:
          if (jj_2_33(1)) {
            RSIGNEDSHIFT();
          } else if (jj_2_34(1)) {
            RUNSIGNEDSHIFT();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        AdditiveExpression();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void AdditiveExpression() throws ParseException {
    try {
      MultiplicativeExpression();
      label_43:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          break label_43;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        MultiplicativeExpression();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    try {
      UnaryExpression();
      label_44:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case SLASH:
        case REM:
          ;
          break;
        default:
          break label_44;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          jj_consume_token(STAR);
          break;
        case SLASH:
          jj_consume_token(SLASH);
          break;
        case REM:
          jj_consume_token(REM);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnaryExpression();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void UnaryExpression() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnaryExpression();
        break;
      case INCR:
        PreIncrementExpression();
        break;
      case DECR:
        PreDecrementExpression();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
        UnaryExpressionNotPlusMinus();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void PreIncrementExpression() throws ParseException {
    try {
      jj_consume_token(INCR);
      PrimaryExpression();
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void PreDecrementExpression() throws ParseException {
    try {
      jj_consume_token(DECR);
      PrimaryExpression();
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void UnaryExpressionNotPlusMinus() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
      case TILDE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
          jj_consume_token(TILDE);
          break;
        case BANG:
          jj_consume_token(BANG);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnaryExpression();
        break;
      default:
        if (jj_2_35(2147483647)) {
          CastExpression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FALSE:
          case FLOAT:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case SHORT:
          case SUPER:
          case THIS:
          case TRUE:
          case VOID:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
            PostfixExpression();
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
  final public void CastLookahead() throws ParseException {
    Type type = null;
    try {
      if (jj_2_36(2)) {
        jj_consume_token(LPAREN);
        PrimitiveType();
      } else if (jj_2_37(2147483647)) {
        jj_consume_token(LPAREN);
        Type();
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          Type();
          jj_consume_token(RPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TILDE:
            jj_consume_token(TILDE);
            break;
          case BANG:
            jj_consume_token(BANG);
            break;
          case LPAREN:
            jj_consume_token(LPAREN);
            break;
          case IDENTIFIER:
            jj_consume_token(IDENTIFIER);
            break;
          case THIS:
            jj_consume_token(THIS);
            break;
          case SUPER:
            jj_consume_token(SUPER);
            break;
          case NEW:
            jj_consume_token(NEW);
            break;
          case FALSE:
          case NULL:
          case TRUE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
            Literal();
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void PostfixExpression() throws ParseException {
    try {
      PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
      case DECR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          jj_consume_token(INCR);
          break;
        case DECR:
          jj_consume_token(DECR);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        ;
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void CastExpression() throws ParseException {
    try {
      if (jj_2_38(2147483647)) {
        jj_consume_token(LPAREN);
        Type();
        jj_consume_token(RPAREN);
        UnaryExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          Type();
          jj_consume_token(RPAREN);
          UnaryExpressionNotPlusMinus();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void PrimaryExpression() throws ParseException {
    try {
      PrimaryPrefix();
      label_45:
      while (true) {
        if (jj_2_39(2)) {
          ;
        } else {
          break label_45;
        }
        PrimarySuffix();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void MemberSelector() throws ParseException {
    try {
      jj_consume_token(DOT);
      TypeArguments();
      jj_consume_token(IDENTIFIER);
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void PrimaryPrefix() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case NULL:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        Literal();
        break;
      case THIS:
        jj_consume_token(THIS);
        break;
      case SUPER:
        jj_consume_token(SUPER);
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        break;
      case NEW:
        AllocationExpression();
        break;
      default:
        if (jj_2_40(2147483647)) {
          ResultType();
          jj_consume_token(DOT);
          jj_consume_token(CLASS);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            Name();
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void PrimarySuffix() throws ParseException {
    try {
      if (jj_2_41(2)) {
        jj_consume_token(DOT);
        jj_consume_token(THIS);
      } else if (jj_2_42(2)) {
        jj_consume_token(DOT);
        AllocationExpression();
      } else if (jj_2_43(3)) {
        MemberSelector();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          jj_consume_token(LBRACKET);
          Expression();
          jj_consume_token(RBRACKET);
          break;
        case DOT:
          jj_consume_token(DOT);
          jj_consume_token(IDENTIFIER);
          break;
        case LPAREN:
          Arguments();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void Literal() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        break;
      case FLOATING_POINT_LITERAL:
        jj_consume_token(FLOATING_POINT_LITERAL);
        break;
      case CHARACTER_LITERAL:
        jj_consume_token(CHARACTER_LITERAL);
        break;
      case STRING_LITERAL:
        jj_consume_token(STRING_LITERAL);
        break;
      case FALSE:
      case TRUE:
        BooleanLiteral();
        break;
      case NULL:
        NullLiteral();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NullLiteral() throws ParseException {
    jj_consume_token(NULL);
  }

  final public void Arguments() throws ParseException {
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        ArgumentList();
        break;
      default:
        ;
      }
      jj_consume_token(RPAREN);
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void ArgumentList() throws ParseException {
    try {
      Expression();
      label_46:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_46;
        }
        jj_consume_token(COMMA);
        Expression();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void AllocationExpression() throws ParseException {
    try {
      if (jj_2_44(2)) {
        jj_consume_token(NEW);
        PrimitiveType();
        ArrayDimsAndInits();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          jj_consume_token(NEW);
          ClassOrInterfaceType();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LT:
            TypeArguments();
            break;
          default:
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ArrayDimsAndInits();
            break;
          case LPAREN:
            Arguments();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
              ClassOrInterfaceBody(false);
              break;
            default:
              ;
            }
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
  final public void ArrayDimsAndInits() throws ParseException {
    try {
      if (jj_2_47(2)) {
        label_47:
        while (true) {
          jj_consume_token(LBRACKET);
          Expression();
          jj_consume_token(RBRACKET);
          if (jj_2_45(2)) {
            ;
          } else {
            break label_47;
          }
        }
        label_48:
        while (true) {
          if (jj_2_46(2)) {
            ;
          } else {
            break label_48;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          label_49:
          while (true) {
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              break label_49;
            }
          }
          ArrayInitializer();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

/*
 * Statement syntax follows.
 */
  final public BlockNode Statement() throws ParseException {
    BlockNode bn = null;
    try {
      if (jj_2_48(2)) {
        LabeledStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
          AssertStatement();
          break;
        case LBRACE:
          bn = Block();
          break;
        case SEMICOLON:
          EmptyStatement();
          break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
          StatementExpression();
          jj_consume_token(SEMICOLON);
          break;
        case SWITCH:
          bn = SwitchStatement();
          break;
        case IF:
          bn = IfStatement();
          break;
        case WHILE:
          bn = WhileStatement();
          break;
        case DO:
          bn = DoStatement();
          break;
        case FOR:
          bn = ForStatement();
          break;
        case BREAK:
          BreakStatement();
          break;
        case CONTINUE:
          ContinueStatement();
          break;
        case RETURN:
          ReturnStatement();
          break;
        case THROW:
          ThrowStatement();
          break;
        case SYNCHRONIZED:
          bn = SynchronizedStatement();
          break;
        case TRY:
          bn = TryStatement();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
      {if (true) return bn;}
    throw new Error("Missing return statement in function");
  }

  final public void AssertStatement() throws ParseException {
    try {
      jj_consume_token(ASSERT);
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        Expression();
        break;
      default:
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void LabeledStatement() throws ParseException {
    try {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      Statement();
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public BlockNode Block() throws ParseException {
    // an un-named block of code
    Token start_t = null;
    Token end_t = null;
    BlockNode bn = new BlockNode();
    TigerNode child = null;
    try {
      start_t = jj_consume_token(LBRACE);
      label_50:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
          ;
          break;
        default:
          break label_50;
        }
        child = BlockStatement();
                                               bn.addChild(child);
      }
      end_t = jj_consume_token(RBRACE);
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        bn.setName("block_" + start_t.beginLine + ":" + start_t.beginColumn);
        bn.setStartLocation(getLocation(start_t));
        bn.setEndLocation(getLocation(end_t));
        {if (true) return bn;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode BlockStatement() throws ParseException {
    TigerNode tn = null;
    try {
      if (jj_2_49(2147483647)) {
        tn = LocalVariableDeclaration();
        jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
          tn = Statement();
          break;
        case CLASS:
        case INTERFACE:
          tn = ClassOrInterfaceDeclaration(new Modifier());
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public BlockNode TokenMgrDeclBlock() throws ParseException {
    // an un-named block of code
    Token start_t = null;
    Token end_t = null;
    BlockNode bn = new BlockNode();
    TigerNode child = null;
    try {
      start_t = jj_consume_token(LBRACE);
      label_51:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RETURN:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRANSIENT:
        case TRUE:
        case TRY:
        case VOID:
        case VOLATILE:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case LT:
        case INCR:
        case DECR:
          ;
          break;
        default:
          break label_51;
        }
        child = TokenMgrDeclBlockStatement();
                                                           bn.addChild(child);
      }
      end_t = jj_consume_token(RBRACE);
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        bn.setName("block_" + start_t.beginLine + ":" + start_t.beginColumn);
        bn.setStartLocation(getLocation(start_t));
        bn.setEndLocation(getLocation(end_t));
        {if (true) return bn;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode TokenMgrDeclBlockStatement() throws ParseException {
    TigerNode tn = null;
    Modifier modifiers = null;
    try {
      modifiers = Modifiers();
      if (jj_2_50(2147483647)) {
        tn = FieldDeclaration(modifiers);
      } else if (jj_2_51(3)) {
        tn = MethodDeclaration(modifiers);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
          tn = Statement();
          break;
        case CLASS:
        case INTERFACE:
          tn = ClassOrInterfaceDeclaration(modifiers);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public LocalVariableNode LocalVariableDeclaration() throws ParseException {
    Type type = null;
    TigerNode name = null ;
    TigerNode a = null;
    Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
        t = jj_consume_token(FINAL);
        break;
      default:
        ;
      }
      type = Type();
      name = VariableDeclarator();
      label_52:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_52;
        }
        jj_consume_token(COMMA);
        a = VariableDeclarator();
                                                                                         name.setName(name.getName() + ", " + a.getName()); name.setEndLocation(a.getEndLocation());
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        LocalVariableNode lvn = new LocalVariableNode(name.getName(), type);
        if (lvn.isPrimitive())
            results.incPrimitiveFieldCount();
        else
            results.incReferenceFieldCount();
        lvn.setStartLocation(name.getStartLocation());
        lvn.setEndLocation(name.getEndLocation());
        lvn.setFinal(t != null);
        {if (true) return lvn;}
    throw new Error("Missing return statement in function");
  }

  final public void EmptyStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
  }

  final public void StatementExpression() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        PreIncrementExpression();
        break;
      case DECR:
        PreDecrementExpression();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
        PrimaryExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
        case INCR:
        case DECR:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case LSHIFTASSIGN:
        case RSIGNEDSHIFTASSIGN:
        case RUNSIGNEDSHIFTASSIGN:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INCR:
            jj_consume_token(INCR);
            break;
          case DECR:
            jj_consume_token(DECR);
            break;
          case ASSIGN:
          case PLUSASSIGN:
          case MINUSASSIGN:
          case STARASSIGN:
          case SLASHASSIGN:
          case ANDASSIGN:
          case ORASSIGN:
          case XORASSIGN:
          case REMASSIGN:
          case LSHIFTASSIGN:
          case RSIGNEDSHIFTASSIGN:
          case RUNSIGNEDSHIFTASSIGN:
            AssignmentOperator();
            Expression();
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          ;
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public BlockNode SwitchStatement() throws ParseException {
    BlockNode bn = new BlockNode("switch");
    TigerNode child = null;
    Token start_t = null;
    Token end_t = null;
    try {
      start_t = jj_consume_token(SWITCH);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      label_53:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
        case _DEFAULT:
          ;
          break;
        default:
          break label_53;
        }
        SwitchLabel();
        label_54:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASSERT:
          case BOOLEAN:
          case BREAK:
          case BYTE:
          case CHAR:
          case CLASS:
          case CONTINUE:
          case DO:
          case DOUBLE:
          case FALSE:
          case FINAL:
          case FLOAT:
          case FOR:
          case IF:
          case INT:
          case INTERFACE:
          case LONG:
          case NEW:
          case NULL:
          case RETURN:
          case SHORT:
          case SUPER:
          case SWITCH:
          case SYNCHRONIZED:
          case THIS:
          case THROW:
          case TRUE:
          case TRY:
          case VOID:
          case WHILE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case LBRACE:
          case SEMICOLON:
          case INCR:
          case DECR:
            ;
            break;
          default:
            break label_54;
          }
          child = BlockStatement();
                                                    bn.addChild(child);
        }
      }
      end_t = jj_consume_token(RBRACE);
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        if (start_t != null)
            bn.setStartLocation(getLocation(start_t));
        if (end_t != null)
            bn.setEndLocation(getLocation(end_t));
        {if (true) return bn;}
    throw new Error("Missing return statement in function");
  }

  final public void SwitchLabel() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        jj_consume_token(CASE);
        Expression();
        jj_consume_token(COLON);
        break;
      case _DEFAULT:
        jj_consume_token(_DEFAULT);
        jj_consume_token(COLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public BlockNode IfStatement() throws ParseException {
    BlockNode ifNode = new BlockNode("if");
    BlockNode ifNodes = null;
    BlockNode elseNodes = null;
    Token start_t = null;
    try {
      start_t = jj_consume_token(IF);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      ifNodes = Statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        elseNodes = Statement();
        break;
      default:
        ;
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        if (start_t != null)
            ifNode.setStartLocation(getLocation(start_t));
        if (ifNodes != null) {
            ifNode.addChildren(ifNodes.getChildren());
            ifNode.setEndLocation(ifNodes.getEndLocation());
        }
        if (elseNodes != null){
            ifNode.addChildren(elseNodes.getChildren());
            ifNode.setEndLocation(elseNodes.getEndLocation());
        }
        {if (true) return ifNode;}
    throw new Error("Missing return statement in function");
  }

  final public BlockNode WhileStatement() throws ParseException {
    BlockNode bn = new BlockNode("while");
    BlockNode kids = null;
    Token start_t = null;
    try {
      start_t = jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      kids = Statement();
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
      bn.setStartLocation(getLocation(start_t));
      if (kids != null) {
         bn.addChildren(kids.getChildren());
         bn.setEndLocation(kids.getEndLocation());
      }
      {if (true) return bn;}
    throw new Error("Missing return statement in function");
  }

  final public BlockNode DoStatement() throws ParseException {
    BlockNode bn = new BlockNode("do");
    BlockNode kids = null;
    Token start_t = null;
    Token end_t = null;
    try {
      start_t = jj_consume_token(DO);
      kids = Statement();
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      end_t = jj_consume_token(SEMICOLON);
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        if (start_t != null)
            bn.setStartLocation(getLocation(start_t));
        if (end_t != null)
            bn.setEndLocation(getLocation(end_t));
        if (kids != null)
            bn.addChildren(kids.getChildren());
        {if (true) return bn;}
    throw new Error("Missing return statement in function");
  }

  final public BlockNode ForStatement() throws ParseException {
    BlockNode bn = new BlockNode("for");
    BlockNode kids = null;
    Token start_t = null;
    try {
      start_t = jj_consume_token(FOR);
      jj_consume_token(LPAREN);
      if (jj_2_52(2147483647)) {
        Type();
        jj_consume_token(IDENTIFIER);
        jj_consume_token(COLON);
        Expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case SEMICOLON:
        case INCR:
        case DECR:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FALSE:
          case FINAL:
          case FLOAT:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case SHORT:
          case SUPER:
          case THIS:
          case TRUE:
          case VOID:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case INCR:
          case DECR:
            ForInit();
            break;
          default:
            ;
          }
          jj_consume_token(SEMICOLON);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FALSE:
          case FLOAT:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case SHORT:
          case SUPER:
          case THIS:
          case TRUE:
          case VOID:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case BANG:
          case TILDE:
          case INCR:
          case DECR:
          case PLUS:
          case MINUS:
            Expression();
            break;
          default:
            ;
          }
          jj_consume_token(SEMICOLON);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FALSE:
          case FLOAT:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case SHORT:
          case SUPER:
          case THIS:
          case TRUE:
          case VOID:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case INCR:
          case DECR:
            ForUpdate();
            break;
          default:
            ;
          }
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RPAREN);
      kids = Statement();
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        if (start_t != null)
            bn.setStartLocation(getLocation(start_t));
        if (kids != null) {
            bn.addChildren(kids.getChildren());
            bn.setEndLocation(kids.getEndLocation());
        }
        {if (true) return bn;}
    throw new Error("Missing return statement in function");
  }

  final public void ForInit() throws ParseException {
    try {
      if (jj_2_53(2147483647)) {
        LocalVariableDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
          StatementExpressionList();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void StatementExpressionList() throws ParseException {
    try {
      StatementExpression();
      label_55:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_55;
        }
        jj_consume_token(COMMA);
        StatementExpression();
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void ForUpdate() throws ParseException {
    try {
      StatementExpressionList();
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void BreakStatement() throws ParseException {
    jj_consume_token(BREAK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  final public void ContinueStatement() throws ParseException {
    jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  final public void ReturnStatement() throws ParseException {
    try {
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        Expression();
        break;
      default:
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public void ThrowStatement() throws ParseException {
    try {
      jj_consume_token(THROW);
      Expression();
      jj_consume_token(SEMICOLON);
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
  }

  final public BlockNode SynchronizedStatement() throws ParseException {
    BlockNode bn = new BlockNode("synchronized");
    BlockNode child = null;
    Token start_t = null;
    try {
      start_t = jj_consume_token(SYNCHRONIZED);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      child = Block();
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
      bn.setStartLocation(getLocation(start_t));
      if (child != null) {
          bn.setEndLocation(child.getEndLocation());
          bn.addChild(child);
      }
      {if (true) return bn;}
    throw new Error("Missing return statement in function");
  }

  final public BlockNode TryStatement() throws ParseException {
    List nodes = new ArrayList();
    BlockNode bn = new BlockNode("try");
    BlockNode child = null;
    Token start_t = null;
    BlockNode last = null;
    try {
      start_t = jj_consume_token(TRY);
      child = Block();
                                      if (child != null) { child.setName("try"); nodes.add(child); last = child;}
      label_56:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CATCH:
          ;
          break;
        default:
          break label_56;
        }
        jj_consume_token(CATCH);
        jj_consume_token(LPAREN);
        FormalParameter();
        jj_consume_token(RPAREN);
        child = Block();
                                                            if (child != null) { child.setName("catch"); nodes.add(child); last = child; }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINALLY:
        jj_consume_token(FINALLY);
        child = Block();
                                    if (child != null) { child.setName("finally"); nodes.add(child); last = child; }
        break;
      default:
        ;
      }
    } catch (ParseException pe) {
        error_skipto(SEMICOLON);
    }
        bn.addChildren(nodes);
        if (start_t != null)
            bn.setStartLocation(getLocation(start_t));
        if (last != null)
            bn.setEndLocation(last.getEndLocation());
        {if (true) return bn;}
    throw new Error("Missing return statement in function");
  }

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */
  final public void RUNSIGNEDSHIFT() throws ParseException {
    if (getToken(1).kind == GT &&
                     getToken(1) instanceof Token.GTToken &&
                    ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GT);
    jj_consume_token(GT);
    jj_consume_token(GT);
  }

  final public void RSIGNEDSHIFT() throws ParseException {
    if (getToken(1).kind == GT &&
                     getToken(1) instanceof Token.GTToken &&
                    ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GT);
    jj_consume_token(GT);
  }

/* Annotation syntax follows. */
  final public void Annotation() throws ParseException {
    if (jj_2_54(2147483647)) {
      NormalAnnotation();
    } else if (jj_2_55(2147483647)) {
      SingleMemberAnnotation();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        MarkerAnnotation();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void NormalAnnotation() throws ParseException {
    jj_consume_token(AT);
    Name();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      MemberValuePairs();
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void MarkerAnnotation() throws ParseException {
    jj_consume_token(AT);
    Name();
  }

  final public void SingleMemberAnnotation() throws ParseException {
    jj_consume_token(AT);
    Name();
    jj_consume_token(LPAREN);
    MemberValue();
    jj_consume_token(RPAREN);
  }

  final public void MemberValuePairs() throws ParseException {
    MemberValuePair();
    label_57:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_57;
      }
      jj_consume_token(COMMA);
      MemberValuePair();
    }
  }

  final public void MemberValuePair() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    MemberValue();
  }

  final public void MemberValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      Annotation();
      break;
    case LBRACE:
      MemberValueArrayInitializer();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      ConditionalExpression();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MemberValueArrayInitializer() throws ParseException {
    jj_consume_token(LBRACE);
    MemberValue();
    label_58:
    while (true) {
      if (jj_2_56(2)) {
        ;
      } else {
        break label_58;
      }
      jj_consume_token(COMMA);
      MemberValue();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      ;
    }
    jj_consume_token(RBRACE);
  }

/* Annotation Types. */
  final public void AnnotationTypeDeclaration(Modifier m) throws ParseException {
    jj_consume_token(AT);
    jj_consume_token(INTERFACE);
    jj_consume_token(IDENTIFIER);
    AnnotationTypeBody();
  }

  final public void AnnotationTypeBody() throws ParseException {
    jj_consume_token(LBRACE);
    label_59:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
      case SEMICOLON:
      case AT:
        ;
        break;
      default:
        break label_59;
      }
      AnnotationTypeMemberDeclaration();
    }
    jj_consume_token(RBRACE);
  }

  final public void AnnotationTypeMemberDeclaration() throws ParseException {
   Modifier m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case CLASS:
    case DOUBLE:
    case ENUM:
    case FINAL:
    case FLOAT:
    case INT:
    case INTERFACE:
    case LONG:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case IDENTIFIER:
    case AT:
      m = Modifiers();
      if (jj_2_57(2147483647)) {
        Type();
        jj_consume_token(IDENTIFIER);
        jj_consume_token(LPAREN);
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _DEFAULT:
          DefaultValue();
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case INTERFACE:
          ClassOrInterfaceDeclaration(m);
          break;
        case ENUM:
          EnumDeclaration(m);
          break;
        case AT:
          AnnotationTypeDeclaration(m);
          break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case IDENTIFIER:
          FieldDeclaration(m);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefaultValue() throws ParseException {
    jj_consume_token(_DEFAULT);
    MemberValue();
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_338()) {
    jj_scanpos = xsp;
    if (jj_3R_339()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_208()) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_3R_177()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_200()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_337() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_208()) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_96()) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_133()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_208()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_97()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_315() {
    if (jj_3R_234()) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_169()) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_319() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_314() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_97()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_208()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_169()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_170()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_303() {
    if (jj_3R_65()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_319()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_114() {
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_300() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_299()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_299() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_314()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_315()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("JAVACODE");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_114()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_316() {
    if (jj_3R_259()) return true;
    return false;
  }

  final private boolean jj_3R_301() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_316()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_97()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_208()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_337()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_3R_157()) return true;
    return false;
  }

  final private boolean jj_3R_287() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_299()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_300()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_301()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_354() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_353() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_97()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_347() {
    if (jj_3R_187()) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_346() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_353()) {
    jj_scanpos = xsp;
    if (jj_3R_354()) return true;
    }
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_336() {
    if (jj_3R_346()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_347()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_103() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) return true;
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3R_238() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_97()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_336()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_286() {
    if (jj_3R_298()) return true;
    return false;
  }

  final private boolean jj_3R_328() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_292()) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  final private boolean jj_3R_352() {
    if (jj_3R_96()) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3R_278() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_286()) jj_scanpos = xsp;
    if (jj_3R_287()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  final private boolean jj_3R_345() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_3R_352()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("LOOKAHEAD");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_112()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("IGNORE_CASE");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  final private boolean jj_3R_256() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_345()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  final private boolean jj_3R_255() {
    if (jj_3R_262()) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3R_254() {
    if (jj_3R_261()) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_254()) {
    jj_scanpos = xsp;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_3R_256()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_313() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_174()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_298() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_174()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_313()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_267() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_266() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_260() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_266()) {
    jj_scanpos = xsp;
    if (jj_3R_267()) return true;
    }
    return false;
  }

  final private boolean jj_3R_312() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_174()) return true;
    return false;
  }

  final private boolean jj_3R_253() {
    if (jj_3R_260()) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    if (jj_3R_292()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_328()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_297() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_174()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_312()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_scan_token(HOOK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_253()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_132() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    }
    return false;
  }

  final private boolean jj_3_50() {
    if (jj_3R_88()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3_51() {
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_132()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_214()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_285() {
    if (jj_3R_298()) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_284() {
    if (jj_3R_297()) return true;
    return false;
  }

  final private boolean jj_3R_283() {
    if (jj_3R_122()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_3R_230()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3R_283()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_284()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_285()) jj_scanpos = xsp;
    if (jj_3R_234()) return true;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_3R_209()) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_3R_208()) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_3R_207()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_3R_101()) return true;
    Token xsp;
    if (jj_3_25()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_3R_174()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_3R_187()) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    return false;
  }

  final private boolean jj_3R_335() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_171()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    }
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_121()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_208()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  final private boolean jj_3R_236() {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_97()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_335()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_3R_248()) return true;
    return false;
  }

  final private boolean jj_3R_289() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_303()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_3R_247()) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_3R_246()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_93()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_3R_245()) return true;
    return false;
  }

  final private boolean jj_3R_270() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_3R_244()) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_3R_243()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_3R_242()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_93()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_3R_241()) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_93()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_3R_240()) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_3R_238()) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_3R_237()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_3R_236()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3_48() {
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_291() {
    if (jj_3R_187()) return true;
    return false;
  }

  final private boolean jj_3R_290() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_288() {
    if (jj_3R_122()) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_45() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_97()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    Token xsp;
    if (jj_3R_233()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_233()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_172()) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_3R_234()) return true;
    return false;
  }

  final private boolean jj_3_47() {
    Token xsp;
    if (jj_3_45()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_45()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_279() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_288()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_179()) return true;
    xsp = jj_scanpos;
    if (jj_3R_289()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_290()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_291()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) return true;
    }
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_3R_93()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_213()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_3R_201()) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_174()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) return true;
    }
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_101()) return true;
    if (jj_3R_201()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    return false;
  }

  final private boolean jj_3R_324() {
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  final private boolean jj_3R_323() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_3R_173()) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_3R_97()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_188()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_317() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_323()) jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    xsp = jj_scanpos;
    if (jj_3R_324()) jj_scanpos = xsp;
    if (jj_3R_304()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_306() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_318() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_317()) return true;
    return false;
  }

  final private boolean jj_3R_302() {
    if (jj_3R_317()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_318()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_199() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_3R_199()) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_302()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_97()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_179()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_306()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_294() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_303()) return true;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_3R_103()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_3R_103()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_97()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_57() {
    if (jj_3R_88()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_295() {
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_3R_122()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3_56() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(125)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    if (jj_3R_153()) return true;
    xsp = jj_scanpos;
    if (jj_3R_294()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_295()) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_351() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    }
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_3R_235()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_118()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_110()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_56()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(84)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_344() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_343()) return true;
    return false;
  }

  final private boolean jj_3R_334() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_321()) return true;
    return false;
  }

  final private boolean jj_3R_251() {
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_333() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_296()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(BIT_OR)) return true;
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_scan_token(73)) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_3R_133()) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_3R_180()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_3R_121()) return true;
    return false;
  }

  final private boolean jj_3R_330() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_333()) {
    jj_scanpos = xsp;
    if (jj_3R_334()) return true;
    }
    return false;
  }

  final private boolean jj_3R_205() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) jj_scanpos = xsp;
    if (jj_scan_token(LBRACKET)) return true;
    xsp = jj_scanpos;
    if (jj_3R_215()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_343() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(84)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_3R_205()) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_332() {
    if (jj_3R_343()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_344()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_331() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_351()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_329() {
    if (jj_3R_332()) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_3R_172()) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_320() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_3R_178()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_3R_182()) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_110()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_305() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    Token xsp;
    if (jj_3R_165()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_165()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_119()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_120()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_55() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_329()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3_54() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    return false;
  }

  final private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(125)) jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_3R_185()) return true;
    return false;
  }

  final private boolean jj_3R_327() {
    if (jj_3R_331()) return true;
    return false;
  }

  final private boolean jj_3R_304() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_320()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_293() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_292()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_3R_184()) return true;
    return false;
  }

  final private boolean jj_3R_326() {
    if (jj_3R_330()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(LT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_3R_183()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    return false;
  }

  final private boolean jj_3R_325() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) return true;
    }
    if (jj_3R_296()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_321() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_325()) {
    jj_scanpos = xsp;
    if (jj_3R_326()) {
    jj_scanpos = xsp;
    if (jj_3R_327()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_135() {
    return false;
  }

  final private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == GT &&
                 getToken(1) instanceof Token.GTToken &&
                ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_134()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_292() {
    if (jj_3R_304()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_305()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_262() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == GT &&
                 getToken(1) instanceof Token.GTToken &&
                ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_135()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_261() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("LOOKAHEAD");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_69()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_322() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) return true;
    }
    }
    if (jj_3R_296()) return true;
    return false;
  }

  final private boolean jj_3R_310() {
    if (jj_3R_321()) return true;
    return false;
  }

  final private boolean jj_3R_311() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    if (jj_3R_281()) return true;
    return false;
  }

  final private boolean jj_3R_342() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_309() {
    if (jj_3R_262()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_341() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_317()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_308() {
    if (jj_3R_261()) return true;
    return false;
  }

  final private boolean jj_3R_307() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    if (jj_3R_296()) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_248() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_124()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_341()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_342()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_296() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_307()) {
    jj_scanpos = xsp;
    if (jj_3R_308()) {
    jj_scanpos = xsp;
    if (jj_3R_309()) {
    jj_scanpos = xsp;
    if (jj_3R_310()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_280() {
    if (jj_3R_88()) return true;
    if (jj_3R_292()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_293()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    }
    if (jj_3R_276()) return true;
    return false;
  }

  final private boolean jj_3R_281() {
    if (jj_3R_296()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_322()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_88()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_89()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_3R_122()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_282() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    }
    }
    }
    if (jj_3R_268()) return true;
    return false;
  }

  final private boolean jj_3R_275() {
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_274() {
    if (jj_3R_280()) return true;
    return false;
  }

  final private boolean jj_3R_276() {
    if (jj_3R_281()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_311()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_273() {
    if (jj_3R_279()) return true;
    return false;
  }

  final private boolean jj_3R_277() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_272() {
    if (jj_3R_278()) return true;
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_97()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_271() {
    if (jj_3R_209()) return true;
    return false;
  }

  final private boolean jj_3R_268() {
    if (jj_3R_276()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_67() {
    return false;
  }

  final private boolean jj_3R_265() {
    if (jj_3R_270()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_271()) {
    jj_scanpos = xsp;
    if (jj_3R_272()) {
    jj_scanpos = xsp;
    if (jj_3R_273()) {
    jj_scanpos = xsp;
    if (jj_3R_274()) {
    jj_scanpos = xsp;
    if (jj_3R_275()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_269() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) return true;
    }
    if (jj_3R_257()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("LOOKAHEAD");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_67()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_340() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_246() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_97()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_263() {
    if (jj_3R_268()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_282()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_264() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_249()) return true;
    return false;
  }

  final private boolean jj_3R_259() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_265()) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_340()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_257() {
    if (jj_3R_263()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_277()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_360() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_237()) return true;
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_258() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_231()) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    if (jj_3R_257()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_269()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_250() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_210()) return true;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("TOKEN");
    lookingAhead = false;
    if (!jj_semLA || jj_scan_token(74)) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("SPECIAL_TOKEN");
    lookingAhead = false;
    if (!jj_semLA || jj_scan_token(74)) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("SKIP");
    lookingAhead = false;
    if (!jj_semLA || jj_scan_token(74)) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("MORE");
    lookingAhead = false;
    if (!jj_semLA || jj_scan_token(74)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_252() {
    if (jj_3R_259()) return true;
    return false;
  }

  final private boolean jj_3R_356() {
    if (jj_3R_359()) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_3R_249()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_264()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_350() {
    if (jj_3R_356()) return true;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_198()) return true;
    return false;
  }

  final private boolean jj_3_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_189()) return true;
    return false;
  }

  final private boolean jj_3R_359() {
    if (jj_3R_237()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_360()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_3R_231()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_258()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_252()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_358() {
    if (jj_3R_359()) return true;
    return false;
  }

  final private boolean jj_3R_357() {
    if (jj_3R_207()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("TOKEN_MGR_DECLS");
    lookingAhead = false;
    if (!jj_semLA || jj_3R_117()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_3R_210()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_250()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_349() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_97()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_355() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_357()) {
    jj_scanpos = xsp;
    if (jj_3R_358()) return true;
    }
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_174()) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_3R_198()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_232()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_52() {
    if (jj_3R_88()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_348() {
    if (jj_3R_355()) return true;
    return false;
  }

  final private boolean jj_3R_339() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_348()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_349()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_350()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_3R_189()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_211()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_338() {
    if (jj_3R_88()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    }
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(LT)) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_3R_194()) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_174()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_206()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  public TigerParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;

  public TigerParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public TigerParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TigerParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  public TigerParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new TigerParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  public TigerParser(TigerParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  public void ReInit(TigerParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
