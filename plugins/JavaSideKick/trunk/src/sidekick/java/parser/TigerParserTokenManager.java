/* Generated By:JavaCC: Do not edit this line. TigerParserTokenManager.java */
package sidekick.java.parser;
import sidekick.java.node.*;
import java.io.*;
import java.util.*;

public class TigerParserTokenManager implements TigerParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x140000L) != 0L || (active1 & 0x2010000000000000L) != 0L)
            return 11;
         if ((active1 & 0x200000000L) != 0L || (active2 & 0x20L) != 0L)
            return 17;
         if ((active0 & 0xfffffffffe001ffcL) != 0L || (active1 & 0x3fffL) != 0L)
         {
            jjmatchedKind = 86;
            return 41;
         }
         return -1;
      case 1:
         if ((active0 & 0xfffeff9ffe001ffcL) != 0L || (active1 & 0x3fffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 86;
               jjmatchedPos = 1;
            }
            return 41;
         }
         if ((active0 & 0x1006000000000L) != 0L)
            return 41;
         if ((active0 & 0x100000L) != 0L)
            return 9;
         return -1;
      case 2:
         if ((active0 & 0x130400000001000L) != 0L || (active1 & 0x400L) != 0L)
            return 41;
         if ((active0 & 0xfecebfdffe000ffcL) != 0L || (active1 & 0x3bffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 86;
               jjmatchedPos = 2;
            }
            return 41;
         }
         return -1;
      case 3:
         if ((active0 & 0x240818160000600L) != 0L || (active1 & 0xa20L) != 0L)
            return 41;
         if ((active0 & 0xfcae3e5e9e0009fcL) != 0L || (active1 & 0x31dfL) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 3;
            return 41;
         }
         return -1;
      case 4:
         if ((active0 & 0x80003c0690000880L) != 0L || (active1 & 0x20c4L) != 0L)
            return 41;
         if ((active0 & 0x7cae02580e00017cL) != 0L || (active1 & 0x111bL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 86;
               jjmatchedPos = 4;
            }
            return 41;
         }
         return -1;
      case 5:
         if ((active0 & 0x1c2a12180a00097cL) != 0L || (active1 & 0x1112L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 5;
            return 41;
         }
         if ((active0 & 0x6084004004000000L) != 0L || (active1 & 0x89L) != 0L)
            return 41;
         return -1;
      case 6:
         if ((active0 & 0xc00121008000000L) != 0L)
            return 41;
         if ((active0 & 0x102a00080200097cL) != 0L || (active1 & 0x1112L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 6;
            return 41;
         }
         return -1;
      case 7:
         if ((active0 & 0x802000040L) != 0L || (active1 & 0x1002L) != 0L)
            return 41;
         if ((active0 & 0x102a00000000093cL) != 0L || (active1 & 0x110L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 7;
            return 41;
         }
         return -1;
      case 8:
         if ((active0 & 0xa000000000938L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 8;
            return 41;
         }
         if ((active0 & 0x1020000000000004L) != 0L || (active1 & 0x100L) != 0L)
            return 41;
         return -1;
      case 9:
         if ((active0 & 0xa000000000020L) != 0L)
            return 41;
         if ((active0 & 0x918L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 9;
            return 41;
         }
         return -1;
      case 10:
         if ((active0 & 0x8L) != 0L)
            return 41;
         if ((active0 & 0x910L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 10;
            return 41;
         }
         return -1;
      case 11:
         if ((active0 & 0x10L) != 0L || (active1 & 0x10L) != 0L)
            return 41;
         if ((active0 & 0x900L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 11;
            return 41;
         }
         return -1;
      case 12:
         if ((active0 & 0x100L) != 0L)
            return 41;
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 12;
            return 41;
         }
         return -1;
      case 13:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 13;
            return 41;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 101;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L, 0x0L);
      case 35:
         return jjStopAtPos(0, 137);
      case 37:
         jjmatchedKind = 120;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2L);
      case 38:
         jjmatchedKind = 117;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000400000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 89);
      case 41:
         return jjStopAtPos(0, 90);
      case 42:
         jjmatchedKind = 115;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400800000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 96);
      case 45:
         jjmatchedKind = 114;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x801000000000000L, 0x0L);
      case 46:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20L);
      case 47:
         jjmatchedKind = 116;
         return jjMoveStringLiteralDfa1_0(0x140000L, 0x2000000000000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 104);
      case 59:
         return jjStopAtPos(0, 95);
      case 60:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200040000000000L, 0x4L);
      case 61:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000L, 0x0L);
      case 62:
         jjmatchedKind = 136;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L, 0xd8L);
      case 63:
         return jjStopAtPos(0, 103);
      case 64:
         return jjStopAtPos(0, 98);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x8L, 0x0L, 0x0L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x40L, 0x0L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x4L, 0x0L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x30L, 0x0L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x500L, 0x0L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x880L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 93);
      case 93:
         return jjStopAtPos(0, 94);
      case 94:
         jjmatchedKind = 119;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x6000000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x38000000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xfc0000000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7000000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x38000000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x7c0000000000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3f000000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x380000000000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x3c00000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x1fL, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7e0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 91);
      case 124:
         jjmatchedKind = 118;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000200000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 92);
      case 126:
         return jjStopAtPos(0, 102);
      default :
         return jjMoveNfa_0(8, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         break;
      case 42:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 9);
         break;
      case 43:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         break;
      case 45:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 112);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 47:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      case 60:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 61:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 123);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 124);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 125);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 127);
         else if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(1, 128);
         else if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(1, 129);
         break;
      case 62:
         if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x58L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x70L, active1, 0L, active2, 0L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0x8L, active1, 0L, active2, 0L);
      case 75:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x1a84L, active1, 0L, active2, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4800400c0000000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4100001000000000L, active1, 0L, active2, 0L);
      case 102:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 48, 41);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000100000000L, active1, 0x20e0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x208200000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x38010000000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40c04c08000000L, active1, 0x1800L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000010000000L, active1, 0x700L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2200000000000000L, active1, 0x4L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0x10L, active2, 0L);
      case 124:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(2, 133);
         break;
      case 61:
         if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(2, 130);
         else if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(2, 131);
         break;
      case 62:
         if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L, active1, 0L, active2, 0L);
      case 70:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 41);
         break;
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 75:
         return jjMoveStringLiteralDfa3_0(active0, 0x880L, active1, 0L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x8L, active1, 0L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L, active1, 0L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x230L, active1, 0L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x300000000L, active1, 0x101L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x2828L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x200040000000000L, active1, 0x1000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x40180c00000000L, active1, 0x10L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x9000200008000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000000000L, active1, 0x4L, active2, 0L);
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 41);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc2L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8008046000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40a08200a0000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x14000000000L, active1, 0x200L, active2, 0L);
      case 119:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 56, 41);
         break;
      case 121:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 74, 41);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(3, 132);
         break;
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L, active1, 0L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L, active1, 0L, active2, 0L);
      case 69:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 41);
         return jjMoveStringLiteralDfa4_0(active0, 0x880L, active1, 0L, active2, 0L);
      case 75:
         return jjMoveStringLiteralDfa4_0(active0, 0x4L, active1, 0L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x8L, active1, 0L, active2, 0L);
      case 80:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 41);
         break;
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x30L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x381010000000L, active1, 0x1000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0x10L, active2, 0L);
      case 100:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 41);
         break;
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 41);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 41);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 41);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 41);
         return jjMoveStringLiteralDfa4_0(active0, 0x20020004000000L, active1, 0x4L, active2, 0L);
      case 103:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 41);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0x2L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 41);
         return jjMoveStringLiteralDfa4_0(active0, 0x2002000008000000L, active1, 0x2000L, active2, 0L);
      case 109:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 41);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 111:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 41);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0xc0L, active2, 0L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 41);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 41);
         return jjMoveStringLiteralDfa4_0(active0, 0x40600000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x1008000802000000L, active1, 0x9L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x4L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x30L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L, active1, 0L);
      case 78:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x800L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x8L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xc08000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xaL);
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 41);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 77, 41);
         return jjMoveStringLiteralDfa5_0(active0, 0x1002000008000000L, active1, 0L);
      case 104:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 41);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000800000000L, active1, 0x1L);
      case 107:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 41);
         break;
      case 108:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x104000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0L);
      case 114:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 41);
         return jjMoveStringLiteralDfa5_0(active0, 0x4024000006000000L, active1, 0L);
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 41);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L);
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 41);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 41);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 41);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0L);
      case 119:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x8L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa6_0(active0, 0x4L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x30L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0xa000000L, active1, 0L);
      case 99:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 41);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 41);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 41);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 41);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L);
      case 104:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 41);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1100L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x101000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 41);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000800000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10L);
      case 115:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 41);
         break;
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 41);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 41);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x40L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x4L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x38L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000002000000L, active1, 0L);
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 41);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 59, 41);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0x100L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L);
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 41);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 41);
         break;
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 41);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0L);
      case 121:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 41);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x4L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa8_0(active0, 0x10L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x8L, active1, 0L);
      case 69:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 6, 41);
         return jjMoveStringLiteralDfa8_0(active0, 0x20L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x100L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 41);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 76, 41);
         return jjMoveStringLiteralDfa8_0(active0, 0x1008000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L, active1, 0x110L);
      case 112:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 65, 41);
         break;
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 25, 41);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x8L, active1, 0L);
      case 68:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 2, 41);
         break;
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x10L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x20L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x100L, active1, 0L);
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 60, 41);
         break;
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 53, 41);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 72, 41);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(9, 5, 41);
         break;
      case 71:
         return jjMoveStringLiteralDfa10_0(active0, 0x10L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x100L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa10_0(active0, 0x8L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x800L, active1, 0L);
      case 102:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 51, 41);
         break;
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 49, 41);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0x800L, active1, 0L);
      case 69:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(10, 3, 41);
         break;
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x10L, active1, 0L);
      case 75:
         return jjMoveStringLiteralDfa11_0(active0, 0x100L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0x900L, active1, 0L);
      case 78:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(11, 4, 41);
         break;
      case 100:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(11, 68, 41);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa13_0(active0, 0x800L);
      case 78:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(12, 8, 41);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa14_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, 0L);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(14, 11, 41);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 61;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if (curChar == 36)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(41);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 39)
                     jjAddStates(10, 11);
                  else if (curChar == 46)
                     jjCheckNAdd(17);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 11;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAddStates(12, 14);
                  }
                  break;
               case 1:
                  if (curChar == 32)
                     jjAddStates(15, 16);
                  break;
               case 9:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 11:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if (curChar == 46)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddStates(17, 19);
                  break;
               case 19:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if (curChar == 39)
                     jjAddStates(10, 11);
                  break;
               case 23:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if (curChar == 39 && kind > 84)
                     kind = 84;
                  break;
               case 26:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 24);
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 29:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 31:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 32:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 34:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 35:
                  if (curChar == 34 && kind > 85)
                     kind = 85;
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 37:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 38:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 40:
                  if (curChar != 36)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 44:
                  if (curChar != 46)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddStates(24, 26);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddStates(24, 26);
                  break;
               case 47:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(48, 21);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 51:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(52, 21);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 55:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(56, 21);
                  break;
               case 57:
                  if (curChar != 48)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddStates(12, 14);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddTwoStates(59, 15);
                  break;
               case 60:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddTwoStates(60, 15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(41);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 0:
                  if (curChar == 115)
                     jjAddStates(15, 16);
                  break;
               case 2:
                  if (curChar == 123 && kind > 1)
                     kind = 1;
                  break;
               case 3:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 10:
                  if (kind > 19)
                     kind = 19;
                  break;
               case 15:
                  if ((0x100000001000L & l) != 0L && kind > 78)
                     kind = 78;
                  break;
               case 18:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(30, 31);
                  break;
               case 21:
                  if ((0x5000000050L & l) != 0L && kind > 82)
                     kind = 82;
                  break;
               case 23:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 25:
                  if (curChar == 92)
                     jjAddStates(32, 34);
                  break;
               case 26:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 32:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 33:
                  if (curChar == 92)
                     jjAddStates(35, 37);
                  break;
               case 34:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 40:
               case 41:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(41);
                  break;
               case 46:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 50:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(40, 41);
                  break;
               case 54:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(42, 43);
                  break;
               case 58:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(59);
                  break;
               case 59:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddTwoStates(59, 15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 8:
               case 41:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(41);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 19)
                     kind = 19;
                  break;
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 32:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(7, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 61 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x800000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(5, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar != 47)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(44, 46);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(44, 46);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 21)
                     kind = 21;
                  break;
               case 3:
                  if (curChar == 10 && kind > 21)
                     kind = 21;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  kind = 21;
                  jjAddStates(44, 46);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjAddStates(44, 46);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   43, 44, 49, 50, 53, 54, 21, 32, 33, 35, 23, 25, 58, 60, 15, 1, 
   2, 17, 18, 21, 32, 33, 37, 35, 45, 46, 21, 53, 54, 21, 19, 20, 
   26, 27, 29, 34, 36, 38, 47, 48, 51, 52, 55, 56, 1, 2, 4, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, "\114\117\117\113\101\110\105\101\104", 
"\111\107\116\117\122\105\137\103\101\123\105", "\120\101\122\123\105\122\137\102\105\107\111\116", 
"\120\101\122\123\105\122\137\105\116\104", "\112\101\126\101\103\117\104\105", "\124\117\113\105\116", 
"\123\120\105\103\111\101\114\137\124\117\113\105\116", "\115\117\122\105", "\123\113\111\120", 
"\124\117\113\105\116\137\115\107\122\137\104\105\103\114\123", "\105\117\106", null, null, null, null, null, null, null, null, null, null, 
null, null, "\141\142\163\164\162\141\143\164", "\141\163\163\145\162\164", 
"\142\157\157\154\145\141\156", "\142\162\145\141\153", "\142\171\164\145", "\143\141\163\145", 
"\143\141\164\143\150", "\143\150\141\162", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145", 
"\145\154\163\145", "\145\156\165\155", "\145\170\164\145\156\144\163", "\146\141\154\163\145", 
"\146\151\156\141\154", "\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", 
"\147\157\164\157", "\151\146", "\151\155\160\154\145\155\145\156\164\163", 
"\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", "\151\156\164", 
"\151\156\164\145\162\146\141\143\145", "\154\157\156\147", "\156\141\164\151\166\145", "\156\145\167", 
"\156\165\154\154", "\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\164\165\162\156", 
"\163\150\157\162\164", "\163\164\141\164\151\143", "\163\164\162\151\143\164\146\160", 
"\163\165\160\145\162", "\163\167\151\164\143\150", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\141\156\163\151\145\156\164", "\164\162\165\145", "\164\162\171", "\166\157\151\144", 
"\166\157\154\141\164\151\154\145", "\167\150\151\154\145", null, null, null, null, null, null, null, null, null, 
null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", 
"\100", "\75", "\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", "\76\75", 
"\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", 
"\174", "\136", "\45", "\74\74", "\53\75", "\55\75", "\52\75", "\57\75", "\46\75", 
"\174\75", "\136\75", "\45\75", "\74\74\75", "\76\76\75", "\76\76\76\75", "\56\56\56", 
"\76\76\76", "\76\76", "\76", "\43", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3, 0, 0, 0, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffe001fffL, 0xfffffffffe747fffL, 0x3ffL, 
};
static final long[] jjtoSkip = {
   0xe3e000L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xe00000L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x11c0000L, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[61];
private final int[] jjstateSet = new int[122];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public TigerParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public TigerParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 61; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 24)
         {
            jjmatchedKind = 24;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 24)
         {
            jjmatchedKind = 24;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 24)
         {
            jjmatchedKind = 24;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 18 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
         input_stream.backup(2);
         break;
      case 19 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default : 
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 134 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[134]);
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RUNSIGNEDSHIFT;
     input_stream.backup(2);
         break;
      case 135 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[135]);
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RSIGNEDSHIFT;
     input_stream.backup(1);
         break;
      default : 
         break;
   }
}
}
