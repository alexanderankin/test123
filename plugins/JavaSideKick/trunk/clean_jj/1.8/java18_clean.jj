/*
This is a clean java 1.8 grammar from scratch.

Copyright (c) 2014, Dale Anson
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,

are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
    * Neither the name of the <ORGANIZATION> nor the names of its contributors
    may be used to endorse or promote products derived from this software without
    specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

options {
  JAVA_UNICODE_ESCAPE = true;
  ERROR_REPORTING = true;
  STATIC = false;
  DEBUG_PARSER = true;
}

PARSER_BEGIN(JavaParser)
import java.io.*;

public class JavaParser
{

   private InputStream inputStream = null;
   
    public static void main(String args[]) {
        JavaParser parser;
        if (args.length == 0) {
            System.out.println("JavaParser:  Reading from standard input . . .");
            parser = new JavaParser(System.in);
        } else if (args.length == 1) {
            System.out.println("JavaParser:  Reading from file " + args[0] + " . . .");
            try {
                parser = new JavaParser(new java.io.FileInputStream(args[0]));
            } catch (java.io.FileNotFoundException e) {
                System.out.println("JavaParser:  File " + args[0] + " not found.");
                return;
            }
        } else {
            System.out.println("JavaParser:  Usage is one of:");
            System.out.println("         java JavaParser < inputfile");
            System.out.println("OR");
            System.out.println("         java JavaParser inputfile");
            return;
        }
        try {
            parser.enable_tracing();
            parser.CompilationUnit();
            if (args.length == 0) {
                System.out.println("JavaParser:  input parsed successfully.");
            } 
            else if (args.length == 1) {
                System.out.println("JavaParser: " + args[0] + " parsed successfully.");   
            }
        } catch (ParseException e) {
            if (args.length == 0) {
                System.err.println("JavaParser:  Encountered errors during parse.");
            } 
            else if (args.length == 1) {
                System.err.println("JavaParser: Encountered errors during parse of " + args[0]);   
            }
            System.err.println(e.getMessage());
            System.exit(1);
        }
    }

   public JavaParser(String filename)
   {
      this(System.in);
      try {
          inputStream = new FileInputStream(new File(filename));
          ReInit(inputStream);
      }
      catch(Exception e) {
        e.printStackTrace();
      }
   }

   JavaParser(JavaCharStream stream) {
        jj_input_stream = stream;
        token_source = new JavaParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
   }

  /*
   * Returns true if the next token is not in the FOLLOW list of "expansion".
   * It is used to decide when the end of an "expansion" has been reached.
   */
  private boolean notTailOfExpansionUnit() {
    Token t;
    t = getToken(1);
    if (t.kind == BIT_OR || t.kind == COMMA || t.kind == RPAREN || t.kind == RBRACE || t.kind == RBRACKET) return false;
    return true;
  }
}

PARSER_END(JavaParser)

/********************************************
 * THE JAVA TOKEN SPECIFICATION STARTS HERE *
 ********************************************/

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  /* added backup(2) for special handling of single line comments at
  the end of a file, see <IN_SINGLE_LINE_COMMENT> special token below */
  "//" { input_stream.backup(2); } : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  /* this is the original, I've replaced with the next line to allow a single
  line comment at the end of a java file without a new line following the
  comment.  The java language specification says that single line comments
  must be followed by an end-of-line marker (see section 3.4), so this new rule
  relaxes that requirement slightly by allowing the line terminator to be
  optional.  This only makes sense when the comment is the last line of the
  source file, all other single line comments will have a line terminator. This
  request was posted as a bug against JBrowse, I don't see any problem with
  allowing it, especially since Sun's compiler doesn't complain. */
  /* <SINGLE_LINE_COMMENT:

 "\n" | "\r" | "\r\n" > : DEFAULT */
  < SINGLE_LINE_COMMENT:

 "//"(~["\n","\r"])* ("\n"|"\r"|"\r\n")? > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT:
 "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>

SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT:
 "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>

MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

/* LITERALS */
TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <BINARY_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] ((["_"])*["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])((["_"])*["0"-"9","a"-"f","A"-"F"])* >
|
  < #BINARY_LITERAL: "0" ["b","B"] (["0"-"1"])((["_"])*["0"-"1"])* >   
|
  < #OCTAL_LITERAL: "0" ((["_"])*(["0"-"7"]))* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])((["_"])*(["0"-"9"]))* "." ((["0"-"9"])((["_"])*(["0"-"9"]))*)* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])((["_"])*(["0"-"9"]))* (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])((["_"])*(["0"-"9"]))* <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])((["_"])*(["0"-"9"]))* (<EXPONENT>)? ["f","F","d","D"]
  >
  
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
|
  < BOOLEAN_LITERAL:
    "true"
    |
    "false"
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < DOUBLECOLON: "::" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < PERCENT: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < PERCENTASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ELLIPSIS: "..." >
| < POINTER: "->" >
| < DIAMOND: "<>" >
}

/* >'s need special attention due to generics syntax. */
TOKEN :
{
  < RUNSIGNEDSHIFT: ">>>" >
  {
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RUNSIGNEDSHIFT;
     input_stream.backup(2);
  }
| < RSIGNEDSHIFT: ">>" >
  {
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RSIGNEDSHIFT;
     input_stream.backup(1);
     System.out.println("+++++ found >>");
  }
| < GT: ">" >
  {
    System.out.println("+++++ found GT");   
  }
}


/*
--------------------------------------------------------------------------------
Literals
*/
void Literal():
{}
{
    IntegerLiteral()
    |
    FloatingPointLiteral()
    |
    BooleanLiteral()
    |
    CharacterLiteral()
    |
    StringLiteral()
    |
    NullLiteral()
}

void IntegerLiteral():
{}
{
    <INTEGER_LITERAL>   
}

void FloatingPointLiteral():
{}
{
    <FLOATING_POINT_LITERAL>   
}

void BooleanLiteral():
{}
{
    <BOOLEAN_LITERAL>   
}

void CharacterLiteral():
{}
{
    <CHARACTER_LITERAL>   
}

void StringLiteral():
{}
{
    <STRING_LITERAL>   
}

void NullLiteral():
{}
{
    <NULL>   
}

/*
--------------------------------------------------------------------------------
Types(), Values(), and Variables()
*/

void Type():
{}
{
    LOOKAHEAD(3)
    PrimitiveType()
    |
    ReferenceType()
}

void PrimitiveType():
{}
{
    (Annotation())* ( LOOKAHEAD(2) NumericType() | <BOOLEAN> )
}

void NumericType():
{}
{
    <BYTE>
    |
    <SHORT> 
    |
    <INT>
    |
    <LONG> 
    |
    <CHAR>
    |
    <FLOAT>
    |
    <DOUBLE>
}

void ReferenceType():
{}
{
    LOOKAHEAD(3)
    ClassOrInterfaceType()
    |
    LOOKAHEAD(3)
    ArrayType()
    |
    LOOKAHEAD(3)
    TypeVariable()
}

void ClassOrInterfaceType():
{}
{
    (Annotation())* <IDENTIFIER> [ LOOKAHEAD(6) TypeArguments() ] ( LOOKAHEAD(2) <DOT> (Annotation() )* <IDENTIFIER> [ LOOKAHEAD(2) TypeArguments() ] )*
}

void TypeVariable():
{}
{
    (Annotation())* <IDENTIFIER>
}

void ArrayType():
{}
{
    LOOKAHEAD(3)
    PrimitiveType() Dims()
    |
    LOOKAHEAD(3)
    ClassOrInterfaceType() Dims()
    |
    LOOKAHEAD(3)
    TypeVariable() Dims()
}

void Dims():
{}
{
    (Annotation())* <LBRACKET> <RBRACKET> ( LOOKAHEAD(2) (Annotation())* <LBRACKET> <RBRACKET> )*

}

void TypeParameter():
{}
{
    (Annotation())* <IDENTIFIER> [TypeBound()]
}

void TypeBound():
{}
{
    <EXTENDS> (LOOKAHEAD(3) ClassOrInterfaceType() (AdditionalBound())* | TypeVariable())
}

void AdditionalBound():
{}
{
   <BIT_AND> ClassOrInterfaceType()
}

void TypeArguments():
{}
{
    <LT> TypeArgumentList() ">"
}

void TypeArgumentList():
{}
{
    TypeArgument() (<COMMA> TypeArgument())*
}

void TypeArgument():
{}
{
    LOOKAHEAD(3)
    ReferenceType()
    |
    LOOKAHEAD(3)
    Wildcard()
}

void Wildcard():
{}
{
    (Annotation())* <HOOK> [WildcardBounds()]

}

void WildcardBounds():
{}
{
    (<EXTENDS> | <SUPER>) ReferenceType()
}

/*
--------------------------------------------------------------------------------
Productions() from §7 (Packages()) -- this section is missing from Chapter 19
see chapter 6
*/
void PackageName():
{}
{
    <IDENTIFIER> (<DOT> <IDENTIFIER>)*
}

void TypeName():
{}
{
    <IDENTIFIER>( LOOKAHEAD(2) <DOT> <IDENTIFIER> )*
}

void ExpressionName():
{}
{
    <IDENTIFIER>( LOOKAHEAD(2) <DOT> <IDENTIFIER> )* [LOOKAHEAD(2) <DOT> <THIS> ( LOOKAHEAD(2) <DOT> <IDENTIFIER> )*]
    |
    <THIS> (LOOKAHEAD(2) <DOT> <IDENTIFIER> )*
}

void MethodName():
{}
{
    ExpressionName()
}



/*
--------------------------------------------------------------------------------
Productions() from §7 (Packages())
*/

/* main entry point */
void CompilationUnit():
{}
{
    [ LOOKAHEAD(2) PackageDeclaration() ] ( ImportDeclaration() )* ( TypeDeclaration() )* 
}

void PackageDeclaration():
{}
{
    (Annotation())* <PACKAGE> PackageName() <SEMICOLON>
}

void ImportDeclaration():
{}
{
    <IMPORT> [<STATIC>] TypeName() [<DOT> <STAR>] <SEMICOLON>
}

void TypeDeclaration():
{}
{
    LOOKAHEAD(3)
    ClassDeclaration()
    |
    LOOKAHEAD(3)
    InterfaceDeclaration()
    |
    <SEMICOLON>
}

/*
--------------------------------------------------------------------------------
Productions() from §8 (Classes())
*/

void ClassDeclaration():
{}
{
    LOOKAHEAD(3)
    NormalClassDeclaration()
    |
    LOOKAHEAD(3)
    EnumDeclaration()
}

void NormalClassDeclaration():
{}
{
    (ClassModifier())* <CLASS> <IDENTIFIER> [TypeParameters()] [Superclass()] [Superinterfaces()] ClassBody()
}

void ClassModifier():
{}
{
    InterfaceModifier()
    |
    <FINAL> 
}

void TypeParameters():
{}
{
    <LT> TypeParameterList() <GT>
}

void TypeParameterList():
{}
{
    TypeParameter() (<COMMA> TypeParameter())*
}

void Superclass():
{}
{
    <EXTENDS> ClassOrInterfaceType()
}

void Superinterfaces():
{}
{
    <IMPLEMENTS> InterfaceTypeList()
}

void InterfaceTypeList():
{}
{
    ClassOrInterfaceType() (<COMMA> ClassOrInterfaceType())*
}

void ClassBody():
{}
{
   <LBRACE> (ClassBodyDeclaration())* <RBRACE>
}

void ClassBodyDeclaration():
{}
{
    LOOKAHEAD(3)
    ClassMemberDeclaration()
    |
    InstanceInitializer()
    |
    StaticInitializer()
    |
    LOOKAHEAD(2)
    ConstructorDeclaration()
}

void ClassMemberDeclaration():
{}
{
    LOOKAHEAD(6)
    FieldDeclaration()
    |
    LOOKAHEAD(6)
    MethodDeclaration()
    |
    LOOKAHEAD(3)
    ClassDeclaration()
    |
    LOOKAHEAD(3)
    InterfaceDeclaration()
    |
    <SEMICOLON>
}

void FieldDeclaration():
{}
{
    (FieldModifier())* UnannType() VariableDeclaratorList() <SEMICOLON>
}

void FieldModifier():
{}
{
    Annotation()
    |
    <PUBLIC> 
    |
    <PROTECTED> 
    |
    <PRIVATE>
    |
    <STATIC> 
    |
    <FINAL> 
    |
    <TRANSIENT> 
    |
    <VOLATILE>
}

void VariableDeclaratorList():
{}
{
    VariableDeclarator() (<COMMA> VariableDeclarator())*
}

void VariableDeclarator():
{}
{
    VariableDeclaratorId() [<ASSIGN> VariableInitializer()]
}

void VariableDeclaratorId():
{}
{
    <IDENTIFIER> [Dims()]
}

void VariableInitializer():
{}
{
    LOOKAHEAD(ArrayInitializer())
    ArrayInitializer()
    |
    LOOKAHEAD(Expression())
    Expression()
    |
    // TODO: added Primary(), it seems to be necessary. Confirm.
    LOOKAHEAD(Primary())
    Primary()
}

void UnannType():
{}
{
    LOOKAHEAD(3)
    UnannReferenceType()
    |
    UnannPrimitiveType()
}

void UnannPrimitiveType():
{}
{
    NumericType()
    |
    <BOOLEAN>
}

void UnannReferenceType():
{}
{
    // DONE: this doesn't always select the right production. UnannArrayType is
    // a UnannClassOrInterfaceType followed by Dims(). See the fix in UnannArrayType,
    // I made Dims optional for UnannClassOrInterfaceType
    LOOKAHEAD(2)
    UnannArrayType()
    |
    //LOOKAHEAD(UnannClassOrInterfaceType())
    //UnannClassOrInterfaceType()
    //|
    <IDENTIFIER>
}

void UnannClassOrInterfaceType():
{}
{
    UnannClassType()
}

void UnannClassType():
{}
{
    <IDENTIFIER> [TypeArguments()] (<DOT> (Annotation())* <IDENTIFIER> [TypeArguments()])*
}

void UnannArrayType():
{}
{
    UnannPrimitiveType() Dims()
    |
    LOOKAHEAD(3)
    UnannClassOrInterfaceType() [LOOKAHEAD(2) Dims()]
    |
    LOOKAHEAD(3)
    <IDENTIFIER> Dims()
}

void MethodDeclaration():
{}
{
    (MethodModifier())* MethodHeader() MethodBody()
}

void MethodModifier():
{}
{
    ClassModifier()
    |
    <SYNCHRONIZED> 
    |
    <NATIVE> 
}

void MethodHeader():
{}
{
    TypeParameters() (Annotation())* Result() MethodDeclarator() [Throws()]
    |
    Result() MethodDeclarator() [Throws()]
}

void Result():
{}
{
    UnannType()
    |
    <VOID>
}

void MethodDeclarator():
{}
{
    <IDENTIFIER> <LPAREN> [FormalParameterList()] <RPAREN> [Dims()]
}

void FormalParameterList():
{}
{
    LOOKAHEAD(6)
    FormalParameters() [ <COMMA> LastFormalParameter() ]
    |
    LOOKAHEAD(3)
    LastFormalParameter()
}

void FormalParameters():
{}
{
    LOOKAHEAD(3)
    FormalParameter() ( LOOKAHEAD(2) <COMMA> FormalParameter() )*
    |
    LOOKAHEAD(3)
    ReceiverParameter() ( LOOKAHEAD(2) <COMMA> FormalParameter() )*
}

void FormalParameter():
{}
{
    (VariableModifier())* UnannType() VariableDeclaratorId()
}

void VariableModifier():
{}
{
    Annotation() 
    |
    <FINAL>
}

void LastFormalParameter():
{}
{
    LOOKAHEAD(3)
    (VariableModifier())* UnannType() (Annotation())* <ELLIPSIS> VariableDeclaratorId()
    |
    LOOKAHEAD(3)
    FormalParameter()
}

void ReceiverParameter():
{}
{
    (Annotation())* UnannType() [<IDENTIFIER> <DOT>] <THIS>
}

void Throws():
{}
{
    <THROWS> ExceptionTypeList()
}

void ExceptionTypeList():
{}
{
    ExceptionType() (<COMMA> ExceptionType())*
}

void ExceptionType():
{}
{
    LOOKAHEAD(3)
    ClassOrInterfaceType()
    |
    LOOKAHEAD(3)
    TypeVariable()
}

void MethodBody():
{}
{
    Block()
    |
    <SEMICOLON>
}

void InstanceInitializer():
{}
{
    Block()
}

void StaticInitializer():
{}
{
    <STATIC> Block()
}

void ConstructorDeclaration():
{}
{
    (ConstructorModifier())* ConstructorDeclarator() [Throws()] ConstructorBody()
}

void ConstructorModifier():
{}
{
    Annotation()
    |
    <PUBLIC>
    |
    <PROTECTED>
    |
    <PRIVATE>
}

void ConstructorDeclarator():
{}
{
    [TypeParameters()] <IDENTIFIER> <LPAREN> [FormalParameterList()] <RPAREN> 
}

void ConstructorBody():
{}
{
    <LBRACE> 
        // TODO: check these lookaheads, they are excessive
        [ LOOKAHEAD(ExplicitConstructorInvocation()) ExplicitConstructorInvocation() ] 
        [ LOOKAHEAD(BlockStatements()) BlockStatements() ] 
    <RBRACE>
}

void ExplicitConstructorInvocation():
{}
{
    LOOKAHEAD(3)
    [TypeArguments()] <THIS> <LPAREN> [ArgumentList()] <RPAREN> <SEMICOLON>
    |
    LOOKAHEAD(3)
    [TypeArguments()] <SUPER> <LPAREN> [ArgumentList()] <RPAREN> <SEMICOLON>
    |
    LOOKAHEAD(3)
    ExpressionName() <DOT> [TypeArguments()] <SUPER> <LPAREN> [ArgumentList()] <RPAREN> <SEMICOLON>
    |
    LOOKAHEAD(3)
    Primary() <DOT> [TypeArguments()] <SUPER> <LPAREN> [ArgumentList()] <RPAREN> <SEMICOLON>
}

void EnumDeclaration():
{}
{
    (ClassModifier())* <ENUM> <IDENTIFIER> [Superinterfaces()] EnumBody()
}

void EnumBody():
{}
{
    <LBRACE> [EnumConstantList()] [<COMMA>] [EnumBodyDeclarations()] <RBRACE>
}

void EnumConstantList():
{}
{
    EnumConstant() ( LOOKAHEAD(2) <COMMA> EnumConstant())*
}

void EnumConstant():
{}
{
    ( EnumConstantModifier() )* <IDENTIFIER> [ <LPAREN> [ArgumentList()] <RPAREN> ] [ ClassBody() ]
}

void EnumConstantModifier():
{}
{
    Annotation()
}

void EnumBodyDeclarations():
{}
{
    <SEMICOLON> (ClassBodyDeclaration())*
}

/*
--------------------------------------------------------------------------------
Productions() from §9 (Interfaces())
*/

void InterfaceDeclaration():
{}
{
    LOOKAHEAD(3)
    NormalInterfaceDeclaration()
    |
    LOOKAHEAD(3)
    AnnotationTypeDeclaration()
}

void NormalInterfaceDeclaration():
{}
{
    ( LOOKAHEAD(2) InterfaceModifier() )* <INTERFACE> <IDENTIFIER> [ LOOKAHEAD(2) TypeParameters() ] [ExtendsInterfaces()] InterfaceBody()
}

void InterfaceModifier():
{}
{
    Annotation()
    |
    <PUBLIC> 
    |
    <PROTECTED> 
    |
    <PRIVATE>
    |
    <ABSTRACT> 
    |
    <STATIC> 
    |
    <STRICTFP>
}

void ExtendsInterfaces():
{}
{
    <EXTENDS> InterfaceTypeList()
}

void InterfaceBody():
{}
{
    <LBRACE> ( LOOKAHEAD(2) InterfaceMemberDeclaration() )* <RBRACE> 
}

void InterfaceMemberDeclaration():
{}
{
    LOOKAHEAD(3)
    ConstantDeclaration()
    |
    LOOKAHEAD(3)
    InterfaceMethodDeclaration()
    |
    LOOKAHEAD(3)
    ClassDeclaration()
    |
    LOOKAHEAD(3)
    InterfaceDeclaration()
    |
    <SEMICOLON>
}

void ConstantDeclaration():
{}
{
    (ConstantModifier())* UnannType() VariableDeclaratorList() <SEMICOLON>
}

void ConstantModifier():
{}
{
    Annotation()
    |
    <PUBLIC>
    |
    <STATIC> 
    |
    <FINAL>
}

void InterfaceMethodDeclaration():
{}
{
    (InterfaceMethodModifier())* MethodHeader() MethodBody()
}

void InterfaceMethodModifier():
{}
{
    Annotation()
    |
    <PUBLIC>
    |
    <ABSTRACT> 
    |
    <_DEFAULT> 
    |
    <STATIC> 
    |
    <STRICTFP>
}

void AnnotationTypeDeclaration():
{}
{
    ( LOOKAHEAD(2) InterfaceModifier())* <AT> <INTERFACE> <IDENTIFIER> AnnotationTypeBody()
}

void AnnotationTypeBody():
{}
{
    <LBRACE> ( LOOKAHEAD(2) AnnotationTypeMemberDeclaration() )* <RBRACE> 
}

void AnnotationTypeMemberDeclaration():
{}
{
    LOOKAHEAD(3)
    AnnotationTypeElementDeclaration()
    |
    LOOKAHEAD(3)
    ConstantDeclaration()
    |
    LOOKAHEAD(3)
    ClassDeclaration()
    |
    LOOKAHEAD(3)
    InterfaceDeclaration()
    |
    <SEMICOLON>
}

void AnnotationTypeElementDeclaration():
{}
{
    (AnnotationTypeElementModifier())* UnannType() <IDENTIFIER> <LPAREN> <RPAREN> [Dims()] [DefaultValue()] <SEMICOLON>
}

void AnnotationTypeElementModifier():
{}
{
    Annotation()
    |
    <PUBLIC>
    |
    <ABSTRACT>
}

void DefaultValue():
{}
{
    <_DEFAULT> ElementValue()
}

void Annotation():
{}
{
    LOOKAHEAD(3)
    NormalAnnotation()
    |
    LOOKAHEAD(3)
    MarkerAnnotation()
    |
    LOOKAHEAD(3)
    SingleElementAnnotation()
}

void NormalAnnotation():
{}
{
    <AT> TypeName() <LPAREN> [ElementValuePairList()] <RPAREN> 
}

void ElementValuePairList():
{}
{
    ElementValuePair() (<COMMA> ElementValuePair())*
}

void ElementValuePair():
{}
{
    <IDENTIFIER> <ASSIGN> ElementValue()
}

void ElementValue():
{}
{
    LOOKAHEAD(3)
    ConditionalExpression()
    |
    ElementValueArrayInitializer()
    |
    LOOKAHEAD(3)
    Annotation()
}

void ElementValueArrayInitializer():
{}
{
    <LBRACE> [ElementValueList()] [<COMMA>] <RBRACE>
}

void ElementValueList():
{}
{
    ElementValue() ( LOOKAHEAD(2) <COMMA> ElementValue())*
}

void MarkerAnnotation():
{}
{
    <AT> TypeName()
}

void SingleElementAnnotation():
{}
{
    <AT> TypeName() <LPAREN> ElementValue() <RPAREN>
}

/*
--------------------------------------------------------------------------------
Productions() from §10 (Arrays())
*/

void ArrayInitializer():
{}
{
    <LBRACE> [VariableInitializerList()] [<COMMA>] <RBRACE>
}

void VariableInitializerList():
{}
{
    VariableInitializer() ( LOOKAHEAD(2) <COMMA> VariableInitializer())*
}

/*
--------------------------------------------------------------------------------
Productions() from §14 (Blocks() and Statements())
*/

void Block():
{}
{
    <LBRACE> [BlockStatements()] <RBRACE>
}

void BlockStatements():
{}
{
    BlockStatement() ( LOOKAHEAD(2) BlockStatement())*
}

void BlockStatement():
{}
{
    LOOKAHEAD(LocalVariableDeclarationStatement())
    LocalVariableDeclarationStatement()
    |
    LOOKAHEAD(Statement())
    Statement()
    |
    LOOKAHEAD(3)
    ClassDeclaration()
}

void LocalVariableDeclarationStatement():
{}
{
    LocalVariableDeclaration() <SEMICOLON>
}

void LocalVariableDeclaration():
{}
{
    (VariableModifier())* UnannType() VariableDeclaratorList()
}

void Statement():
{}
{
    ForStatement()
    |
    LOOKAHEAD(StatementWithoutTrailingSubstatement())
    StatementWithoutTrailingSubstatement()
    |
    LOOKAHEAD(2)
    LabeledStatement()
    |
    LOOKAHEAD(IfThenElseStatement())
    IfThenElseStatement()
    |
    LOOKAHEAD(IfThenStatement())
    IfThenStatement()
    |
    WhileStatement()
}

void StatementNoShortIf():
{}
{
    LOOKAHEAD(2)
    StatementWithoutTrailingSubstatement()
    |
    LOOKAHEAD(2)
    LabeledStatementNoShortIf()
    |
    IfThenElseStatementNoShortIf()
    |
    WhileStatementNoShortIf()
    |
    ForStatementNoShortIf()
}

void StatementWithoutTrailingSubstatement():
{}
{
    Block()
    |
    <SEMICOLON>
    |
    ExpressionStatement()
    |
    AssertStatement()
    |
    SwitchStatement()
    |
    DoStatement()
    |
    BreakStatement()
    |
    ContinueStatement()
    |
    ReturnStatement()
    |
    SynchronizedStatement()
    |
    ThrowStatement()
    |
    TryStatement()
}

void LabeledStatement():
{}
{
    <IDENTIFIER> <COLON> Statement()
}

void LabeledStatementNoShortIf():
{}
{
    <IDENTIFIER> <COLON> StatementNoShortIf()
}

void ExpressionStatement():
{}
{
    StatementExpression() <SEMICOLON>
}

void StatementExpression():
{}
{
    LOOKAHEAD(6)
    Assignment()
    |
    LOOKAHEAD(6)
    MethodInvocation()
    |
    LOOKAHEAD(6)
    PreIncrementExpression()
    |
    LOOKAHEAD(6)
    PreDecrementExpression()
    |
    LOOKAHEAD(6)
    PostIncrementExpression()
    |
    LOOKAHEAD(6)
    PostDecrementExpression()
    |
    LOOKAHEAD(3)
    ClassInstanceCreationExpression()
}

void IfThenStatement():
{}
{
    <IF> <LPAREN> Expression() <RPAREN> Statement()
}

void IfThenElseStatement():
{}
{
    <IF> <LPAREN> Expression() <RPAREN> StatementNoShortIf() <ELSE> Statement()
}

void IfThenElseStatementNoShortIf():
{}
{
    <IF> <LPAREN> Expression() <RPAREN> StatementNoShortIf() <ELSE> StatementNoShortIf()
}

void AssertStatement():
{}
{
    <ASSERT> [ LOOKAHEAD(2) Expression() <COLON> ] Expression() <SEMICOLON>
}

void SwitchStatement():
{}
{
    <SWITCH> <LPAREN> Expression() <RPAREN> SwitchBlock()
}

void SwitchBlock():
{}
{
    <LBRACE> (LOOKAHEAD(2) SwitchBlockStatementGroup())* (LOOKAHEAD(2) SwitchLabel())* <RBRACE> 
}

void SwitchBlockStatementGroup():
{}
{
    SwitchLabels() BlockStatements()
}

void SwitchLabels():
{}
{
    (SwitchLabel())+
}

void SwitchLabel():
{}
{
    <CASE> ( LOOKAHEAD(2) Expression() | <IDENTIFIER> ) <COLON>
    <_DEFAULT> <COLON>
}

void WhileStatement():
{}
{
    <WHILE> <LPAREN> Expression() <RPAREN> Statement()
}

void WhileStatementNoShortIf():
{}
{
    <WHILE> <LPAREN> Expression() <RPAREN> StatementNoShortIf()
}

void DoStatement():
{}
{
    <DO> Statement() <WHILE> <LPAREN> Expression() <RPAREN> <SEMICOLON>
}

void ForStatement():
{}
{
    LOOKAHEAD(BasicForStatement())
    BasicForStatement()
    |
    EnhancedForStatement()
}

void ForStatementNoShortIf():
{}
{
    LOOKAHEAD(3)
    BasicForStatementNoShortIf()
    |
    EnhancedForStatementNoShortIf()
}

void BasicForStatement():
{}
{
    <FOR> <LPAREN> [ForInit()] <SEMICOLON> [Expression()] <SEMICOLON> [ForUpdate()] <RPAREN> Statement()
}

void BasicForStatementNoShortIf():
{}
{
    <FOR> <LPAREN> [ForInit()] <SEMICOLON> [Expression()] <SEMICOLON> [ForUpdate()] <RPAREN> StatementNoShortIf()
}

void ForInit():
{}
{
    LOOKAHEAD(3)
    StatementExpressionList()
    |
    LOOKAHEAD(3)
    LocalVariableDeclaration()
}

void ForUpdate():
{}
{
    StatementExpressionList()
}

void StatementExpressionList():
{}
{
    StatementExpression() (<COMMA> StatementExpression())*
}

void EnhancedForStatement():
{}
{
    <FOR> <LPAREN> (VariableModifier())* UnannType() VariableDeclaratorId() <COLON> Expression() <RPAREN> Statement()
}

void EnhancedForStatementNoShortIf():
{}
{
    <FOR> <LPAREN> (VariableModifier())* UnannType() VariableDeclaratorId() <COLON> Expression() <RPAREN> StatementNoShortIf()
}

void BreakStatement():
{}
{
    <BREAK> [<IDENTIFIER>] <SEMICOLON>
}

void ContinueStatement():
{}
{
    <CONTINUE> [<IDENTIFIER>] <SEMICOLON>
}

void ReturnStatement():
{}
{
    <RETURN> [Expression()] <SEMICOLON>
}

void ThrowStatement():
{}
{
    <THROW> Expression() <SEMICOLON>
}

void SynchronizedStatement():
{}
{
    <SYNCHRONIZED> <LPAREN> Expression() <RPAREN> Block()
}

void TryStatement():
{}
{
    LOOKAHEAD(2)
    <TRY> Block() (LOOKAHEAD(3) Catches() | [Catches()] Finally())
    |
    LOOKAHEAD(2)
    TryWithResourcesStatement()
}

void Catches():
{}
{
    (<CATCH> <LPAREN> CatchFormalParameter() <RPAREN> Block())+
}

void CatchFormalParameter():
{}
{
    (VariableModifier())* CatchType() VariableDeclaratorId()
}

void CatchType():
{}
{
    UnannClassType() (<BIT_OR> ClassOrInterfaceType())*
}

void Finally():
{}
{
    <FINALLY> Block()
}

void TryWithResourcesStatement():
{}
{
    <TRY> ResourceSpecification() Block() [Catches()] [Finally()]
}

void ResourceSpecification():
{}
{
    <LPAREN> ResourceList() [<SEMICOLON>] <RPAREN> 
}

void ResourceList():
{}
{
    Resource() (LOOKAHEAD(2) <SEMICOLON> Resource())*
}

void Resource():
{}
{
    (VariableModifier())* UnannType() VariableDeclaratorId() <ASSIGN> Expression()
}

/*
--------------------------------------------------------------------------------
Productions() from §15 (Expressions())
*/

// TODO: Left recursion detected: "Primary... --> PrimaryNoNewArray... --> MethodInvocation... --> Primary..."
/*
Primary:
PrimaryNoNewArray
ArrayCreationExpression
*/
void Primary():
{}
{
    LOOKAHEAD(3)
    PrimaryNoNewArray()
    |
    LOOKAHEAD(3)
    ArrayCreationExpression()
}

// TODO: Left recursion, see Primary() above.
/*
PrimaryNoNewArray:
Literal
TypeName {[ ]} . class
void . class
this
TypeName . this
( Expression )
ClassInstanceCreationExpression
FieldAccess
ArrayAccess
MethodInvocation
MethodReference
*/
void PrimaryNoNewArray() :
{}
{
    Literal()
    |
    TypeName() [<LBRACKET> <RBRACKET>] <DOT> <CLASS>
    |
    <VOID> <DOT> <CLASS>
    |
    <THIS>
    |
    TypeName() <DOT> <THIS>
    |
    <LPAREN> Expression() <RPAREN>
    |
    ClassInstanceCreationExpression()
    |
    FieldAccess()
    |
    ArrayAccess()
    |
    MethodInvocation()
    |
    MethodReference()
}

void ClassInstanceCreationExpression():
{}
{
    <NEW> [TypeArguments()] (Annotation())* <IDENTIFIER> [TypeArgumentsOrDiamond()] <LPAREN> [ArgumentList()] <RPAREN> [LOOKAHEAD(2) ClassBody()] (LOOKAHEAD(2) <DOT> <NEW> [TypeArguments()] (Annotation())* <IDENTIFIER> [TypeArgumentsOrDiamond()] <LPAREN> [ArgumentList()] <RPAREN> [LOOKAHEAD(2) ClassBody()] )*
    |
    ExpressionName() (LOOKAHEAD(2) <DOT> <NEW> [TypeArguments()] (Annotation())* <IDENTIFIER> [TypeArgumentsOrDiamond()] <LPAREN> [ArgumentList()] <RPAREN> [LOOKAHEAD(2) ClassBody()] )*
}

void TypeArgumentsOrDiamond():
{}
{
    TypeArguments()
    |
    <DIAMOND>
}

void FieldAccess():
{}
{
    LOOKAHEAD(3)
    <IDENTIFIER> (LOOKAHEAD(2) <DOT> <IDENTIFIER> )*
    |
    <SUPER> (LOOKAHEAD(2) <DOT> <IDENTIFIER> )*
    |
    TypeName() <DOT> <SUPER> <DOT> <IDENTIFIER>
}

void ArrayAccess():
{}
{
    ExpressionName() <LBRACKET> Expression() <RBRACKET> ( <LBRACKET> Expression() <RBRACKET> )*
}

/*
MethodInvocation:
MethodName ( [ArgumentList] )
TypeName . [TypeArguments] Identifier ( [ArgumentList] )
ExpressionName . [TypeArguments] Identifier ( [ArgumentList] )
Primary . [TypeArguments] Identifier ( [ArgumentList] )
super . [TypeArguments] Identifier ( [ArgumentList] )
TypeName . super . [TypeArguments] Identifier ( [ArgumentList] )    

TODO: Primary causes left recursion.
*/
void MethodInvocation():
{}
{
    LOOKAHEAD(3)
    MethodName() <LPAREN> [LOOKAHEAD(2) ArgumentList()] <RPAREN> 
    |
    // combined the 2 TypeNames
    LOOKAHEAD(3)
    TypeName() <DOT> [<SUPER> <DOT>] [LOOKAHEAD(2) TypeArguments()] <IDENTIFIER> <LPAREN> [LOOKAHEAD(2) ArgumentList()] <RPAREN> 
    |
    LOOKAHEAD(3)
    ExpressionName() <DOT> [LOOKAHEAD(2) TypeArguments()] <IDENTIFIER> <LPAREN> [LOOKAHEAD(2) ArgumentList()] <RPAREN>  
    |
    <SUPER> [<DOT> [LOOKAHEAD(2) TypeArguments()] <IDENTIFIER>] <LPAREN> [LOOKAHEAD(2) ArgumentList()] <RPAREN>
    |
    LOOKAHEAD(3)
    Primary() <DOT> [LOOKAHEAD(2) TypeArguments()] <IDENTIFIER> <LPAREN> [LOOKAHEAD(2) ArgumentList()] <RPAREN>
}

void ArgumentList():
{}
{
    Expression() (<COMMA> Expression())*
}

void MethodReference():
{}
{
    LOOKAHEAD(3)
    ExpressionName() <DOUBLECOLON> [TypeArguments()] <IDENTIFIER>
    |
    LOOKAHEAD(3)
    ReferenceType() <DOUBLECOLON> [TypeArguments()] <IDENTIFIER>
    |
    <SUPER> <DOUBLECOLON> [TypeArguments()] <IDENTIFIER>
    |
    LOOKAHEAD(3)
    TypeName() <DOT> <SUPER> <DOUBLECOLON> [TypeArguments()] <IDENTIFIER>
    |
    LOOKAHEAD(3)
    ClassOrInterfaceType() <DOUBLECOLON> [TypeArguments()] <NEW>
    |
    LOOKAHEAD(3)
    ArrayType() <DOUBLECOLON> <NEW>
}

void ArrayCreationExpression():
{}
{
    <NEW> 
    (
        LOOKAHEAD(3)
        PrimitiveType() DimExprs() [LOOKAHEAD(2)Dims()]
        |
        LOOKAHEAD(3)
        ClassOrInterfaceType() DimExprs() [LOOKAHEAD(2) Dims()]
        |
        LOOKAHEAD(3)
        PrimitiveType() Dims() ArrayInitializer()
        |
        ClassOrInterfaceType() Dims() ArrayInitializer()
    )
}

void DimExprs():
{}
{
    DimExpr() (LOOKAHEAD(2) DimExpr())*
}

void DimExpr():
{}
{
    (Annotation())* <LBRACKET> Expression() <RBRACKET>
}

void Expression():
{}
{
    LOOKAHEAD(3)
    AssignmentExpression()
    |
    LambdaExpression()
}

void LambdaExpression():
{}
{
    LambdaParameters() <POINTER> LambdaBody()
}

void LambdaParameters():
{}
{
    <IDENTIFIER>
    |
    LOOKAHEAD(3) 
    <LPAREN> [FormalParameterList()] <RPAREN> 
    |
    LOOKAHEAD(3) 
    <LPAREN> InferredFormalParameterList() <RPAREN> 
}

void InferredFormalParameterList():
{}
{
    <IDENTIFIER> (<COMMA> <IDENTIFIER>)*
}

void LambdaBody():
{}
{
    Expression()
    |
    Block()
}

void AssignmentExpression():
{}
{
    LOOKAHEAD(Assignment())
    Assignment()
    |
    LOOKAHEAD(ConditionalExpression())
    ConditionalExpression()
}

void Assignment():
{}
{
    LeftHandSide() AssignmentOperator() Expression()
}

void LeftHandSide():
{}
{
    LOOKAHEAD(ArrayAccess())
    ArrayAccess()
    |
    LOOKAHEAD(FieldAccess())
    FieldAccess()
    |
    ExpressionName()
}

void AssignmentOperator():
{}
{

    <ASSIGN>
    |
    <STARASSIGN>
    |
    <SLASHASSIGN>
    |
    <PERCENTASSIGN>
    |
    <PLUSASSIGN>  
    |
    <MINUSASSIGN>
    |
    <LSHIFTASSIGN>
    |
    <RSIGNEDSHIFTASSIGN>
    |
    <RUNSIGNEDSHIFTASSIGN>
    |
    <ANDASSIGN>  
    |
    <XORASSIGN>
    |
    <ORASSIGN>

}

void ConditionalExpression():
{}
{
    ConditionalOrExpression() [LOOKAHEAD(2) <HOOK> Expression() <COLON> ConditionalExpression()]
}

void ConditionalOrExpression():
{}
{
    ConditionalAndExpression() ( LOOKAHEAD(2) <SC_OR> ConditionalAndExpression() )*
}

void ConditionalAndExpression():
{}
{
    InclusiveOrExpression() ( LOOKAHEAD(2) <SC_AND> InclusiveOrExpression() )*
}

void InclusiveOrExpression():
{}
{
    ExclusiveOrExpression() ( LOOKAHEAD(2) <BIT_OR> ExclusiveOrExpression() )*
}

void ExclusiveOrExpression():
{}
{
    AndExpression() ( LOOKAHEAD(2) <XOR> AndExpression() )*
}

void AndExpression():
{}
{
    EqualityExpression() ( LOOKAHEAD(2) <BIT_AND> EqualityExpression() )*
}

void EqualityExpression():
{}
{
    RelationalExpression() ( LOOKAHEAD(2) ( <EQ> | <NE> ) RelationalExpression() )*
}

void RelationalExpression():
{}
{
    ShiftExpression() ( LOOKAHEAD(2) ( <LT> | ">" | <LE> | <GE> | <INSTANCEOF> ) ShiftExpression() )*
}

void ShiftExpression():
{}
{
    AdditiveExpression() ( LOOKAHEAD(2) ( <LSHIFT> | RSIGNEDSHIFT() | RUNSIGNEDSHIFT() ) AdditiveExpression() )*
}

void RUNSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT &&
                 getToken(1) instanceof Token.GTToken &&
                ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT} )
   ">" ">" ">"
  )
}

void RSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT &&
                 getToken(1) instanceof Token.GTToken &&
                ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT} )
  ">" ">"
  )
}

void AdditiveExpression():
{}
{
    MultiplicativeExpression() ( LOOKAHEAD(2) ( <PLUS> | <MINUS> ) MultiplicativeExpression() )*
}

void MultiplicativeExpression():
{}
{
    UnaryExpression() ( LOOKAHEAD(2)( <STAR> | <SLASH> | <PERCENT> ) UnaryExpression()  )*
}

void UnaryExpression():
{}
{
    PreIncrementExpression()
    |
    PreDecrementExpression()
    |
    <PLUS> UnaryExpression()
    |
    <MINUS> UnaryExpression()
    |
    UnaryExpressionNotPlusMinus()
}

void PreIncrementExpression():
{}
{
    <INCR> UnaryExpression()
}

void PreDecrementExpression():
{}
{
    <DECR> UnaryExpression()
}

void UnaryExpressionNotPlusMinus():
{}
{
    ( <TILDE> | <BANG> ) UnaryExpression()
    |
    LOOKAHEAD( CastLookahead() )
    CastExpression()
    |
    PostfixExpression()
}

void PostfixExpression():
{}
{
    LOOKAHEAD(2)
    Primary() ( LOOKAHEAD(2)(<INCR> | <DECR>))* 
    |
    ExpressionName() ( LOOKAHEAD(2)( <INCR> | <DECR>))*
}

void PostIncrementExpression():
{}
{
    PostfixExpression()
}

void PostDecrementExpression():
{}
{
    PostfixExpression()
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead():
{}
{
    LOOKAHEAD(2)
    <LPAREN> PrimitiveType()
    |
    LOOKAHEAD(<LPAREN> Type() <LBRACKET>)
    <LPAREN> Type() <LBRACKET> <RBRACKET>
    |
    <LPAREN> Type() <RPAREN> ( <TILDE> | <BANG> | <LPAREN> | <IDENTIFIER> | <THIS> | <SUPER> | <NEW> | Literal() )
}

void CastExpression():
{}
{
    LOOKAHEAD(3)
    <LPAREN> PrimitiveType() <RPAREN> UnaryExpression()
    |
    <LPAREN> ReferenceType() (AdditionalBound())* <RPAREN> ( LOOKAHEAD(3) UnaryExpressionNotPlusMinus() | LambdaExpression() )
}



