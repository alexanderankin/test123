/* Generated By:JavaCC: Do not edit this line. TigerParser.java */
package sidekick.java.parser;

import sidekick.util.*;
import sidekick.java.node.*;
import sidekick.java.util.Log;

import java.io.*;
import java.util.*;

/**
 * Based on grammar to parse Java version 1.5 written by Sreenivasa Viswanadha,
 * parses a java file for the JavaSideKick plugin to provide a java code
 * browser that works with java 1.5.  I've also updated this file so it will
 * parse javacc files for JavaSideKick too, that makes it a lot easier to edit
 * files such as this.
 * <p>
 * Example usage to parse a java file:<p>
 * <code>
 * TigerParser parser = new TigerParser(filename);<br>
 * CUNode root = parser.getJavaRootNode();<br>
 * </code>
 * or to parse a javacc file:<br>
 * <code>
 * TigerParser parser = new TigerParser(filename);<br>
 * CUNode root = parser.getJavaCCRootNode();<br>
 * </code>
 * Calling either of the above causes the file to be parsed into
 * TigerNodes, of which, CUNode is the top-level.  The TigerNodes have a parent/
 * child relastionship, which naturally forms a tree structure.
 * <p>
 * To turn this .jj file into a .java file, run <code>javacc Tiger.jj</code>
 * from the directory that contains this file.  Javacc will produce a number of
 * .java files, Be careful -- not all files in the directory are produced by
 * javacc, in particular ModifierSet.java and Token.java are required files and
 * are NOT produced by javacc. So the sequence is:<br>
 * .jj -> javacc -> .java -> javac -> .class
 * <p>
 * References like JLS X.X are section numbers in the Java Language Specification
 * Third Edition.
 */
public class TigerParser implements TigerParserConstants {
   // accumulates counts of classes, interfaces, methods and fields.
   private Results results = new Results();


   private InputStream inputStream = null;

    /**
     * Constructor for TigerParser.  Note that JavaSideKick does not use this
     * constructor -- since the options for building the parser have both
     * USER_TOKEN_MANAGER and USER_CHAR_STREAM set to false (these are the
     * default values so are not explicitly set), javacc will create a
     * constructor "public TigerParser(InputStream)".  It is that constructor
     * that JavaSideKick uses.
     * @param fileName name of the file to parse
     */
   public TigerParser(String filename)
   {
      this(System.in);
      try {
          inputStream = new FileInputStream(new File(filename));
          ReInit(inputStream);
      }
      catch(Exception e) {
        e.printStackTrace();
      }
   }

   TigerParser(JavaCharStream stream) {
        jj_input_stream = stream;
        token_source = new TigerParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
   }


    /**
     * @return the accumulated counts of classes, interfaces, methods, and fields.
     */
   public Results getResults() {
        return results;
   }

   public Location getLocation(Token t) {
       if (t == null)
           return new Location(0, 0);
       return new Location(t.beginLine, t.beginColumn);
   }

   public Location getEndLocation(Token t) {
       if (t == null)
           return new Location(0, 0);
       return new Location(t.endLine, t.endColumn + 1);
   }

   public Location getLocation(Modifier m) {
        if (m == null)
            return new Location(0, 0);
        if (m.beginLine == -1)
            m.beginLine = 0;
        return new Location(m.beginLine, m.beginColumn);
   }

   /**
    * @param pe ParseException, if null, one will be generated.
    * @param kinds One or more token types (see TigerParserConstants for 
    * definitions). Skipping will stop at the first token type found in
    * this list.
    * @return the token that was skipped to. This could be null since there is
    * a limit of checking no more than 100 tokens. If a token of the requested
    * kind is not found within the next 100 tokens, null will be returned.
    */
   public Token error_skipto(ParseException pe, int... kinds) {
       if (pe == null) {
           pe = generateParseException();  // generate the exception object.
       }
       addException(pe);
       return error_skipto(kinds);
   }

   private Token error_skipto(int... kinds) {
       Token t = null;
       int i = 0;
       do {
           i++;
           if (i > 100) {
                return t;
           }
           t = getNextToken();
           for (int type : kinds) {
               if (t.kind == type) {
                    return t;
               }
           }
       } while (t != null);
       return t;
   }

   private List<ErrorNode> exceptions = new ArrayList<ErrorNode>();

   private void addException(ParseException pe) {
       //pe.printStackTrace();
       ErrorNode en = new ErrorNode(pe);
       exceptions.add(en);
   }

   public List<ErrorNode> getErrors() {
       return exceptions;
   }

   public void adjustModifier(Modifier m, Token t) {
       if (m.beginLine < t.beginLine) {
            m.beginLine = t.beginLine;
       }
       if (m.beginLine == t.beginLine && (t.beginColumn < m.beginColumn || m.beginColumn == -1)) {
            m.beginColumn = t.beginColumn;
       }
       if (m.endLine < t.endLine) {
            m.endLine = t.endLine;
       }
       if (m.endLine == t.endLine && m.endColumn < t.endColumn) {
            m.endColumn = t.endColumn;
       }
   }

   public void setTabSize(int size) {
        jj_input_stream.setTabSize(size);
   }

   public int getTabSize() {
        return jj_input_stream.getTabSize(0);
   }

  /*
   * Returns true if the next token is not in the FOLLOW list of "expansion".
   * It is used to decide when the end of an "expansion" has been reached.
   */
  private boolean notTailOfExpansionUnit() {
    Token t;
    t = getToken(1);
    if (t.kind == BIT_OR || t.kind == COMMA || t.kind == RPAREN || t.kind == RBRACE || t.kind == RBRACKET) return false;
    return true;
  }

  /* returns a list as a comma separated string */
  private String toString(List list) {
    if (list != null) {
        StringBuffer sb = new StringBuffer();
        for (Iterator it = list.iterator(); it.hasNext(); ) {
            Object o = it.next();
            if (o == null) {
                o = "null";
            }
            sb.append(o.toString());
            if (it.hasNext()) {
                sb.append(",");
            }
        }
        return sb.toString();
    }
    return "";
  }

  private String toTigerString(List<TigerNode> list) {
      if (list != null) {
        StringBuffer sb = new StringBuffer();
        for (Iterator it = list.iterator(); it.hasNext(); ) {
            TigerNode tn = (TigerNode)it.next();
            sb.append(tn.getName()).append(", ");
            if (tn.getChildCount() > 0) {
                sb.append(toTigerString(tn.getChildren()));
            }
        }
        return sb.toString();
      }
      return "";
  }

/************************************************
 * THE JAVACC GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/
  final public CUNode getJavaCCRootNode(int tab_size) throws ParseException {
    setTabSize(tab_size);
    CUNode n = new CUNode();
    List<TigerNode> children = null;
    children = javacc_input();
    if (children != null ) {
        for (TigerNode child : children) {
            if (child instanceof CUNode) {
                for (ImportNode in : ((CUNode)child).getImportNodes()) {
                    n.addImport(in);
                }
            }
            n.addChild(child);
        }
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> javacc_input() throws ParseException {
    List<TigerNode> children = new ArrayList<TigerNode>();
    TigerNode options_node = null;
    Token parser_node_start_t = null;
    Token parser_node_end_t = null;
    Token cunode_start_t = null;
    Token cunode_end_t = null;
    TigerNode production_node = null;
    CUNode cunode = null;
    CUNode parser_node = new CUNode(){public int getOrdinal(){return TigerNode.PARSER;}};
    options_node = javacc_options();
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("PARSER_BEGIN")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    parser_node_start_t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    identifier();
    cunode_start_t = jj_consume_token(RPAREN);
    cunode = CompilationUnit(getTabSize());
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("PARSER_END")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    cunode_end_t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    identifier();
    parser_node_end_t = jj_consume_token(RPAREN);
    label_1:
    while (true) {
      production_node = production();
                                   children.add(production_node);
      if (jj_2_1(1)) {
        ;
      } else {
        break label_1;
      }
    }
    jj_consume_token(0);
    if (options_node != null) {
        children.add(options_node);
    }
    if (parser_node_start_t != null && parser_node_end_t != null ) {
        parser_node.setName("PARSER");
        parser_node.setStartLocation(getLocation(parser_node_start_t));
        parser_node.setEndLocation(getEndLocation(parser_node_end_t));
        children.add(parser_node);
        if (cunode != null) {
            cunode.setStartLocation(getLocation(cunode_start_t));
            cunode.setEndLocation(getEndLocation(cunode_end_t));
            if (cunode.getChildren() != null ) {
                for (Iterator it = cunode.getChildren().iterator(); it.hasNext(); ) {
                    parser_node.addChild((TigerNode)it.next());
                }
            }
            else {
                parser_node.addChild(cunode);
            }
            for (ImportNode in : cunode.getImportNodes()) {
                parser_node.addImport(in);
            }
        }
    }
    {if (true) return children;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode javacc_options() throws ParseException {
    TigerNode tn = new TigerNode() {public int getOrdinal() { return TigerNode.OPTIONS;}};
    Token start_t = null;
    Token end_t = null;
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("options")) {
      start_t = jj_consume_token(IDENTIFIER);
      jj_consume_token(LBRACE);
      label_2:
      while (true) {
        option_binding();
        if (jj_2_2(1)) {
          ;
        } else {
          break label_2;
        }
      }
      end_t = jj_consume_token(RBRACE);
    } else {
      ;
    }
    tn.setName("options");
    tn.setStartLocation(getLocation(start_t));
    tn.setEndLocation(getEndLocation(end_t));
    {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public void option_binding() throws ParseException {
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("LOOKAHEAD")) {
      identifier();
    } else if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("IGNORE_CASE")) {
      identifier();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(ASSIGN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      IntegerLiteral();
      break;
    case FALSE:
    case TRUE:
      BooleanLiteral();
      break;
    case STRING_LITERAL:
      StringLiteral();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
  }

  final public TigerNode production() throws ParseException {
    TigerNode tn = null;
    if (jj_2_3(1)) {
      /*
         * Since JAVACODE is both a JavaCC reserved word and a Java identifier,
         * we need to give preference to "javacode_production" over
         * "bnf_production".
         */
        tn = javacode_production();
    } else if (jj_2_4(1)) {
      /*
         * Since SKIP, TOKEN, etc. are both JavaCC reserved words and Java
         * identifiers, we need to give preference to "regular_expression_production"
         * over "bnf_production".
         */
        tn = regular_expr_production();
    } else if (jj_2_5(1)) {
      /*
         * Since TOKEN_MGR_DECLS is both a JavaCC reserved word and a Java identifier,
         * we need to give preference to "token_manager_decls" over
         * "bnf_production".
         */
        tn = token_manager_decls();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case VOID:
      case IDENTIFIER:
        tn = bnf_production();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode javacode_production() throws ParseException {
    JavaCodeProductionNode mn = new JavaCodeProductionNode();
    List<TigerNode> params = null;
    Token start_t = null;
    Type resultType = null;
    String identifier = "";
    BlockNode bn = null;
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("JAVACODE")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    start_t = jj_consume_token(IDENTIFIER);
    resultType = ResultType();
    identifier = identifier();
    params = FormalParameters();
    if (jj_2_6(2)) {
      jj_consume_token(THROWS);
      Name();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        Name();
      }
    } else {
      ;
    }
    if (jj_2_7(2)) {
      node_descriptor();
    } else {
      ;
    }
    bn = Block();
    if (start_t != null){
        mn.setStartLocation(getLocation(start_t));
    }
    if (resultType != null) {
        mn.setReturnType(resultType);
    }
    mn.setName(identifier);
    if (params != null) {
        mn.setFormalParams(params);
    }
    if (bn != null) {
        mn.setEndLocation(bn.getEndLocation());
        mn.addChild(bn);
    }
    {if (true) return mn;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode bnf_production() throws ParseException {
    BNFProductionNode mn = new BNFProductionNode();
    List<TigerNode> params = null;
    Type resultType = null;
    String identifier = "";
    Token end_t = null;
    BlockNode java_block = null;
    resultType = ResultType();
    identifier = identifier();
    params = FormalParameters();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      Name();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        Name();
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 126:
      node_descriptor();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(COLON);
    java_block = Block();
    jj_consume_token(LBRACE);
    expansion_choices();
    end_t = jj_consume_token(RBRACE);
    if (resultType != null) {
        mn.setStartLocation(resultType.getStartLocation());
        mn.setReturnType(resultType);
    }
    mn.setName(identifier);
    if (params != null) {
        mn.setFormalParams(params);
    }
    if (end_t != null ) {
        mn.setEndLocation(getEndLocation(end_t));
    }
    if (java_block != null) {
        mn.addChild(java_block);
    }
    {if (true) return mn;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode regular_expr_production() throws ParseException {
    Token start_t = null;
    Token end_t = null;
    Token t = null;
    TigerNode tn = new RegexProductionNode();
    Token kind = null;
    StringBuffer lexical_state_list = new StringBuffer();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      if (jj_2_8(2)) {
        start_t = jj_consume_token(LT);
        jj_consume_token(STAR);
        jj_consume_token(GT);
                                      lexical_state_list.append("<*>");
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          start_t = jj_consume_token(LT);
          t = jj_consume_token(IDENTIFIER);
                                lexical_state_list.append("<").append(t.image);
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[7] = jj_gen;
              break label_5;
            }
            jj_consume_token(COMMA);
            t = jj_consume_token(IDENTIFIER);
                                                                                                       lexical_state_list.append(",").append(t.image);
          }
          jj_consume_token(GT);
                                                                                                                                                                lexical_state_list.append(">");
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    kind = regexpr_kind();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("IGNORE_CASE")) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(IDENTIFIER);
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(COLON);
    jj_consume_token(LBRACE);
    regexpr_spec();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      jj_consume_token(BIT_OR);
      regexpr_spec();
    }
    end_t = jj_consume_token(RBRACE);
      if (lexical_state_list.length() > 0) {
          tn.setName(lexical_state_list.toString());
      }
      else if (kind != null) {
          tn.setName(kind.image);
      }
    tn.setStartLocation(getLocation(start_t == null ? kind : start_t));
    tn.setEndLocation(getEndLocation(end_t));
    {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode token_manager_decls() throws ParseException {
    Token start_t = null;
    BlockNode bn = null;
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("TOKEN_MGR_DECLS")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    start_t = jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    bn = TokenMgrDeclBlock();
    TigerNode tn = new TokenMgrDeclProductionNode();
    tn.setName(start_t.image);
    tn.setStartLocation(getLocation(start_t));
    if (bn != null) {
        tn.setEndLocation(bn.getEndLocation());
        tn.addChildren(bn.getChildren());
    }
    {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public Token regexpr_kind() throws ParseException {
    Token t = null;
    if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("TOKEN")) {
      t = jj_consume_token(IDENTIFIER);
    } else if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("SPECIAL_TOKEN")) {
      t = jj_consume_token(IDENTIFIER);
    } else if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("SKIP")) {
      t = jj_consume_token(IDENTIFIER);
    } else if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("MORE")) {
      t = jj_consume_token(IDENTIFIER);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public void regexpr_spec() throws ParseException {
    regular_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      Block();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  final public void expansion_choices() throws ParseException {
    expansion();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      jj_consume_token(BIT_OR);
      expansion();
    }
  }

  final public void expansion() throws ParseException {
    if (jj_2_9(1)) {
      if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("LOOKAHEAD")) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      local_lookahead();
      jj_consume_token(RPAREN);
    } else {
      ;
    }
    label_8:
    while (true) {
      expansion_unit();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 126:
        node_descriptor();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      if (notTailOfExpansionUnit()) {
        ;
      } else {
        break label_8;
      }
    }
  }

  final public void local_lookahead() throws ParseException {
      boolean commaAtEnd = false, emptyLA = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      IntegerLiteral();
      emptyLA = false;
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    if (!emptyLA && (getToken(1).kind != RPAREN)) {
      jj_consume_token(COMMA);
      commaAtEnd = true;
    } else {
      ;
    }
    if (getToken(1).kind != RPAREN && getToken(1).kind != LBRACE) {
      expansion_choices();
      emptyLA = false; commaAtEnd = false;
    } else {
      ;
    }
    if (!emptyLA && !commaAtEnd && (getToken(1).kind != RPAREN)) {
      jj_consume_token(COMMA);
      commaAtEnd = true;
    } else {
      ;
    }
    if (emptyLA || commaAtEnd) {
      jj_consume_token(LBRACE);
      Expression();
      jj_consume_token(RBRACE);
    } else {
      ;
    }
  }

  final public void expansion_unit() throws ParseException {
    if (jj_2_11(1)) {
      if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("LOOKAHEAD")) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      local_lookahead();
      jj_consume_token(RPAREN);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        Block();
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        expansion_choices();
        jj_consume_token(RBRACKET);
        break;
      case TRY:
        jj_consume_token(TRY);
        jj_consume_token(LBRACE);
        expansion_choices();
        jj_consume_token(RBRACE);
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CATCH:
            ;
            break;
          default:
            jj_la1[17] = jj_gen;
            break label_9;
          }
          jj_consume_token(CATCH);
          jj_consume_token(LPAREN);
          Name();
          jj_consume_token(IDENTIFIER);
          jj_consume_token(RPAREN);
          Block();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINALLY:
          jj_consume_token(FINALLY);
          Block();
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        if (jj_2_12(2147483647)) {
          if (jj_2_10(2147483647)) {
            PrimaryExpression();
            jj_consume_token(ASSIGN);
          } else {
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING_LITERAL:
          case LT:
            regular_expression();
            break;
          case IDENTIFIER:
            identifier();
            Arguments();
            break;
          default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
            jj_consume_token(LPAREN);
            expansion_choices();
            jj_consume_token(RPAREN);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case HOOK:
            case PLUS:
            case STAR:
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case PLUS:
                jj_consume_token(PLUS);
                break;
              case STAR:
                jj_consume_token(STAR);
                break;
              case HOOK:
                jj_consume_token(HOOK);
                break;
              default:
                jj_la1[20] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
            default:
              jj_la1[21] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

  final public void regular_expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      StringLiteral();
      break;
    default:
      jj_la1[26] = jj_gen;
      if (jj_2_13(3)) {
        jj_consume_token(LT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case 126:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 126:
            jj_consume_token(126);
            break;
          default:
            jj_la1[24] = jj_gen;
            ;
          }
          identifier();
          jj_consume_token(COLON);
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        complex_regular_expression_choices();
        jj_consume_token(GT);
      } else if (jj_2_14(2)) {
        jj_consume_token(LT);
        identifier();
        jj_consume_token(GT);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          jj_consume_token(LT);
          if (getToken(1).kind == IDENTIFIER && getToken(1).image.equals("EOF")) {

          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(IDENTIFIER);
          jj_consume_token(GT);
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void complex_regular_expression_choices() throws ParseException {
    complex_regular_expression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_10;
      }
      jj_consume_token(BIT_OR);
      complex_regular_expression();
    }
  }

  final public void complex_regular_expression() throws ParseException {
    label_11:
    while (true) {
      complex_regular_expression_unit();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case LPAREN:
      case LBRACKET:
      case LT:
      case TILDE:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_11;
      }
    }
  }

  final public void complex_regular_expression_unit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      StringLiteral();
      break;
    case LT:
      jj_consume_token(LT);
      identifier();
      jj_consume_token(GT);
      break;
    case LBRACKET:
    case TILDE:
      character_list();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      complex_regular_expression_choices();
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HOOK:
      case PLUS:
      case STAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case STAR:
          jj_consume_token(STAR);
          break;
        case HOOK:
          jj_consume_token(HOOK);
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void character_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TILDE:
      jj_consume_token(TILDE);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      character_descriptor();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        character_descriptor();
      }
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
  }

  final public void character_descriptor() throws ParseException {
    StringLiteral();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      StringLiteral();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
  }

  final public String identifier() throws ParseException {
    Token t = null;
    t = jj_consume_token(IDENTIFIER);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/**********************************************
 * THE JJTREE PRODUCTIONS START HERE          *
 **********************************************/
  final public void node_descriptor() throws ParseException {
    jj_consume_token(126);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
        jj_consume_token(GT);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      node_descriptor_expression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
  }

  void node_descriptor_expression() throws ParseException {
  Token tok;
  int nesting = 1;
  while (true) {
    tok = getToken(1);
    if (tok.kind == 0) {
      throw new ParseException();
    }
    if (tok.kind == LPAREN) nesting++;
    if (tok.kind == RPAREN) {
      nesting--;
      if (nesting == 0) break;
    }
    tok = getNextToken();
  }
  }

/* javacc productions */
  final public void IntegerLiteral() throws ParseException {
    jj_consume_token(INTEGER_LITERAL);
  }

  final public void StringLiteral() throws ParseException {
    jj_consume_token(STRING_LITERAL);
  }

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  final public CUNode getJavaRootNode(int tab_size) throws ParseException {
    CUNode n = null;
    n = JavaCompilationUnit(tab_size);
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

/**
 * Main entry point for parsing the PARSER section in javacc files. Use
 * JavaCompilationUnit as main entry point for parsing java files.
 * @return a CUNode, which is parent or root node of all other nodes.
 */
  final public CUNode CompilationUnit(int tab_size) throws ParseException {
    setTabSize(tab_size);
    CUNode n = new CUNode();
    TigerNode a;
    String packageName = "";
    ImportNode in = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PACKAGE:
        packageName = PackageDeclaration();
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_13;
        }
        in = ImportDeclaration();
                                      n.addImport(in);
      }
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case CLASS:
        case ENUM:
        case FINAL:
        case INTERFACE:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOLATILE:
        case SEMICOLON:
        case AT:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_14;
        }
        a = TypeDeclaration();
               n.addChild(a);
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON, RBRACE, PUBLIC, PRIVATE, PROTECTED, CLASS, INTERFACE, ENUM);
    }
        n.setPackageName(packageName);
        {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

/**
 * Main entry point for parsing java files.
 * @return a CUNode, which is parent or root node of all other nodes.
 */
  final public CUNode JavaCompilationUnit(int tab_size) throws ParseException {
    CUNode n = null;
    Token end_t = null;
    try {
      n = CompilationUnit(tab_size);
      // read the whole file
                 end_t = jj_consume_token(0);
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON, RBRACE);
    }
        if (end_t != null) {
            n.setEndLocation(getEndLocation(end_t));
        }
        {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public String PackageDeclaration() throws ParseException {
    NameNode name = null;
    try {
      jj_consume_token(PACKAGE);
      name = Name();
      jj_consume_token(SEMICOLON);
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON, IMPORT, CLASS, INTERFACE, ENUM, PUBLIC, PRIVATE, PROTECTED);
    }
        if (name == null) {
            {if (true) return "";}
        }
        {if (true) return name.getFullyQualifiedTypeName();}
    throw new Error("Missing return statement in function");
  }

/**
 * @return just the package name, without the 'import' or 'static' or '.*', e.g.
 * "import java.util.*;" will return "java.util".  A fully qualified import will
 * return the full classname, e.g. "import java.util.List;" will return
 * "java.util.List", this is also the case with static imports, e.g.
 * "import static java.lang.Math.PI;" will return "java.lang.Math.PI".
 */
  final public ImportNode ImportDeclaration() throws ParseException {
    NameNode name = null;
    Token st = null;
    Token et = null;
    try {
      st = jj_consume_token(IMPORT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        jj_consume_token(STATIC);
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      name = Name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(STAR);
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      et = jj_consume_token(SEMICOLON);
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON, IMPORT, CLASS, INTERFACE, ENUM, PUBLIC, PRIVATE, PROTECTED);
    }
        if (name == null) {
            {if (true) return null;}
        }
        ImportNode in = new ImportNode(name.getFullyQualifiedTypeName());
        in.setStartLocation(getLocation(st));
        in.setEndLocation(getEndLocation(et));
        {if (true) return in;}
    throw new Error("Missing return statement in function");
  }

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */
  final public Modifier Modifiers() throws ParseException {
   int modifiers = 0;
   Token t = null;
   Modifier m = new Modifier();
    label_15:
    while (true) {
      if (jj_2_15(2)) {
        ;
      } else {
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        t = jj_consume_token(PUBLIC);
                modifiers |= ModifierSet.PUBLIC; adjustModifier(m, t);
        break;
      case STATIC:
        t = jj_consume_token(STATIC);
                modifiers |= ModifierSet.STATIC;  adjustModifier(m, t);
        break;
      case PROTECTED:
        t = jj_consume_token(PROTECTED);
                   modifiers |= ModifierSet.PROTECTED;  adjustModifier(m, t);
        break;
      case PRIVATE:
        t = jj_consume_token(PRIVATE);
                 modifiers |= ModifierSet.PRIVATE;  adjustModifier(m, t);
        break;
      case FINAL:
        t = jj_consume_token(FINAL);
               modifiers |= ModifierSet.FINAL;  adjustModifier(m, t);
        break;
      case ABSTRACT:
        t = jj_consume_token(ABSTRACT);
                  modifiers |= ModifierSet.ABSTRACT;  adjustModifier(m, t);
        break;
      case SYNCHRONIZED:
        t = jj_consume_token(SYNCHRONIZED);
                      modifiers |= ModifierSet.SYNCHRONIZED;  adjustModifier(m, t);
        break;
      case NATIVE:
        t = jj_consume_token(NATIVE);
                modifiers |= ModifierSet.NATIVE;  adjustModifier(m, t);
        break;
      case TRANSIENT:
        t = jj_consume_token(TRANSIENT);
                   modifiers |= ModifierSet.TRANSIENT;  adjustModifier(m, t);
        break;
      case VOLATILE:
        t = jj_consume_token(VOLATILE);
                  modifiers |= ModifierSet.VOLATILE;  adjustModifier(m, t);
        break;
      case STRICTFP:
        t = jj_consume_token(STRICTFP);
                  modifiers |= ModifierSet.STRICTFP;  adjustModifier(m, t);
        break;
      case AT:
        Annotation();
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    m.modifiers = modifiers;
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

/*
 * Declaration syntax follows.
 */

// Handle classes, interfaces, enums, and annotations.
  final public TigerNode TypeDeclaration() throws ParseException {
   Modifier modifier;
   TigerNode tn = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      case ABSTRACT:
      case CLASS:
      case ENUM:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case AT:
        modifier = Modifiers();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case INTERFACE:
          tn = ClassOrInterfaceDeclaration(modifier);
          break;
        case ENUM:
          tn = EnumDeclaration(modifier);
          break;
        case AT:
          tn = AnnotationTypeDeclaration(modifier);
                                                      tn = null;
          break;
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON, RBRACE, PUBLIC, PRIVATE, PROTECTED);        // TODO: rethrow?

    }
        {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

/**
 * @return a ClassNode or an InterfaceNode
 */
  final public TigerNode ClassOrInterfaceDeclaration(Modifier m) throws ParseException {
   boolean isInterface = false;
   Token t = null;
   TigerNode kids = null;   // only need the children of this node
   String type_params = "";
   List<TigerNode> extends_list = null;
   List<TigerNode> implements_list = null;
   Token type = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        type = jj_consume_token(CLASS);
        break;
      case INTERFACE:
        type = jj_consume_token(INTERFACE);
                                          isInterface = true;
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        type_params = TypeParameters();
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        extends_list = ExtendsList(isInterface);
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        implements_list = ImplementsList(isInterface);
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      kids = ClassOrInterfaceBody(isInterface);
      if (jj_2_16(2)) {
        jj_consume_token(SEMICOLON);
      } else {
        ;
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON, CLASS, INTERFACE, ENUM, PUBLIC, PRIVATE, PROTECTED);
    }
        ClassNode node = isInterface ? new InterfaceNode(t.image, m.modifiers) : new ClassNode(t.image, m.modifiers);
        if (isInterface) {
            results.incInterfaceCount();
        }
        else {
            results.incClassCount();
        }

        if (m.beginColumn > -1) {
            node.setStartLocation(getLocation(m) );
        }
        else {
            node.setStartLocation(getLocation(type));
        }
        if (kids != null)
            node.setEndLocation(kids.getEndLocation());

        // add the child nodes, don't need the 'kids' node itself, it's just a holder
        // for the nodes I want (although I do want the end location).
        if (kids != null && kids.getChildren() != null)
            node.addChildren(kids.getChildren());
        node.setTypeParams(type_params);
        node.setExtendsList(extends_list);
        node.setImplementsList(implements_list);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

/**
 * @return a list of sidekick.java.node.Types representing items in an 'extends'
 * list, e.g. the "Bar" in "public class Foo extends Bar"
 */
  final public List<TigerNode> ExtendsList(boolean isInterface) throws ParseException {
   boolean extendsMoreThanOne = false;
   List<TigerNode> list = new ArrayList<TigerNode>();     // a list of Types
   Type type_s = null;
   Type type_a = null;
    try {
      jj_consume_token(EXTENDS);
      type_s = ClassOrInterfaceType();
                                                 list.add(type_s);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[52] = jj_gen;
          break label_16;
        }
        jj_consume_token(COMMA);
        type_a = ClassOrInterfaceType();
                                             extendsMoreThanOne = true; list.add(type_a);
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON, RBRACE);
    }
        if (extendsMoreThanOne && !isInterface)
            {if (true) throw new ParseException("A class cannot extend more than one other class");}
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

/**
 * @return a list of sidekick.java.node.Types representing items in an 'implements'
 * list, e.g. the "Bar" and "Serializable" in "public class Foo implements Bar, Serializable"
 */
  final public List<TigerNode> ImplementsList(boolean isInterface) throws ParseException {
    List<TigerNode> list = new ArrayList<TigerNode>();
    Type type_s = null;
    Type type_a = null;
    try {
      jj_consume_token(IMPLEMENTS);
      type_s = ClassOrInterfaceType();
                                                     list.add(type_s);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_17;
        }
        jj_consume_token(COMMA);
        type_a = ClassOrInterfaceType();
                                             list.add(type_a);
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON, RBRACE);
    }
        if (isInterface)
            {if (true) throw new ParseException("An interface cannot implement other interfaces");}
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

/**
 * @return an EnumNode
 */
  final public TigerNode EnumDeclaration(Modifier m) throws ParseException {
    Token t = null;
    Token start_t = null;
    TigerNode body = null;
    try {
      start_t = jj_consume_token(ENUM);
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        ImplementsList(false);
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      body = EnumBody();
    } catch (ParseException pe) {
        if (t == null) {
           // handle the case where old code used 'enum' as a variable name
           ParseException e = new ParseException("Parse error at line " + start_t.beginLine + ", column " + start_t.beginColumn + ".  Encountered: 'enum' as an identifier, 'enum' is a keyword.");
           addException(e);
           {if (true) return null;}
        }
        else
            error_skipto(pe, SEMICOLON, RBRACE);
    }
        if (t == null) {
           // handle the case where old code used 'enum' as a variable name
           ParseException e = new ParseException("Parse error at line " + start_t.beginLine + ", column " + start_t.beginColumn + ".  Encountered: 'enum' as an identifier, 'enum' is a keyword.");
           addException(e);
           {if (true) return null;}
        }

        EnumNode node = new EnumNode(t.image, m.modifiers);
        if (start_t != null) {
            if (m.beginColumn == -1)
                node.setStartLocation(getLocation(start_t));
            else
                node.setStartLocation(getLocation(m));
        }
        node.setEndLocation(body.getEndLocation());
        node.addChildren(body.getChildren());
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

// returns the end location of the enum body
  final public TigerNode EnumBody() throws ParseException {
    Token start_t = null;
    Token end_t = null;
    List<TigerNode> constants = new ArrayList<TigerNode>();
    List<TigerNode> children = new ArrayList<TigerNode>();
    TigerNode constant;
    TigerNode child;
    try {
      start_t = jj_consume_token(LBRACE);
      constant = EnumConstant();
                                  constants.add(constant);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[55] = jj_gen;
          break label_18;
        }
        jj_consume_token(COMMA);
        constant = EnumConstant();
                                                                                          if (constant != null) constants.add(constant);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        label_19:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ABSTRACT:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case CLASS:
          case DOUBLE:
          case ENUM:
          case FINAL:
          case FLOAT:
          case INT:
          case INTERFACE:
          case LONG:
          case NATIVE:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case SHORT:
          case STATIC:
          case STRICTFP:
          case SYNCHRONIZED:
          case TRANSIENT:
          case VOID:
          case VOLATILE:
          case IDENTIFIER:
          case LBRACE:
          case SEMICOLON:
          case AT:
          case LT:
            ;
            break;
          default:
            jj_la1[56] = jj_gen;
            break label_19;
          }
          child = ClassOrInterfaceBodyDeclaration(false);
                                                               if (child != null) children.add(child);
        }
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      end_t = jj_consume_token(RBRACE);
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON, RBRACE);
        end_t = start_t;
    }
        TigerNode node = new TigerNode();
        node.setStartLocation(getLocation(start_t));
        node.setEndLocation(getEndLocation(end_t));
        node.addChildren(constants);
        node.addChildren(children);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

/**
 * @return an enum constant value
 */
  final public TigerNode EnumConstant() throws ParseException {
    Token t = null;
    TigerNode node = null;
    try {
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        Arguments();
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        ClassOrInterfaceBody(false);
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
    } catch (ParseException pe) {
        // This grammar expects commas to be followed by EnumConstants, but
        // neither javac nor the language spec says it has to, so something like
        // public enum {ACE, BASE, CASE, } is allowed.
        // TODO: rethrow the exception? This is poor coding practice. Or maybe
        // let PMD find it?
        {if (true) return null;}
    }
        if (t != null) {
            node = new TigerNode();
            node.setName(t.image);
            node.setStartLocation(getLocation(t));
            node.setEndLocation(getEndLocation(t));
        }
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

/**
 * @return a string representing a generics type, e.g. the "<String>" in
 * "List<String> list = new List();", the string will contain the angle brackets.
 */
  final public String TypeParameters() throws ParseException {
    String s = "<";
    String a = "";
    try {
      jj_consume_token(LT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        a = TypeParameter();
              s += a;
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[61] = jj_gen;
          break label_20;
        }
        jj_consume_token(COMMA);
                  s += ",";
        a = TypeParameter();
                  s += a;
      }
      jj_consume_token(GT);
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON, GT);
    }
        {if (true) return s + ">";}
    throw new Error("Missing return statement in function");
  }

  final public String TypeParameter() throws ParseException {
    String s = "";
    Token t = null;
    try {
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        s = TypeBound();
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        StringBuffer sb = new StringBuffer();
        if (t.image != null)
            sb.append(t.image);
        if (s.length() > 0)
            sb.append(" ").append(s);
        {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String TypeBound() throws ParseException {
    String s = "extends";
    Type type_s = null;
    Type type_a = null;
    try {
      jj_consume_token(EXTENDS);
      type_a = ClassOrInterfaceType();
              s += " " + type_a.toString();
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BIT_AND:
          ;
          break;
        default:
          jj_la1[63] = jj_gen;
          break label_21;
        }
        jj_consume_token(BIT_AND);
                  s += " & ";
        type_a = ClassOrInterfaceType();
                  s += type_a.toString();
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);    // TODO: rethrow?

    }
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/**
 * @return a node representing the contents of a Class or Interface body.  The
 * returned node is simply a holder for the contents, it is the children of this
 * node that are useful as they are the methods and fields of the class or
 * interface.
 */
  final public TigerNode ClassOrInterfaceBody(boolean isInterface) throws ParseException {
    TigerNode parent = new TigerNode("", -1);
    TigerNode child = null;
    Token start_t = null;
    Token end_t = null;
    try {
      start_t = jj_consume_token(LBRACE);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case IDENTIFIER:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case LT:
          ;
          break;
        default:
          jj_la1[64] = jj_gen;
          break label_22;
        }
        child = ClassOrInterfaceBodyDeclaration(isInterface);
                  if (child != null) parent.addChild(child);
      }
      end_t = jj_consume_token(RBRACE);
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON, RBRACE, PUBLIC, PRIVATE, PROTECTED);
    }
        if (start_t != null) {
          parent.setStartLocation(getLocation(start_t));
        }
        if (end_t != null) {
          parent.setEndLocation(getEndLocation(end_t));
        }
        else if (child != null) {
            parent.setEndLocation(child.getEndLocation());
        }
        {if (true) return parent.getChildren() != null ? parent : null;}
    throw new Error("Missing return statement in function");
  }

/**
 * @return one of several different nodes, could be a ClassNode, EnumNode,
 * ConstructorNode, FieldNode, MethodNode, or an InterfaceNode.
 */
  final public TigerNode ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException {
   // see note above (~ line 510), I think my changes here have broken the test for a
   // trailing ; after a class body.
   boolean isNestedInterface = false;
   Modifier m;
   TigerNode a = null;
   TigerNode initializer = null;
   String type_params = null;
    try {
      if (jj_2_19(2)) {
        initializer = Initializer();
             if (isInterface)
                {if (true) throw new ParseException("An interface cannot have initializers");}
             if (initializer != null)
                 {if (true) return initializer;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case IDENTIFIER:
        case AT:
        case LT:
          m = Modifiers();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CLASS:
          case INTERFACE:
            a = ClassOrInterfaceDeclaration(m);
            break;
          case ENUM:
            a = EnumDeclaration(m);
            break;
          default:
            jj_la1[65] = jj_gen;
            if (jj_2_17(2147483647)) {
              a = ConstructorDeclaration(m);
            } else if (jj_2_18(2147483647)) {
              a = FieldDeclaration(m);
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case BOOLEAN:
              case BYTE:
              case CHAR:
              case DOUBLE:
              case FLOAT:
              case INT:
              case LONG:
              case SHORT:
              case VOID:
              case IDENTIFIER:
              case LT:
                a = MethodDeclaration(m);
                break;
              case AT:
                a = AnnotationTypeDeclaration(m);
                break;
              default:
                jj_la1[66] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
          break;
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[67] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        //error_skipto(pe, SEMICOLON, PUBLIC, PRIVATE, PROTECTED);        // TODO: rethrow?
        {if (true) throw pe;}
    }
       {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

/**
 * @return a FieldNode
 */
  final public FieldNode FieldDeclaration(Modifier m) throws ParseException {
    Type type = null;
    FieldNode fn = null;
    VariableDeclarator name  = null;
    VariableDeclarator a;
    Token et = null;
    try {
      // Modifiers are already matched in the caller
                  /// might need to change this, I'm collecting multiple declarations into a single
                  /// field, which seems to be okay, e.g. I'm putting "int x = 0, y = 6" into a
                  /// field with Type "int" and name "x, y".  It might be better to create individual
                  /// nodes for each, so for this example, this method could return 2 fields, one
                  /// for "int x" and one for "int y".
                  type = Type();
      name = VariableDeclarator();
                fn = new FieldNode(name.getName(), m.modifiers, type);
                fn.addChild(name);
                if (fn.isPrimitive())
                  results.incPrimitiveFieldCount();
                else
                  results.incReferenceFieldCount();
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[68] = jj_gen;
          break label_23;
        }
        jj_consume_token(COMMA);
        a = VariableDeclarator();
                    fn.setName(fn.getName() + ", " + a.getName());
                    fn.addChild(a);
      }
      et = jj_consume_token(SEMICOLON);
    } catch (ParseException pe) {
        //error_skipto(pe, SEMICOLON);
        {if (true) throw pe;}
    }
        if (m.beginColumn == -1)
            fn.setStartLocation(type.getStartLocation());
        else
            fn.setStartLocation(getLocation(m)); //type.getStartLocation());
        fn.setEndLocation(getEndLocation(et));
        {if (true) return fn;}
    throw new Error("Missing return statement in function");
  }

/*
    Represents a variable declaration.  The returned node represents the LHS,
    the children of the node represent the RHS.
*/
  final public VariableDeclarator VariableDeclarator() throws ParseException {
    VariableDeclarator s = null;
    List<TigerNode> list = null;
    try {
      s = VariableDeclaratorId();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        list = VariableInitializer();
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
      }
    } catch (ParseException pe) {
        //error_skipto(pe, SEMICOLON);
        {if (true) throw pe;}
    }
        if (list != null) {
            s.addChildren(list);
        }
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclarator VariableDeclaratorId() throws ParseException {
    Token t = null;
    try {
      t = jj_consume_token(IDENTIFIER);
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[70] = jj_gen;
          break label_24;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
    } catch (ParseException pe) {
        //error_skipto(pe, SEMICOLON);
        {if (true) throw pe;}
    }
        if ( t == null)
            {if (true) return null;}
        VariableDeclarator tn = new VariableDeclarator(t.image);
        tn.setStartLocation(new Location(t.beginLine, t.beginColumn));
        tn.setEndLocation(new Location(t.beginLine, t.beginColumn + t.image.length()));
        {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> VariableInitializer() throws ParseException {
    List<TigerNode> list = new ArrayList<TigerNode>();
    List<TigerNode> a = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        a = ArrayInitializer();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        a = Expression();
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        //error_skipto(pe, SEMICOLON);
        {if (true) throw pe;}
    }
        if (a != null)
            list.addAll(a);
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> ArrayInitializer() throws ParseException {
    List<TigerNode> list = new ArrayList<TigerNode>();
    List<TigerNode> a = null;
    List<TigerNode> b = null;
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        a = VariableInitializer();
                                        if (a != null) list.addAll(a);
        label_25:
        while (true) {
          if (jj_2_20(2)) {
            ;
          } else {
            break label_25;
          }
          jj_consume_token(COMMA);
          a = VariableInitializer();
                                                                                                                      if (b != null) list.addAll(b);
        }
        break;
      default:
        jj_la1[72] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[73] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (ParseException pe) {
        //error_skipto(pe, SEMICOLON);
        {if (true) throw pe;}
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

/**
 * @return a MethodNode
 */
  final public TigerNode MethodDeclaration(Modifier m) throws ParseException {
    String type_params = "";
    Type return_type = null;
    MethodNode m_node = null;
    List<TigerNode> name_list = null;
    int line_number = -1;
    BlockNode block = null;
    Location endLoc = null;
    Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        type_params = TypeParameters();
        break;
      default:
        jj_la1[74] = jj_gen;
        ;
      }
      return_type = ResultType();
      m_node = MethodDeclarator();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THROWS:
        jj_consume_token(THROWS);
        name_list = NameList();
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        block = Block();
        break;
      case SEMICOLON:
        t = jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON, RBRACE, PUBLIC, PRIVATE, PROTECTED);
    }
        if (m_node == null)
            {if (true) return null;}
        MethodNode node = new MethodNode();
        node.setName(m_node.getName());
        if (m.beginColumn == -1)
            node.setStartLocation(new Location(m_node.getStartLocation().line, 0));
        else
            node.setStartLocation(getLocation(m));
        node.setModifiers(m.modifiers);
        node.setFormalParams(m_node.getFormalParams());
        node.setReturnType(return_type);
        node.setTypeParams(type_params);
        node.setThrows(name_list);
        if ( t != null) {
            node.setEndLocation(getLocation(t));
        }
        else if ( block != null ) {
            node.addChildren(block.getChildren());
            node.setEndLocation(block.getEndLocation());
        }
        else {
            ///throw new RuntimeException("no end to method node: " + (m_node == null ? "unknown" : m_node.getName()));
        }
        results.incMethodCount();
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public MethodNode MethodDeclarator() throws ParseException {
    Token t = null;
    String s = "";
    List<TigerNode> f = null;
    try {
      t = jj_consume_token(IDENTIFIER);
      f = FormalParameters();
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[77] = jj_gen;
          break label_26;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON, LBRACE, RBRACE);        // TODO: rethrow?

    }
        if (t == null)
            {if (true) return null;}
        MethodNode node = new MethodNode();
        node.setName(t.image);
        node.setStartLocation(getLocation(t));
        node.setFormalParams(f);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> FormalParameters() throws ParseException {
    ArrayList<TigerNode> params = new ArrayList<TigerNode>();
    Parameter a = null;
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
      case AT:
        a = FormalParameter();
                params.add(a);
        label_27:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[78] = jj_gen;
            break label_27;
          }
          jj_consume_token(COMMA);
          a = FormalParameter();
                    params.add(a);
        }
        break;
      default:
        jj_la1[79] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON, RBRACE, PUBLIC, PRIVATE, PROTECTED);        // TODO: rethrow?

    }
        {if (true) return params;}
    throw new Error("Missing return statement in function");
  }

  final public Parameter FormalParameter() throws ParseException {
    Parameter param = new Parameter();
    TigerNode n;
    Type type_a = null;
    Token t = null;
    Modifier m = null;
    try {
      m = Modifiers();
            if (m != null) {
                param.setFinal(ModifierSet.isFinal(m.modifiers));
                param.setStartLocation(getLocation(m));
            }
      type_a = Type();
         param.setType(type_a);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELLIPSIS:
        jj_consume_token(ELLIPSIS);
          param.setVarArg(true);
        break;
      default:
        jj_la1[80] = jj_gen;
        ;
      }
      n = VariableDeclaratorId();
           if (n != null ) {
               param.setName(n.getName());
               if (t == null)
                   param.setStartLocation(n.getStartLocation());
               param.setEndLocation(n.getEndLocation());
           }
    } catch (ParseException pe) {
        //error_skipto(pe, SEMICOLON, RPAREN);        // TODO: rethrow?
        {if (true) throw pe;}
    }
        {if (true) return param;}
    throw new Error("Missing return statement in function");
  }

  final public ConstructorNode ConstructorDeclaration(Modifier m) throws ParseException {
    Token t = null;
    List<TigerNode> params = null;
    List<TigerNode> name_list = null;
    String type_params = null;
    Token end_t = null;
    TigerNode child = null;
    ConstructorNode cn = new ConstructorNode();
    cn.setModifiers(m.modifiers);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        type_params = TypeParameters();
        break;
      default:
        jj_la1[81] = jj_gen;
        ;
      }
      t = jj_consume_token(IDENTIFIER);
      params = FormalParameters();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THROWS:
        jj_consume_token(THROWS);
        name_list = NameList();
        break;
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      if (jj_2_21(2147483647)) {
        child = ExplicitConstructorInvocation();
                                                                                                     if (child != null) cn.addChild(child);
      } else {
        ;
      }
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RETURN:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRANSIENT:
        case TRUE:
        case TRY:
        case VOID:
        case VOLATILE:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case INCR:
        case DECR:
          ;
          break;
        default:
          jj_la1[83] = jj_gen;
          break label_28;
        }
        child = BlockStatement();
                                       if (child != null) cn.addChild(child);
      }
      end_t = jj_consume_token(RBRACE);
    } catch (ParseException pe) {
        end_t = error_skipto(pe, SEMICOLON, RBRACE);
        end_t = end_t == null ? t : end_t;
    }
        cn.setName(t.image);
        if (ModifierSet.toString(m.modifiers).equals("")) {
            // no modifiers, so use constructor name for start location
            cn.setStartLocation(new Location(t.beginLine, 0));
        }
        else {
            cn.setStartLocation(getLocation(m));
        }
        cn.setEndLocation(getEndLocation(end_t));
        cn.setFormalParams(params);
        cn.setTypeParams(type_params);
        cn.setThrows(name_list);
        {if (true) return cn;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode ExplicitConstructorInvocation() throws ParseException {
    TigerNode tn = null;
    try {
      if (jj_2_23(2147483647)) {
        jj_consume_token(THIS);
        Arguments();
        jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          if (jj_2_22(2)) {
            tn = PrimaryExpression();
            jj_consume_token(DOT);
          } else {
            ;
          }
          jj_consume_token(SUPER);
          Arguments();
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[84] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

/**
 * @return an InitializerNode, this handles static initializer blocks
 */
  final public TigerNode Initializer() throws ParseException {
    Token t = null;
    BlockNode block = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        t = jj_consume_token(STATIC);
        break;
      default:
        jj_la1[85] = jj_gen;
        ;
      }
      block = Block();
    } catch (ParseException pe) {
        //error_skipto(pe, SEMICOLON);
        {if (true) throw pe;}
    }
        if (t != null && block != null) {
            TigerNode node = new InitializerNode(t.beginLine);
            node.setStartLocation(block.getStartLocation());
            node.setEndLocation(block.getEndLocation());
            node.addChild(block);
            {if (true) return node;}
        }
        {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

/*
 * Type, name and expression syntax follows.
 */
  final public Type Type() throws ParseException {
    Type s = null;
    try {
      if (jj_2_24(2)) {
        s = ReferenceType();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
          s = PrimitiveType();
          break;
        default:
          jj_la1[86] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Type ReferenceType() throws ParseException {
    Type s = null;
    boolean isArray = false;
    int dimensions = 0;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
        s = PrimitiveType();
        label_29:
        while (true) {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                                                       isArray = true; ++dimensions;
          if (jj_2_25(2)) {
            ;
          } else {
            break label_29;
          }
        }
        break;
      case IDENTIFIER:
        s = ClassOrInterfaceType();
        label_30:
        while (true) {
          if (jj_2_26(2)) {
            ;
          } else {
            break label_30;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                                                              isArray = true; ++dimensions;
        }
        break;
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        s.setIsArray(isArray);
        s.setDimensions(dimensions);
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Type ClassOrInterfaceType() throws ParseException {
    Type s = new Type();
    List<TigerNode> type_args = null;
    Token t = null;
    try {
      t = jj_consume_token(IDENTIFIER);
      if (jj_2_27(2)) {
        type_args = TypeArguments();
      } else {
        ;
      }
            s.type = t.image;
            if (type_args != null) {
                s.typeArgs = "<" + toString(type_args) + ">";
            }
            s.setStartLocation(getLocation(t));
            s.setEndLocation(getEndLocation(t));
      label_31:
      while (true) {
        if (jj_2_28(2)) {
          ;
        } else {
          break label_31;
        }
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
        if (jj_2_29(2)) {
          type_args = TypeArguments();
        } else {
          ;
        }
                Type a = new Type();
                a.type = t.image;
                if (type_args != null) {
                    a.typeArgs = "<" + toString(type_args) + ">";
                }
                s.addChild(a);
                s.setEndLocation(getEndLocation(t));

                s.type += "." + t.image;
                if (type_args != null) {
                    s.typeArgs = "<" + toString(type_args) + ">";
                }
                s.setEndLocation(new Location(t.endLine, t.endColumn));
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/*
    for generics, returns a list of the things between the < and >.
    DONE: Java 7 allows <> as type inference indicator, 
    e.g. Map<String> map = new HashMap<>();
*/
  final public List<TigerNode> TypeArguments() throws ParseException {
    List<TigerNode> list = new ArrayList<TigerNode>();
    Type a, b;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 127:
        jj_consume_token(127);
        break;
      case LT:
        jj_consume_token(LT);
        a = TypeArgument();
                               if (a != null) list.add(a);
        label_32:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[88] = jj_gen;
            break label_32;
          }
          jj_consume_token(COMMA);
          b = TypeArgument();
                                 if (b != null) list.add(b);
        }
        jj_consume_token(GT);
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        //pe.printStackTrace();
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public Type TypeArgument() throws ParseException {
    Type type = null;
    String s = "";
    String a = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:
        type = ReferenceType();
        break;
      case HOOK:
        jj_consume_token(HOOK);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTENDS:
        case SUPER:
          type = WildcardBounds();
                                       if (type != null) type.qualifier = "?" + type.qualifier;
          break;
        default:
          jj_la1[90] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[91] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public Type WildcardBounds() throws ParseException {
    Type type = null;
    String s = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        type = ReferenceType();
                                         s="extends";
        break;
      case SUPER:
        jj_consume_token(SUPER);
        type = ReferenceType();
                                       s="super";
        break;
      default:
        jj_la1[92] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        if (type != null)
            type.qualifier = s;
        {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public Type PrimitiveType() throws ParseException {
    Token t = null;
    Type s = new Type();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        t = jj_consume_token(BOOLEAN);
                        s.type = "boolean";
        break;
      case CHAR:
        t = jj_consume_token(CHAR);
                     s.type = "char";
        break;
      case BYTE:
        t = jj_consume_token(BYTE);
                     s.type = "byte";
        break;
      case SHORT:
        t = jj_consume_token(SHORT);
                      s.type = "short";
        break;
      case INT:
        t = jj_consume_token(INT);
                    s.type = "int";
        break;
      case LONG:
        t = jj_consume_token(LONG);
                     s.type = "long";
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
                      s.type = "float";
        break;
      case DOUBLE:
        t = jj_consume_token(DOUBLE);
                       s.type = "double";
        break;
      default:
        jj_la1[93] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
      if (t != null) {
        s.setStartLocation(getLocation(t));
        s.setEndLocation(getEndLocation(t));
      }
      s.isPrimitive = true;
      {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Type ResultType() throws ParseException {
    Token t;
    Type s = new Type();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
        t = jj_consume_token(VOID);
            s.type = "void";
            s.isVoid = true;
            s.setStartLocation(getLocation(t));
            s.setEndLocation(getEndLocation(t));
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:
        s = Type();
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON, RBRACE);
    }
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/*
    This represents the name of something, like a package name, e.g. java.lang.*,
    or a variable name like 'startLocation', or the name of a static method, e.g.
    GUIUtilities.centerOnScreen, which is a pain when we need the type of the
    class containing the static method.

    See JLS 6.5.6, I think this can be done better --
    use from the start to the last "." as a Type, the remaining as the name.
    The calling method/production should be able to sort out the result.

*/
  final public NameNode Name() throws ParseException {
    Token t = null;
    String name = null;
    String type_name = "";
    Location startLocation = null;
    Location endLocation = null;
    Location typeEndLocation = null;
    try {
      t = jj_consume_token(IDENTIFIER);
            name = t.image;
            startLocation = getLocation(t);
            endLocation = getEndLocation(t);
      label_33:
      while (true) {
        if (jj_2_30(2)) {
          ;
        } else {
          break label_33;
        }
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
                type_name = type_name + name + ".";
                name = t.image;
                endLocation = getEndLocation(t);
                typeEndLocation = getLocation(t);
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        Type type = null;
        if (type_name.length() > 0) {
            if (type_name.endsWith(".")) {
                type_name = type_name.substring(0, type_name.length() - 1);
            }
            type = new Type();
            type.type = type_name;
            type.setStartLocation(startLocation);
            type.setEndLocation(typeEndLocation);
        }
        NameNode tn = new NameNode(name, type);
        tn.setStartLocation(startLocation);
        tn.setEndLocation(endLocation);
        {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> NameList() throws ParseException {
    List<TigerNode> nameList = new ArrayList<TigerNode>();
    String s = "";
    String a = "";
    NameNode tn;
    try {
      tn = Name();
                    nameList.add(tn);
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[95] = jj_gen;
          break label_34;
        }
        jj_consume_token(COMMA);
        tn = Name();
                          nameList.add(tn);
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return nameList;}
    throw new Error("Missing return statement in function");
  }

/*
 * Expression syntax follows.
 */
  final public List<TigerNode> Expression() throws ParseException {
    List<TigerNode> a = null;
    List<TigerNode> b = null;
    try {
      a = ConditionalExpression();
      if (jj_2_31(2)) {
        AssignmentOperator();
        b = Expression();
                                                if (b != null) a.addAll(b);
      } else {
        ;
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public void AssignmentOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
      break;
    case REMASSIGN:
      jj_consume_token(REMASSIGN);
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
      break;
    case LSHIFTASSIGN:
      jj_consume_token(LSHIFTASSIGN);
      break;
    case RSIGNEDSHIFTASSIGN:
      jj_consume_token(RSIGNEDSHIFTASSIGN);
      break;
    case RUNSIGNEDSHIFTASSIGN:
      jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      break;
    case ANDASSIGN:
      jj_consume_token(ANDASSIGN);
      break;
    case XORASSIGN:
      jj_consume_token(XORASSIGN);
      break;
    case ORASSIGN:
      jj_consume_token(ORASSIGN);
      break;
    default:
      jj_la1[96] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public List<TigerNode> ConditionalExpression() throws ParseException {
    List<TigerNode> a = null;
    List<TigerNode> b = null;
    List<TigerNode> c = null;
    try {
      a = ConditionalOrExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HOOK:
        jj_consume_token(HOOK);
        b = Expression();
                                                         if (b != null) a.addAll(b);
        jj_consume_token(COLON);
        c = Expression();
                                                                                                         if (c != null) a.addAll(c);
        break;
      default:
        jj_la1[97] = jj_gen;
        ;
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> ConditionalOrExpression() throws ParseException {
    List<TigerNode> a = null;
    List<TigerNode> b = null;
    try {
      a = ConditionalAndExpression();
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SC_OR:
          ;
          break;
        default:
          jj_la1[98] = jj_gen;
          break label_35;
        }
        jj_consume_token(SC_OR);
        b = ConditionalAndExpression();
                                                                         if (b != null) a.addAll(b);
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> ConditionalAndExpression() throws ParseException {
    List<TigerNode> a = null;
    List<TigerNode> b = null;
    try {
      a = InclusiveOrExpression();
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SC_AND:
          ;
          break;
        default:
          jj_la1[99] = jj_gen;
          break label_36;
        }
        jj_consume_token(SC_AND);
        b = InclusiveOrExpression();
                                                                    if (b != null) a.addAll(b);
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> InclusiveOrExpression() throws ParseException {
    List<TigerNode> a = null;
    List<TigerNode> b = null;
    try {
      a = ExclusiveOrExpression();
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BIT_OR:
          ;
          break;
        default:
          jj_la1[100] = jj_gen;
          break label_37;
        }
        jj_consume_token(BIT_OR);
        b = ExclusiveOrExpression();
                                                                  if (b != null) a.addAll(b);
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> ExclusiveOrExpression() throws ParseException {
    List<TigerNode> a = null;
    List<TigerNode> b = null;
    try {
      a = AndExpression();
      label_38:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case XOR:
          ;
          break;
        default:
          jj_la1[101] = jj_gen;
          break label_38;
        }
        jj_consume_token(XOR);
        b = AndExpression();
                                                  if (b != null) a.addAll(b);
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> AndExpression() throws ParseException {
    List<TigerNode> a = null;
    List<TigerNode> b = null;
    try {
      a = EqualityExpression();
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BIT_AND:
          ;
          break;
        default:
          jj_la1[102] = jj_gen;
          break label_39;
        }
        jj_consume_token(BIT_AND);
        b = EqualityExpression();
                                                            if (b != null) a.addAll(b);
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

/* @return List<Type> */
  final public List<TigerNode> EqualityExpression() throws ParseException {
    List<TigerNode> a = null;
    List<TigerNode> b = null;
    try {
      a = InstanceOfExpression();
      label_40:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case NE:
          ;
          break;
        default:
          jj_la1[103] = jj_gen;
          break label_40;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          jj_consume_token(EQ);
          break;
        case NE:
          jj_consume_token(NE);
          break;
        default:
          jj_la1[104] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        b = InstanceOfExpression();
                                                                                 if (b != null) a.addAll(b);
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> InstanceOfExpression() throws ParseException {
    List<TigerNode> a = null;
    Type t = null;
    try {
      a = RelationalExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INSTANCEOF:
        jj_consume_token(INSTANCEOF);
        t = Type();
        break;
      default:
        jj_la1[105] = jj_gen;
        ;
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        if (a != null && t != null) {
            a.add(t);
        }
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> RelationalExpression() throws ParseException {
    List<TigerNode> a = null;
    List<TigerNode> b = null;
    try {
      a = ShiftExpression();
      label_41:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
        case LE:
        case GE:
        case GT:
          ;
          break;
        default:
          jj_la1[106] = jj_gen;
          break label_41;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          jj_consume_token(LT);
          break;
        case GT:
          jj_consume_token(GT);
          break;
        case LE:
          jj_consume_token(LE);
          break;
        case GE:
          jj_consume_token(GE);
          break;
        default:
          jj_la1[107] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        b = ShiftExpression();
                                                                               if (b != null) a.addAll(b);
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> ShiftExpression() throws ParseException {
    List<TigerNode> a = null;
    List<TigerNode> b = null;
    try {
      a = AdditiveExpression();
      label_42:
      while (true) {
        if (jj_2_32(1)) {
          ;
        } else {
          break label_42;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LSHIFT:
          jj_consume_token(LSHIFT);
          break;
        default:
          jj_la1[108] = jj_gen;
          if (jj_2_33(1)) {
            RSIGNEDSHIFT();
          } else if (jj_2_34(1)) {
            RUNSIGNEDSHIFT();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        b = AdditiveExpression();
                                                                                                       if (b != null) a.addAll(b);
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> AdditiveExpression() throws ParseException {
    List<TigerNode> a = null;
    List<TigerNode> b = null;
    try {
      a = MultiplicativeExpression();
      label_43:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[109] = jj_gen;
          break label_43;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[110] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        b = MultiplicativeExpression();
                                                                                    if (b != null) a.addAll(b);
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> MultiplicativeExpression() throws ParseException {
    TigerNode a = null;
    TigerNode b = null;
    List<TigerNode> list = new ArrayList<TigerNode>();
    try {
      a = UnaryExpression();
                              if (a != null) list.add(a);
      label_44:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case SLASH:
        case REM:
          ;
          break;
        default:
          jj_la1[111] = jj_gen;
          break label_44;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          jj_consume_token(STAR);
          break;
        case SLASH:
          jj_consume_token(SLASH);
          break;
        case REM:
          jj_consume_token(REM);
          break;
        default:
          jj_la1[112] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        b = UnaryExpression();
                                                                                                        if (b != null) list.add(b);
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode UnaryExpression() throws ParseException {
    TigerNode tn = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[113] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        tn = UnaryExpression();
        break;
      case INCR:
        tn = PreIncrementExpression();
        break;
      case DECR:
        tn = PreDecrementExpression();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
        tn = UnaryExpressionNotPlusMinus();
        break;
      default:
        jj_la1[114] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode PreIncrementExpression() throws ParseException {
    TigerNode tn = null;
    try {
      jj_consume_token(INCR);
      tn = PrimaryExpression();
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode PreDecrementExpression() throws ParseException {
    TigerNode tn = null;
    try {
      jj_consume_token(DECR);
      tn = PrimaryExpression();
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode UnaryExpressionNotPlusMinus() throws ParseException {
    TigerNode tn = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
      case TILDE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
          jj_consume_token(TILDE);
          break;
        case BANG:
          jj_consume_token(BANG);
          break;
        default:
          jj_la1[115] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        tn = UnaryExpression();
        break;
      default:
        jj_la1[116] = jj_gen;
        if (jj_2_35(2147483647)) {
          tn = CastExpression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FALSE:
          case FLOAT:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case SHORT:
          case SUPER:
          case THIS:
          case TRUE:
          case VOID:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
            tn = PostfixExpression();
            break;
          default:
            jj_la1[117] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
  final public void CastLookahead() throws ParseException {
    Type type = null;
    try {
      if (jj_2_36(2)) {
        jj_consume_token(LPAREN);
        PrimitiveType();
      } else if (jj_2_37(2147483647)) {
        jj_consume_token(LPAREN);
        Type();
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          Type();
          jj_consume_token(RPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TILDE:
            jj_consume_token(TILDE);
            break;
          case BANG:
            jj_consume_token(BANG);
            break;
          case LPAREN:
            jj_consume_token(LPAREN);
            break;
          case IDENTIFIER:
            jj_consume_token(IDENTIFIER);
            break;
          case THIS:
            jj_consume_token(THIS);
            break;
          case SUPER:
            jj_consume_token(SUPER);
            break;
          case NEW:
            jj_consume_token(NEW);
            break;
          case FALSE:
          case NULL:
          case TRUE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
            Literal();
            break;
          default:
            jj_la1[118] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[119] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
  }

  final public TigerNode PostfixExpression() throws ParseException {
    TigerNode tn = null;
    try {
      tn = PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
      case DECR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          jj_consume_token(INCR);
          break;
        case DECR:
          jj_consume_token(DECR);
          break;
        default:
          jj_la1[120] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[121] = jj_gen;
        ;
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode CastExpression() throws ParseException {
    TigerNode tn = null;
    Type t = null;
    try {
      if (jj_2_38(2147483647)) {
        jj_consume_token(LPAREN);
        t = Type();
        jj_consume_token(RPAREN);
        tn = UnaryExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          t = Type();
          jj_consume_token(RPAREN);
          tn = UnaryExpressionNotPlusMinus();
          break;
        default:
          jj_la1[122] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        if (tn != null) {
            tn.setType(t);
        }
        {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

/**
 * JLS 15.8 Primary Expressions
 * Primary expressions include most of the simplest kinds of expressions, from
 * which all others are constructed: literals, class literals, field accesses,
 * method invocations, and array accesses. A parenthesized expression is also
 * treated syntactically as a primary expression.
 */
  final public TigerNode PrimaryExpression() throws ParseException {
    PrimaryExpressionNode node = null;
    List<TigerNode> list = new ArrayList<TigerNode>();
    List<TigerNode> a = null;
    List<TigerNode> b = null;
    try {
      a = PrimaryPrefix();
            if (a != null)
                list.addAll(a);
      label_45:
      while (true) {
        if (jj_2_39(2)) {
          ;
        } else {
          break label_45;
        }
        b = PrimarySuffix();
                if (b != null)
                    list.addAll(b);
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        TigerNode tn = new TigerNode();
        if (!list.isEmpty()) {
            tn = (TigerNode)list.get(0);
        }
        node = new PrimaryExpressionNode(tn.getName());
        node.setStartLocation(tn.getStartLocation());
        node.setEndLocation(tn.getEndLocation());
        node.addChildren(list);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> MemberSelector() throws ParseException {
    List<TigerNode> a = null;
    try {
      jj_consume_token(DOT);
      a = TypeArguments();
      jj_consume_token(IDENTIFIER);
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> PrimaryPrefix() throws ParseException {
    List<TigerNode> expressions = new ArrayList<TigerNode>();
    List<TigerNode> list = null;
    TigerNode tn = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case NULL:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        Literal();
        break;
      case THIS:
        jj_consume_token(THIS);
        break;
      case SUPER:
        jj_consume_token(SUPER);
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[123] = jj_gen;
        if (jj_2_40(2147483647)) {
          tn = ClassOrInterfaceType();
                                     if (tn != null ) expressions.add(tn);
          jj_consume_token(DOT);
          jj_consume_token(IDENTIFIER);
        } else if (jj_2_41(2147483647)) {
          tn = ClassOrInterfaceType();
                                     expressions.add(tn);
          jj_consume_token(DOT);
          jj_consume_token(SUPER);
          jj_consume_token(DOT);
          jj_consume_token(IDENTIFIER);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
            jj_consume_token(LPAREN);
            list = Expression();
                                      if (list != null) expressions.addAll(list);
            jj_consume_token(RPAREN);
            break;
          case NEW:
            list = AllocationExpression();
                                            if (list != null) expressions.addAll(list);
            break;
          default:
            jj_la1[124] = jj_gen;
            if (jj_2_42(2147483647)) {
              tn = ResultType();
                            if (tn != null ) expressions.add(tn);
              jj_consume_token(DOT);
              jj_consume_token(CLASS);
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case IDENTIFIER:
                tn = Name();
                          if (tn != null ) expressions.add(tn);
                break;
              default:
                jj_la1[125] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return expressions;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> PrimarySuffix() throws ParseException {
    List<TigerNode> list = null;
    try {
      if (jj_2_43(2)) {
        jj_consume_token(DOT);
        jj_consume_token(THIS);
      } else if (jj_2_44(2)) {
        jj_consume_token(DOT);
        list = AllocationExpression();
      } else if (jj_2_45(3)) {
        list = MemberSelector();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          jj_consume_token(LBRACKET);
          list = Expression();
          jj_consume_token(RBRACKET);
          break;
        case DOT:
          jj_consume_token(DOT);
          jj_consume_token(IDENTIFIER);
          break;
        case LPAREN:
          list = Arguments();
          break;
        default:
          jj_la1[126] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        //Log.log("===== PrimarySuffix returning: " + list);
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public void Literal() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        break;
      case FLOATING_POINT_LITERAL:
        jj_consume_token(FLOATING_POINT_LITERAL);
        break;
      case CHARACTER_LITERAL:
        jj_consume_token(CHARACTER_LITERAL);
        break;
      case STRING_LITERAL:
        jj_consume_token(STRING_LITERAL);
        break;
      case FALSE:
      case TRUE:
        BooleanLiteral();
        break;
      case NULL:
        NullLiteral();
        break;
      default:
        jj_la1[127] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
  }

  final public void BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_la1[128] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NullLiteral() throws ParseException {
    jj_consume_token(NULL);
  }

  final public List<TigerNode> Arguments() throws ParseException {
    List<TigerNode> a = null;
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        a = ArgumentList();
        break;
      default:
        jj_la1[129] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> ArgumentList() throws ParseException {
    List<TigerNode> a, b;
    List<TigerNode> list = new ArrayList<TigerNode>();
    try {
      a = Expression();
                        if (a != null) list.addAll(a);
      label_46:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[130] = jj_gen;
          break label_46;
        }
        jj_consume_token(COMMA);
        b = Expression();
                                                                              if (b != null) list.addAll(b);
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

/** a list of TigerNodes */
  final public List<TigerNode> AllocationExpression() throws ParseException {
    List<TigerNode> list = new ArrayList<TigerNode>();
    TigerNode tn;
    List<TigerNode> a = null;
    try {
      if (jj_2_46(2)) {
        jj_consume_token(NEW);
        tn = PrimitiveType();
                                     if (tn != null) list.add(tn);
        a = ArrayDimsAndInits();
                                                                                             if (a != null) list.addAll(a);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          jj_consume_token(NEW);
          tn = ClassOrInterfaceType();
                                            if (tn != null) list.add(tn);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LT:
          case 127:
            a = TypeArguments();
                                                                                                  if (a != null) list.addAll(a);
            break;
          default:
            jj_la1[131] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            a = ArrayDimsAndInits();
                                       if (a != null) list.addAll(a);
            break;
          case LPAREN:
            a = Arguments();
                                if (a != null) list.addAll(a);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
              tn = ClassOrInterfaceBody(false);
                                                                                                    if (tn != null) list.add(tn);
              break;
            default:
              jj_la1[132] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[133] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[134] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
  final public List<TigerNode> ArrayDimsAndInits() throws ParseException {
    List<TigerNode> list = new ArrayList<TigerNode>();
    List<TigerNode> e = null;
    try {
      if (jj_2_49(2)) {
        label_47:
        while (true) {
          jj_consume_token(LBRACKET);
          e = Expression();
                                                if (e != null) list.addAll(e);
          jj_consume_token(RBRACKET);
          if (jj_2_47(2)) {
            ;
          } else {
            break label_47;
          }
        }
        label_48:
        while (true) {
          if (jj_2_48(2)) {
            ;
          } else {
            break label_48;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          label_49:
          while (true) {
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[135] = jj_gen;
              break label_49;
            }
          }
          ArrayInitializer();
          break;
        default:
          jj_la1[136] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

/*
 * Statement syntax follows.
 */
  final public TigerNode Statement() throws ParseException {
    TigerNode bn = null;
    List<TigerNode> list = null;
    try {
      if (jj_2_50(2)) {
        LabeledStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
          AssertStatement();
          break;
        case LBRACE:
          bn = Block();
          break;
        case SEMICOLON:
          EmptyStatement();
          break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
          bn = StatementExpression();
          jj_consume_token(SEMICOLON);
          break;
        case SWITCH:
          bn = SwitchStatement();
          break;
        case IF:
          bn = IfStatement();
          break;
        case WHILE:
          bn = WhileStatement();
          break;
        case DO:
          bn = DoStatement();
          break;
        case FOR:
          bn = ForStatement();
          break;
        case BREAK:
          BreakStatement();
          break;
        case CONTINUE:
          ContinueStatement();
          break;
        case RETURN:
          list = ReturnStatement();
          break;
        case THROW:
          list = ThrowStatement();
          break;
        case SYNCHRONIZED:
          bn = SynchronizedStatement();
          break;
        case TRY:
          bn = TryStatement();
          break;
        default:
          jj_la1[137] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        //error_skipto(pe, SEMICOLON);
        {if (true) throw pe;}
    }
      /* somehow this causes all heap memory to get used up. Need to figure out
      a better way to include the list.
      if (list != null) {
        bn = (TigerNode)list.get(0);
        bn.addChildren(list);
      }
      */
      {if (true) return bn;}
    throw new Error("Missing return statement in function");
  }

  final public void AssertStatement() throws ParseException {
    try {
      jj_consume_token(ASSERT);
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        Expression();
        break;
      default:
        jj_la1[138] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
  }

  final public void LabeledStatement() throws ParseException {
    try {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      Statement();
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
  }

  final public BlockNode Block() throws ParseException {
    // an un-named block of code
    Token start_t = null;
    Token end_t = null;
    BlockNode bn = new BlockNode();
    TigerNode child = null;
    try {
      start_t = jj_consume_token(LBRACE);
      label_50:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RETURN:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRANSIENT:
        case TRUE:
        case TRY:
        case VOID:
        case VOLATILE:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case INCR:
        case DECR:
          ;
          break;
        default:
          jj_la1[139] = jj_gen;
          break label_50;
        }
        child = BlockStatement();
                                               bn.addChild(child);
      }
      end_t = jj_consume_token(RBRACE);
    } catch (ParseException pe) {
        end_t = error_skipto(pe, SEMICOLON, RBRACE);
        end_t = end_t == null ? start_t : end_t;
    }
        bn.setName("block_" + start_t.beginLine + ":" + start_t.beginColumn);
        bn.setStartLocation(getLocation(start_t));
        bn.setEndLocation(getEndLocation(end_t));
        {if (true) return bn;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode BlockStatement() throws ParseException {
    TigerNode tn = null;
    try {
      if (jj_2_51(2)) {
        Annotation();
      } else {
        ;
      }
      if (jj_2_52(2147483647)) {
        tn = LocalVariableDeclaration();
        jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
          tn = Statement();
          break;
        case CLASS:
        case INTERFACE:
          tn = ClassOrInterfaceDeclaration(new Modifier());
          break;
        default:
          jj_la1[140] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        //error_skipto(pe, SEMICOLON, RBRACE);
        {if (true) throw pe;}
    }
        {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public BlockNode TokenMgrDeclBlock() throws ParseException {
    // an un-named block of code
    Token start_t = null;
    Token end_t = null;
    BlockNode bn = new BlockNode();
    TigerNode child = null;
    try {
      start_t = jj_consume_token(LBRACE);
      label_51:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RETURN:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRANSIENT:
        case TRUE:
        case TRY:
        case VOID:
        case VOLATILE:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case LT:
        case INCR:
        case DECR:
          ;
          break;
        default:
          jj_la1[141] = jj_gen;
          break label_51;
        }
        child = TokenMgrDeclBlockStatement();
                                                           bn.addChild(child);
      }
      end_t = jj_consume_token(RBRACE);
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        bn.setName("block_" + start_t.beginLine + ":" + start_t.beginColumn);
        bn.setStartLocation(getLocation(start_t));
        bn.setEndLocation(getEndLocation(end_t));
        {if (true) return bn;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode TokenMgrDeclBlockStatement() throws ParseException {
    TigerNode tn = null;
    Modifier modifiers = null;
    try {
      modifiers = Modifiers();
      if (jj_2_53(2147483647)) {
        tn = FieldDeclaration(modifiers);
      } else if (jj_2_54(3)) {
        tn = MethodDeclaration(modifiers);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
          tn = Statement();
          break;
        case CLASS:
        case INTERFACE:
          tn = ClassOrInterfaceDeclaration(modifiers);
          break;
        default:
          jj_la1[142] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public LocalVariableNode LocalVariableDeclaration() throws ParseException {
    Type type = null;
    LocalVariableNode lvn = null;
    VariableDeclarator a = null;
    VariableDeclarator b = null;
    Token t = null;
    Modifier m = null;
    try {
      // old -- [ "final" ] Type() VariableDeclarator() ( "," VariableDeclarator() )*
            // new -- Modifiers() Type() VariableDeclarator() ( "," VariableDeclarator() )*
      
            /*
            VariableDeclarator returns a TigerNode representing the LHS of the declaration.
            The RHS is contained within that node as the children of the node.
            */
            m = Modifiers();
      type = Type();
      a = VariableDeclarator();
        lvn = new LocalVariableNode(a.getName(), type);
        if (m != null)
            lvn.setFinal(ModifierSet.isFinal(m.modifiers));
        lvn.addChild(a);
        lvn.setStartLocation(a.getStartLocation());
        lvn.setEndLocation(a.getEndLocation());
        if (lvn.isPrimitive())
            results.incPrimitiveFieldCount();
        else
            results.incReferenceFieldCount();
      label_52:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[143] = jj_gen;
          break label_52;
        }
        jj_consume_token(COMMA);
        b = VariableDeclarator();
              lvn.setName(lvn.getName() + ", " + b.getName());
              lvn.addChild(b);
              lvn.setEndLocation(b.getEndLocation());
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return lvn;}
    throw new Error("Missing return statement in function");
  }

  final public void EmptyStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
  }

  final public TigerNode StatementExpression() throws ParseException {
    TigerNode tn = null;
    List<TigerNode> list = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        tn = PreIncrementExpression();
        break;
      case DECR:
        tn = PreDecrementExpression();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
        tn = PrimaryExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
        case INCR:
        case DECR:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case LSHIFTASSIGN:
        case RSIGNEDSHIFTASSIGN:
        case RUNSIGNEDSHIFTASSIGN:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INCR:
            jj_consume_token(INCR);
            break;
          case DECR:
            jj_consume_token(DECR);
            break;
          case ASSIGN:
          case PLUSASSIGN:
          case MINUSASSIGN:
          case STARASSIGN:
          case SLASHASSIGN:
          case ANDASSIGN:
          case ORASSIGN:
          case XORASSIGN:
          case REMASSIGN:
          case LSHIFTASSIGN:
          case RSIGNEDSHIFTASSIGN:
          case RUNSIGNEDSHIFTASSIGN:
            AssignmentOperator();
            list = Expression();
            break;
          default:
            jj_la1[144] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[145] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[146] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        if (list != null) {
            tn.addChildren(list);
        }
        {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public BlockNode SwitchStatement() throws ParseException {
    BlockNode bn = new BlockNode("switch");
    TigerNode child = null;
    Token start_t = null;
    Token end_t = null;
    List<TigerNode> list = null;
    try {
      start_t = jj_consume_token(SWITCH);
      jj_consume_token(LPAREN);
      list = Expression();
                                                if (list != null) bn.addChildren(list);
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      label_53:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
        case _DEFAULT:
          ;
          break;
        default:
          jj_la1[147] = jj_gen;
          break label_53;
        }
        list = SwitchLabel();
                                  if (list != null) bn.addChildren(list);
        label_54:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ABSTRACT:
          case ASSERT:
          case BOOLEAN:
          case BREAK:
          case BYTE:
          case CHAR:
          case CLASS:
          case CONTINUE:
          case DO:
          case DOUBLE:
          case FALSE:
          case FINAL:
          case FLOAT:
          case FOR:
          case IF:
          case INT:
          case INTERFACE:
          case LONG:
          case NATIVE:
          case NEW:
          case NULL:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case RETURN:
          case SHORT:
          case STATIC:
          case STRICTFP:
          case SUPER:
          case SWITCH:
          case SYNCHRONIZED:
          case THIS:
          case THROW:
          case TRANSIENT:
          case TRUE:
          case TRY:
          case VOID:
          case VOLATILE:
          case WHILE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case LBRACE:
          case SEMICOLON:
          case AT:
          case INCR:
          case DECR:
            ;
            break;
          default:
            jj_la1[148] = jj_gen;
            break label_54;
          }
          child = BlockStatement();
                                                                                                     bn.addChild(child);
        }
      }
      end_t = jj_consume_token(RBRACE);
    } catch (ParseException pe) {
        error_skipto(pe, RBRACE);
    }
        if (start_t != null)
            bn.setStartLocation(getLocation(start_t));
        if (end_t != null)
            bn.setEndLocation(getEndLocation(end_t));
        {if (true) return bn;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> SwitchLabel() throws ParseException {
    List<TigerNode> list = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        jj_consume_token(CASE);
        list = Expression();
        jj_consume_token(COLON);
        break;
      case _DEFAULT:
        jj_consume_token(_DEFAULT);
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[149] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(pe, COLON);
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public BlockNode IfStatement() throws ParseException {
    BlockNode ifNode = new BlockNode("if");
    List<TigerNode> expression = null;
    TigerNode ifNodes = null;
    TigerNode elseNodes = null;
    Token start_t = null;
    try {
      start_t = jj_consume_token(IF);
      jj_consume_token(LPAREN);
      expression = Expression();
      jj_consume_token(RPAREN);
      ifNodes = Statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        elseNodes = Statement();
        break;
      default:
        jj_la1[150] = jj_gen;
        ;
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        if (start_t != null) {
            ifNode.setStartLocation(getLocation(start_t));
        }
        if (expression != null && expression.size() > 0) {
            ifNode.addChildren(expression);
        }
        if (ifNodes != null) {
            ifNode.addChildren(ifNodes.getChildren());
            ifNode.setEndLocation(ifNodes.getEndLocation());
        }
        if (elseNodes != null){
            ifNode.addChildren(elseNodes.getChildren());
            ifNode.setEndLocation(elseNodes.getEndLocation());
        }
        {if (true) return ifNode;}
    throw new Error("Missing return statement in function");
  }

  final public BlockNode WhileStatement() throws ParseException {
    BlockNode bn = new BlockNode("while");
    List<TigerNode> expression = null;
    TigerNode kids = null;
    Token start_t = null;
    try {
      start_t = jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      expression = Expression();
      jj_consume_token(RPAREN);
      kids = Statement();
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
      bn.setStartLocation(getLocation(start_t));
      if (expression != null) {
         bn.addChildren(expression);
      }
      if (kids != null) {
         bn.addChildren(kids.getChildren());
         bn.setEndLocation(kids.getEndLocation());
      }
      {if (true) return bn;}
    throw new Error("Missing return statement in function");
  }

  final public BlockNode DoStatement() throws ParseException {
    BlockNode bn = new BlockNode("do");
    TigerNode kids = null;
    Token start_t = null;
    Token end_t = null;
    List<TigerNode> list = null;
    try {
      start_t = jj_consume_token(DO);
      kids = Statement();
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      list = Expression();
      jj_consume_token(RPAREN);
      end_t = jj_consume_token(SEMICOLON);
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        if (start_t != null)
            bn.setStartLocation(getLocation(start_t));
        if (end_t != null)
            bn.setEndLocation(getEndLocation(end_t));
        if (list != null)
            bn.addChildren(list);
        if (kids != null)
            bn.addChildren(kids.getChildren());
        {if (true) return bn;}
    throw new Error("Missing return statement in function");
  }

  final public BlockNode ForStatement() throws ParseException {
    BlockNode bn = new BlockNode("for");
    List<TigerNode> exp_a = null;
    List<TigerNode> exp_b = null;
    TigerNode kids = null;
    Token start_t = null;
    try {
      start_t = jj_consume_token(FOR);
      jj_consume_token(LPAREN);
      if (jj_2_55(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINAL:
          jj_consume_token(FINAL);
          break;
        default:
          jj_la1[151] = jj_gen;
          ;
        }
        Type();
        jj_consume_token(IDENTIFIER);
        jj_consume_token(COLON);
        exp_a = Expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case NATIVE:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SUPER:
        case SYNCHRONIZED:
        case THIS:
        case TRANSIENT:
        case TRUE:
        case VOID:
        case VOLATILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case SEMICOLON:
        case AT:
        case INCR:
        case DECR:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ABSTRACT:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FALSE:
          case FINAL:
          case FLOAT:
          case INT:
          case LONG:
          case NATIVE:
          case NEW:
          case NULL:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case SHORT:
          case STATIC:
          case STRICTFP:
          case SUPER:
          case SYNCHRONIZED:
          case THIS:
          case TRANSIENT:
          case TRUE:
          case VOID:
          case VOLATILE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case AT:
          case INCR:
          case DECR:
            exp_a = ForInit();
            break;
          default:
            jj_la1[152] = jj_gen;
            ;
          }
          jj_consume_token(SEMICOLON);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FALSE:
          case FLOAT:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case SHORT:
          case SUPER:
          case THIS:
          case TRUE:
          case VOID:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case BANG:
          case TILDE:
          case INCR:
          case DECR:
          case PLUS:
          case MINUS:
            exp_b = Expression();
            break;
          default:
            jj_la1[153] = jj_gen;
            ;
          }
          jj_consume_token(SEMICOLON);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FALSE:
          case FLOAT:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case SHORT:
          case SUPER:
          case THIS:
          case TRUE:
          case VOID:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case INCR:
          case DECR:
            ForUpdate();
            break;
          default:
            jj_la1[154] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[155] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RPAREN);
      kids = Statement();
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        if (start_t != null) {
            bn.setStartLocation(getLocation(start_t));
        }
        if (exp_a != null) {
            bn.addChildren(exp_a);
        }
        if (exp_b != null) {
            bn.addChildren(exp_b);
        }
        if (kids != null) {
            bn.addChildren(kids.getChildren());
            bn.setEndLocation(kids.getEndLocation());
        }
        {if (true) return bn;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> ForInit() throws ParseException {
    List<TigerNode> list = new ArrayList<TigerNode>();
    TigerNode tn = null;
    List<TigerNode> a = null;
    try {
      if (jj_2_56(2147483647)) {
        tn = LocalVariableDeclaration();
                                          if (tn != null) list.add(tn);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
          a = StatementExpressionList();
                                      if (a != null) list.addAll(a);
          break;
        default:
          jj_la1[156] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> StatementExpressionList() throws ParseException {
    List<TigerNode> list = new ArrayList<TigerNode>();
    TigerNode a = null;
    TigerNode b = null;
    try {
      a = StatementExpression();
                                  if (a != null) list.add(a);
      label_55:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[157] = jj_gen;
          break label_55;
        }
        jj_consume_token(COMMA);
        b = StatementExpression();
                                                                                                if (b != null) list.add(b);
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public void ForUpdate() throws ParseException {
    try {
      StatementExpressionList();
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
  }

  final public void BreakStatement() throws ParseException {
    jj_consume_token(BREAK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[158] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  final public void ContinueStatement() throws ParseException {
    jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[159] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  final public List<TigerNode> ReturnStatement() throws ParseException {
    List<TigerNode> list = null;
    try {
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        list = Expression();
        break;
      default:
        jj_la1[160] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> ThrowStatement() throws ParseException {
    List<TigerNode> list = null;
    try {
      jj_consume_token(THROW);
      list = Expression();
      jj_consume_token(SEMICOLON);
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public BlockNode SynchronizedStatement() throws ParseException {
    BlockNode bn = new BlockNode("synchronized");
    BlockNode child = null;
    Token start_t = null;
    List<TigerNode> list = null;
    try {
      start_t = jj_consume_token(SYNCHRONIZED);
      jj_consume_token(LPAREN);
      list = Expression();
      jj_consume_token(RPAREN);
      child = Block();
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
      bn.setStartLocation(getLocation(start_t));
      if (list != null) {
          bn.addChildren(list);
      }
      if (child != null) {
          bn.setEndLocation(child.getEndLocation());
          bn.addChild(child);
      }
      {if (true) return bn;}
    throw new Error("Missing return statement in function");
  }

  final public BlockNode TryStatement() throws ParseException {
    List<TigerNode> nodes = new ArrayList<TigerNode>();
    BlockNode bn = new BlockNode("try");
    BlockNode child = null;
    Parameter exception = null;
    Token start_t = null;
    BlockNode last = null;
    try {
      start_t = jj_consume_token(TRY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        LocalVariableDeclaration();
        label_56:
        while (true) {
          if (jj_2_57(2)) {
            ;
          } else {
            break label_56;
          }
          jj_consume_token(SEMICOLON);
          LocalVariableDeclaration();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[161] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[162] = jj_gen;
        ;
      }
      child = Block();
            if (child != null) {
                child.setName("try");
                nodes.add(child);
                last = child;
            }
      label_57:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CATCH:
          ;
          break;
        default:
          jj_la1[163] = jj_gen;
          break label_57;
        }
        jj_consume_token(CATCH);
        jj_consume_token(LPAREN);
        if (jj_2_59(3)) {
          exception = FormalParameter();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            ClassOrInterfaceType();
            label_58:
            while (true) {
              jj_consume_token(BIT_OR);
              ClassOrInterfaceType();
              if (jj_2_58(2)) {
                ;
              } else {
                break label_58;
              }
            }
            VariableDeclaratorId();
            break;
          default:
            jj_la1[164] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(RPAREN);
        child = Block();
                if (child != null) {
                    child.setName("catch");
                    nodes.add(child);
                    if (exception != null) {
                        child.addChild(exception);
                    } last = child;
                }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINALLY:
        jj_consume_token(FINALLY);
        child = Block();
                if (child != null) {
                    child.setName("finally");
                    nodes.add(child);
                    last = child;
                }
        break;
      default:
        jj_la1[165] = jj_gen;
        ;
      }
    } catch (ParseException pe) {
        error_skipto(pe, RBRACE);
    }
        bn.addChildren(nodes);
        if (start_t != null)
            bn.setStartLocation(getLocation(start_t));
        if (last != null)
            bn.setEndLocation(last.getEndLocation());
        {if (true) return bn;}
    throw new Error("Missing return statement in function");
  }

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */
  final public void RUNSIGNEDSHIFT() throws ParseException {
    if (getToken(1).kind == GT &&
                     getToken(1) instanceof Token.GTToken &&
                    ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GT);
    jj_consume_token(GT);
    jj_consume_token(GT);
  }

  final public void RSIGNEDSHIFT() throws ParseException {
    if (getToken(1).kind == GT &&
                     getToken(1) instanceof Token.GTToken &&
                    ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GT);
    jj_consume_token(GT);
  }

/* Annotation syntax follows. */
  final public List<TigerNode> Annotation() throws ParseException {
    List<TigerNode> list = null;
    try {
      if (jj_2_60(2147483647)) {
        list = NormalAnnotation();
      } else if (jj_2_61(2147483647)) {
        list = SingleMemberAnnotation();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AT:
          list = MarkerAnnotation();
          break;
        default:
          jj_la1[166] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pe) {
        // TODO: what to do here?
        addException(pe);
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> NormalAnnotation() throws ParseException {
    List<TigerNode> list = new ArrayList<TigerNode>();
    NameNode nn = null;
    List<TigerNode> mvp = null;
    try {
      jj_consume_token(AT);
      nn = Name();
                      nn.setName("@" + nn.getName());
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        mvp = MemberValuePairs();
        break;
      default:
        jj_la1[167] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (ParseException pe) {
        error_skipto(pe, RPAREN);
    }
       if (nn != null) {
           list.add(nn);
       }
       if (mvp != null) {
           list.addAll(mvp);
       }
       {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> MarkerAnnotation() throws ParseException {
    List<TigerNode> list = null;
    NameNode nn = null;
    try {
      jj_consume_token(AT);
      nn = Name();
                  nn.setName("@" + nn.getName());
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);    // TODO is there a better token to skip to?   

    }
        list = new ArrayList<TigerNode>();
        list.add(nn);
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> SingleMemberAnnotation() throws ParseException {
    List<TigerNode> list = new ArrayList<TigerNode>();
    List<TigerNode> mv = null;
    NameNode nn = null;
    try {
      jj_consume_token(AT);
      nn = Name();
                  nn.setName("@" + nn.getName());list.add(nn);
      jj_consume_token(LPAREN);
      mv = MemberValue();
                                                                                     list.addAll(mv);
      jj_consume_token(RPAREN);
    } catch (ParseException pe) {
        error_skipto(pe, RPAREN);
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> MemberValuePairs() throws ParseException {
    List<TigerNode> list = new ArrayList<TigerNode>();
    List<TigerNode> mvp = null;
    try {
      mvp = MemberValuePair();
                          list.addAll(mvp);
      label_59:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[168] = jj_gen;
          break label_59;
        }
        jj_consume_token(COMMA);
        mvp = MemberValuePair();
                                                                         list.addAll(mvp);
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> MemberValuePair() throws ParseException {
    List<TigerNode> list = new ArrayList<TigerNode>();
    List<TigerNode> mv = null;
    Token t = null;
    try {
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGN);
      mv = MemberValue();
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        NameNode nn = new NameNode(t.image, null);
        list.add(nn);
        list.addAll(mv);
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> MemberValue() throws ParseException {
    List<TigerNode> list = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        list = Annotation();
        break;
      case LBRACE:
        list = MemberValueArrayInitializer();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        list = ConditionalExpression();
        break;
      default:
        jj_la1[169] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> MemberValueArrayInitializer() throws ParseException {
    List<TigerNode> list = new ArrayList<TigerNode>();
    List<TigerNode> mv = null;
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case AT:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        mv = MemberValue();
                          list.addAll(mv);
        label_60:
        while (true) {
          if (jj_2_62(2)) {
            ;
          } else {
            break label_60;
          }
          jj_consume_token(COMMA);
          mv = MemberValue();
                                                                                list.addAll(mv);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          jj_la1[170] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[171] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

/* Annotation Types. */
  final public TigerNode AnnotationTypeDeclaration(Modifier m) throws ParseException {
    Token st = null;
    Token t = null;
    List<TigerNode> body = null;
    try {
      st = jj_consume_token(AT);
      jj_consume_token(INTERFACE);
      t = jj_consume_token(IDENTIFIER);
      body = AnnotationTypeBody();
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
        if (st == null || t == null) {
            {if (true) return null;}
        }
        AnnotationTypeNode tn = new AnnotationTypeNode(t.image, m.modifiers);
        tn.setStartLocation(getLocation(t));
        TigerNode last = body.get(body.size() - 1);
        tn.addChildren(body);
        tn.setEndLocation(last.getEndLocation());
        {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> AnnotationTypeBody() throws ParseException {
    List<TigerNode> list = new ArrayList<TigerNode>();
    TigerNode tn = null;
    Token st = null;
    Token et = null;
    try {
      st = jj_consume_token(LBRACE);
      label_61:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOLATILE:
        case IDENTIFIER:
        case SEMICOLON:
        case AT:
          ;
          break;
        default:
          jj_la1[172] = jj_gen;
          break label_61;
        }
        tn = AnnotationTypeMemberDeclaration();
                                                  list.add(tn);
      }
      et = jj_consume_token(RBRACE);
    } catch (ParseException pe) {
        error_skipto(pe, RBRACKET);
    }
        TigerNode first = list.get(0);
        first.setStartLocation(getLocation(st));
        TigerNode last = list.get(list.size() - 1);
        last.setEndLocation(getEndLocation(et));
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public TigerNode AnnotationTypeMemberDeclaration() throws ParseException {
   Modifier m = null;
   TigerNode tn = new TigerNode();
   Type type = null;
   Token t = null;
   Token st = null;
   Token et = null;
   List<TigerNode> dv = null;
    m = Modifiers();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case SHORT:
      case IDENTIFIER:
      case AT:
        if (jj_2_63(2147483647)) {
          type = Type();
                      tn.setType(type);tn.setStartLocation(type.getStartLocation());
          t = jj_consume_token(IDENTIFIER);
                                                                                                      tn.setName(t.image);
          jj_consume_token(LPAREN);
          jj_consume_token(RPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case _DEFAULT:
            dv = DefaultValue();
                                                                                                                                                        tn.addChildren(dv);
            break;
          default:
            jj_la1[173] = jj_gen;
            ;
          }
          et = jj_consume_token(SEMICOLON);
                                                                                                                                                                                       tn.setEndLocation(getEndLocation(et));
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CLASS:
          case INTERFACE:
            tn = ClassOrInterfaceDeclaration(m);
            break;
          case ENUM:
            tn = EnumDeclaration(m);
            break;
          case AT:
            tn = AnnotationTypeDeclaration(m);
            break;
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case SHORT:
          case IDENTIFIER:
            tn = FieldDeclaration(m);
            break;
          default:
            jj_la1[174] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[175] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
    error_skipto(pe, SEMICOLON);
    }
        {if (true) return tn;}
    throw new Error("Missing return statement in function");
  }

  final public List<TigerNode> DefaultValue() throws ParseException {
    List<TigerNode> mv = null;
    NameNode nn = null;
    Token t = null;
    try {
      t = jj_consume_token(_DEFAULT);
      mv = MemberValue();
    } catch (ParseException pe) {
        error_skipto(pe, SEMICOLON);
    }
      nn = new NameNode("default", null);
      nn.setStartLocation(getLocation(t));
      nn.setEndLocation(getEndLocation(t));
      List<TigerNode> list = new ArrayList<TigerNode>();
      list.add(nn);
      list.addAll(mv);
      {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_3R_304() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_317()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_318()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_319()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_3R_188()) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_3R_187()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_168()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_184()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_210()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == GT &&
                 getToken(1) instanceof Token.GTToken &&
                ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_140()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    return false;
  }

  private boolean jj_3_58() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == GT &&
                 getToken(1) instanceof Token.GTToken &&
                ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_141()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_211() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_211()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_57() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_303() {
    if (jj_3R_316()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_371() {
    if (jj_3R_105()) return true;
    Token xsp;
    if (jj_3_58()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_58()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3R_294() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_303()) jj_scanpos = xsp;
    if (jj_3R_304()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_193() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_59() {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_363() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("LOOKAHEAD");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_119()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("IGNORE_CASE");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_331() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_361() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_114()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_57()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(84)) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_362() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3R_371()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_316() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_105()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_331()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_42() {
    if (jj_3R_106()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_3R_105()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_3R_103()) return true;
    Token xsp;
    if (jj_3_25()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_scan_token(TRY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_361()) jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_362()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_363()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_3R_105()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_40() {
    if (jj_3R_105()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_3R_106()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_330() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_3R_105()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_315() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_105()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_330()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_3R_105()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_3R_193()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_97()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_381() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_250()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_3R_193()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_360() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_302() {
    if (jj_3R_316()) return true;
    return false;
  }

  private boolean jj_3R_301() {
    if (jj_3R_315()) return true;
    return false;
  }

  private boolean jj_3R_306() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_321()) return true;
    return false;
  }

  private boolean jj_3R_300() {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_220() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_3R_241()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3R_300()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_301()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_302()) jj_scanpos = xsp;
    if (jj_3R_247()) return true;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_70()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_125()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_360()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    }
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_372() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) return true;
    }
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_354() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_90()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_338()) return true;
    return false;
  }

  private boolean jj_3R_307() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_353() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_90()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_314()) return true;
    return false;
  }

  private boolean jj_3R_377() {
    if (jj_3R_380()) return true;
    return false;
  }

  private boolean jj_3R_308() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_305() {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_350() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_353()) {
    jj_scanpos = xsp;
    if (jj_3R_354()) return true;
    }
    return false;
  }

  private boolean jj_3R_370() {
    if (jj_3R_377()) return true;
    return false;
  }

  private boolean jj_3R_380() {
    if (jj_3R_250()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_381()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_295() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_305()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_190()) return true;
    xsp = jj_scanpos;
    if (jj_3R_306()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_307()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_308()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_90()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_351() {
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_372()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_379() {
    if (jj_3R_380()) return true;
    return false;
  }

  private boolean jj_3R_378() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_90()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_3R_186()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_90()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  private boolean jj_3R_376() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_378()) {
    jj_scanpos = xsp;
    if (jj_3R_379()) return true;
    }
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  private boolean jj_3R_369() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_343() {
    if (jj_3R_351()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_342() {
    if (jj_3R_350()) return true;
    return false;
  }

  private boolean jj_3_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_341() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) return true;
    }
    if (jj_3R_314()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_368() {
    if (jj_3R_376()) return true;
    return false;
  }

  private boolean jj_3R_359() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_368()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_369()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_370()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_111()) return true;
    if (jj_3R_90()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_163()) jj_scanpos = xsp;
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3R_358() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_338() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_341()) {
    jj_scanpos = xsp;
    if (jj_3R_342()) {
    jj_scanpos = xsp;
    if (jj_3R_343()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_323() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_335() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_358()) {
    jj_scanpos = xsp;
    if (jj_3R_359()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_219()) return true;
    return false;
  }

  private boolean jj_3R_339() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) return true;
    }
    }
    if (jj_3R_314()) return true;
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_320() {
    if (jj_3R_115()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_335()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_357() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_219()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_320()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_219()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_328() {
    if (jj_3R_338()) return true;
    return false;
  }

  private boolean jj_3R_327() {
    if (jj_3R_279()) return true;
    return false;
  }

  private boolean jj_3R_326() {
    if (jj_3R_278()) return true;
    return false;
  }

  private boolean jj_3R_325() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) return true;
    }
    if (jj_3R_314()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_329() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) return true;
    }
    if (jj_3R_298()) return true;
    return false;
  }

  private boolean jj_3R_314() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_325()) {
    jj_scanpos = xsp;
    if (jj_3R_326()) {
    jj_scanpos = xsp;
    if (jj_3R_327()) {
    jj_scanpos = xsp;
    if (jj_3R_328()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_190()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_323()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_311() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_321()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_219()) return true;
    return false;
  }

  private boolean jj_3R_298() {
    if (jj_3R_314()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_339()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    }
    if (jj_3R_292()) return true;
    return false;
  }

  private boolean jj_3R_367() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_3R_298()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_329()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_312() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_299() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) return true;
    }
    }
    }
    if (jj_3R_284()) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_219()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_357()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_161()) jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    if (jj_3R_162()) return true;
    xsp = jj_scanpos;
    if (jj_3R_311()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_312()) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) return true;
    }
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_3R_292()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_293() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_375() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_374() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_3R_93()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_280() {
    if (jj_3R_284()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_299()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_285() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) return true;
    }
    if (jj_3R_271()) return true;
    return false;
  }

  private boolean jj_3R_366() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_374()) {
    jj_scanpos = xsp;
    if (jj_3R_375()) return true;
    }
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_266()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(85)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_356() {
    if (jj_3R_366()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_367()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_3R_280()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_293()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_282() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_262()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3R_352() {
    if (jj_3R_364()) return true;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_356()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) return true;
    }
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_3R_271()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_285()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_373() {
    if (jj_3R_98()) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_322() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_276() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_242()) return true;
    return false;
  }

  private boolean jj_3R_365() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_3R_373()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_365()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_3R_279()) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_3R_262()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_282()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_3R_278()) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_191()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_250() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_268()) {
    jj_scanpos = xsp;
    if (jj_3R_269()) {
    jj_scanpos = xsp;
    if (jj_3R_270()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(126)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_3R_242()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_276()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_209()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_3R_248()) return true;
    return false;
  }

  private boolean jj_3R_309() {
    if (jj_3R_164()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_322()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(BIT_OR)) return true;
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_scan_token(74)) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_200()) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_3R_221()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_265()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_344() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_309()) return true;
    return false;
  }

  private boolean jj_3R_217() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(91)) jj_scanpos = xsp;
    if (jj_scan_token(LBRACKET)) return true;
    xsp = jj_scanpos;
    if (jj_3R_225()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_70()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_3R_217()) return true;
    return false;
  }

  private boolean jj_3R_310() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_309()) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_3R_209()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_245()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_126() {
    Token xsp;
    if (jj_3R_178()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_178()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_126()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_127()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_111()) return true;
    if (jj_3R_90()) return true;
    if (jj_3R_309()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_344()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_200()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_222()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(126)) jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_364() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_3R_90()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_112()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_296() {
    if (jj_3R_90()) return true;
    if (jj_3R_309()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_310()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(LT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_70()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_54() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_3R_185()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_212()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_3R_90()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_349() {
    if (jj_3R_296()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_90()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_91()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_348() {
    if (jj_3R_297()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_347() {
    if (jj_3R_294()) return true;
    return false;
  }

  private boolean jj_3_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_346() {
    if (jj_3R_220()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_291() {
    if (jj_3R_297()) return true;
    return false;
  }

  private boolean jj_3R_345() {
    if (jj_3R_90()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_352()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_290() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_3R_296()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    return false;
  }

  private boolean jj_3R_340() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_345()) {
    jj_scanpos = xsp;
    if (jj_3R_346()) {
    jj_scanpos = xsp;
    if (jj_3R_347()) {
    jj_scanpos = xsp;
    if (jj_3R_348()) {
    jj_scanpos = xsp;
    if (jj_3R_349()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_3R_295()) return true;
    return false;
  }

  private boolean jj_3R_287() {
    if (jj_3R_294()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_98()) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_286() {
    if (jj_3R_220()) return true;
    return false;
  }

  private boolean jj_3_11() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("LOOKAHEAD");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_71()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_337() {
    if (jj_3R_111()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_340()) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) return true;
    }
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_139()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_283() {
    if (jj_3R_111()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_286()) {
    jj_scanpos = xsp;
    if (jj_3R_287()) {
    jj_scanpos = xsp;
    if (jj_3R_288()) {
    jj_scanpos = xsp;
    if (jj_3R_289()) {
    jj_scanpos = xsp;
    if (jj_3R_290()) {
    jj_scanpos = xsp;
    if (jj_3R_291()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_324() {
    if (jj_3R_337()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_3R_111()) return true;
    if (jj_3R_90()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_277() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_283()) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_313() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_324()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_3R_220()) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_3R_219()) return true;
    return false;
  }

  private boolean jj_3R_336() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_3R_114()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_321() {
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_336()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_196() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_51()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_3R_277()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_313()) return true;
    return false;
  }

  private boolean jj_3_9() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("LOOKAHEAD");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_69()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_355() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_181()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_267()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_281() {
    if (jj_3R_117()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_62()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(85)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_281()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_219()) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_99()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_355()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("TOKEN");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_scan_token(75)) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("SPECIAL_TOKEN");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_scan_token(75)) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("SKIP");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_scan_token(75)) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("MORE");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_scan_token(75)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_274()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_124() {
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_105()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_226()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_3R_260()) return true;
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_3R_259()) return true;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_3R_258()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("TOKEN_MGR_DECLS");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_124()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_3R_257()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_3R_256()) return true;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_3R_255()) return true;
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_3R_254()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_3R_253()) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_3R_251()) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_3R_247()) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_3R_250()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_205()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) return true;
    }
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_3R_274()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_275()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(LT)) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_3R_264()) return true;
    return false;
  }

  private boolean jj_3R_219() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) {
    jj_scanpos = xsp;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) {
    jj_scanpos = xsp;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_333() {
    if (jj_3R_247()) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_67()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_223() {
    Token xsp;
    if (jj_3R_246()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_246()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(LT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_180()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_318() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_317()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3_49() {
    Token xsp;
    if (jj_3_47()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_47()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_213() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) return true;
    }
    return false;
  }

  private boolean jj_3R_332() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_3R_95()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_224()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_105()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_214()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) return true;
    }
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_103()) return true;
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_317() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_332()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_333()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_263() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_272()) {
    jj_scanpos = xsp;
    if (jj_3R_273()) return true;
    }
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) return true;
    }
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_67()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_244()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_3R_263()) return true;
    return false;
  }

  private boolean jj_3R_334() {
    if (jj_3R_277()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_scan_token(HOOK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_243()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_67()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_319() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_334()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_67()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) return true;
    }
    return false;
  }

  private boolean jj_3R_184() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) return true;
    }
    return false;
  }

  private boolean jj_3R_64() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(1).image.equals("JAVACODE");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_121()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_3R_99()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_197()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_3R_189()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public TigerParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[176];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x40000000,0x4128000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90202000,0x0,0x0,0x80002000,0x10200000,0x90202000,0x200000,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x9432a000,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x9432a000,0x10200000,0x4128000,0x9432a000,0x0,0x0,0x0,0x44128000,0x44128000,0x0,0x0,0x0,0x0,0x0,0x0,0x8412a000,0x0,0x0,0x0,0xc6b3e000,0x44128000,0x0,0x4128000,0x4128000,0x0,0x0,0x20000000,0x4128000,0x20000000,0x4128000,0x4128000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44128000,0x0,0x0,0x44128000,0x40000000,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x40000000,0x40000000,0x44128000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4693c000,0x0,0xc6b3e000,0x46b3c000,0xc6b3e000,0x46b3c000,0x0,0x0,0x0,0x44128000,0x1040000,0xc6b3e000,0x1040000,0x8000000,0x80000000,0xc412a000,0x44128000,0x44128000,0xc412a000,0x44128000,0x0,0x0,0x0,0x44128000,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x44128000,0x0,0x44128000,0x9432a000,0x1000000,0x14328000,0x14328000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x100000,0x20000000,0x80080502,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x4000,0x40,0x11338a00,0x100000,0x0,0x11338800,0x200,0x11338a00,0x200,0x0,0x0,0x20,0x0,0x0,0x20,0x0,0x913b8f02,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x913b8f02,0x200,0x80080502,0x913b8f02,0x0,0x0,0x0,0xa2483502,0xa2483502,0x0,0x0,0x8000000,0x0,0x0,0x0,0x113b8d02,0x0,0x0,0x8000000,0xf7ffbf16,0xa2483502,0x100000,0x80502,0x80502,0x0,0x0,0x400000,0x80502,0x400000,0x80502,0x80080502,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa2483502,0x0,0x0,0xa2483502,0x22403000,0x0,0x0,0x0,0x0,0x22402000,0x1000,0x0,0x0,0x20002000,0x20000000,0xa2483502,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0xe7cc3516,0x0,0xf7ffbf16,0xe7cc3716,0xf7ffbf16,0xe7cc3716,0x0,0x0,0x0,0xa2483502,0x0,0xf7ffbf16,0x0,0x0,0x0,0xb37bbd02,0xa2483502,0xa2483502,0xb37bbd02,0xa2483502,0x0,0x0,0x0,0xa2483502,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xa2483502,0x0,0xa2483502,0x113b8f02,0x0,0x80702,0x80702,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x800,0x404,0x800,0x200000,0x200000,0x0,0x0,0x200000,0x2000000,0x2000000,0x40000,0x0,0x10000,0x20000000,0x0,0x0,0x4,0x0,0x0,0x2000c00,0x10000000,0x10000000,0x50000,0x4000,0x0,0x800,0x400,0x2000000,0x0,0xa044400,0x10000000,0x10000000,0xa044400,0x8000000,0x200000,0x400,0x0,0x800,0x0,0x4000,0x0,0x0,0x900001,0x0,0x400000,0x800001,0x800000,0x900001,0x0,0x2000000,0x0,0x0,0x200000,0x200000,0x0,0x200000,0x2910801,0x100000,0x4000,0x10000,0x800,0x200000,0x0,0x0,0x2910801,0x0,0x2800800,0x2900801,0x200000,0x1000000,0x40000,0xc014e84,0xc014e84,0x200000,0x2000000,0x0,0x110000,0x40000,0x200000,0x800801,0x0,0x2000000,0x0,0x914e87,0x4e84,0x0,0x0,0x800,0x200000,0x2000000,0x0,0x10000800,0x0,0x0,0x800,0x200000,0x1000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x0,0x82000000,0x82000000,0x0,0x0,0x0,0x0,0x0,0x0,0xc004e84,0xc000000,0xc000000,0x4e84,0xc004e84,0x4000,0x0,0x0,0x4000,0x684,0x4000,0x800,0x444000,0x684,0x0,0xc004e84,0x200000,0x2000000,0x10000,0x44000,0x0,0x40000,0x40000,0x114e86,0x20000000,0x914e87,0x114e86,0x2914e87,0x114e86,0x200000,0x1000000,0x1000000,0x4e84,0x0,0x914e87,0x0,0x0,0x0,0x804e85,0xc004e84,0x4e84,0x904e85,0x4e84,0x200000,0x800,0x800,0xc004e84,0x100000,0x4000,0x0,0x800,0x0,0x800000,0x800,0x200000,0xc814e84,0x200000,0xc814e84,0x900801,0x0,0x800800,0x900800,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x800,0x40000000,0x0,0x0,0x0,0x0,0x140,0x140,0x0,0x0,0x40000000,0x40000000,0x0,0x0,0x800,0x0,0x140,0x140,0x0,0x0,0x0,0x0,0x80,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf0,0xf0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x3ff8000,0x0,0x4,0x8,0x800,0x1000,0x400,0x2,0x2,0x0,0x20000001,0x20000001,0x4000,0xc0,0xc0,0x2300,0x2300,0xc0,0xf0,0x0,0x0,0x0,0x0,0x0,0x30,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x30,0x0,0x30,0x30,0x30,0x30,0x0,0x3ff8030,0x3ff8030,0x30,0x0,0x30,0x0,0x0,0x0,0x30,0xf0,0x30,0x30,0x30,0x0,0x0,0x0,0xf0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf0,0x0,0xf0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[63];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public TigerParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TigerParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TigerParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 176; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 176; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public TigerParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new TigerParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 176; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 176; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public TigerParser(TigerParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 176; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TigerParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 176; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[128];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 176; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 128; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 63; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
