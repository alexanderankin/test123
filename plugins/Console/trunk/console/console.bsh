/* Runs a command. */
runCommandInConsole(View view, String shell, String command)
{
	import console.Shell;

	// Open the console if it isn't already open
	view.getDockableWindowManager().addDockableWindow("console");

	// Obtain the console instance
	console = view.getDockableWindowManager().getDockable("console");

	// Set the shell to use
	Shell _shell = Shell.getShell(shell);
	console.setShell(_shell);

	// Run the command
	console.run(_shell,console,command);
}

bsh.help.runCommandInConsole
	= "usage: runCommandInConsole(View view, String shell, String command)";

/* Runs a command, sending output to a new buffer. */
runCommandToBuffer(View view, String shell, String command)
{
	import console.Shell;
	import console.BufferOutput;

	// Open the console if it isn't already open
	view.getDockableWindowManager().addDockableWindow("console");

	// Obtain the console instance
	console = view.getDockableWindowManager().getDockable("console");

	// Set the shell to use
	Shell _shell = Shell.getShell(shell);
	console.setShell(_shell);

	// Run the command
	console.run(_shell,new BufferOutput(console),command);
}

bsh.help.runCommandToBuffer
	= "usage: runCommandToBuffer(View view, String shell, String command)";

/* Runs a command in the system shell. */
runInSystemShell(View view, String command)
{
	runCommandInConsole(view,"System",command);
}

bsh.help.runInSystemShell
	= "usage: runInSystemShell(View view, String shell, String command)";

/* Blocks until the current command finishes. */
waitForConsole(View view)
{
	import console.Shell;

	view.getDockableWindowManager().addDockableWindow("console");
	console = view.getDockableWindowManager().getDockable("console");
	console.getShell().waitFor(console);
}

bsh.help.waitForConsole
	= "usage: waitForConsole(View view)";

/* Clears the console output area. */
clearConsole(View view)
{
	import console.Shell;

	view.getDockableWindowManager().addDockableWindow("console");
	console = view.getDockableWindowManager().getDockable("console");
	console.clear();
}

bsh.help.clearConsole
	= "usage: clearConsole(View view)";

/* This function prints the specified object to the current console if one
 * exists; otherwise, to the activity log. */
print(arg)
{
	if(arg == null)
		arg = "null";

	if(arg.getClass().isArray())
	{
		len = arg.length;
		print("Array: "+arg +" {");
		for(int i=0; i< len; i++ )
		{
			print(arg[i]);
		}
		print("}");
	}
	else
	{
		if(output != null)
			output.print(null,String.valueOf(arg));
		else
			Log.log(Log.WARNING,BeanShell.class,String.valueOf(arg));
	}
}

bsh.help.print = "usage: print ( arg )";

/* Returns $CLASSPATH, plus the current buffer's package root. */
getBufferClassPath(buffer)
{
	import console.ConsolePlugin;

	return "$CLASSPATH" + File.pathSeparator
		+ ConsolePlugin.getPackageRoot(buffer);
}

bsh.help.print = "usage: getBufferClassPath ( buffer )";

/* Returns environment variable value. */
getenv(String env)
{
	import console.ConsolePlugin;

	return ConsolePlugin.getSystemShellVariableValue(null,env);
}

bsh.help.getenv = "usage: getenv ( env )";

/* Returns environment variable value. */
setenv(String env, String value)
{
	import console.ConsolePlugin;

	return ConsolePlugin.setSystemShellVariableValue(env,value);
}

bsh.help.setenv = "usage: setenv ( env, value )";
