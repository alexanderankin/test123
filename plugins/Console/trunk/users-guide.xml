<?xml version="1.0"?>

<!-- Console user's guide -->
<!-- (C) 2001, 2003 Slava Pestov -->

<!-- jEdit buffer-local properties: -->
<!-- :tabSize=1:indentSize=1:noTabs=true: -->

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<book>

<bookinfo><title>Console plugin user's guide</title>

 <copyright>
  <year>1999</year>
  <year>2000</year>
  <year>2001</year>
  <year>2002</year>
  <holder>Slava Pestov</holder>
 </copyright>

 <legalnotice><title>Legal Notice</title>
  <para>
   Permission is granted to copy, distribute and/or modify this document
   under the terms of the GNU Free Documentation License, Version 1.1 or
   any later version published by the Free Software Foundation; with no
   <quote>Invariant Sections</quote>, <quote>Front-Cover Texts</quote> or
   <quote>Back-Cover Texts</quote>, each as defined in the license. A copy of
   the license can be found in the file <filename>COPYING.DOC.txt</filename>
   included with jEdit.
  </para>
 </legalnotice>
</bookinfo>

<chapter id="intro"><title>Introduction</title>

<para>
 The <application>Console</application> plugin has four main functions:
</para>

<itemizedlist>
 <listitem><para>Running external programs and commands.</para></listitem>
 <listitem><para>Parsing the output of external programs for errors in a
 variety of formats, and reporting those errors using the
 <application>ErrorList</application> plugin.</para></listitem>
 <listitem><para>The <firstterm>Commando</firstterm> feature provides
 graphical front-ends, specified using an XML file, to command-line
 tools.</para></listitem>
 <listitem><para>Providing an extensible framework for other plugins that
 need to display streamed output.</para></listitem>
</itemizedlist>

</chapter>

<chapter id="window"><title>The console window</title>

<para>
 <guimenu>Plugins</guimenu>&gt;<guisubmenu>Console</guisubmenu>&gt;<guimenuitem>Console</guimenuitem>
 displays the console window. This window is floating by default, but can be
 made to dock into the view in the <guilabel>Docking</guilabel> pane of the
 <guimenuitem>Global Options</guimenuitem> dialog box.
</para>

<para>
 The console window consists of a popup for choosing the current
 <firstterm>shell</firstterm> (more on that later),
 an input text field, a series of icon buttons, and a command output area
 which occupies the remaining space of the window.
</para>

<para>
 Each button shows a tooltip if the mouse pointer is held over it long enough.
 Here is a description of each button:
</para>

<itemizedlist>
 <listitem><para><guibutton>Run</guibutton> - runs the currently-entered command.
 This has the same effect as pressing <keycap>Enter</keycap> in the text field.
 Since the latter is a much quicker way to run commands, this button is only
 provided for completeness.</para></listitem>

 <listitem><para><guibutton>Run to buffer</guibutton> - runs the
 currently-entered command, but shows the output in a new buffer, instead of
 in the console window.</para></listitem>

 <listitem><para><guibutton>Stop</guibutton> - stops the currently running
 process, if any.</para></listitem>

 <listitem><para><guibutton>Clear</guibutton> - clears the console window's
 output area.</para></listitem>
</itemizedlist>

<para>
 Back to the shell popup. The Console plugin allows arbitrary
 <quote>shells</quote> to be plugged in; one shell included with the plugin
 is called the <quote>system</quote> shell and it runs external programs and
 commands; another built-in shell is the <quote>BeanShell</quote> shell,
 which runs commands in jEdit's BeanShell interpreter. Some plugins add
 their own shells; for example, the <application>JCompiler</application>
 plugin adds a shell for running the <command>javac</command> Java compiler
 within the jEdit process.
</para>

<para>
 The <quote>BeanShell</quote> shell and plugin shells will not be discussed
 further here; general BeanShell documentation can be found in the jEdit
 user's guide, and documentation on plugin shells can be found in the
 documentation for the appropriate plugin. The remainder of this guide
 concerns itself with the system shell only.
</para>

<sect1 id="toolbar"><title>The console tool bar</title>

<para>
 The console tool bar, which can be enabled in the
 <guilabel>Console</guilabel>&gt;<guilabel>General</guilabel> pane of the
 <guimenuitem>Global Options</guimenuitem>
 dialog box, consists of a shell popup and an input text field; entering a
 command in the field and pressing <keycap>Enter</keycap> opens a console
 window if not already open, and runs the command in that console window.
</para>

</sect1>

</chapter>

<chapter id="system-shell"><title>The system shell</title>

<para>
 This section assumes at least basic familiarity with the command-line
 interpreter of a Unix, Windows or similar operating system.
</para>

<para>
 Just as with most other command lines, spaces are used to separate
 command-line parameters to programs. If a string containing
 spaces needs to be passed as a single parameter, it should be enclosed with
 double quotes (<userinput>"</userinput>), for example:
</para>

<screen>javac "C:\Source Code\TestServlet.java"</screen>

<para>
 Not all commands result in an external process being spawned; the system
 shell supports <quote>built-ins</quote>, which are handled by the
 Console plugin itself. Built-ins are prefixed with <quote>%</quote> to
 distinguish them from external commands.
</para>

<para>
 Pressing <keycap>Tab</keycap> in the console's command input field will
 attempt to complete the filename or command before the caret. If there is more than
 one possible completion, they will be listed in the output area.
</para>

<sect1 id="error-parsing"><title>Error parsing</title>
 <para>
  Each line of output produced by an external program is fed through several
  successive <firstterm>error patterns</firstterm>. Each error pattern
  attempts to match the line against a regular expression. If the line
  matches the regular expression, the file name, line number and error
  message is extracted from it; the line is then optionally
  matched against another regular expression to determine if it is a
  warning or error message.
 </para>

 <para>
  If the error pattern specifies a filename of <quote>$f</quote>, the current
  buffer's path is used; otherwise, the filename is resolved relative to the
  current directory.
 </para>

 <para>
  It is also possible to specify an <quote>extra</quote> regular expression,
  against which lines subsequent to an error are checked and added to the
  error message if they match. This can be used to handle compilers which
  produce compiler errors and warnings that span several lines.
 </para>

 <para>
  Parsed error and warning messages are shown in the
  <guimenu>Plugins</guimenu>&gt;<guisubmenu>Error
  List</guisubmenu>&gt;<guimenuitem>Error List</guimenuitem> window; this
  window is used to display errors from several other plugins as well.
 </para>

 <para>
  The Console plugin includes error patterns that match errors produced
  by the following tools:
 </para>

 <itemizedlist>
  <listitem><para>Generic errors matching the following format, produced by many
  tools, especially on Unix:</para>
  <screen><replaceable>file</replaceable>:<replaceable>line</replaceable>:<replaceable>message</replaceable></screen>
  </listitem>

  <listitem><para>Generic errors matching the so called
  <quote>Emacs</quote> format:</para>
  <screen><replaceable>file</replaceable>:<replaceable>start <!--
  -->line</replaceable>:<replaceable>end line</replaceable>:<replaceable>start <!--
  -->column</replaceable>:<replaceable>end column</replaceable>:<replaceable>message</replaceable></screen>
  <para>
   The <command>jikes</command> Java compiler will produce errors in this
   form if given if the <command>+E</command> command-line option. Otherwise,
   it will output errors in a non-standard format which cannot be parsed by
   the Console plugin.
  </para>
  </listitem>

  <listitem><para>Errors output by the <command>javac</command> compiler
  found in
  Java 2 version 1.3 and later. Earlier versions are also supported, because
  they output errors in the generic format documented above.</para></listitem>

  <listitem><para>Errors output by the <command>javac</command> compiler
  when it is being run from the <application>Ant</application> project build
  tool.</para></listitem>

  <listitem><para>Microsoft Visual C++ and Microsoft .Net compiler errors.
  </para></listitem>

  <listitem><para>Perl errors.</para></listitem>

  <listitem><para>Errors output by the Jade and OpenJade document
  generation tools.</para></listitem>

 </itemizedlist>

 <para>
  Error patterns can be customized in the
  <guilabel>Console</guilabel>&gt;<guilabel>Error Patterns</guilabel> pane
  of the <guimenuitem>Global Options</guimenuitem> dialog box; you should
  familiarize yourself with regular expressions first, the syntax of which
  is documented in the jEdit user's guide.
 </para>

</sect1>

<sect1 id="changing-dirs"><title>Changing directories</title>

<para>
 To change the current working directory, simply enter its name, as if you were
 going to execute a command. Relative paths are resolved
 automatically.
</para>

<para>
 The following system shell built-ins relate to the current working directory:
</para>

<itemizedlist>
 <listitem><para><command>pwd</command> - prints the current working
 directory. Note that unlike other built-ins, this one is not prefixed
 with <quote>%</quote> for convenience and consistency with other command
 lines.</para></listitem>
 <listitem><para><command>cd <replaceable>directory</replaceable></command>:
 does the same thing as just entering
 <command><replaceable>directory</replaceable></command>.
 </para></listitem>
 <listitem><para><command>-</command> or <command>cd -</command>:
 goes to the directory that was
 current before this one.
 </para></listitem>
 <listitem><para><command>%pushd</command>: pushes the current directory
 onto the directory stack.</para></listitem>
 <listitem><para><command>%popd</command>: sets the current working
 directory to the one stored at the top of the directory stack, then
 removes that entry from the stack.</para></listitem>
 <listitem><para><command>%dirstack</command>: lists all directories
 in the directory stack.</para></listitem>
</itemizedlist>

</sect1>

<sect1 id="process-manage"><title>Process management</title>

 <para>
  Each console window has an associated <quote>foreground process</quote>;
  output produced by the foreground process is shown in that console
  window. Starting a new process while one is already running in the
  foreground will terminate the existing process.
 </para>
 <para>
  The <command>%kill</command> built-in can also be used to
  terminate the currently running foreground process. Clicking the
  <guibutton>Stop</guibutton> button in the console window has the same
  effect.
 </para>
 <para>
  A process can be started in the <quote>background</quote> by adding
  <quote>&amp;</quote> to the end of its command line. After a process is
  started in the background, it continues running until it exits. Output is
  not shown in the console window, and starting other processes has no effect on
  already-running background processes.
 </para>
 <para>
  The <command>%detach</command> built-in detaches the currently running
  foreground process and makes it a background process. It will no longer
  show output in the console window, and a new foreground process can be
  started without affecting it.
 </para>

</sect1>

<sect1 id="env-vars"><title>Environment variables</title>

<para>
 When running on Unix and Windows NT/2000/XP, the system shell lets you access
 and change
 operating system-specific environment variables. On other systems, you can
 define and use variables, but they are console-specific.
</para>

<para>
 To accommodate both Windows and Unix users, three forms of variable syntax are
 supported by the system shell:
</para>

<itemizedlist>
 <listitem><para><varname>%<replaceable>name</replaceable>%</varname>
 </para></listitem>
 <listitem><para><varname>$<replaceable>name</replaceable></varname>
 </para></listitem>
 <listitem><para><varname>${<replaceable>name</replaceable>}</varname>
 </para></listitem>
</itemizedlist>

<para>
 The following variables are defined under all circumstances, independent
 of operating system-specific environment variables being available or not:
</para>

<itemizedlist>
 <listitem><para><varname>${c}</varname> - if the current buffer is a Java file,
 the current buffer's fully qualified class name, including the package (if the
 buffer contains a <userinput>package</userinput> statement).
 </para></listitem>
 <listitem><para><varname>${d}</varname> - the current buffer's directory.
 </para></listitem>
 <listitem><para><varname>${f}</varname> - the current buffer's path name.
 </para></listitem>
 <listitem><para><varname>${n}</varname> - the current buffer's name.
 </para></listitem>
 <listitem><para><varname>${BROWSER_DIR}</varname> - the current directory
 displayed in the file system browser, or an empty string if the file system
 browser is not visible.
 </para></listitem>
 <listitem><para><varname>${JEDIT_HOME}</varname> - the full path of the
 directory where jEdit is installed.</para></listitem>
 <listitem><para><varname>${JEDIT_SETTINGS}</varname> - the full path of the
 jEdit settings directory.</para></listitem>
 <listitem><para><varname>${PKG}</varname> - if the current buffer is a Java file,
 the current buffer's package name (or if the
 buffer doesn't contain a <userinput>package</userinput> statement, an empty
 string).
 </para></listitem>
 <listitem><para><varname>${PWD}</varname> - the current working directory.
 </para></listitem>
 <listitem><para><varname>${ROOT}</varname> - the package root of the current
 buffer. For example, if the current buffer's fully qualified class name is
 <classname>org.gjt.sp.jedit.jEdit</classname> and it is contained in the
 <filename>/home/slava/jEdit/org/gjt/sp/jedit/</filename> directory, this will
 return <filename>/home/slava/jEdit/</filename>.
 </para></listitem>
 <listitem><para><varname>~</varname> - this is not a <quote>variable</quote>
 per-se, and it is specified using a different syntax, but it makes sense to
 mention it here.
 It expands to the full path of the user's home directory.</para></listitem>
</itemizedlist>

<para>
 The following system shell built-ins deal with environment variables:
</para>

<itemizedlist>
 <listitem><para><command>%env</command>: prints a list of all environment
 variables, excluding the dynamic ones documented above.</para></listitem>
 <listitem><para><command>%set <replaceable>name</replaceable>
 <replaceable>value</replaceable></command>: sets the value of the specified
 environment variable. Note that if the desired value contains whitespace,
 you will need to quote it, otherwise it will be treated as several
 arguments.</para></listitem>
 <listitem><para><command>%unset <replaceable>name</replaceable></command>:
 clears the value of the specified
 environment variable.</para></listitem>
</itemizedlist>

<para>
 To insert a <quote>$</quote> or <quote>%</quote> literally in the command
 string, you can write <quote>$$</quote> and <quote>%%</quote>.
</para>

<sidebar><title>Windows 95/98/ME</title>
<para>
 Due to Java bugs,
 environment variables are not supported when running on Windows 95, 98, or
 ME.
</para>
</sidebar>
</sect1>

<sect1 id="jedit-builtins"><title>jEdit integration built-ins</title>
 <para>
  A few system shell built-ins invoke jEdit features:
 </para>

 <itemizedlist>
  <listitem><para><command>%browse <replaceable>directory</replaceable></command>:
  opens the specified directory in jEdit's file system browser.
  </para></listitem>

  <listitem><para><command>%edit <replaceable>files ...</replaceable></command>:
  opens the specified files in jEdit.</para></listitem>

  <listitem><para><command>%run <replaceable>scripts ...</replaceable></command>:
  runs the specified script files in jEdit's BeanShell interpreter.
  </para></listitem>

 </itemizedlist>
</sect1>

</chapter>

<chapter id="commando"><title>Commando</title>

<para>
 As mentioned previously, the <firstterm>Commando</firstterm> feature creates
 graphical front-ends to command-line tools from XML files.
</para>

<para>
 Commando XML files are stored in two locations:
</para>

<itemizedlist>
 <listitem><para>A few are stored in the <filename>Console.jar</filename>
 itself.</para></listitem>
 <listitem><para>User-specific commando files are loaded from the
 <filename>console/commando</filename> subdirectory of the jEdit
 settings directory.</para>

 <para>
  You can find out the location of the settings directory by entering
  the following command in the system shell of the console window:
 </para>
 <programlisting>%echo ${JEDIT_SETTINGS}</programlisting>

 <para>
  <guimenu>Plugins</guimenu>&gt;<guisubmenu>Console</guisubmenu>&gt;<guimenuitem>Rescan
  Commando Directory</guimenuitem> should be called after files are added or
  removed in the user-specific commando directory.
 </para>

 <para>
  <guimenu>Plugins</guimenu>&gt;<guisubmenu>Console</guisubmenu>&gt;<guimenuitem>Browse
  Commando Directory</guimenuitem> opens the user-specific commando directory in
  jEdit's file system browser.
 </para>
 </listitem>
</itemizedlist>

<para>
 <guimenu>Plugins</guimenu>&gt;<guisubmenu>Console</guisubmenu>&gt;<guimenuitem>Commando</guimenuitem>
 displays the commando window. A menu item for each known commando
 file is also shown in the
 <guimenu>Plugins</guimenu>&gt;<guisubmenu>Console</guisubmenu> menu;
 invoking one of these menu items opens the commando window with that
 commando file pre-selected.
</para>

<sect1 id="commando-toolbar"><title>The Commando tool bar</title>

<para>
 The commando tool bar, which can be enabled in the
 <guilabel>Console</guilabel>&gt;<guilabel>General</guilabel> pane of the
 <guimenuitem>Global Options</guimenuitem>
 dialog box, has one button for each commando file. Clicking a button opens
 the commando window for that file.
</para>

</sect1>
 
<sect1 id="commando-window"><title>The Commando window</title>

<para>
 The commando window consists of a combo box for selecting a commando file,
 and two tabs; the first contains GUI controls for specifying command-line
 settings, the second shows the resulting command line (or command lines,
 if the commando file defines more than one command to be run).
</para>

<para>
 Currently, settings specified in the commando window are remembered for
 the duration of the current jEdit session. In the future, integration
 with a project management plugin will be provided, for specifying command
 line tool settings on a per-project basis.
</para>

<para>
 One you have configured the necessary settings, click <guibutton>OK</guibutton>
 to run each command specified in the commando file in turn. Most commando
 files will only specify one command to run.
</para>

<para>
 Some commands will
 be executed automatically, others will ask for confirmation; if a command
 fails, you will always be asked for confirmation before running the next one,
 no matter what. Some commando files, such as the <filename>diff</filename>
 file included with the Console plugin, show their output in a new buffer,
 rather than the console window.
</para>

</sect1>

<sect1 id="writing-commando"><title>Writing Commando files</title>

<para>
 Commando files are written in XML. A commando file must have a certain
 preamble, along with a root element:
</para>

<programlisting><![CDATA[<?xml version="1.0"?>

<!DOCTYPE COMMANDO SYSTEM "commando.dtd">

<COMMANDO>
    ...
</COMMANDO>]]></programlisting>

<sect2><title>The UI element</title>

<para>
 Each command file must define one and only one
 <literal>UI</literal> element inside the
 <literal>COMMANDO</literal> element. The <literal>UI</literal> element
 does not have any defined attributes.
</para>

<sect3><title>The TOGGLE element</title>

<para>
 A <literal>TOGGLE</literal> element adds a check box to the commando panel.
 It must be placed inside the
 <literal>UI</literal> element. The following attributes are supported:
</para>

<itemizedlist>
<listitem><para><literal>LABEL</literal> - the check box caption. This
attribute is required.</para></listitem>
<listitem><para><literal>VARNAME</literal> - the state of the checkbox
will be stored in the BeanShell variable with this name. This attribute
is required.</para></listitem>
<listitem><para><literal>DEFAULT</literal> - The default value; this
should be either <quote>TRUE</quote> or <quote>FALSE</quote>.</para></listitem>
<listitem><para><literal>EVAL</literal> - The default value will be the
result of evaluating this BeanShell script. The script must return a
boolean value. Note that only one of
<literal>DEFAULT</literal> and <literal>EVAL</literal> should be
specified.</para></listitem>
</itemizedlist>

<para>
 Here is an example <literal>TOGGLE</literal> element:
</para>

<programlisting><![CDATA[<TOGGLE LABEL="Ignore case" VARNAME="ignoreCase" />]]></programlisting>
</sect3>

<sect3><title>The ENTRY element</title>

<para>
 An <literal>ENTRY</literal> element adds a text field to the commando panel.
 It must be placed inside the
 <literal>UI</literal> element. The following attributes are supported:
</para>

<itemizedlist>
<listitem><para><literal>LABEL</literal> - the text field's caption. This
attribute is required.</para></listitem>
<listitem><para><literal>VARNAME</literal> - the contents of the text field
will be stored in the BeanShell variable with this name. This attribute
is required.</para></listitem>
<listitem><para><literal>DEFAULT</literal> - The default contents of the
text field.</para></listitem>
<listitem><para><literal>EVAL</literal> - The default content will be the
result of evaluating this BeanShell script. The script must return a
string value. Note that only one of
<literal>DEFAULT</literal> and <literal>EVAL</literal> should be
specified.</para></listitem>
</itemizedlist>

<para>
 Here is an example <literal>ENTRY</literal> element:
</para>

<programlisting><![CDATA[<ENTRY LABEL="File name" VARNAME="file"
   EVAL="buffer.getPath()" />]]></programlisting>
</sect3>

<sect3><title>The CHOICE element</title>

<para>
 A <literal>CHOICE</literal> element adds a combo box to the commando panel.
 It must be placed inside the
 <literal>UI</literal> element. The following attributes are supported:
</para>

<itemizedlist>
<listitem><para><literal>LABEL</literal> - the combo box caption. This
attribute is required.</para></listitem>
<listitem><para><literal>VARNAME</literal> - the selected option
will be stored in the BeanShell variable with this name. This attribute
is required.</para></listitem>
<listitem><para><literal>DEFAULT</literal> - The initially selected
option of the
text field.</para></listitem>
<listitem><para><literal>EVAL</literal> - The initially selected
option will be the
result of evaluating this BeanShell script. The script must return a
string value. Note that only one of
<literal>DEFAULT</literal> and <literal>EVAL</literal> should be
specified.</para></listitem>
</itemizedlist>

<para>
 Possible options are specified in <literal>OPTION</literal> elements
 inside the <literal>CHOICE</literal> element. Here is an example
 <literal>CHOICE</literal> element:
</para>

<programlisting><![CDATA[<CHOICE LABEL="Output format" VARNAME="output"
   DEFAULT="unified">
   <OPTION LABEL="Brief" VALUE="brief" />
   <OPTION LABEL="Context" VALUE="context" />
   <OPTION LABEL="ED script" VALUE="ed" />
   <OPTION LABEL="RCS" VALUE="rcs" />
   <OPTION LABEL="Side by side" VALUE="sideBySide" />
   <OPTION LABEL="Unified" VALUE="unified" />
</CHOICE>]]></programlisting>

</sect3>

<sect3><title>The CAPTION element</title>

<para>
 A <literal>CAPTION</literal> element adds a labeled box to the commando panel
 that other UI elements can be added to.
 It must be placed inside the
 <literal>UI</literal> element. The only defined attribute is
 <literal>LABEL</literal>. It is required.
</para>

<para>
 Any UI control can be placed inside the <literal>CAPTION</literal>
 element.
</para>

<para>
 Here is an example of the <literal>CAPTION</literal> element:
</para>

<programlisting><![CDATA[<CAPTION LABEL="File specification">

  <ENTRY LABEL="Original file" VARNAME="from"
   EVAL="buffer.getPath() + '~'" />
  <ENTRY LABEL="Changed file" VARNAME="to"
   EVAL="buffer.getPath()" />

  <TOGGLE LABEL="Recursively compare directories"
   VARNAME="recursive" />
  <ENTRY LABEL="Ignore files regexp" VARNAME="ignore" />

</CAPTION>]]></programlisting>

</sect3>

</sect2>

<sect2><title>The COMMAND element</title>

<para>
 One or more <literal>COMMAND</literal> elements can be defined inside the
 <literal>COMMANDO</literal> element. Each <literal>COMMAND</literal> element
 defines a command to execute. The following attributes are supported:
</para>

<itemizedlist>
<listitem><para><literal>CONFIRM</literal> - Of <quote>TRUE</quote>, a
confirmation dialog will be shown before running this command.</para></listitem>
<listitem><para><literal>SHELL</literal> - The name of the shell to
run this command in.</para></listitem>
<listitem><para><literal>TO_BUFFER</literal> - If <quote>TRUE</quote>,
the command output will be shown in a new buffer.</para></listitem>
<listitem><para><literal>BUFFER_MODE</literal> - If <literal>TO_BUFFER</literal>
is <quote>TRUE</quote>, this parameter can be used to specify the edit mode
of the new buffer. The default value is <quote>text</quote>.</para></listitem>
</itemizedlist>

<para>
 A BeanShell script placed between the start and end <literal>COMMAND</literal>
 tags should construct a command line using the values of the variables set
 by the UI controls. The final command line should be returned by the
 last statement in the script.
</para>

<para>
 Here is an example <literal>COMMAND</literal> element:
</para>

<programlisting><![CDATA[<COMMAND CONFIRM="FALSE" SHELL="System">
    buf = new StringBuffer("jmk");

    if(!makefile.equals(""))
    {
     buf.append(" -f \"");
     buf.append(makefile);
     buf.append('"');
    }
 
    if(!targets.equals(""))
    {
     buf.append(' ');
     buf.append(targets);
    }
 
    if(debug)
     buf.append(" -d");
 
    if(norun)
     buf.append(" -n");
 
    if(output.equals("awt"))
     buf.append(" -w");
 
    if(output.equals("swing"))
     buf.append(" -s");
 
    // return value
    buf;
</COMMAND>]]></programlisting>
</sect2>

</sect1>

</chapter>

<chapter id="compile-run"><title>Invoking compilers and interpreters</title>

<para>
 <guimenu>Plugins</guimenu>&gt;<guisubmenu>Console</guisubmenu>&gt;<guimenuitem>Compile
 Current Buffer</guimenuitem> opens a mode-specific commando that should invoke a
 compiler suitable for compiling the current buffer.
</para>

<para>
 <guimenu>Plugins</guimenu>&gt;<guisubmenu>Console</guisubmenu>&gt;<guimenuitem>Run
 Current Buffer</guimenuitem> opens a mode-specific commando that should invoke
 an interpreter suitable for running the current buffer.
</para>

<para>
 Commandos can be associated with edit modes in the
 <guilabel>Console</guilabel>&gt;<guilabel>Compile &amp; Run</guilabel> pane of
 the <guimenuitem>Global Options</guimenuitem> dialog box.
</para>

</chapter>

<chapter id="macros"><title>Macros and the Console plugin</title>

<para>
 The Console plugin defines three BeanShell convenience methods that can
 be called from macros:
</para>

  <funcsynopsis>
   <funcprototype>
    <funcdef>void <function>runCommandInConsole</function></funcdef>
    <paramdef>View <parameter>view</parameter></paramdef>
    <paramdef>String <parameter>shell</parameter></paramdef>
    <paramdef>String <parameter>command</parameter></paramdef>
   </funcprototype>
  </funcsynopsis>
  <para>
   Runs <varname>command</varname> in the shell named <varname>shell</varname>.
   Will open a console window if one is not already open.
  </para>

  <funcsynopsis>
   <funcprototype>
    <funcdef>void <function>runCommandToBuffer</function></funcdef>
    <paramdef>View <parameter>view</parameter></paramdef>
    <paramdef>String <parameter>shell</parameter></paramdef>
    <paramdef>String <parameter>command</parameter></paramdef>
   </funcprototype>
  </funcsynopsis>
  <para>
   Runs <varname>command</varname> in the shell named <varname>shell</varname>,
   placing the command's output in a new buffer.
   Will open a console window if one is not already open.
  </para>

  <funcsynopsis>
   <funcprototype>
    <funcdef>void <function>runInSystemShell</function></funcdef>
    <paramdef>View <parameter>view</parameter></paramdef>
    <paramdef>String <parameter>command</parameter></paramdef>
   </funcprototype>
  </funcsynopsis>
  <para>
   Equivalent to calling:
  </para>
  <programlisting>runCommandInConsole(view,"System",command);</programlisting>

		<funcsynopsis>
   <funcprototype>
    <funcdef>void <function>waitForConsole</function></funcdef>
    <paramdef>View <parameter>view</parameter></paramdef>
   </funcprototype>
  </funcsynopsis>
  <para>
   Waits until the currently executing command finishes before returning.
		</para>

		<funcsynopsis>
   <funcprototype>
    <funcdef>void <function>getenv</function></funcdef>
    <paramdef>String <parameter>name</parameter></paramdef>
   </funcprototype>
  </funcsynopsis>
  <para>
   Returns the specified environment variable.
		</para>

		<funcsynopsis>
   <funcprototype>
    <funcdef>void <function>setenv</function></funcdef>
    <paramdef>String <parameter>name</parameter></paramdef>
    <paramdef>String <parameter>value</parameter></paramdef>
   </funcprototype>
  </funcsynopsis>
  <para>
   Sets the specified environment variable to a new value.
		</para>

<para>
 If a command is run from the console while macro recording is in progress,
 a call to one of these methods is recorded automatically.
</para>

</chapter>

<chapter id="extending"><title>Extending the Console plugin</title>

<para>
 To add a shell to the console, a plugin must specify that it requires the
 Console plugin, and register a <classname>Shell</classname> implementation
 in the plugin's <function>start()</function> method.
</para>

<note>
 <para>
  All console classes mentioned in this chapter are contained in the
  <filename>console</filename> package. So you should add an import statement
  like the following to the start of your plugin's source file(s):
 </para>
 <programlisting>import console.*;</programlisting>
</note>

<sect1><title>Specifying dependencies</title>

 <para>
  In order to give the user a helpful error message if the Console
  plugin is not installed, your plugin should specify dependency properties.
  If your plugin's core class is named <classname>MyPlugin</classname>, the
  corresponding dependencies might look like so:
 </para>

 <programlisting>plugin.MyPlugin.depend.0=jedit 04.00.08.00
plugin.MyPlugin.depend.2=plugin console.ConsolePlugin 3.2</programlisting>

 <para>
  Note that the current version of the Console plugin requires jEdit 4.0pre8
  or later, so your plugin should also require at least that jEdit version.
  If a newer version of the Console plugin is available, you can
  specify higher version numbers than in the example above. However, all the
  API calls in this chapter are guaranteed to work with the above version,
  so in most cases you shouldn't worry about it.
 </para>

</sect1>

<sect1><title>Registering plugin shells</title>

<para>
 To make the Console plugin aware of your plugin's shell, you need to call the
 <function>registerShell()</function> method of the <classname>Shell</classname>
 class in your plugin's <function>start()</function> method. The method
 prototype is as follows:
</para>

<itemizedlist>
 <listitem>
  <funcsynopsis>
  <funcprototype>
   <funcdef>public void <function>registerShell</function></funcdef>
   <paramdef>Shell <parameter>shell</parameter></paramdef>
  </funcprototype>
  </funcsynopsis>
 </listitem>
</itemizedlist>

<para>
 For example:
</para>

<programlisting>public void start()
{
    // Do some initialization...

    Shell.registerShell(new CalculatorShell());

    // Do more initialization...
}</programlisting>

<para>
 There is also a corresponding <function>unregisterShell()</function> method,
 but it is rarely used.
</para>

</sect1>

<sect1><title>The Shell interface</title>

<para>
 The <classname>Shell</classname> class is an abstract class. It contains a
 constructor that takes one parameter, which is the name of the shell to
 display in the console window and various other places:
</para>

<itemizedlist>
 <listitem>
  <funcsynopsis>
  <funcprototype>
   <funcdef>public <function>Shell</function></funcdef>
   <paramdef>String <parameter>name</parameter></paramdef>
  </funcprototype>
  </funcsynopsis>
 </listitem>
</itemizedlist>

<para>
 This class also defines the following abstract methods, which your shell must
 override:
</para>

<itemizedlist>
 <listitem>
  <funcsynopsis>
  <funcprototype>
   <funcdef>public void <function>printInfoMessage</function></funcdef>
   <paramdef>Console <parameter>console</parameter></paramdef>
  </funcprototype>
  </funcsynopsis>
  <para>
   This method is invoked by the console when the user selects the shell in
   question. It should print a short informational message, outlining the main
   capabilities of the shell.
  </para>
 </listitem>
 <listitem>
  <funcsynopsis>
  <funcprototype>
   <funcdef>public void <function>execute</function></funcdef>
   <paramdef>Console <parameter>console</parameter></paramdef>
   <paramdef>Output <parameter>output</parameter></paramdef>
   <paramdef>String <parameter>command</parameter></paramdef>
  </funcprototype>
  </funcsynopsis>
  <para>
   This method is called when the user enters a command. The complete command
   line is passed in as one string; how it is parsed is entirely up to you.
  </para>
  <para>
   The <varname>output</varname> object is either the console window itself, or
   a special <classname>BufferOutput</classname> object if the user elected to
   have the command output go into a new buffer.
  </para>
  <para>
   Note that both the <varname>console</varname> and <varname>output</varname>
   objects implement the <classname>Output</classname> interface. As a
   convention, fatal errors (for example, parse errors in shell commands)
   should be printed in the console; everything else should go to the output
   instance.
  </para>
 </listitem>
 <listitem>
  <funcsynopsis>
  <funcprototype>
   <funcdef>public void <function>stop</function></funcdef>
   <paramdef>Console <parameter>console</parameter></paramdef>
  </funcprototype>
  </funcsynopsis>
  <para>
   If your shell executes commands in a separate thread, this method should stop
   the currently running thread, if any.
  </para>
 </listitem>
 <listitem>
  <funcsynopsis>
  <funcprototype>
   <funcdef>public boolean <function>waitFor</function></funcdef>
   <paramdef>Console <parameter>console</parameter></paramdef>
  </funcprototype>
  </funcsynopsis>
  <para>
   This method should block until the currently running command has completed,
   and return <literal>true</literal> if the command executed successfully,
   <literal>false</literal> otherwise. If no command is currently running, it
   should return the status of the most recently run command.
  </para>
 </listitem>
</itemizedlist>

</sect1>

<sect1><title>The Output interface</title>

<para>
 The <classname>Output</classname> interface consists of the following two
 methods:
</para>

<itemizedlist>
 <listitem>
  <funcsynopsis>
  <funcprototype>
   <funcdef>public void <function>print</function></funcdef>
   <paramdef>Color <parameter>color</parameter></paramdef>
   <paramdef>String <parameter>msg</parameter></paramdef>
  </funcprototype>
  </funcsynopsis>
  <para>
   This method prints a message to the output instance in question. Note that
   not all outputs support color - those that don't just ignore the
   <parameter>color</parameter> parameter.
  </para>
 </listitem>
 <listitem>
  <funcsynopsis>
  <funcprototype>
   <funcdef>public void <function>commandDone</function></funcdef>
   <void />
  </funcprototype>
  </funcsynopsis>
  <para>
   Your shell should call this when a command has finished executing. The
   console window's implementation of this method stops the silly little fish
   animation.
  </para>
 </listitem>
</itemizedlist>

</sect1>

<sect1><title>Useful methods in the Console class</title>

<para>
 The following methods in the <classname>Console</classname> class can be used
 to obtain some useful default colors you can use in output:
</para>

<itemizedlist>
 <listitem>
  <funcsynopsis>
  <funcprototype>
   <funcdef>public Color <function>getErrorColor</function></funcdef>
   <void />
  </funcprototype>
  </funcsynopsis>
 </listitem>
 <listitem>
  <funcsynopsis>
  <funcprototype>
   <funcdef>public Color <function>getWarningColor</function></funcdef>
   <void />
  </funcprototype>
  </funcsynopsis>
 </listitem>
 <listitem>
  <funcsynopsis>
  <funcprototype>
   <funcdef>public Color <function>getInfoColor</function></funcdef>
   <void />
  </funcprototype>
  </funcsynopsis>
 </listitem>
</itemizedlist>

</sect1>

<sect1><title>Custom shells and error parsing</title>

<para>
 Most plugin shells will need to report compiler errors and such. To do this,
 you will first need to create and register an <classname>ErrorSource</classname>;
 see the <application>ErrorList</application> plugin documentation for details.
 You will also need to add the errors to the error source at some stage.
 There are two ways of doing this:
</para>

<itemizedlist>
 <listitem><para>Manually, by having the shell check for appropriate error
 conditions, and add errors as necessary.</para></listitem>

 <listitem><para>Alternatively, you can pass lines of output to the
 <function>parseLine()</function> method of the
 <classname>ConsolePlugin</classname>
 class (contained in the <filename>console</filename> package). This method
 will attempt to match a specified line of text against a set of error regular
 expressions (see <xref linkend="error-parsing" /> for details). The method
 prototype is as follows:
 </para>

 <itemizedlist>
  <listitem>
   <funcsynopsis>
   <funcprototype>
    <funcdef>public static int <function>parseLine</function></funcdef>
    <paramdef>View <parameter>view</parameter></paramdef>
    <paramdef>String <parameter>text</parameter></paramdef>
    <paramdef>String <parameter>directory</parameter></paramdef>
    <paramdef>DefaultErrorSource <parameter>errorSource</parameter></paramdef>
   </funcprototype>
   </funcsynopsis>
  </listitem>
 </itemizedlist>

 <para>
  The <parameter>text</parameter> parameter must be a single line of text.
  <parameter>directory</parameter> is a path name; file names in the
  output will be resolved relative to this directory. Finally,
  <parameter>errorSource</parameter> is your plugin's error source instance;
  any errors parsed from the output will be added here.
 </para>

 <para>
  The return value is one of <varname>ErrorSource.WARNING</varname>,
	 <varname>ErrorSource.ERROR</varname>, or <varname>NO_ERROR</varname>.
  If you call <function>parseLine()</function> before printing the output to
  a console window instance, you can use the <function>parseLine()</function>
  return value to choose a color to use for the output.
 </para>

</listitem>

</itemizedlist>

</sect1>

</chapter>

<appendix id="changes"><title>Change log</title>

 <itemizedlist>

  <listitem><para><emphasis role="bold">Version 3.3.1</emphasis>
   requires jEdit 4.1pre8 and the ErrorList plugin 1.2.</para>

   <itemizedlist>
    <listitem><para>Built-in command name completion now supported.</para></listitem>
    <listitem><para>File name and command completion can now be used in the console
    tool bar.</para></listitem>
    <listitem><para><command>cd -</command> now goes to the last visited
    directory.</para></listitem>
    <listitem><para>Pressing the tab key in the command input field when there
    was nothing to complete would have strange results.</para></listitem>
    <listitem><para>Updated for jEdit 4.1 icon theme.</para></listitem>
    <listitem><para>Fixed incompatibility with 4.1pre5.</para></listitem>
    <listitem><para>Fixed problems caused by having commandos with spaces in
    their names.</para></listitem>
    <listitem><para>On Windows, all commands are now run through
    <filename>cmd.exe</filename> or <filename>command.com</filename>
    (depending on the Windows version).</para></listitem>
    <listitem><para>When running on Windows ME, child processes should now
    inherit jEdit's environment variables (there is still no way to change
    them from within jEdit though).</para></listitem>
    <listitem><para>Added <function>getenv()</function> and
    <function>setenv()</function> BeanShell commands for obtaining and changing
    environment variables. You can use them in
    startup scripts, for example.</para></listitem>
    <listitem><para>Pressing <keycap>Enter</keycap> after changing a value in
    a commando dialog box text field without first moving focus out of the
    text field did not make the change take effect.
    </para></listitem>
   </itemizedlist>
  </listitem>

  <listitem><para><emphasis role="bold">Version 3.3</emphasis>
   requires jEdit 4.0final and the ErrorList plugin 1.2.</para>
   <itemizedlist>
    <listitem><para>File name completion when <keycap>Tab</keycap> key is
    pressed (Alexander Maryanovsky).</para></listitem>
    <listitem><para>Error patterns can now specify a file name value of
    <quote>$f</quote>, in which case the current buffer's path will be
    substituted.</para></listitem>
    <listitem><para>Fixed generic error pattern for g++.</para></listitem>
    <listitem><para>Fixed another possible problem if a program outputs an
    invalid line number in an error message.</para></listitem>
    <listitem><para>Removed <literal>-encoding</literal> setting from
    the Jikes commando.</para></listitem>
   </itemizedlist>
  </listitem>
  <listitem><para><emphasis role="bold">Version 3.2.1</emphasis>
   requires jEdit 4.0pre8 and the ErrorList plugin 1.2.</para>

   <itemizedlist>
    <listitem><para>The
    <guimenu>Plugins</guimenu>&gt;<guisubmenu>Console</guisubmenu>&gt;<guimenuitem>Commando</guimenuitem>
    command didn't work.</para></listitem>
    <listitem><para>The buttons on the commando tool bar didn't work.</para>
    </listitem>
    <listitem><para><guimenu>Plugins</guimenu>&gt;<guisubmenu>Console</guisubmenu>&gt;<guimenuitem>Rescan
    Commando Directory</guimenuitem> command only updated the commando tool bar,
    not the <guimenu>Console</guimenu> menu.</para>
    </listitem>
    <listitem><para>Added two new public methods --
    <function>ConsolePlugin.getSystemShellVariableValue()</function> and
    <function>ConsolePlugin.expandSystemShellVariables()</function>.</para>
    </listitem>
    <listitem><para>Fixed OpenJade error pattern.</para>
    </listitem>
    <listitem><para>Hidden files in commando directories are now ignored.</para>
    </listitem>
   </itemizedlist>
  </listitem>

  <listitem><para><emphasis role="bold">Version 3.2</emphasis>
   requires jEdit 4.0pre8 and the ErrorList plugin 1.2.</para>

   <itemizedlist>
    <listitem><para>
     Added <guimenuitem>Compile</guimenuitem> and
     <guimenuitem>Run</guimenuitem> commands. They open mode-specific commandos;
     you can customize them in the <guibutton>Compile &amp; Run</guibutton>
     option pane.
    </para></listitem>
    <listitem><para>
     Added some new pre-defined variables to the system shell -
     <varname>${c}</varname>, <varname>${BROWSER_DIR}</varname>,
     <varname>${PKG}</varname>, <varname>${PWD}</varname> and
     <varname>${ROOT}</varname>. See <xref linkend="env-vars"/> for information
     about the new variables.
    </para></listitem>
    <listitem><para>
     The behavior of the <varname>${n}</varname> built-in has changed; it now
     returns the buffer's name, without stripping the extension like it did
     previously.
    </para></listitem>
    <listitem><para>
     To change the current working directory, you can now simply enter its name;
     the <command>cd</command> is optional.
    </para></listitem>
    <listitem><para>
     In a commando file, you can now specify an edit mode of a buffer used for
     command output with the <literal>BUFFER_MODE</literal> attribute of the
     <literal>COMMAND</literal> tag.
    </para></listitem>
    <listitem><para>
     A few new commando files added: <filename>ant</filename>,
     <filename>jikes</filename>, <filename>latex</filename>,
     <filename>yap</filename>. The existing commandos have been improved
     as well.
    </para></listitem>
    <listitem><para>
     Commandos are now made into normal jEdit actions using the new
     jEdit 4.0 action set API; so they can be given shortcuts, added to the
     context menu, added to the tool bar, etc.
    </para></listitem>
    <listitem><para>
     Previously, lines of output would only be checked against warning regexps
     if they already matched an error regexp. This didn't work for some
     compilers where the warnings are not of the same form as errors, so this
     behavior has been changed.
    </para></listitem>
    <listitem><para>
     Moved custom <function>print()</function> BeanShell function from jEdit's
     <filename>jedit.bsh</filename> script to the Console plugin, since the
     editor core should not know about implementation specifics of plugins.
    </para></listitem>
    <listitem><para>
     Fixed possible NullPointerException when invoking the
     <guimenuitem>Commando</guimenuitem> command for the first time.
    </para></listitem>
    <listitem><para>
     Fixed NullPointerException when running a process after a currently-running
     one was detached.
    </para></listitem>
    <listitem><para>
     Changing the console font didn't take effect until jEdit was restarted.
    </para></listitem>
    <listitem><para>
     If a compiler error message had a line number of '0', the error parsing
     would throw an exception.
    </para></listitem>
    <listitem><para>
     Fixed problems that would prevent the insertion of <varname>$</varname>
     and <varname>%%</varname> literally in system shell command lines.
    </para></listitem>
    <listitem><para>
     Removed code specific to JDK 1.1 and 1.2.
    </para></listitem>
   </itemizedlist>
  </listitem>

  <listitem><para><emphasis role="bold">Version 3.1</emphasis>
   requires jEdit 4.0pre1 and the ErrorList plugin 1.2.</para>

   <itemizedlist>
    <listitem><para>
     Updated for jEdit 4.0 API changes.
    </para></listitem>
    <listitem><para>
     New <function>waitForConsole()</function> BeanShell command.
    </para></listitem>
    <listitem><para>
     Updated error patterns.
    </para></listitem>
    <listitem><para>
     Changing the console font didn't work.
    </para></listitem>
    <listitem><para>
     A error message is now shown if you try to add an error pattern without
     filling in the required fields.
    </para></listitem>
   </itemizedlist>
  </listitem>

  <listitem><para><emphasis role="bold">Version 3.0.3</emphasis>
   requires jEdit 3.2pre9,
   the EditBus plugin 1.1, and the ErrorList plugin 1.1.1.</para>

   <itemizedlist>
    <listitem><para>
     There was no way to insert a literal <quote>$</quote> in the command line.
    </para></listitem>
    <listitem><para>
     Fixed a bug with the console tool bar's handling of history.
    </para></listitem>
    <listitem><para>
     Fixed many bugs in error matcher handling.
    </para></listitem>
    <listitem><para>
     <guimenuitem>Console To Front</guimenuitem> command didn't work.
    </para></listitem>
    <listitem><para>
     Ant build-file included instead of JMK makefile.
    </para></listitem>
    <listitem><para>
     Documentation is now generated with the DocBook-XSL stylesheets.
    </para></listitem>
   </itemizedlist>
  </listitem>

  <listitem><para><emphasis role="bold">Version 3.0.2</emphasis> requires jEdit 3.2pre9,
   the EditBus plugin 1.1, and the ErrorList plugin 1.1.1.</para>

   <itemizedlist>
    <listitem><para>
     Environment variables are now disabled under Windows 9x and ME due to
     Java bugs
    </para></listitem>
   </itemizedlist>
  </listitem>

  <listitem><para><emphasis role="bold">Version 3.0.1</emphasis> requires jEdit 3.2pre9,
   the EditBus plugin 1.1, and the ErrorList plugin 1.1.1.</para>

   <itemizedlist>
    <listitem><para>
     <guimenuitem>Console To Front</guimenuitem> action didn't work
    </para></listitem>
    <listitem><para>
     <function>runCommandInConsole()</function>,
     <function>runCommandToBuffer()</function> BeanShell methods didn't work
    </para></listitem>
    <listitem><para>
     If a command emitted multiple-line error messages, the last error wasn't
     added to the error list
    </para></listitem>
    <listitem><para>
     <command>%pushd</command> was broken
    </para></listitem>
    <listitem><para>
     Basic documentation on creating commando files written
    </para></listitem>
   </itemizedlist>
  </listitem>

  <listitem><para><emphasis role="bold">Version 3.0</emphasis> requires jEdit 3.2pre9,
   the EditBus plugin 1.1, and the ErrorList plugin 1.1.1.</para>

   <itemizedlist>
    <listitem><para>
     Compatibility fixes for jEdit 3.2
    </para></listitem>

    <listitem><para>
     Now loads a BeanShell code snippet on startup,
     with <function>runCommandInConsole()</function>
     and <function>runCommandToBuffer()</function>
     methods for macros
    </para></listitem>

    <listitem><para>
     Shell interface changed; you will need to install a new version of the
     JCompiler plugin if you use it
    </para></listitem>

    <listitem><para>
     The current directory is now set on a per-console, rather than global, basis
    </para></listitem>

    <listitem><para>
     Each console can run its own process. Processes can also be started in
     the background (ie, with no associated console)
     by appending "&amp;" to the command string
    </para></listitem>

    <listitem><para>
     Process output can now be redirected to a buffer
    </para></listitem>

    <listitem><para>
     Long lines in command output no longer cause problems and slow everything
     down (Dirk Moebius)
    </para></listitem>

    <listitem><para>
     <guimenuitem>Console to Front</guimenuitem> action added, it displays the
     console if not already open and sets keyboard focus to the input text field.
     Replaces 'Go to Console' macro in jEdit
    </para></listitem>

    <listitem><para>
     <guimenuitem>Run Last Command</guimenuitem> action added, it runs the most
     recently run command. Replaces <guimenuitem>Run Last Command</guimenuitem>
     macro in jEdit.
    </para></listitem>

    <listitem><para>
     Multi-line error patterns are now supported
    </para></listitem>

    <listitem><para>
     Error patterns are now stored in a more reliable manner
    </para></listitem>

    <listitem><para>
     <varname>$varname</varname>, <varname>${varname}</varname> and
     <varname>%varname%</varname> can be used to insert contents of
     environment variable <varname>varname</varname> in command string
    </para></listitem>

    <listitem><para>
     Environment variables can be changed with <filename>%set</filename>,
     <filename>%unset</filename>, built-ins; run
     <filename>%env</filename> to see a list
    </para></listitem>

    <listitem><para>
     On Unix and Windows NT/2000, environment variables are obtained using
     system-specific
     means and passed to child processes
    </para></listitem>

    <listitem><para>
     Error patterns can now define a warning regexp. Previously, the code to
     determine of an error is a warning was hard-coded to check if the error
     contained the string "warning" or "caution"
    </para></listitem>

    <listitem><para>
     <quote>Commando</quote> feature creates graphical front-ends to
     command-line tools from an XML file.
    </para></listitem>

   </itemizedlist>
  </listitem>

 </itemizedlist>

</appendix>

</book>
