<?xml version="1.0" ?>

<!-- This was based around Sun javac 1.3.1. -->

<!DOCTYPE COMMANDO SYSTEM "commando.dtd">

<COMMANDO>
	<UI>
		<CAPTION LABEL="Source file(s)">

		<FILE_ENTRY LABEL="Source file(s)" VARNAME="source"
			EVAL="buffer.getPath()" />

		</CAPTION>

		<CAPTION LABEL="Paths">

		<!-- <ENTRY LABEL="Boot class path" VARNAME="bootclasspath"/> -->
		<HIST_ENTRY LABEL="Class path" VARNAME="classpath_env"
			EVAL="jEdit.getProperty(&quot;CLASSPATH&quot;, &quot;&quot;);" />
		<HIST_ENTRY LABEL="Source path" VARNAME="sourcepath"
			EVAL="getProjectRoot(view, buffer)" />
		<DIR_ENTRY LABEL="Extension directory" VARNAME="extdirs" />
		<DIR_ENTRY LABEL="Output directory" VARNAME="outputpath" />

		</CAPTION>

		<CAPTION LABEL="Compilation flags">

		<TOGGLE LABEL="Generate debug info" VARNAME="debug" />
		<TOGGLE LABEL="Optimize" VARNAME="optimize" />
		<TOGGLE LABEL="Show warnings" VARNAME="warn" DEFAULT="TRUE" />
		<TOGGLE LABEL="Show deprecation" VARNAME="deprecation" DEFAULT="TRUE" />
		<!-- <TOGGLE LABEL="Verbose compile messages" VARNAME="verbose" /> -->
		<HIST_ENTRY LABEL="Source file encoding" VARNAME="encoding"
			EVAL="buffer.getProperty(Buffer.ENCODING)" />

		</CAPTION>
	</UI>

	<COMMANDS>
		<COMMAND SHELL="System" CONFIRM="FALSE">
			buf = new StringBuffer();
			buf.append("javac");
			
			jEdit.setProperty("CLASSPATH", classpath_env);
			setenv("CLASSPATH", classpath_env);
			classpath = getBufferClassPath(buffer);

			/* if(!bootclasspath.equals(""))
			{
				buf.append(" -bootclasspath \"");
				buf.append(bootclasspath);
				buf.append('"');
			} */

			if(!classpath.equals(""))
			{
				buf.append(" -classpath \"");
				buf.append(classpath);
				buf.append('"');
			}

			if(!sourcepath.equals(""))
			{
				buf.append(" -sourcepath \"");
				buf.append(sourcepath);
				buf.append('"');
			}

			if(!extdirs.equals(""))
			{
				buf.append(" -extdirs \"");
				buf.append(extdirs);
				buf.append('"');
			}

			if(!outputpath.equals(""))
			{
				buf.append(" -d \"");
				buf.append(outputpath);
				buf.append('"');
			}

			if(debug)
				buf.append(" -g");

			if(optimize)
				buf.append(" -O");

			if(!warn)
				buf.append(" -nowarn");

			if(deprecation)
				buf.append(" -deprecation");

			/* if(verbose)
				buf.append(" -verbose"); */

			if(!encoding.equals(""))
			{
				buf.append(" -encoding ");
				buf.append(encoding);
			}

			buf.append(" \"");
			buf.append(source);
			buf.append('"');

			// return value
			buf.toString();
		</COMMAND>
	</COMMANDS>
</COMMANDO>
