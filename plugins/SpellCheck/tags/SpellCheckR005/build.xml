<?xml version="1.0"?>
<!-- :tabSize=4:indentSize=4:noTabs=false: -->

<!-- This is a build.xml file for building the SpellCheck plugin.     -->
<!--                                                                  -->
<!-- The 'dist' target compiles the plugin, creates the documentation -->
<!--      and the SpellCheck.jar file.                                -->
<!-- Note that this build file uses ../build-support,                 -->
<!-- available from jedit source repository                           -->
<!-- $Id$ - $Revision                                                 -->
<project name="SpellCheck" default="dist" basedir=".">

	<property name="user-doc.xml" location= "users-guide.xml"/>
	
	<!-- where the source code lives -->
	<property name="src.dir" value="src/main"/>

	<!-- separate dir for test code (see test.compile) -->
	<property name="src.test.dir" value="src/test"/>

	
	<!-- for build-support location -->
	<property file="../build.properties"/>
	<!-- build support -->
	<import file="${build.support}/plugin-build.xml" />

	<!-- TODO: put this in properties -->
	<path id="fest.class.path">
			<pathelement location="lib/fest-swing-1.0a1.jar"/>
			<pathelement location="lib/fest-util-0.4.jar"/>
			<pathelement location="lib/fest-reflect-0.4.jar"/>
			<pathelement location="lib/fest-assert-1.0a1.jar"/>
	</path>
	
	<!-- TODO: make use of recursive dependencies build -->
	<path id="plugins.class.path">
		<pathelement location="${jedit.jars.dir}/ErrorList.jar"/>
		<pathelement location="${jedit.jars.dir}/CommonControls.jar"/>
		<pathelement location="${jedit.jars.dir}/kappalayout.jar"/>
	</path>
	
	<!-- consists in previously defined paths -->
	<path id="project.class.path">
		<path refid="plugins.class.path"/>
		<path refid="fest.class.path"/>
	</path>
	
	<!-- where to put tests results -->
    <property name="build.tests"  value="${build.dir}/tests" />

	<!-- I use a separate target to build the tests -->
	<selector id="compileFiles">
        <filename name="**/*.java" />
    </selector>

	<target name="test.compile"
		description="Compile the plugin's test classes"
		depends="compile">

        <mkdir dir="${build.classes}" />
        <jp.javac>
            <src location="${src.test.dir}" />
			<selector refid="compileFiles"/>
        </jp.javac>

    </target>

	<!-- This selector controls which tests to run.
		 The class cswilly/spell/Test is indeed not a test, so it's deactivated.
		 Only SpellCheckPluginTest is effective, for the moment.
	  -->
	<selector id="junit.testcases">
		<and>
		<!--<or>-->
        <filename name="cswilly/**/*Test.java" />
		<!--<filename name="**/SpellCheckOptionPaneTest.java" />-->
		<!--<filename name="**/SpellCheckPluginTest.java" />-->
		<!--<filename name="cswilly/**/InjEditTestNotifier.java" />-->
		<!--</or>-->
		<not><filename name="cswilly/spell/Test.java"/></not>
		</and>
    </selector>

	<!-- for junit tests -->
	<property name="unit.test.target" value="test-junit"/>

    <!-- {{{ Target: test-junit============================ -->
	<!-- started as a copy of plugin-build.xml, but added system properties,
	     batch-processing.
	  -->
    <target name="test-junit"
            description="Runs the plugin's jUnit tests."
			depends="test.prepare">
        <echo message="Running tests..."/>
		
        <junit printsummary="${junit.printsummary}"
                haltonfailure="${junit.haltonfailure}" showoutput="${junit.showoutput}"
				fork="yes">

			<sysproperty key="test-jedit.settings" path="${build.dir}/settings"/>
			<sysproperty key="test-jedit.aspell-exe" path="/opt/local/bin/aspell"/>
			<sysproperty key="test-tests.dir" path="tests"/>
			
			<sysproperty key="jedit.home" path="${jedit.install.dir}"/>

            <classpath>
                <pathelement location="${junit.jar}" />
				
				<!-- for junit annotations -->
                <pathelement location="${hamcrest.jar}" />
				
                <pathelement location="${build.classes}" />
                <path refid="default.class.path" />
                <path refid="project.class.path" />
            </classpath>

            <batchtest todir="${build.tests}">
                <fileset dir="${src.test.dir}">
                  <selector refid="junit.testcases"/>
                </fileset>
           </batchtest>
           <formatter type="brief"/>
        </junit>

    </target>
    <!-- ===============================================}}} -->

	<target name="test.prepare"
		description="creates fresh jedit settings directory for tests"
		depends="test.compile">
        <mkdir dir="${build.tests}"/>
		<delete dir="${build.dir}/settings"/>
		<copy todir="${build.dir}/settings">
			<fileset dir="tests/settings"/>
		</copy>
		<antcall target="build">
			<param name="want-to-test" value="yes"/>
		</antcall>
		<echo message="Preparing tests"/>

		<copy todir="${build.dir}/settings/jars">
			<fileset dir="${install.dir}">
			<filename name="${ant.project.name}.jar"/>
			</fileset>
			<path refid="project.class.path"/>
			<flattenmapper/>
		</copy>
	</target>	

	<!-- remove test classes from build directory.
	     The property 'want-to-test' is to protect test.prepare which
		 needs these classes !
	  -->
	<target name="build.prepare"
		depends="compile"
		description="Remove Unit-Tests from the build classes"
		unless="want-to-test">
		<echo message="Removing test classes.."/>
		<delete dir="${build.classes}">
			<and>
			<filename name="**/*Test*.class"/>
			<not><filename name="cswilly/spell/Test.class"/></not>
			</and>
		</delete>
	</target>
</project>

