/* The following code was generated by JFlex 1.4.3 on 19/10/10 14:36 */

package gatchan.highlight.color;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19/10/10 14:36 from the specification file
 * <tt>Colors.flex</tt>
 */
class FlexColorScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\26\0\1\0\2\0\1\12\14\0\1\14\11\13\7\0"+
    "\1\10\1\17\1\11\1\30\1\5\1\34\1\26\1\2\1\3\1\35"+
    "\1\27\1\16\1\23\1\21\1\31\1\7\1\22\1\24\1\6\1\4"+
    "\1\20\1\32\1\1\1\15\1\33\1\25\6\0\1\10\1\17\1\11"+
    "\1\30\1\5\1\34\1\26\1\2\1\3\1\35\1\27\1\16\1\23"+
    "\1\21\1\31\1\7\1\22\1\24\1\6\1\4\1\20\1\32\1\1"+
    "\1\15\1\33\1\25\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\27\1\112\0\1\2\65\0\1\3\35\0\1\4"+
    "\14\0\1\5\1\0\1\6\1\0\1\7\2\0\1\10"+
    "\4\0\1\11\7\0\1\11\3\0\1\12\10\0\1\13"+
    "\3\0\1\14\14\0\1\15\1\16\17\0\1\17\1\20"+
    "\4\0\1\21\30\0\1\22\4\0\1\23\4\0\1\24"+
    "\6\0\1\25\1\26\3\0\1\27\14\0\1\30\1\0"+
    "\1\31\16\0\1\32\15\0\1\33\2\0\1\34\1\35"+
    "\1\36\4\0\1\37\13\0\1\40\26\0\1\41\10\0"+
    "\1\42\34\0\1\43\1\44\1\45\1\46\5\0\1\47"+
    "\2\0\1\50\11\0\1\51\15\0\1\52\2\0\1\53"+
    "\37\0\1\54\7\0\1\55\11\0\1\56\12\0\1\57"+
    "\7\0\1\60\3\0\1\61\1\62\22\0\1\63\1\0"+
    "\1\64\20\0\1\65\20\0\1\66\7\0\1\67\4\0"+
    "\1\70\1\71\2\0\1\72\17\0\1\73\1\74\1\75"+
    "\3\0\1\76\1\77\1\100\2\0\1\101\3\0\1\102"+
    "\3\0\1\103\1\104\1\0\1\105\5\0\1\106\1\0"+
    "\1\107\1\110\1\0\1\111\3\0\1\112\3\0\1\113"+
    "\1\0\1\114\1\115\12\0\1\116\1\117\1\0\1\120"+
    "\1\0\1\121\6\0\1\122\1\0\1\123\5\0\1\124"+
    "\1\125\1\0\1\126\2\0\1\127\1\0\1\130\1\0"+
    "\1\131\3\0\1\132\1\0\1\133\1\134\6\0\1\135"+
    "\1\136\5\0\1\137\10\0\1\140\2\0\1\141\4\0"+
    "\1\142\5\0\1\143\1\144\1\145\1\146\3\0\1\147"+
    "\1\150\7\0\1\151\3\0\1\152\3\0\1\153\11\0"+
    "\1\154\1\155\4\0\1\156\2\0\1\157\1\160\1\161"+
    "\3\0\1\162\4\0\1\163\1\0\1\164\2\0\1\165"+
    "\4\0\1\166\1\0\1\167\2\0\1\170\4\0\1\171"+
    "\1\172\1\173\2\0\1\174\2\0\1\175\7\0\1\176"+
    "\1\177\1\200\1\201\1\0\1\202\1\203\1\204\1\0"+
    "\1\205\1\0\1\206\4\0\1\207\1\0\1\210\1\0"+
    "\1\211\1\0\1\212\2\0\1\213\1\0\1\214\2\0"+
    "\1\215";

  private static int [] zzUnpackAction() {
    int [] result = new int[893];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\170\0\226\0\264\0\322"+
    "\0\360\0\u010e\0\u012c\0\u014a\0\u0168\0\u0186\0\u01a4\0\u01c2"+
    "\0\u01e0\0\u01fe\0\u021c\0\u023a\0\u0258\0\u0276\0\u0294\0\u02b2"+
    "\0\u02d0\0\u02ee\0\u030c\0\u032a\0\u0348\0\u0366\0\u0384\0\u03a2"+
    "\0\u03c0\0\u03de\0\u03fc\0\u041a\0\u0438\0\u0456\0\u0474\0\u0492"+
    "\0\u04b0\0\u04ce\0\u04ec\0\u050a\0\u0528\0\u0546\0\u0564\0\u0582"+
    "\0\u05a0\0\u05be\0\u05dc\0\u05fa\0\u0618\0\u0636\0\u0654\0\u0672"+
    "\0\u0690\0\u06ae\0\u06cc\0\u06ea\0\u0708\0\u0726\0\u0744\0\u0762"+
    "\0\u0780\0\u079e\0\u07bc\0\u07da\0\u07f8\0\u0816\0\u0834\0\u0852"+
    "\0\u0870\0\u088e\0\u08ac\0\u08ca\0\u08e8\0\u0906\0\u0924\0\u0942"+
    "\0\u0960\0\u097e\0\u099c\0\u09ba\0\u09d8\0\u09f6\0\u0a14\0\u0a32"+
    "\0\u0a50\0\u0a6e\0\u0a8c\0\u0aaa\0\u0ac8\0\u0ae6\0\u0b04\0\u0b22"+
    "\0\u0b40\0\u0b5e\0\36\0\u0b7c\0\u0b9a\0\u0bb8\0\u0bd6\0\u0bf4"+
    "\0\u0c12\0\u0c30\0\u0c4e\0\u0c6c\0\u0c8a\0\u0ca8\0\u0cc6\0\u0ce4"+
    "\0\u0d02\0\u0d20\0\u0d3e\0\u0d5c\0\u0d7a\0\u0d98\0\u0db6\0\u0dd4"+
    "\0\u0df2\0\u0e10\0\u0e2e\0\u0e4c\0\u0e6a\0\u0e88\0\u0ea6\0\u0ec4"+
    "\0\u0ee2\0\u0f00\0\u0f1e\0\u0f3c\0\u0f5a\0\u0f78\0\u0f96\0\u0fb4"+
    "\0\u0fd2\0\u0ff0\0\u100e\0\u102c\0\u104a\0\u1068\0\u1086\0\u10a4"+
    "\0\u10c2\0\u10e0\0\u10fe\0\u111c\0\u113a\0\u1158\0\u1176\0\u1194"+
    "\0\36\0\u11b2\0\u11d0\0\u11ee\0\u120c\0\u122a\0\u1248\0\u1266"+
    "\0\u1284\0\u12a2\0\u12c0\0\u12de\0\u12fc\0\u131a\0\u1338\0\u1356"+
    "\0\u1374\0\u1392\0\u13b0\0\u13ce\0\u13ec\0\u140a\0\u1428\0\u1446"+
    "\0\u1464\0\u1482\0\u14a0\0\u14be\0\u14dc\0\u14fa\0\36\0\u1518"+
    "\0\u1536\0\u1554\0\u1572\0\u1590\0\u15ae\0\u15cc\0\u15ea\0\u1608"+
    "\0\u1626\0\u1644\0\u1662\0\36\0\u1680\0\36\0\u169e\0\36"+
    "\0\u16bc\0\u16da\0\36\0\u16f8\0\u1716\0\u1734\0\u1752\0\u1770"+
    "\0\u178e\0\u17ac\0\u17ca\0\u17e8\0\u1806\0\u1824\0\u1842\0\36"+
    "\0\u1860\0\u187e\0\u189c\0\u18ba\0\u18d8\0\u18f6\0\u1914\0\u1932"+
    "\0\u1950\0\u196e\0\u198c\0\u19aa\0\u19c8\0\u19e6\0\u1a04\0\u1a22"+
    "\0\36\0\u1a40\0\u1a5e\0\u1a7c\0\u1a9a\0\u1ab8\0\u1ad6\0\u1af4"+
    "\0\u1b12\0\u1b30\0\u1b4e\0\u1b6c\0\u1b8a\0\36\0\u1ba8\0\u1bc6"+
    "\0\u1be4\0\u1c02\0\u1c20\0\u1c3e\0\u1c5c\0\u1c7a\0\u1c98\0\u1cb6"+
    "\0\u1cd4\0\u1cf2\0\u1d10\0\u1d2e\0\u1d4c\0\u1d6a\0\u1d88\0\36"+
    "\0\u1da6\0\u1dc4\0\u1de2\0\u1e00\0\36\0\u1e1e\0\u1e3c\0\u1e5a"+
    "\0\u1e78\0\u1e96\0\u1eb4\0\u1ed2\0\u1ef0\0\u1f0e\0\u1f2c\0\u1f4a"+
    "\0\u1f68\0\u1f86\0\u1fa4\0\u1fc2\0\u1fe0\0\u1ffe\0\u201c\0\u203a"+
    "\0\u2058\0\u2076\0\u2094\0\u20b2\0\u20d0\0\36\0\u20ee\0\u210c"+
    "\0\u212a\0\u2148\0\36\0\u2166\0\u2184\0\u21a2\0\u21c0\0\36"+
    "\0\u21de\0\u21fc\0\u221a\0\u2238\0\u2256\0\u2274\0\36\0\36"+
    "\0\u2292\0\u22b0\0\u22ce\0\36\0\u22ec\0\u230a\0\u2328\0\u2346"+
    "\0\u2364\0\u2382\0\u23a0\0\u23be\0\u23dc\0\u23fa\0\u2418\0\u2436"+
    "\0\u2454\0\u2472\0\36\0\u2490\0\u24ae\0\u24cc\0\u24ea\0\u2508"+
    "\0\u2526\0\u2544\0\u2562\0\u2580\0\u259e\0\u25bc\0\u25da\0\u25f8"+
    "\0\u2616\0\u2634\0\u2652\0\u2670\0\u268e\0\u26ac\0\u26ca\0\u26e8"+
    "\0\u2706\0\u2724\0\u2742\0\u2760\0\u277e\0\u279c\0\u27ba\0\36"+
    "\0\u27d8\0\u27f6\0\36\0\36\0\36\0\u2814\0\u2832\0\u2850"+
    "\0\u286e\0\36\0\u288c\0\u28aa\0\u28c8\0\u28e6\0\u2904\0\u2922"+
    "\0\u2940\0\u295e\0\u297c\0\u299a\0\u29b8\0\36\0\u29d6\0\u29f4"+
    "\0\u2a12\0\u2a30\0\u2a4e\0\u2a6c\0\u2a8a\0\u2aa8\0\u2ac6\0\u2ae4"+
    "\0\u2b02\0\u2b20\0\u2b3e\0\u2b5c\0\u2b7a\0\u2b98\0\u2bb6\0\u2bd4"+
    "\0\u2bf2\0\u2c10\0\u2c2e\0\u2c4c\0\36\0\u2c6a\0\u2c88\0\u2ca6"+
    "\0\u2cc4\0\u2ce2\0\u2d00\0\u2d1e\0\u2d3c\0\36\0\u2d5a\0\u2d78"+
    "\0\u2d96\0\u2db4\0\u2dd2\0\u2df0\0\u2e0e\0\u2e2c\0\u2e4a\0\u2e68"+
    "\0\u2e86\0\u2ea4\0\u2ec2\0\u2ee0\0\u2efe\0\u2f1c\0\u2f3a\0\u2f58"+
    "\0\u2f76\0\u2f94\0\u2fb2\0\u2fd0\0\u2fee\0\u300c\0\u302a\0\u3048"+
    "\0\u3066\0\u3084\0\u30a2\0\36\0\36\0\u30c0\0\u30de\0\u30fc"+
    "\0\u311a\0\u3138\0\u3156\0\36\0\u3174\0\u3192\0\36\0\u31b0"+
    "\0\u31ce\0\u31ec\0\u320a\0\u3228\0\u3246\0\u3264\0\u3282\0\u32a0"+
    "\0\36\0\u32be\0\u32dc\0\u32fa\0\u3318\0\u3336\0\u3354\0\u3372"+
    "\0\u3390\0\u33ae\0\u33cc\0\u33ea\0\u3408\0\u3426\0\36\0\u3444"+
    "\0\u3462\0\36\0\u3480\0\u349e\0\u34bc\0\u34da\0\u34f8\0\u3516"+
    "\0\u3534\0\u3552\0\u3570\0\u358e\0\u35ac\0\u35ca\0\u35e8\0\u3606"+
    "\0\u3624\0\u3642\0\u3660\0\u367e\0\u369c\0\u36ba\0\u36d8\0\u36f6"+
    "\0\u3714\0\u3732\0\u3750\0\u376e\0\u378c\0\u37aa\0\u37c8\0\u37e6"+
    "\0\u3804\0\36\0\u3822\0\u3840\0\u385e\0\u387c\0\u389a\0\u38b8"+
    "\0\u38d6\0\36\0\u38f4\0\u3912\0\u3930\0\u394e\0\u396c\0\u398a"+
    "\0\u39a8\0\u39c6\0\u39e4\0\36\0\u3a02\0\u3a20\0\u3a3e\0\u3a5c"+
    "\0\u3a7a\0\u3a98\0\u3ab6\0\u3ad4\0\u3af2\0\u3b10\0\36\0\u3b2e"+
    "\0\u3b4c\0\u3b6a\0\u3b88\0\u3ba6\0\u3bc4\0\u3be2\0\36\0\u3c00"+
    "\0\u3c1e\0\u3c3c\0\36\0\36\0\u3c5a\0\u3c78\0\u3c96\0\u3cb4"+
    "\0\u3cd2\0\u3cf0\0\u3d0e\0\u3d2c\0\u3d4a\0\u3d68\0\u3d86\0\u3da4"+
    "\0\u3dc2\0\u3de0\0\u3dfe\0\u3e1c\0\u3e3a\0\u3e58\0\36\0\u3e76"+
    "\0\36\0\u3e94\0\u3eb2\0\u3ed0\0\u3eee\0\u3f0c\0\u3f2a\0\u3f48"+
    "\0\u3f66\0\u3f84\0\u3fa2\0\u3fc0\0\u3fde\0\u3ffc\0\u401a\0\u4038"+
    "\0\u4056\0\u4074\0\u4092\0\u40b0\0\u40ce\0\u40ec\0\u410a\0\u4128"+
    "\0\u4146\0\u4164\0\u4182\0\u41a0\0\u41be\0\u41dc\0\u41fa\0\u4218"+
    "\0\u4236\0\u4254\0\36\0\u4272\0\u4290\0\u42ae\0\u42cc\0\u42ea"+
    "\0\u4308\0\u4326\0\36\0\u4344\0\u4362\0\u4380\0\u439e\0\36"+
    "\0\36\0\u43bc\0\u43da\0\36\0\u43f8\0\u4416\0\u4434\0\u4452"+
    "\0\u4470\0\u448e\0\u44ac\0\u44ca\0\u44e8\0\u4506\0\u4524\0\u4542"+
    "\0\u4560\0\u457e\0\u459c\0\36\0\36\0\36\0\u45ba\0\u45d8"+
    "\0\u45f6\0\36\0\36\0\36\0\u4614\0\u4632\0\36\0\u4650"+
    "\0\u466e\0\u468c\0\36\0\u46aa\0\u46c8\0\u46e6\0\36\0\36"+
    "\0\u4704\0\36\0\u4722\0\u4740\0\u475e\0\u477c\0\u479a\0\36"+
    "\0\u47b8\0\36\0\36\0\u47d6\0\36\0\u47f4\0\u4812\0\u4830"+
    "\0\36\0\u484e\0\u486c\0\u488a\0\36\0\u48a8\0\36\0\36"+
    "\0\u48c6\0\u48e4\0\u4902\0\u4920\0\u493e\0\u495c\0\u497a\0\u4998"+
    "\0\u49b6\0\u49d4\0\36\0\36\0\u49f2\0\36\0\u4a10\0\36"+
    "\0\u4a2e\0\u4a4c\0\u4a6a\0\u4a88\0\u4aa6\0\u4ac4\0\36\0\u4ae2"+
    "\0\36\0\u4b00\0\u4b1e\0\u4b3c\0\u4b5a\0\u4b78\0\36\0\36"+
    "\0\u4b96\0\36\0\u4bb4\0\u4bd2\0\36\0\u4bf0\0\36\0\u4c0e"+
    "\0\36\0\u4c2c\0\u4c4a\0\u4c68\0\36\0\u4c86\0\36\0\36"+
    "\0\u4ca4\0\u4cc2\0\u4ce0\0\u4cfe\0\u4d1c\0\u4d3a\0\36\0\36"+
    "\0\u4d58\0\u4d76\0\u4d94\0\u4db2\0\u4dd0\0\36\0\u4dee\0\u4e0c"+
    "\0\u4e2a\0\u4e48\0\u4e66\0\u4e84\0\u4ea2\0\u4ec0\0\36\0\u4ede"+
    "\0\u4efc\0\36\0\u4f1a\0\u4f38\0\u4f56\0\u4f74\0\36\0\u4f92"+
    "\0\u4fb0\0\u4fce\0\u4fec\0\u500a\0\36\0\36\0\36\0\36"+
    "\0\u5028\0\u5046\0\u5064\0\36\0\36\0\u5082\0\u50a0\0\u50be"+
    "\0\u50dc\0\u50fa\0\u5118\0\u5136\0\36\0\u5154\0\u5172\0\u5190"+
    "\0\36\0\u51ae\0\u51cc\0\u51ea\0\36\0\u5208\0\u5226\0\u5244"+
    "\0\u5262\0\u5280\0\u529e\0\u52bc\0\u52da\0\u52f8\0\36\0\36"+
    "\0\u5316\0\u5334\0\u5352\0\u5370\0\36\0\u538e\0\u53ac\0\36"+
    "\0\36\0\36\0\u53ca\0\u53e8\0\u5406\0\36\0\u5424\0\u5442"+
    "\0\u5460\0\u547e\0\36\0\u549c\0\36\0\u54ba\0\u54d8\0\36"+
    "\0\u54f6\0\u5514\0\u5532\0\u5550\0\36\0\u556e\0\36\0\u558c"+
    "\0\u55aa\0\36\0\u55c8\0\u55e6\0\u5604\0\u5622\0\36\0\36"+
    "\0\36\0\u5640\0\u565e\0\36\0\u567c\0\u569a\0\36\0\u56b8"+
    "\0\u56d6\0\u56f4\0\u5712\0\u5730\0\u574e\0\u576c\0\36\0\36"+
    "\0\36\0\36\0\u578a\0\36\0\36\0\36\0\u57a8\0\36"+
    "\0\u57c6\0\36\0\u57e4\0\u5802\0\u5820\0\u583e\0\36\0\u585c"+
    "\0\36\0\u587a\0\36\0\u5898\0\36\0\u58b6\0\u58d4\0\36"+
    "\0\u58f2\0\36\0\u5910\0\u592e\0\36";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[893];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\2\1\14\1\2\1\15\1\16"+
    "\1\2\1\17\1\2\1\20\1\21\1\2\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\2\40\0\1\31"+
    "\64\0\1\32\25\0\1\33\10\0\1\34\5\0\1\35"+
    "\2\0\1\36\2\0\1\37\7\0\1\40\10\0\1\41"+
    "\7\0\1\42\1\43\1\44\1\0\1\45\1\46\5\0"+
    "\1\47\2\0\1\50\5\0\1\51\11\0\1\52\1\0"+
    "\1\53\2\0\1\54\5\0\1\55\1\0\1\56\10\0"+
    "\1\57\22\0\1\60\2\0\1\61\1\62\2\0\1\63"+
    "\12\0\1\64\5\0\1\65\13\0\1\66\4\0\1\67"+
    "\1\0\1\70\7\0\1\71\2\0\2\71\1\0\2\71"+
    "\2\0\1\71\10\0\1\71\3\0\1\71\16\0\1\72"+
    "\23\0\1\73\1\0\1\74\2\0\1\75\30\0\1\76"+
    "\1\0\1\77\10\0\1\100\1\0\1\101\3\0\1\102"+
    "\21\0\1\103\30\0\1\104\1\0\1\105\2\0\1\106"+
    "\20\0\1\107\11\0\1\110\23\0\1\111\6\0\1\112"+
    "\5\0\1\113\13\0\1\114\4\0\1\115\6\0\1\116"+
    "\36\0\1\117\1\0\1\120\2\0\1\121\20\0\1\122"+
    "\22\0\1\123\5\0\1\124\14\0\1\125\37\0\1\126"+
    "\33\0\1\127\12\0\1\130\1\0\1\131\10\0\1\132"+
    "\7\0\1\133\1\0\1\134\34\0\1\135\14\0\1\136"+
    "\44\0\1\137\36\0\1\140\7\0\1\141\42\0\1\142"+
    "\46\0\1\143\40\0\1\144\34\0\1\145\17\0\1\146"+
    "\10\0\1\147\24\0\1\150\40\0\1\151\51\0\1\152"+
    "\27\0\1\153\2\0\1\154\6\0\1\155\15\0\1\156"+
    "\56\0\1\157\37\0\1\160\23\0\1\161\24\0\1\162"+
    "\13\0\1\163\20\0\1\164\6\0\1\165\37\0\1\166"+
    "\41\0\1\167\12\0\1\170\37\0\1\171\36\0\1\172"+
    "\51\0\1\173\35\0\1\174\25\0\1\175\20\0\1\176"+
    "\34\0\1\177\10\0\1\200\56\0\1\201\21\0\1\202"+
    "\32\0\1\203\2\0\2\203\1\0\2\203\2\0\1\203"+
    "\10\0\1\203\3\0\1\203\6\0\1\204\2\0\2\204"+
    "\1\0\2\204\2\0\1\204\10\0\1\204\3\0\1\204"+
    "\22\0\1\205\1\0\1\206\2\0\1\207\32\0\1\210"+
    "\13\0\1\211\30\0\1\212\11\0\1\213\32\0\1\214"+
    "\42\0\1\215\7\0\1\216\41\0\1\217\42\0\1\220"+
    "\36\0\1\221\11\0\1\222\12\0\1\223\6\0\1\224"+
    "\35\0\1\225\31\0\1\226\1\0\1\227\20\0\1\230"+
    "\54\0\1\231\13\0\1\232\24\0\1\233\33\0\1\234"+
    "\7\0\1\235\37\0\1\236\2\0\1\237\43\0\1\240"+
    "\27\0\1\241\50\0\1\242\17\0\1\243\54\0\1\244"+
    "\41\0\1\245\10\0\1\246\24\0\1\247\15\0\1\250"+
    "\1\251\55\0\1\252\22\0\1\253\43\0\1\254\42\0"+
    "\1\255\15\0\1\256\50\0\1\257\15\0\1\260\41\0"+
    "\1\261\34\0\1\262\33\0\1\263\33\0\1\264\56\0"+
    "\1\265\17\0\1\266\45\0\1\267\41\0\1\270\23\0"+
    "\1\271\46\0\1\272\46\0\1\273\10\0\1\274\36\0"+
    "\1\275\17\0\1\276\12\0\1\277\55\0\1\300\42\0"+
    "\1\301\35\0\1\302\11\0\1\303\32\0\1\304\53\0"+
    "\1\305\45\0\1\306\17\0\1\307\44\0\1\310\25\0"+
    "\1\311\32\0\1\312\53\0\1\313\21\0\1\314\56\0"+
    "\1\315\16\0\1\316\27\0\1\317\42\0\1\320\51\0"+
    "\1\321\35\0\1\322\22\0\1\323\31\0\1\324\53\0"+
    "\1\325\22\0\1\326\10\0\1\327\35\0\1\330\21\0"+
    "\1\331\2\0\2\331\1\0\2\331\2\0\1\331\10\0"+
    "\1\331\3\0\1\331\6\0\1\332\2\0\2\332\1\0"+
    "\2\332\2\0\1\332\10\0\1\332\3\0\1\332\6\0"+
    "\1\333\35\0\1\334\32\0\1\335\64\0\1\336\25\0"+
    "\1\337\21\0\1\340\52\0\1\341\41\0\1\342\20\0"+
    "\1\343\7\0\1\344\21\0\1\345\46\0\1\346\20\0"+
    "\1\347\44\0\1\350\22\0\1\351\6\0\1\352\35\0"+
    "\1\353\52\0\1\354\17\0\1\355\63\0\1\356\11\0"+
    "\1\357\41\0\1\360\57\0\1\361\12\0\1\362\33\0"+
    "\1\363\50\0\1\364\21\0\1\365\25\0\1\366\35\0"+
    "\1\366\32\0\1\367\34\0\1\370\34\0\1\371\16\0"+
    "\1\372\55\0\1\373\34\0\1\374\41\0\1\375\21\0"+
    "\1\376\40\0\1\377\16\0\1\u0100\51\0\1\u0101\35\0"+
    "\1\u0102\24\0\1\u0103\54\0\1\u0104\13\0\1\u0105\40\0"+
    "\1\u0106\35\0\1\u0107\34\0\1\u0108\34\0\1\u0109\65\0"+
    "\1\u010a\12\0\1\u010b\15\0\1\u010c\42\0\1\u010d\6\0"+
    "\1\u010e\51\0\1\u010f\21\0\1\u0110\52\0\1\u0111\21\0"+
    "\1\u0112\46\0\1\u0113\21\0\1\u0114\57\0\1\u0115\32\0"+
    "\1\u0116\45\0\1\u0117\37\0\1\u0118\20\0\1\u0119\24\0"+
    "\1\u011a\46\0\1\u011b\21\0\1\u011c\66\0\1\u011d\6\0"+
    "\1\u011e\21\0\1\u011f\3\0\1\u0120\21\0\1\u0121\24\0"+
    "\1\u0122\35\0\1\u0123\52\0\1\u0124\36\0\1\u0125\17\0"+
    "\1\u0126\34\0\1\u0127\62\0\1\u0128\10\0\1\u0129\37\0"+
    "\1\u012a\45\0\1\u012b\25\0\1\u012c\25\0\1\u012d\6\0"+
    "\1\u012e\2\0\2\u012e\1\0\2\u012e\2\0\1\u012e\10\0"+
    "\1\u012e\3\0\1\u012e\6\0\1\u012f\2\0\2\u012f\1\0"+
    "\2\u012f\2\0\1\u012f\10\0\1\u012f\3\0\1\u012f\22\0"+
    "\1\u0130\42\0\1\u0131\13\0\1\u0132\52\0\1\u0133\42\0"+
    "\1\u0134\30\0\1\u0135\34\0\1\u0136\22\0\1\u0137\57\0"+
    "\1\u0138\17\0\1\u0139\56\0\1\u013a\36\0\1\u013b\23\0"+
    "\1\u013c\51\0\1\u013d\33\0\1\u013e\13\0\1\u013f\27\0"+
    "\1\u0140\52\0\1\u0141\46\0\1\u0142\25\0\1\u0143\24\0"+
    "\1\u0144\44\0\1\u0145\34\0\1\u0146\23\0\1\u0147\37\0"+
    "\1\u0148\50\0\1\u0149\21\0\1\u014a\33\0\1\u014b\56\0"+
    "\1\u014c\17\0\1\u014d\1\u014e\32\0\1\u014f\1\0\1\u0150"+
    "\2\0\1\u0151\5\0\1\u0152\3\0\1\u0153\1\u0154\1\0"+
    "\1\u0155\1\u0156\1\0\1\u0157\1\u0158\10\0\1\u0159\35\0"+
    "\1\u015a\40\0\1\u015b\53\0\1\u015c\12\0\1\u015d\37\0"+
    "\1\u015e\61\0\1\u015f\23\0\1\u0160\26\0\1\u0161\33\0"+
    "\1\u0162\35\0\1\u0163\35\0\1\u0164\50\0\1\u0165\44\0"+
    "\1\u0166\26\0\1\u0167\45\0\1\u0168\22\0\1\u0169\50\0"+
    "\1\u016a\35\0\1\u016b\14\0\1\u016c\51\0\1\u016d\30\0"+
    "\1\u016e\23\0\1\u016f\35\0\1\u0170\56\0\1\u0171\30\0"+
    "\1\u0172\33\0\1\u0173\23\0\1\u0174\47\0\1\u0175\6\0"+
    "\1\u0176\27\0\1\u0177\24\0\1\u0178\36\0\1\u0179\45\0"+
    "\1\u017a\41\0\1\u017b\4\0\1\u017c\7\0\1\u017d\37\0"+
    "\1\u017e\54\0\1\u017f\30\0\1\u0180\36\0\1\u0181\25\0"+
    "\1\u0182\51\0\1\u0183\27\0\1\u0184\36\0\1\u0185\47\0"+
    "\1\u0186\7\0\1\u0187\50\0\1\u0188\24\0\1\u0189\2\0"+
    "\2\u0189\1\0\2\u0189\2\0\1\u0189\10\0\1\u0189\3\0"+
    "\1\u0189\6\0\1\u018a\2\0\2\u018a\1\0\2\u018a\2\0"+
    "\1\u018a\10\0\1\u018a\3\0\1\u018a\25\0\1\u018b\17\0"+
    "\1\u018c\1\u018d\1\0\1\u018e\5\0\1\u018f\6\0\1\u0190"+
    "\4\0\1\u0191\13\0\1\u0192\50\0\1\u0193\41\0\1\u0194"+
    "\12\0\1\u0195\32\0\1\u0196\36\0\1\u0197\33\0\1\u0198"+
    "\65\0\1\u0199\30\0\1\u019a\35\0\1\u019b\37\0\1\u019c"+
    "\32\0\1\u019d\33\0\1\u019e\20\0\1\u019f\37\0\1\u01a0"+
    "\53\0\1\u01a1\30\0\1\u01a2\17\0\1\u01a3\53\0\1\u01a4"+
    "\51\0\1\u01a5\23\0\1\u01a6\21\0\1\u01a7\2\0\1\u01a7"+
    "\54\0\1\u01a8\11\0\1\u01a9\52\0\1\u01aa\22\0\1\u01ab"+
    "\2\0\1\u01ac\5\0\1\u01ad\52\0\1\u01ae\20\0\1\u01af"+
    "\27\0\1\u01b0\32\0\1\u01b1\54\0\1\u01b2\4\0\1\u01b3"+
    "\6\0\1\u01b4\51\0\1\u01b5\5\0\1\u01b6\14\0\1\u01b7"+
    "\56\0\1\u01b8\41\0\1\u01b9\16\0\1\u01ba\31\0\1\u01bb"+
    "\60\0\1\u01bc\11\0\1\u01bd\32\0\1\u01be\60\0\1\u01bf"+
    "\27\0\1\u01c0\22\0\1\u019f\36\0\1\u01c1\40\0\1\u01c2"+
    "\13\0\1\u01c3\41\0\1\u01c4\13\0\1\u01c5\54\0\1\u01c6"+
    "\16\0\1\u01c7\33\0\1\u01c8\50\0\1\u01c9\35\0\1\u01ca"+
    "\24\0\1\u01cb\56\0\1\u01cc\33\0\1\u01cd\30\0\1\u01ce"+
    "\34\0\1\u01cf\43\0\1\u01d0\16\0\1\u01d1\50\0\1\u01d2"+
    "\16\0\1\u01d3\60\0\1\u01d4\16\0\1\u01d5\46\0\1\u01d6"+
    "\50\0\1\u01d7\23\0\1\u01d8\34\0\1\u01d9\24\0\1\u01da"+
    "\54\0\1\u01db\16\0\1\u01dc\40\0\1\u01dd\43\0\1\u01de"+
    "\40\0\1\u01df\32\0\1\u01e0\50\0\1\u01e1\11\0\1\u01e2"+
    "\2\0\2\u01e2\1\0\2\u01e2\2\0\1\u01e2\10\0\1\u01e2"+
    "\3\0\1\u01e2\6\0\1\u01e3\2\0\2\u01e3\1\0\2\u01e3"+
    "\2\0\1\u01e3\10\0\1\u01e3\3\0\1\u01e3\6\0\1\u01e4"+
    "\34\0\1\u01e5\1\u01e6\2\0\1\u01e7\5\0\1\u01e8\10\0"+
    "\1\u01e9\11\0\1\u01ea\63\0\1\u01eb\1\0\1\u01ec\20\0"+
    "\1\u01ed\43\0\1\u01ee\4\0\1\u01ef\11\0\1\u01f0\32\0"+
    "\1\u01f1\40\0\1\u01f2\35\0\1\u01f3\35\0\1\u01f4\61\0"+
    "\1\u01f5\35\0\1\u01f6\5\0\1\u01f7\65\0\1\u01f8\11\0"+
    "\1\u01f9\32\0\1\u01fa\37\0\1\u01fb\1\0\1\u01fc\1\u01fd"+
    "\1\u01fe\6\0\1\u01ff\11\0\1\u0200\1\u0201\13\0\1\u0202"+
    "\30\0\1\u0203\63\0\1\u0204\22\0\1\u0205\21\0\1\u0206"+
    "\64\0\1\u0207\11\0\1\u0208\54\0\1\u0209\44\0\1\u020a"+
    "\35\0\1\u020b\23\0\1\u020c\40\0\1\u020d\21\0\1\u020e"+
    "\43\0\1\u020f\27\0\1\u0210\35\0\1\u0211\45\0\1\u0212"+
    "\43\0\1\u0213\37\0\1\u0214\12\0\1\u0215\2\0\1\u0216"+
    "\43\0\1\u0217\27\0\1\u0218\30\0\1\u0219\42\0\1\u021a"+
    "\1\u021b\55\0\1\u021c\23\0\1\u021d\42\0\1\u021e\16\0"+
    "\1\u021f\54\0\1\u0220\37\0\1\u0221\12\0\1\u0222\33\0"+
    "\1\u0223\62\0\1\u0224\17\0\1\u0225\56\0\1\u0226\5\0"+
    "\1\u0227\41\0\1\u0228\36\0\1\u0229\47\0\1\u022a\33\0"+
    "\1\u022b\40\0\1\u022c\40\0\1\u022d\42\0\1\u022e\30\0"+
    "\1\u022f\31\0\1\u0230\22\0\1\u0231\2\0\1\u0231\61\0"+
    "\1\u0232\3\0\1\u0233\55\0\1\u0234\20\0\1\u0235\60\0"+
    "\1\u0236\23\0\1\u0237\35\0\1\u0238\37\0\1\u0239\16\0"+
    "\1\u023a\37\0\1\u023b\52\0\1\u023c\21\0\1\u023d\51\0"+
    "\1\u023e\44\0\1\u023f\7\0\1\u0240\41\0\1\u0241\2\0"+
    "\2\u0241\1\0\2\u0241\2\0\1\u0241\10\0\1\u0241\3\0"+
    "\1\u0241\6\0\1\u0242\35\0\1\u0243\40\0\1\u0244\43\0"+
    "\1\u0245\27\0\1\u0246\60\0\1\u0247\23\0\1\u0248\40\0"+
    "\1\u0249\21\0\1\u024a\45\0\1\u024b\22\0\1\u024c\2\0"+
    "\1\u024d\43\0\1\u024e\35\0\1\u024f\22\0\1\u0250\37\0"+
    "\1\u0251\54\0\1\u0252\41\0\1\u0253\23\0\1\u0254\50\0"+
    "\1\u0255\6\0\1\u0256\41\0\1\u0257\37\0\1\u0258\31\0"+
    "\1\u0259\51\0\1\u025a\22\0\1\u025b\1\0\1\u025c\6\0"+
    "\1\u025d\37\0\1\u025e\37\0\1\u025f\31\0\1\u0260\43\0"+
    "\1\u0261\14\0\1\u0262\53\0\1\u0263\15\0\1\u0264\54\0"+
    "\1\u0265\20\0\1\u0266\56\0\1\u0267\27\0\1\u0268\50\0"+
    "\1\u0269\23\0\1\u026a\45\0\1\u026b\30\0\1\u026c\41\0"+
    "\1\u026d\32\0\1\u026e\16\0\1\u026f\52\0\1\u0270\21\0"+
    "\1\u0271\35\0\1\u0272\35\0\1\u0273\25\0\1\u0274\35\0"+
    "\1\u0274\32\0\1\u0275\34\0\1\u0276\40\0\1\u0277\24\0"+
    "\1\u0278\16\0\1\u0279\51\0\1\u027a\35\0\1\u027b\27\0"+
    "\1\u027c\32\0\1\u027d\54\0\1\u027e\22\0\1\u027f\26\0"+
    "\1\u0280\57\0\1\u0281\22\0\1\u0282\53\0\1\u0283\36\0"+
    "\1\u0284\12\0\1\u0285\35\0\1\u0286\35\0\1\u0287\31\0"+
    "\1\u0288\65\0\1\u0289\11\0\1\u028a\63\0\1\u028b\36\0"+
    "\1\u028c\4\0\1\u028d\52\0\1\u028e\36\0\1\u028f\21\0"+
    "\1\u0290\35\0\1\u0291\50\0\1\u0292\22\0\1\u0293\32\0"+
    "\1\u0294\54\0\1\u0295\22\0\1\u0296\34\0\1\u0297\35\0"+
    "\1\u0298\35\0\1\u0299\51\0\1\u029a\21\0\1\u029b\56\0"+
    "\1\u029c\32\0\1\u029d\16\0\1\u029e\50\0\1\u029f\45\0"+
    "\1\u02a0\16\0\1\u02a1\46\0\1\u02a2\21\0\1\u02a3\35\0"+
    "\1\u02a4\25\0\1\u02a5\35\0\1\u02a5\32\0\1\u02a6\23\0"+
    "\1\u02a7\53\0\1\u02a8\22\0\1\u02a9\33\0\1\u02aa\26\0"+
    "\1\u02ab\32\0\1\u02ac\60\0\1\u02ad\10\0\1\u02ae\37\0"+
    "\1\u02af\53\0\1\u02b0\31\0\1\u02b1\42\0\1\u02b2\21\0"+
    "\1\u02b3\51\0\1\u02b4\21\0\1\u02b5\51\0\1\u02b6\31\0"+
    "\1\u02b7\35\0\1\u02b8\26\0\1\u02b9\55\0\1\u02ba\25\0"+
    "\1\u02bb\21\0\1\u02bc\34\0\1\u02bd\62\0\1\u02be\22\0"+
    "\1\u02bf\47\0\1\u02c0\23\0\1\u02c1\37\0\1\u02c2\41\0"+
    "\1\u02c3\42\0\1\u02c4\11\0\1\u02c5\51\0\1\u02c6\35\0"+
    "\1\u02c7\21\0\1\u02c8\33\0\1\u02c9\37\0\1\u02ca\56\0"+
    "\1\u02cb\12\0\1\u02cc\37\0\1\u02cd\50\0\1\u02ce\34\0"+
    "\1\u02cf\46\0\1\u02d0\12\0\1\u02d1\57\0\1\u02d2\11\0"+
    "\1\u02d3\37\0\1\u02d4\35\0\1\2\35\0\1\u02d5\35\0"+
    "\1\u02d6\51\0\1\u02d7\15\0\1\u02d8\43\0\1\u02d9\57\0"+
    "\1\u02da\25\0\1\u02db\20\0\1\u02dc\36\0\1\u02dd\33\0"+
    "\1\u02de\37\0\1\u02df\35\0\1\u02e0\54\0\1\u02e1\27\0"+
    "\1\u02e2\43\0\1\u02e3\42\0\1\u02e4\11\0\1\u02e5\46\0"+
    "\1\u02e6\35\0\1\u02e7\40\0\1\u02e8\21\0\1\u02e9\61\0"+
    "\1\u02ea\40\0\1\u02eb\17\0\1\u02ec\35\0\1\u02ed\23\0"+
    "\1\u02ee\35\0\1\u02ef\47\0\1\u02f0\41\0\1\u02f1\41\0"+
    "\1\u02f2\12\0\1\u02f3\36\0\1\u02f4\40\0\1\u02f5\36\0"+
    "\1\u02f6\32\0\1\u02f7\32\0\1\u02f8\51\0\1\u02f9\24\0"+
    "\1\u02fa\61\0\1\u02fb\24\0\1\u02fc\46\0\1\u02fd\11\0"+
    "\1\u02fe\51\0\1\u02ff\33\0\1\u0300\6\0\1\u0301\13\0"+
    "\1\u0302\52\0\1\u0303\42\0\1\u0304\14\0\1\u0305\60\0"+
    "\1\u0306\11\0\1\u0307\36\0\1\u0308\35\0\1\u0309\34\0"+
    "\1\u030a\36\0\1\u030b\51\0\1\u030c\35\0\1\u030d\17\0"+
    "\1\u030e\56\0\1\u030f\35\0\1\u0310\15\0\1\u0311\50\0"+
    "\1\u0312\35\0\1\u0313\23\0\1\u0314\51\0\1\u0315\42\0"+
    "\1\u0316\27\0\1\u0317\36\0\1\u0318\15\0\1\u0319\65\0"+
    "\1\u031a\24\0\1\u031b\40\0\1\u031c\17\0\1\u031d\50\0"+
    "\1\u031e\35\0\1\u031f\41\0\1\u0320\32\0\1\u0321\21\0"+
    "\1\u0322\46\0\1\u0323\42\0\1\u0324\15\0\1\u0325\37\0"+
    "\1\u0326\31\0\1\u0327\41\0\1\u0328\33\0\1\u0329\37\0"+
    "\1\u032a\46\0\1\u032b\43\0\1\u032c\21\0\1\u032d\51\0"+
    "\1\u032e\35\0\1\u032f\32\0\1\u0330\21\0\1\u0331\51\0"+
    "\1\u0332\22\0\1\u0333\60\0\1\u0334\11\0\1\u0335\35\0"+
    "\1\u0336\46\0\1\u0337\35\0\1\u0338\24\0\1\u0339\54\0"+
    "\1\u033a\16\0\1\u033b\54\0\1\u033c\32\0\1\u033d\22\0"+
    "\1\u033e\60\0\1\u033f\11\0\1\u0340\61\0\1\u0341\11\0"+
    "\1\u0342\56\0\1\u0343\26\0\1\u0344\23\0\1\u0345\40\0"+
    "\1\u0346\55\0\1\u0347\11\0\1\u0348\37\0\1\u0349\50\0"+
    "\1\u034a\34\0\1\u034b\22\0\1\u034c\2\0\1\u034c\56\0"+
    "\1\u034d\11\0\1\u034e\35\0\1\u034f\60\0\1\u0350\35\0"+
    "\1\u0351\25\0\1\u0352\35\0\1\u0353\36\0\1\u0354\21\0"+
    "\1\u0355\2\0\1\u0355\56\0\1\u0356\6\0\1\u0357\54\0"+
    "\1\u0358\17\0\1\u0359\37\0\1\u035a\56\0\1\u035b\25\0"+
    "\1\u035c\43\0\1\u035d\35\0\1\u035e\16\0\1\u035f\35\0"+
    "\1\u0360\63\0\1\u0361\32\0\1\u0362\12\0\1\u0363\35\0"+
    "\1\u0364\35\0\1\u0365\63\0\1\u0366\32\0\1\u0367\35\0"+
    "\1\u0368\13\0\1\u0369\50\0\1\u036a\40\0\1\u036b\31\0"+
    "\1\u036c\20\0\1\u036d\37\0\1\u036e\51\0\1\u036f\47\0"+
    "\1\u0370\7\0\1\u0371\35\0\1\u0372\35\0\1\u0373\51\0"+
    "\1\u0374\44\0\1\u0375\12\0\1\u0376\35\0\1\u0377\35\0"+
    "\1\u0378\46\0\1\u0379\40\0\1\u037a\32\0\1\u037b\50\0"+
    "\1\u037c\5\0\1\u037d\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22860];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\26\1\112\0\1\11\65\0\1\11\35\0"+
    "\1\11\14\0\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\1\11\4\0\1\1\7\0\1\11\3\0\1\1\10\0"+
    "\1\1\3\0\1\11\14\0\1\11\1\1\17\0\1\1"+
    "\1\11\4\0\1\11\30\0\1\11\4\0\1\11\4\0"+
    "\1\11\6\0\2\11\3\0\1\11\14\0\1\1\1\0"+
    "\1\11\16\0\1\1\15\0\1\11\2\0\3\11\4\0"+
    "\1\11\13\0\1\11\26\0\1\11\10\0\1\11\34\0"+
    "\1\1\2\11\1\1\5\0\1\11\2\0\1\11\11\0"+
    "\1\11\15\0\1\11\2\0\1\11\37\0\1\11\7\0"+
    "\1\11\11\0\1\11\12\0\1\11\7\0\1\11\3\0"+
    "\2\11\22\0\1\11\1\0\1\11\20\0\1\1\20\0"+
    "\1\11\7\0\1\11\4\0\2\11\2\0\1\11\17\0"+
    "\3\11\3\0\3\11\2\0\1\11\3\0\1\11\3\0"+
    "\2\11\1\0\1\11\5\0\1\11\1\0\2\11\1\0"+
    "\1\11\3\0\1\11\3\0\1\11\1\0\2\11\12\0"+
    "\2\11\1\0\1\11\1\0\1\11\6\0\1\11\1\0"+
    "\1\11\5\0\2\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\3\0\1\11\1\0\2\11\6\0"+
    "\2\11\5\0\1\11\10\0\1\11\2\0\1\11\4\0"+
    "\1\11\5\0\4\11\3\0\2\11\7\0\1\11\3\0"+
    "\1\11\3\0\1\11\11\0\2\11\4\0\1\11\2\0"+
    "\3\11\3\0\1\11\4\0\1\11\1\0\1\11\2\0"+
    "\1\11\4\0\1\11\1\0\1\11\2\0\1\11\4\0"+
    "\3\11\2\0\1\11\2\0\1\11\7\0\4\11\1\0"+
    "\3\11\1\0\1\11\1\0\1\11\4\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[893];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  FlexColorScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  FlexColorScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public ColorToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 57: 
          { return new ColorToken(yychar,yychar + yylength(), "0x00008B");
          }
        case 142: break;
        case 75: 
          { return new ColorToken(yychar,yychar + yylength(), "0xDEB887");
          }
        case 143: break;
        case 73: 
          { return new ColorToken(yychar,yychar + yylength(), "0xD3D3D3");
          }
        case 144: break;
        case 9: 
          { return new ColorToken(yychar,yychar + yylength(), "0x00FFFF");
          }
        case 145: break;
        case 113: 
          { return new ColorToken(yychar,yychar + yylength(), "0x228B22");
          }
        case 146: break;
        case 33: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFFE4C4");
          }
        case 147: break;
        case 22: 
          { return new ColorToken(yychar,yychar + yylength(), "0x000000");
          }
        case 148: break;
        case 17: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFFFFF0");
          }
        case 149: break;
        case 108: 
          { return new ColorToken(yychar,yychar + yylength(), "0xADFF2F");
          }
        case 150: break;
        case 86: 
          { return new ColorToken(yychar,yychar + yylength(), "0xB22222");
          }
        case 151: break;
        case 16: 
          { return new ColorToken(yychar,yychar + yylength(), "0xF5DEB3");
          }
        case 152: break;
        case 67: 
          { return new ColorToken(yychar,yychar + yylength(), "0xD2691E");
          }
        case 153: break;
        case 44: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFF00FF");
          }
        case 154: break;
        case 83: 
          { return new ColorToken(yychar,yychar + yylength(), "0xBDB76B");
          }
        case 155: break;
        case 49: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFFF5EE");
          }
        case 156: break;
        case 102: 
          { return new ColorToken(yychar,yychar + yylength(), "0x1E90FF");
          }
        case 157: break;
        case 94: 
          { return new ColorToken(yychar,yychar + yylength(), "0x90EE90");
          }
        case 158: break;
        case 92: 
          { return new ColorToken(yychar,yychar + yylength(), "0x7FFF00");
          }
        case 159: break;
        case 43: 
          { return new ColorToken(yychar,yychar + yylength(), "0x"+yytext().substring(1));
          }
        case 160: break;
        case 99: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFF8C00");
          }
        case 161: break;
        case 110: 
          { return new ColorToken(yychar,yychar + yylength(), "0x8B008B");
          }
        case 162: break;
        case 4: 
          { return new ColorToken(yychar,yychar + yylength(), "0x008080");
          }
        case 163: break;
        case 6: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFFC0CB");
          }
        case 164: break;
        case 100: 
          { return new ColorToken(yychar,yychar + yylength(), "0x9932CC");
          }
        case 165: break;
        case 53: 
          { return new ColorToken(yychar,yychar + yylength(), "0xE6E6FA");
          }
        case 166: break;
        case 46: 
          { return new ColorToken(yychar,yychar + yylength(), "0x8B0000");
          }
        case 167: break;
        case 66: 
          { return new ColorToken(yychar,yychar + yylength(), "0xF0F8FF");
          }
        case 168: break;
        case 68: 
          { return new ColorToken(yychar,yychar + yylength(), "0x5F9EA0");
          }
        case 169: break;
        case 126: 
          { return new ColorToken(yychar,yychar + yylength(), "0x00CED1");
          }
        case 170: break;
        case 136: 
          { return new ColorToken(yychar,yychar + yylength(), "0x48D1CC");
          }
        case 171: break;
        case 38: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFFFF00");
          }
        case 172: break;
        case 74: 
          { return new ColorToken(yychar,yychar + yylength(), "0x7CFC00");
          }
        case 173: break;
        case 104: 
          { return new ColorToken(yychar,yychar + yylength(), "0x8B4513");
          }
        case 174: break;
        case 14: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFFD700");
          }
        case 175: break;
        case 115: 
          { return new ColorToken(yychar,yychar + yylength(), "0x87CEFA");
          }
        case 176: break;
        case 106: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFFFFE0");
          }
        case 177: break;
        case 37: 
          { return new ColorToken(yychar,yychar + yylength(), "0xEE82EE");
          }
        case 178: break;
        case 54: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFFE4B5");
          }
        case 179: break;
        case 63: 
          { return new ColorToken(yychar,yychar + yylength(), "0x708090");
          }
        case 180: break;
        case 72: 
          { return new ColorToken(yychar,yychar + yylength(), "0xADD8E6");
          }
        case 181: break;
        case 127: 
          { return new ColorToken(yychar,yychar + yylength(), "0x483D8B");
          }
        case 182: break;
        case 18: 
          { return new ColorToken(yychar,yychar + yylength(), "0xF0FFFF");
          }
        case 183: break;
        case 112: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFFFAF0");
          }
        case 184: break;
        case 129: 
          { return new ColorToken(yychar,yychar + yylength(), "0xB8860B");
          }
        case 185: break;
        case 95: 
          { return new ColorToken(yychar,yychar + yylength(), "0x8A2BE2");
          }
        case 186: break;
        case 32: 
          { return new ColorToken(yychar,yychar + yylength(), "0x800080");
          }
        case 187: break;
        case 134: 
          { return new ColorToken(yychar,yychar + yylength(), "0x3CB371");
          }
        case 188: break;
        case 123: 
          { return new ColorToken(yychar,yychar + yylength(), "0xD87093");
          }
        case 189: break;
        case 21: 
          { return new ColorToken(yychar,yychar + yylength(), "0xF5F5DC");
          }
        case 190: break;
        case 141: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFAFAD2");
          }
        case 191: break;
        case 116: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFFFACD");
          }
        case 192: break;
        case 50: 
          { return new ColorToken(yychar,yychar + yylength(), "0x2E8B57");
          }
        case 193: break;
        case 78: 
          { return new ColorToken(yychar,yychar + yylength(), "0xBC8F8F");
          }
        case 194: break;
        case 124: 
          { return new ColorToken(yychar,yychar + yylength(), "0x20B2AA");
          }
        case 195: break;
        case 80: 
          { return new ColorToken(yychar,yychar + yylength(), "0xDCDCDC");
          }
        case 196: break;
        case 61: 
          { return new ColorToken(yychar,yychar + yylength(), "0x4682B4");
          }
        case 197: break;
        case 65: 
          { return new ColorToken(yychar,yychar + yylength(), "0x98FB98");
          }
        case 198: break;
        case 35: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFFA500");
          }
        case 199: break;
        case 26: 
          { return new ColorToken(yychar,yychar + yylength(), "0x808000");
          }
        case 200: break;
        case 60: 
          { return new ColorToken(yychar,yychar + yylength(), "0x40E0D0");
          }
        case 201: break;
        case 122: 
          { return new ColorToken(yychar,yychar + yylength(), "0xEEE8AA");
          }
        case 202: break;
        case 111: 
          { return new ColorToken(yychar,yychar + yylength(), "0x9ACD32");
          }
        case 203: break;
        case 56: 
          { return new ColorToken(yychar,yychar + yylength(), "0x008B8B");
          }
        case 204: break;
        case 121: 
          { return new ColorToken(yychar,yychar + yylength(), "0xAFEEEE");
          }
        case 205: break;
        case 138: 
          { return new ColorToken(yychar,yychar + yylength(), "0xC71585");
          }
        case 206: break;
        case 130: 
          { return new ColorToken(yychar,yychar + yylength(), "0x6495ED");
          }
        case 207: break;
        case 41: 
          { return new ColorToken(yychar,yychar + yylength(), "0x87CEEB");
          }
        case 208: break;
        case 91: 
          { return new ColorToken(yychar,yychar + yylength(), "0x7FFFD4");
          }
        case 209: break;
        case 77: 
          { return new ColorToken(yychar,yychar + yylength(), "0xF5FFFA");
          }
        case 210: break;
        case 11: 
          { return new ColorToken(yychar,yychar + yylength(), "0x0000FF");
          }
        case 211: break;
        case 36: 
          { return new ColorToken(yychar,yychar + yylength(), "0xDA70D6");
          }
        case 212: break;
        case 62: 
          { return new ColorToken(yychar,yychar + yylength(), "0x6A5ACD");
          }
        case 213: break;
        case 93: 
          { return new ColorToken(yychar,yychar + yylength(), "0xF08080");
          }
        case 214: break;
        case 101: 
          { return new ColorToken(yychar,yychar + yylength(), "0x9400D3");
          }
        case 215: break;
        case 8: 
          { return new ColorToken(yychar,yychar + yylength(), "0xDDA0DD");
          }
        case 216: break;
        case 137: 
          { return new ColorToken(yychar,yychar + yylength(), "0x7B68EE");
          }
        case 217: break;
        case 12: 
          { return new ColorToken(yychar,yychar + yylength(), "0x000080");
          }
        case 218: break;
        case 55: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFF1493");
          }
        case 219: break;
        case 52: 
          { return new ColorToken(yychar,yychar + yylength(), yytext());
          }
        case 220: break;
        case 140: 
          { return new ColorToken(yychar,yychar + yylength(), "0x00FA9A");
          }
        case 221: break;
        case 28: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFF6347");
          }
        case 222: break;
        case 25: 
          { return new ColorToken(yychar,yychar + yylength(), "0xF0E68C");
          }
        case 223: break;
        case 76: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFFE4E1");
          }
        case 224: break;
        case 131: 
          { return new ColorToken(yychar,yychar + yylength(), "0xB0C4DE");
          }
        case 225: break;
        case 10: 
          { return new ColorToken(yychar,yychar + yylength(), "0x00FF00");
          }
        case 226: break;
        case 98: 
          { return new ColorToken(yychar,yychar + yylength(), "0xE9967A");
          }
        case 227: break;
        case 45: 
          { return new ColorToken(yychar,yychar + yylength(), "0x696969");
          }
        case 228: break;
        case 87: 
          { return new ColorToken(yychar,yychar + yylength(), "0xF5F5F5");
          }
        case 229: break;
        case 20: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFAF0E6");
          }
        case 230: break;
        case 139: 
          { return new ColorToken(yychar,yychar + yylength(), "0x66CDAA");
          }
        case 231: break;
        case 117: 
          { return new ColorToken(yychar,yychar + yylength(), "0x191970");
          }
        case 232: break;
        case 69: 
          { return new ColorToken(yychar,yychar + yylength(), "0x32CD32");
          }
        case 233: break;
        case 107: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFFDEAD");
          }
        case 234: break;
        case 58: 
          { return new ColorToken(yychar,yychar + yylength(), "0xA9A9A9");
          }
        case 235: break;
        case 15: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFFFFFF");
          }
        case 236: break;
        case 64: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFFDAB9");
          }
        case 237: break;
        case 133: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFFEBCD");
          }
        case 238: break;
        case 24: 
          { return new ColorToken(yychar,yychar + yylength(), "0x008000");
          }
        case 239: break;
        case 82: 
          { return new ColorToken(yychar,yychar + yylength(), "0x006400");
          }
        case 240: break;
        case 39: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFF69B4");
          }
        case 241: break;
        case 31: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFA8072");
          }
        case 242: break;
        case 3: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFF0000");
          }
        case 243: break;
        case 42: 
          { return new ColorToken(yychar,yychar + yylength(), "0xDC143C");
          }
        case 244: break;
        case 29: 
          { return new ColorToken(yychar,yychar + yylength(), "0xA0522D");
          }
        case 245: break;
        case 48: 
          { return new ColorToken(yychar,yychar + yylength(), "0xF0FFF0");
          }
        case 246: break;
        case 89: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFFEFD5");
          }
        case 247: break;
        case 85: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFF4500");
          }
        case 248: break;
        case 119: 
          { return new ColorToken(yychar,yychar + yylength(), "0xBA55D3");
          }
        case 249: break;
        case 135: 
          { return new ColorToken(yychar,yychar + yylength(), "0x556B2F");
          }
        case 250: break;
        case 5: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFFFAFA");
          }
        case 251: break;
        case 7: 
          { return new ColorToken(yychar,yychar + yylength(), "0xCD853F");
          }
        case 252: break;
        case 81: 
          { return new ColorToken(yychar,yychar + yylength(), "0xDAA520");
          }
        case 253: break;
        case 47: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFDF5E6");
          }
        case 254: break;
        case 125: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFFF0F5");
          }
        case 255: break;
        case 51: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFFF8DC");
          }
        case 256: break;
        case 105: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFFA07A");
          }
        case 257: break;
        case 109: 
          { return new ColorToken(yychar,yychar + yylength(), "0x00BFFF");
          }
        case 258: break;
        case 88: 
          { return new ColorToken(yychar,yychar + yylength(), "0xF4A460");
          }
        case 259: break;
        case 70: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFFB6C1");
          }
        case 260: break;
        case 114: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFAEBD7");
          }
        case 261: break;
        case 2: 
          { return new ColorToken(yychar,yychar + yylength(), "0xD2B48C");
          }
        case 262: break;
        case 79: 
          { return new ColorToken(yychar,yychar + yylength(), "0x4169E1");
          }
        case 263: break;
        case 128: 
          { return new ColorToken(yychar,yychar + yylength(), "0x2F4F4F");
          }
        case 264: break;
        case 23: 
          { return new ColorToken(yychar,yychar + yylength(), "0xA52A2A");
          }
        case 265: break;
        case 84: 
          { return new ColorToken(yychar,yychar + yylength(), "0x6B8E23");
          }
        case 266: break;
        case 34: 
          { return new ColorToken(yychar,yychar + yylength(), "0x800000");
          }
        case 267: break;
        case 103: 
          { return new ColorToken(yychar,yychar + yylength(), "0x00FF7F");
          }
        case 268: break;
        case 40: 
          { return new ColorToken(yychar,yychar + yylength(), "0xD8BFD8");
          }
        case 269: break;
        case 1: 
          { /* ignore */
          }
        case 270: break;
        case 97: 
          { return new ColorToken(yychar,yychar + yylength(), "0xF8F8FF");
          }
        case 271: break;
        case 27: 
          { return new ColorToken(yychar,yychar + yylength(), "0x4B0082");
          }
        case 272: break;
        case 71: 
          { return new ColorToken(yychar,yychar + yylength(), "0xE0FFFF");
          }
        case 273: break;
        case 19: 
          { return new ColorToken(yychar,yychar + yylength(), "0xFF7F50");
          }
        case 274: break;
        case 13: 
          { return new ColorToken(yychar,yychar + yylength(), "0x808080");
          }
        case 275: break;
        case 118: 
          { return new ColorToken(yychar,yychar + yylength(), "0x9370D8");
          }
        case 276: break;
        case 30: 
          { return new ColorToken(yychar,yychar + yylength(), "0xC0C0C0");
          }
        case 277: break;
        case 120: 
          { return new ColorToken(yychar,yychar + yylength(), "0x8FBC8F");
          }
        case 278: break;
        case 59: 
          { return new ColorToken(yychar,yychar + yylength(), "0xCD5C5C");
          }
        case 279: break;
        case 132: 
          { return new ColorToken(yychar,yychar + yylength(), "0x778899");
          }
        case 280: break;
        case 96: 
          { return new ColorToken(yychar,yychar + yylength(), "0x0000CD");
          }
        case 281: break;
        case 90: 
          { return new ColorToken(yychar,yychar + yylength(), "0xB0E0E6");
          }
        case 282: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
