Todo's Before I Can Release the Next Version
--------------------------------------------
* Add in the spaces between import groups.
* Fix the import grouping sorting architecture.  It didn't account for how to 
look for the default package.  (Everything is just a regex.)  Also, this resulted
in the grouping spacer getting a copy of ImportGroupingComparator's loadGrouping
method.  Fix that too.
* Don't let there be two identical fq paths to imports in the importer dialog box.
* Sort all of the imports in the importer dialog box.
* Add option to combine multiple imports into an asterisk after a given number 
  of imports from the same package (perhaps more than 4).
* Add importing for JSP pages -- this will require that the ClassImporter file
  be sensitive to the type of the current file.  (This will probably be done by 
  looking at the edit mode.)  In reality, this shouldn't really be that hard.

Short Term Todo's
-----------------
* Add "Transform Class at Point to FQ" action.
* It would also be handy if your plug-in warned users about *unused* import 
  statements; i.e. import statements where none of the classes were still in the 
  code.   I might be able to find some code for this at 
  http://importscrubber.sourceforge.net/, though I might need to be careful with
  licensing issues.  (Todd J, tbone@toddj.net)  (Thanks to Steve Snider for a good
  pointer on how to do this easily.)
* Allow users to put the import warnings in "passive" mode.  That is, allow them
  to adorn import statements (either change them to italic, change their color, etc.)

Longer Term Todo's
------------------
* Implement a buffered lookup of class names for slower computers that don't do
  the brute force lookup quickly.
* Allow users to search multiple classpaths at one time.  (Jigar Patel)
* Implement a switch for the JImporter Dialog Box that will allow us to match as
  we type, instead of having to press the search button.
* Implement a couple more ways of looking up the path of a file other than the
  current brute force method of looking through the whole filesystem.
  - Using a ctags-generated tags file would be nice.  I'm not certain how we'd
    allow the user to specify the root of the package though.  We could just
    look up the package name inside of the file.
  - We could do look-ups of project files if we were to define classpath mount
    points for a project.  
  - Store a b-tree on the filesystem and do external look ups at runtime.  
  - Store a hashmap in memory.  (I'm not fond of this, it could really use up
    a lot of memory if we aren't careful.  Still, if the classpath were small
    enough this might be a good option.)
* Decouple classpath.java and searchmethod.java from jEdit.  (It prevents me 
  from using these classes elsewhere.)    
* It would be nice to allow drop down completion of imports as you type import
  statements into jEdit.
* Add the ability to hover over an import statement to see what classpath element 
  it is being imported from.  (Similar to JWhich functionality.)
* Add an option that will automatically import any class that we use that isn't
  already imported.  (I'm talking about doing it in real time.) 


