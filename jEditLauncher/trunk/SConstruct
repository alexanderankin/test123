# SConstruct (http://www.scons.org/) build file for jEdit win32 extensions
#
# $Id: SConstruct 78 2005-07-15 20:24:58Z orutherfurd $

import os
import SCons

WTL_INCLUDE = 'C:/WTL75_5102/include'
RST2HTML  = 'C:/Python24/scripts/rst2html.py'

BUILD_DIR = 'build'
SRC_DIR   = 'src'

env = Environment()
env.BuildDir(BUILD_DIR, SRC_DIR)
# disable as this screws up packing binaries w/upx
# when compiling w/VC 7.1
#env['LINKFLAGS'] = SCons.Util.CLVar('$LINKFLAGS /SAFESEH:NO')

def build(filename,build_dir=BUILD_DIR):
    return os.path.join(build_dir,filename)

jeditlib = env.Object(build('jeditlib.cpp'))
win32libs = ['Advapi32.lib','comdlg32.lib','Gdi32.lib','Shell32.lib','User32.lib','Ws2_32.lib']

# XXX not sure how to get the icon moved short of this hack
import shutil
if not os.path.exists(BUILD_DIR):
    os.mkdir(BUILD_DIR)
shutil.copy(os.path.join(SRC_DIR,'jedit.ico'),BUILD_DIR)
shutil.copy(os.path.join(SRC_DIR,'jecfg.exe.manifest'),BUILD_DIR)

# jedit.exe
jedit_exe = env.Program(build('jedit'),
                        [build('jedit.cpp'),
                         jeditlib,
                         RES(build('jeditexe.rc')),
                        ],
                        LIBS=win32libs)

# jdiff.exe
jdiff_exe = env.Program(build('jdiff'),
                       [build('jdiff.cpp'),
                        jeditlib,
                       ],
                       LIBS=win32libs)

# shell extension
jeditext_dll = env.SharedLibrary(build('jeditext'),
                                 map(build,['jeditext.cpp',
                                            'jeditext.def',
                                            'jeditext.res',
                                            ]) + jeditlib,
                                 LIBS=win32libs)

# Compiling a DLL with library functions so I can test w/ctypes.
jeditlib_dll = env.SharedLibrary(build('jeditlib'),
                                 [jeditlib,
                                  build('jeditlib.def'),
                                 ],
                                 LIBS=win32libs)

# config dialog
env.PrependENVPath('INCLUDE',WTL_INCLUDE)
config_exe = env.Program(build('jecfg'),
                          map(build,['jecfg.cpp',
                                     'cfgdialog.cpp',
                                    ]) + [env.RES(build('jecfg.rc')),jeditlib,],
                           LIBS=win32libs)

# generate HTML version of README
if os.path.exists('doc/README.txt'):
    readme_html = Command('doc/README.html', 'doc/README.txt',
                          'python %s -gdts --stylesheet=doc/default.css --embed-stylesheet $SOURCES $TARGET' % RST2HTML)

# :mode=python:deepIndent=true:
